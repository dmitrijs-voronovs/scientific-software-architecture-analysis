id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/11037:467,safety,test,tested,467,"[cling-cpt] Got rid of 4 global variables and put them into fetch and compile functions [skip-ci]; # This Pull request: Reduces global variable mutation, making it easier to debug. ## Changes or fixes: Got rid of LLVM_GIT_URL, CLANG_GIT_URL, and CLING_GIT_URL and put them in their respective functions. I then got rid of the EXTRA_CMAKE_FLAGS variable and put it in the compile functions and replaced its global reference with the direct value. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11037
https://github.com/root-project/root/pull/11037:498,safety,updat,updated,498,"[cling-cpt] Got rid of 4 global variables and put them into fetch and compile functions [skip-ci]; # This Pull request: Reduces global variable mutation, making it easier to debug. ## Changes or fixes: Got rid of LLVM_GIT_URL, CLANG_GIT_URL, and CLING_GIT_URL and put them in their respective functions. I then got rid of the EXTRA_CMAKE_FLAGS variable and put it in the compile functions and replaced its global reference with the direct value. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11037
https://github.com/root-project/root/pull/11037:498,security,updat,updated,498,"[cling-cpt] Got rid of 4 global variables and put them into fetch and compile functions [skip-ci]; # This Pull request: Reduces global variable mutation, making it easier to debug. ## Changes or fixes: Got rid of LLVM_GIT_URL, CLANG_GIT_URL, and CLING_GIT_URL and put them in their respective functions. I then got rid of the EXTRA_CMAKE_FLAGS variable and put it in the compile functions and replaced its global reference with the direct value. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11037
https://github.com/root-project/root/pull/11037:467,testability,test,tested,467,"[cling-cpt] Got rid of 4 global variables and put them into fetch and compile functions [skip-ci]; # This Pull request: Reduces global variable mutation, making it easier to debug. ## Changes or fixes: Got rid of LLVM_GIT_URL, CLANG_GIT_URL, and CLING_GIT_URL and put them in their respective functions. I then got rid of the EXTRA_CMAKE_FLAGS variable and put it in the compile functions and replaced its global reference with the direct value. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11037
https://github.com/root-project/root/pull/11042:100,energy efficiency,draw,draw-six-plots-using-multi-canvas,100,[skip-ci] Improve the tutorial canvas2.C; This forum post https://root-forum.cern.ch/t/need-help-to-draw-six-plots-using-multi-canvas/50898/7 suggested some improvements in the canvas2.C tutorial.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11042
https://github.com/root-project/root/pull/11042:92,usability,help,help-to-draw-six-plots-using-multi-canvas,92,[skip-ci] Improve the tutorial canvas2.C; This forum post https://root-forum.cern.ch/t/need-help-to-draw-six-plots-using-multi-canvas/50898/7 suggested some improvements in the canvas2.C tutorial.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11042
https://github.com/root-project/root/pull/11043:129,energy efficiency,draw,draw-axis,129,[skip-ci] Improve SetExponentOffset help; Improve help as suggested here: https://root-forum.cern.ch/t/how-to-move-exponent-when-draw-axis/50944.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11043
https://github.com/root-project/root/pull/11043:36,usability,help,help,36,[skip-ci] Improve SetExponentOffset help; Improve help as suggested here: https://root-forum.cern.ch/t/how-to-move-exponent-when-draw-axis/50944.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11043
https://github.com/root-project/root/pull/11043:50,usability,help,help,50,[skip-ci] Improve SetExponentOffset help; Improve help as suggested here: https://root-forum.cern.ch/t/how-to-move-exponent-when-draw-axis/50944.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11043
https://github.com/root-project/root/issues/11044:61,availability,sla,slashes,61,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:114,availability,sla,slashes,114,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:235,availability,sla,slash,235,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:502,availability,sla,slash,502,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:648,availability,sla,slash,648,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:50,deployability,contain,containing,50,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:475,deployability,observ,observable,475,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:491,deployability,contain,contains,491,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:521,deployability,build,build,521,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:555,deployability,Build,Build,555,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:655,deployability,observ,observable,655,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:703,deployability,observ,observable,703,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:885,deployability,observ,observable,885,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:988,integrability,sub,subfolder,988,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:675,modifiability,paramet,parameter,675,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:61,reliability,sla,slashes,61,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:114,reliability,sla,slashes,114,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:235,reliability,sla,slash,235,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:502,reliability,sla,slash,502,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:648,reliability,sla,slash,648,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:209,safety,compl,completely,209,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:209,security,compl,completely,209,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:904,security,ident,identify,904,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:475,testability,observ,observable,475,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:655,testability,observ,observable,655,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:703,testability,observ,observable,703,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:760,testability,context,context,760,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:885,testability,observ,observable,885,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/issues/11044:359,usability,behavi,behavior,359,"[RF] Strange problems with RooRealVars with names containing slashes; ### Describe the bug. RooRealVars that have slashes (""/"") in their name can cause a whole slew of issues. They should either be disallowed completely (replacing the slash in the name by something during construction) or the code needs to be adjusted to handle them correctly. ### Expected behavior. RooRealVars should behave the same regardless of their name. ### To Reproduce. Create RooDataHist with an observable that contains a slash in the name, build a RooHistFunc on top of it. Build some type of Pdf on top of this and fit it to the RooDataHist. The fit will treat the ""slash"" observable as a fit parameter rather than as an observable. Changing the name fixes that. ### Additional context. This might seem like an arcane issue, but it can happen very easily because the new RooLagrangianMorphFunc uses the observable name to identify the locations of histograms in the source file, so any histogram that is a subfolder rather than at the toplevel will cause this issue to appear.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11044
https://github.com/root-project/root/pull/11045:201,interoperability,compatib,compatible,201,"[hist] Fix label merge when one axis is numerical and extendable; Create a new type of merging, a special case when the histogram has an axis with label and the other axis is numeric and different but compatible. . A new test is added also in stressHIstogram for this new case. This fixes #10828.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11045
https://github.com/root-project/root/pull/11045:54,modifiability,exten,extendable,54,"[hist] Fix label merge when one axis is numerical and extendable; Create a new type of merging, a special case when the histogram has an axis with label and the other axis is numeric and different but compatible. . A new test is added also in stressHIstogram for this new case. This fixes #10828.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11045
https://github.com/root-project/root/pull/11045:221,safety,test,test,221,"[hist] Fix label merge when one axis is numerical and extendable; Create a new type of merging, a special case when the histogram has an axis with label and the other axis is numeric and different but compatible. . A new test is added also in stressHIstogram for this new case. This fixes #10828.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11045
https://github.com/root-project/root/pull/11045:221,testability,test,test,221,"[hist] Fix label merge when one axis is numerical and extendable; Create a new type of merging, a special case when the histogram has an axis with label and the other axis is numeric and different but compatible. . A new test is added also in stressHIstogram for this new case. This fixes #10828.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11045
https://github.com/root-project/root/pull/11046:148,energy efficiency,current,current,148,"[tree] Introduce the RDatasetSpec as internal in v6-26-06; As an intermediate step, needed was to add interface to add a friend in RFriendInfo. The current v6-26 RDatasetSpec resides in the internal namespace. This is needed to allow the fix for friends support in DistRDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11046
https://github.com/root-project/root/pull/11046:102,integrability,interfac,interface,102,"[tree] Introduce the RDatasetSpec as internal in v6-26-06; As an intermediate step, needed was to add interface to add a friend in RFriendInfo. The current v6-26 RDatasetSpec resides in the internal namespace. This is needed to allow the fix for friends support in DistRDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11046
https://github.com/root-project/root/pull/11046:102,interoperability,interfac,interface,102,"[tree] Introduce the RDatasetSpec as internal in v6-26-06; As an intermediate step, needed was to add interface to add a friend in RFriendInfo. The current v6-26 RDatasetSpec resides in the internal namespace. This is needed to allow the fix for friends support in DistRDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11046
https://github.com/root-project/root/pull/11046:65,modifiability,interm,intermediate,65,"[tree] Introduce the RDatasetSpec as internal in v6-26-06; As an intermediate step, needed was to add interface to add a friend in RFriendInfo. The current v6-26 RDatasetSpec resides in the internal namespace. This is needed to allow the fix for friends support in DistRDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11046
https://github.com/root-project/root/pull/11046:102,modifiability,interfac,interface,102,"[tree] Introduce the RDatasetSpec as internal in v6-26-06; As an intermediate step, needed was to add interface to add a friend in RFriendInfo. The current v6-26 RDatasetSpec resides in the internal namespace. This is needed to allow the fix for friends support in DistRDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11046
https://github.com/root-project/root/pull/11046:254,usability,support,support,254,"[tree] Introduce the RDatasetSpec as internal in v6-26-06; As an intermediate step, needed was to add interface to add a friend in RFriendInfo. The current v6-26 RDatasetSpec resides in the internal namespace. This is needed to allow the fix for friends support in DistRDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11046
https://github.com/root-project/root/pull/11047:260,availability,cluster,cluster,260,"[DF] Catch and propagate C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. Thi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:352,availability,cluster,cluster,352,"[DF] Catch and propagate C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. Thi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1230,availability,Error,Error,1230," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1299,availability,Error,Error,1299," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1401,availability,error,error,1401," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:260,deployability,cluster,cluster,260,"[DF] Catch and propagate C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. Thi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:352,deployability,cluster,cluster,352,"[DF] Catch and propagate C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. Thi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1000,deployability,Build,Build,1000,"] Catch and propagate C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1123,deployability,Build,Build,1123," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:881,energy efficiency,current,current,881,"[DF] Catch and propagate C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. Thi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:676,integrability,event,event,676,"[DF] Catch and propagate C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. Thi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:773,integrability,pub,public,773,"[DF] Catch and propagate C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. Thi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:47,interoperability,distribut,distributed,47,"[DF] Catch and propagate C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. Thi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:116,interoperability,distribut,distributed,116,"[DF] Catch and propagate C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. Thi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:205,interoperability,Distribut,Distributed,205,"[DF] Catch and propagate C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. Thi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1966,modifiability,scal,scalar,1966," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1230,performance,Error,Error,1230," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1299,performance,Error,Error,1299," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1401,performance,error,error,1401," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:29,safety,except,exceptions,29,"[DF] Catch and propagate C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. Thi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:650,safety,test,test,650,"[DF] Catch and propagate C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. Thi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1034,safety,except,exception,1034," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1230,safety,Error,Error,1230," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1299,safety,Error,Error,1299," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1401,safety,error,error,1401," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1444,safety,test,test,1444," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1828,safety,except,exception,1828," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1901,safety,except,exception,1901," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:650,testability,test,test,650,"[DF] Catch and propagate C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. Thi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1444,testability,test,test,1444," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1230,usability,Error,Error,1230," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1299,usability,Error,Error,1299," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:1401,usability,error,error,1401," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/pull/11047:2009,usability,support,supported,2009," C++ exceptions in the distributed tasks; Consider the following code. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. Before this PR, the output would be:. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. After this PR:. ```. $: python test.py. [...]. File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Dask/Backend.py"", line 155, in dask_mapper. return mapper(current_range). File ""/home/vpadulan/programs/rootproject/rootbuild/fix-tentrylist-int-overflow-distrdf-debug/lib/DistRDF/Backends/Base.py"", line 116, in distrdf_mapper. raise RuntimeError(f""C++ exception thrown:\n\t{type(e).__name__}: {e.what()}""). RuntimeError: C++ exception thrown:. 	runtime_error: Graph was applied to a mix of scalar values and collections. This is not supported. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11047
https://github.com/root-project/root/issues/11048:572,deployability,Modul,Module,572,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:680,deployability,Modul,Module,680,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:572,modifiability,Modul,Module,572,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:680,modifiability,Modul,Module,680,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:12,reliability,alert,alerts,12,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:195,reliability,alert,alerts,195,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:267,reliability,alert,alerts,267,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:522,reliability,alert,alerts,522,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:654,reliability,alert,alerts,654,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:12,safety,aler,alerts,12,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:195,safety,aler,alerts,195,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:267,safety,aler,alerts,267,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:522,safety,aler,alerts,522,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:572,safety,Modul,Module,572,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:654,safety,aler,alerts,654,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:680,safety,Modul,Module,680,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/issues/11048:216,usability,tool,tool,216,"Resolve the alerts produced by ""LGTM analysis: Python""; `LGTM analysis: Python` is ""picking"" code inside of ROOT, which has unnecessary imports. . We saw that only writing `import ROOT` led to 4 alerts from the LGTM tool. Example:. > This pull request **introduces 4 alerts** and **fixes 10** when merging 30c5db08c504abc8f4c3f7b822defecf5157dcc4 into 56c28ff3b846c74f8c36c53320d381545f6b31f9 - [view on LGTM.com](https://lgtm.com/projects/g/root-project/root/rev/pr-90c6dd66f4cf355944bc8bc93a3e2749fe003f60). > . > **new alerts:**. > . > * 2 for Unused import. > * 2 for Module is imported with &#39;import&#39; and &#39;import from&#39;. > . > **fixed alerts:**. > . > * 10 for Module\-level cyclic import. (https://github.com/root-project/root/pull/11038#issuecomment-1194049285). fyi: @j-mathe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11048
https://github.com/root-project/root/pull/11049:2794,availability,consist,consistent,2794,"ic double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74w",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4237,availability,avail,available,4237,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4349,availability,avail,available,4349,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:755,deployability,integr,integral,755,"Add Relativistic Voigt Function to TMath; # This Pull request:. This follows on from a recent pull request which added a relativistic breit wigner to ROOT https://github.com/root-project/root/pull/10760, to add a relativistic voigt which is a natural extension. **Brief summary**. Files added:. math/mathmore/inc/Math/VoigtRelativistic.h - Defines VoigtRelativistic class with two functions, evaluate which calculates the relativistic voigt, and dumpingFunction which calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1251,deployability,version,version,1251,"nsion. **Brief summary**. Files added:. math/mathmore/inc/Math/VoigtRelativistic.h - Defines VoigtRelativistic class with two functions, evaluate which calculates the relativistic voigt, and dumpingFunction which calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this nai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1462,deployability,version,version,1462,"h calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1563,deployability,integr,integrator,1563,"mplements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1756,deployability,integr,integrationRange,1756,"in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have ren",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1872,deployability,integr,integrationRange,1872,"tivistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that hav",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1923,deployability,integr,integrationRange,1923,"ativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the val",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1958,deployability,integr,integral,1958,"stic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2047,deployability,integr,integrationRange,2047,"ore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2361,deployability,integr,integral,2361,"//root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4229,deployability,version,version,4229,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4839,deployability,updat,updated,4839,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1583,energy efficiency,CPU,CPU,1583," functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:755,integrability,integr,integral,755,"Add Relativistic Voigt Function to TMath; # This Pull request:. This follows on from a recent pull request which added a relativistic breit wigner to ROOT https://github.com/root-project/root/pull/10760, to add a relativistic voigt which is a natural extension. **Brief summary**. Files added:. math/mathmore/inc/Math/VoigtRelativistic.h - Defines VoigtRelativistic class with two functions, evaluate which calculates the relativistic voigt, and dumpingFunction which calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1251,integrability,version,version,1251,"nsion. **Brief summary**. Files added:. math/mathmore/inc/Math/VoigtRelativistic.h - Defines VoigtRelativistic class with two functions, evaluate which calculates the relativistic voigt, and dumpingFunction which calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this nai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1462,integrability,version,version,1462,"h calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1563,integrability,integr,integrator,1563,"mplements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1756,integrability,integr,integrationRange,1756,"in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have ren",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1872,integrability,integr,integrationRange,1872,"tivistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that hav",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1923,integrability,integr,integrationRange,1923,"ativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the val",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1958,integrability,integr,integral,1958,"stic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2047,integrability,integr,integrationRange,2047,"ore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2361,integrability,integr,integral,2361,"//root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:3354,integrability,translat,translated,3354,"e integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4229,integrability,version,version,4229,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:755,interoperability,integr,integral,755,"Add Relativistic Voigt Function to TMath; # This Pull request:. This follows on from a recent pull request which added a relativistic breit wigner to ROOT https://github.com/root-project/root/pull/10760, to add a relativistic voigt which is a natural extension. **Brief summary**. Files added:. math/mathmore/inc/Math/VoigtRelativistic.h - Defines VoigtRelativistic class with two functions, evaluate which calculates the relativistic voigt, and dumpingFunction which calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1563,interoperability,integr,integrator,1563,"mplements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1756,interoperability,integr,integrationRange,1756,"in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have ren",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1872,interoperability,integr,integrationRange,1872,"tivistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that hav",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1923,interoperability,integr,integrationRange,1923,"ativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the val",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1958,interoperability,integr,integral,1958,"stic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2047,interoperability,integr,integrationRange,2047,"ore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2361,interoperability,integr,integral,2361,"//root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:3354,interoperability,translat,translated,3354,"e integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:251,modifiability,extens,extension,251,"Add Relativistic Voigt Function to TMath; # This Pull request:. This follows on from a recent pull request which added a relativistic breit wigner to ROOT https://github.com/root-project/root/pull/10760, to add a relativistic voigt which is a natural extension. **Brief summary**. Files added:. math/mathmore/inc/Math/VoigtRelativistic.h - Defines VoigtRelativistic class with two functions, evaluate which calculates the relativistic voigt, and dumpingFunction which calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:674,modifiability,variab,variables,674,"Add Relativistic Voigt Function to TMath; # This Pull request:. This follows on from a recent pull request which added a relativistic breit wigner to ROOT https://github.com/root-project/root/pull/10760, to add a relativistic voigt which is a natural extension. **Brief summary**. Files added:. math/mathmore/inc/Math/VoigtRelativistic.h - Defines VoigtRelativistic class with two functions, evaluate which calculates the relativistic voigt, and dumpingFunction which calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:755,modifiability,integr,integral,755,"Add Relativistic Voigt Function to TMath; # This Pull request:. This follows on from a recent pull request which added a relativistic breit wigner to ROOT https://github.com/root-project/root/pull/10760, to add a relativistic voigt which is a natural extension. **Brief summary**. Files added:. math/mathmore/inc/Math/VoigtRelativistic.h - Defines VoigtRelativistic class with two functions, evaluate which calculates the relativistic voigt, and dumpingFunction which calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1251,modifiability,version,version,1251,"nsion. **Brief summary**. Files added:. math/mathmore/inc/Math/VoigtRelativistic.h - Defines VoigtRelativistic class with two functions, evaluate which calculates the relativistic voigt, and dumpingFunction which calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this nai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1462,modifiability,version,version,1462,"h calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1563,modifiability,integr,integrator,1563,"mplements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1756,modifiability,integr,integrationRange,1756,"in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have ren",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1872,modifiability,integr,integrationRange,1872,"tivistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that hav",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1923,modifiability,integr,integrationRange,1923,"ativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the val",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1958,modifiability,integr,integral,1958,"stic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2047,modifiability,integr,integrationRange,2047,"ore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2330,modifiability,variab,variables,2330,"ussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2361,modifiability,integr,integral,2361,"//root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4229,modifiability,version,version,4229,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1583,performance,CPU,CPU,1583," functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:755,reliability,integr,integral,755,"Add Relativistic Voigt Function to TMath; # This Pull request:. This follows on from a recent pull request which added a relativistic breit wigner to ROOT https://github.com/root-project/root/pull/10760, to add a relativistic voigt which is a natural extension. **Brief summary**. Files added:. math/mathmore/inc/Math/VoigtRelativistic.h - Defines VoigtRelativistic class with two functions, evaluate which calculates the relativistic voigt, and dumpingFunction which calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1563,reliability,integr,integrator,1563,"mplements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1756,reliability,integr,integrationRange,1756,"in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have ren",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1872,reliability,integr,integrationRange,1872,"tivistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that hav",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1923,reliability,integr,integrationRange,1923,"ativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the val",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1958,reliability,integr,integral,1958,"stic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2047,reliability,integr,integrationRange,2047,"ore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2361,reliability,integr,integral,2361,"//root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2679,reliability,doe,does,2679,"c double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new Voig",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4237,reliability,availab,available,4237,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4349,reliability,availab,available,4349,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4548,reliability,doe,does,4548,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:3417,safety,detect,detector,3417,"own in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TM",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4237,safety,avail,available,4237,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4349,safety,avail,available,4349,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4462,safety,test,test,4462,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4564,safety,test,test,4564,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4629,safety,test,tests,4629,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4809,safety,test,tested,4809,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4839,safety,updat,updated,4839,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:755,security,integr,integral,755,"Add Relativistic Voigt Function to TMath; # This Pull request:. This follows on from a recent pull request which added a relativistic breit wigner to ROOT https://github.com/root-project/root/pull/10760, to add a relativistic voigt which is a natural extension. **Brief summary**. Files added:. math/mathmore/inc/Math/VoigtRelativistic.h - Defines VoigtRelativistic class with two functions, evaluate which calculates the relativistic voigt, and dumpingFunction which calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1034,security,modif,modified,1034,"th; # This Pull request:. This follows on from a recent pull request which added a relativistic breit wigner to ROOT https://github.com/root-project/root/pull/10760, to add a relativistic voigt which is a natural extension. **Brief summary**. Files added:. math/mathmore/inc/Math/VoigtRelativistic.h - Defines VoigtRelativistic class with two functions, evaluate which calculates the relativistic voigt, and dumpingFunction which calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1139,security,modif,modified,1139,"ner to ROOT https://github.com/root-project/root/pull/10760, to add a relativistic voigt which is a natural extension. **Brief summary**. Files added:. math/mathmore/inc/Math/VoigtRelativistic.h - Defines VoigtRelativistic class with two functions, evaluate which calculates the relativistic voigt, and dumpingFunction which calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1563,security,integr,integrator,1563,"mplements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1756,security,integr,integrationRange,1756,"in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have ren",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1872,security,integr,integrationRange,1872,"tivistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that hav",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1923,security,integr,integrationRange,1923,"ativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the val",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1958,security,integr,integral,1958,"stic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2047,security,integr,integrationRange,2047,"ore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2361,security,integr,integral,2361,"//root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2593,security,ident,identical,2593,"This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:3394,security,sign,signal,3394,"e to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would jus",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:3417,security,detect,detector,3417,"own in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TM",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4237,security,availab,available,4237,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4349,security,availab,available,4349,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4839,security,updat,updated,4839,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:755,testability,integr,integral,755,"Add Relativistic Voigt Function to TMath; # This Pull request:. This follows on from a recent pull request which added a relativistic breit wigner to ROOT https://github.com/root-project/root/pull/10760, to add a relativistic voigt which is a natural extension. **Brief summary**. Files added:. math/mathmore/inc/Math/VoigtRelativistic.h - Defines VoigtRelativistic class with two functions, evaluate which calculates the relativistic voigt, and dumpingFunction which calculates the relativisitic voigt's dumping function. . math/mathmore/src/VoigtRelativistic.cxx - Implements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1563,testability,integr,integrator,1563,"mplements the two functions defined in VoigtRelativistic.h . This implementation uses the redefinition of variables in https://arxiv.org/pdf/1711.09304.pdf which is required to write the integral in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function u",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1756,testability,integr,integrationRange,1756,"in a computationally feasiable way. tutorials/math/Voigt.C - Add a tutorial which shows the use of the new VoigtRelativistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have ren",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1872,testability,integr,integrationRange,1872,"tivistic class two produce two plots, comparing relativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that hav",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1923,testability,integr,integrationRange,1923,"ativistic voigt to non relativistic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the val",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:1958,testability,integr,integral,1958,"stic voigt, both as the voigt itself and their dumping functions. Files modified:. math/mathmore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2047,testability,integr,integrationRange,2047,"ore/CMakeLists.txt. math/mathmore/inc/Math/LinkDef.h - These two files needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2307,testability,simpl,simple,2307,"Math). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2361,testability,integr,integral,2361,"//root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2911,testability,simpl,simply,2911," default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4462,testability,test,test,4462,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4564,testability,test,test,4564,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4629,testability,test,tests,4629,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4809,testability,test,tested,4809,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2122,usability,minim,minimum,2122,"needed to be modified to compile my changes adding in the relativisitc voigt. **Full description**. Implemented relativistic version of voigt (non-relativistic case already exists in TMath). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2307,usability,simpl,simple,2307,"Math). As previously discussed in the ROOT forum https://root-forum.cern.ch/t/relativistic-breit-wigner-and-relativistic-voigt/48844 , the relativistic version has been added to mathmore rather than TMath, as it requires including a header file with an integrator which is CPU intensive. This has hence been added as it's own class in mathmore, with two functions:. static double evaluate(double x, double median, double sigma, double lg, double integrationRange=26.615717509251260);. static double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2794,usability,consist,consistent,2794,"ic double dumpingFunction(double median, double sigma, double lg, double integrationRange=26.615717509251260);. The default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74w",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:2911,usability,simpl,simply,2911," default integrationRange was chosen as the integral has been wrote in a form where it is multiplied by exp(-t^2), and this value of integrationRange results in going to the point where exp(-t^2) reaches the minimum value stored by a double. A relativistic voigt is a convolution of a relativistic breit wigner and a gaussian, doing this naively is computationally infeasible however a fairly simple redefinition of variables allows rewriting the integral in a form that is reasonable to compute. This is shown in https://arxiv.org/pdf/1711.09304.pdf equation 9 which has been used here. I am unsure how referencing works with ROOT. [Note: the function used here is not actually identical to equation 9, as the paper linked uses a different normalization than ROOT does for the non relativistic voigt which is already implemented in TMath. I have renormalized this equation to be consistent with the non relativistic case already in ROOT). The two functions that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4132,usability,document,documentation,4132,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4612,usability,learn,learn,4612,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/pull/11049:4753,usability,help,help,4753,"s that have been defined are:. evaluate, simply gives the value of the relativisitic voigt at the point requested. dumpingFunction, this is a commonly used function which is defined as the value of the relativistic voigt at its peak, divided by the value of the relativistic breit wigner at the peak that is part of the relativistic voigt. This is useful as it quantifies how much the voigt is smeared by the gaussian, which as a physical effect in particle physics is usually easily translated to how much sensitivity to a signal you lose due to detector effects. A tutorial Voigt.C has been added in tutorials/math which produces plots comparing the non relativistic and relativistic case of voigt and the dumping function. The output plots from tutorials/math/Voigt.C which produces a plot using the new VoigtRelativistic class which is added in this pull request is here [Voigt](https://cernbox.cern.ch/index.php/s/3Vu40dk74wUDfWe) [DumpingFunction](https://cernbox.cern.ch/index.php/s/Xv3act8hvpaqeCM). As mentioned this relativistic voigt is implemented in mathmore, however there is already a non relativistic voigt in TMath ( called Voigt https://root.cern.ch/doc/master/namespaceTMath.html ). I'm unsure if this is possible but it would be ideal if the documentation here could mention in the non relativistic voigt case that there is a relativistic version available as I think as is very few people even if they want a relativistic case would realise there is one now available (in fact I think many people would just assume the voigt in TMath is relativistic). I have not added a test as I am unsure exactly how to and the non relativistic voigt that already exists does not have a test either to use as a template. I will try to learn how to add tests in the future and hopefully add one for this and the relativistic breit wigner case in the future. Thank you for your help,. Jack. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11049
https://github.com/root-project/root/issues/11050:263,availability,error,error,263,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:463,availability,cluster,cluster,463,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:555,availability,cluster,cluster,555,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:813,availability,error,error,813,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1527,availability,Error,Error,1527," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1596,availability,Error,Error,1596," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1698,availability,error,error,1698," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1814,availability,error,error,1814," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1915,availability,state,stated,1915," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:463,deployability,cluster,cluster,463,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:555,deployability,cluster,cluster,555,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1297,deployability,Build,Build,1297," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1420,deployability,Build,Build,1420," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1736,deployability,stack,stacktrace,1736," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1178,energy efficiency,current,current,1178," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:973,integrability,event,event,973,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1070,integrability,pub,public,1070," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1915,integrability,state,stated,1915," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:319,interoperability,distribut,distributed,319,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:408,interoperability,Distribut,Distributed,408,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:881,modifiability,scal,scalar,881,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:219,performance,time,times,219,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:263,performance,error,error,263,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:813,performance,error,error,813,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1527,performance,Error,Error,1527," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1596,performance,Error,Error,1596," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1698,performance,error,error,1698," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1814,performance,error,error,1814," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:4,safety,except,exceptions,4,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:81,safety,except,exception,81,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:263,safety,error,error,263,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:813,safety,error,error,813,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:947,safety,test,test,947,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1331,safety,except,exception,1331," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1527,safety,Error,Error,1527," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1596,safety,Error,Error,1596," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1698,safety,error,error,1698," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1814,safety,error,error,1814," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1873,safety,except,exception,1873," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1969,safety,except,exceptions,1969," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:947,testability,test,test,947,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:263,usability,error,error,263,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:813,usability,error,error,813,"C++ exceptions are not correctly propagated by Dask; ### Describe the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1527,usability,Error,Error,1527," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1596,usability,Error,Error,1596," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1698,usability,error,error,1698," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1814,usability,error,error,1814," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1859,usability,user,user,1859," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:1951,usability,behavi,behavior,1951," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11050:2017,usability,user,user,2017," the bug. If an exception happens on the C++ side during the execution of an RDF task within a Dask worker process, this is not properly propagated. Most times it leads to some kind of unrepairable error. Take the following example. ```python. from dask.distributed import LocalCluster, Client. import ROOT. RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame. def create_connection():. cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=False). client = Client(cluster). return client. if __name__ == ""__main__"":. connection = create_connection(). df = RDataFrame(100, daskclient=connection). df = df.Define(""x"", ""1"").Define(""y"", ""ROOT::RVecF{1., 2., 3.}""). g = df.Graph(""x"", ""y""). gv = g.GetValue(). ```. The expected error here is that the graph cannot be filled with columns of mixed scalar/vector types. Running the code above gives. ```. $: python test.py. RDataFrame::Run: event loop was interrupted. Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor. 	which can be called without argument, objects of this class. 	can not be read with the current library. You will need to. 	add a default constructor before attempting to read it. Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved. Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved. Error in <TClass::New>: cannot create object of class runtime_error. Error in <TBufferFile::ReadObject>: could not create object of class runtime_error. *** Break *** bus error. ```. Followed by the usual gdb stacktrace produced by ROOT. This happens because Dask tries to serialize the error object in order to send it back to the user. But the exception cannot be serialized by ROOT as stated in the warning. ### Expected behavior. The C++ exceptions should be properly propagated to the user. ### Setup. ROOT master. GCC 12. Fedora 36.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11050
https://github.com/root-project/root/issues/11051:41,availability,error,error,41,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:188,availability,error,error,188,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:415,deployability,modul,module,415,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:1728,deployability,depend,depending,1728,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:1728,integrability,depend,depending,1728,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:1644,interoperability,specif,specification,1644,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:415,modifiability,modul,module,415,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:1728,modifiability,depend,depending,1728,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:41,performance,error,error,41,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:188,performance,error,error,188,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:41,safety,error,error,41,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:188,safety,error,error,188,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:415,safety,modul,module,415,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:1728,safety,depend,depending,1728,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:351,testability,Trace,Traceback,351,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:1728,testability,depend,depending,1728,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:41,usability,error,error,41,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:188,usability,error,error,188,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/issues/11051:238,usability,Minim,Minimal,238,"RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python; This was spotted by @vepadulano. As the title suggests: RDatasetSpec is not throwing the correct error when the begin entry > end entry in Python. Minimal repro:. ```py. >>> import ROOT. >>> ds2 = ROOT.RDF.Experimental.RDatasetSpec(""tree"", ""z.root"", (10, 7)). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. TypeError: none of the 5 overloaded methods succeeded. Full details:. RDatasetSpec::RDatasetSpec(ROOT::RDF::Experimental::RDatasetSpec&&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const vector<string>& fileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 2. RDatasetSpec::RDatasetSpec(const vector<pair<string,string> >& treeAndFileNameGlobs, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: takes at most 2 arguments (3 given). RDatasetSpec::RDatasetSpec(const ROOT::RDF::Experimental::RDatasetSpec&) =>. TypeError: takes at most 1 arguments (3 given). RDatasetSpec::RDatasetSpec(const string& treeName, const string& fileNameGlob, const ROOT::RDF::Experimental::RDatasetSpec::REntryRange& entryRange = {}) =>. TypeError: could not convert argument 3. ```. This is instead supposed to trigger:. ```cpp. RDatasetSpec::REntryRange::REntryRange(Long64_t begin, Long64_t end) : fBegin(begin), fEnd(end). {. if (fBegin > fEnd). throw std::logic_error(""The starting entry cannot be larger than the ending entry in the "". ""creation of a dataset specification."");. }. ```. P.S. very interesting that an overload is not recognized depending on the same basic types.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11051
https://github.com/root-project/root/pull/11052:372,deployability,automat,automatically,372,"Allow also only one parameter in `TF1::SetParameters()`; People know that they can use `TF1::SetParameters()` to set the. parameter values of a TF1. For example, when you have two parameters:. ```C++. TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(1.0, 0.5);. ```. When people get rid of all parameters except for one, they therefore. automatically assume that this will work:. ```C++. TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(0.5);. ```. However, it doesn't work because `SetParameters` requires at least two. arguments. This commit suggests to fix that and generalize the function. to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and. therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11052
https://github.com/root-project/root/pull/11052:696,energy efficiency,reduc,reduces,696,"Allow also only one parameter in `TF1::SetParameters()`; People know that they can use `TF1::SetParameters()` to set the. parameter values of a TF1. For example, when you have two parameters:. ```C++. TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(1.0, 0.5);. ```. When people get rid of all parameters except for one, they therefore. automatically assume that this will work:. ```C++. TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(0.5);. ```. However, it doesn't work because `SetParameters` requires at least two. arguments. This commit suggests to fix that and generalize the function. to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and. therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11052
https://github.com/root-project/root/pull/11052:20,modifiability,paramet,parameter,20,"Allow also only one parameter in `TF1::SetParameters()`; People know that they can use `TF1::SetParameters()` to set the. parameter values of a TF1. For example, when you have two parameters:. ```C++. TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(1.0, 0.5);. ```. When people get rid of all parameters except for one, they therefore. automatically assume that this will work:. ```C++. TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(0.5);. ```. However, it doesn't work because `SetParameters` requires at least two. arguments. This commit suggests to fix that and generalize the function. to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and. therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11052
https://github.com/root-project/root/pull/11052:122,modifiability,paramet,parameter,122,"Allow also only one parameter in `TF1::SetParameters()`; People know that they can use `TF1::SetParameters()` to set the. parameter values of a TF1. For example, when you have two parameters:. ```C++. TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(1.0, 0.5);. ```. When people get rid of all parameters except for one, they therefore. automatically assume that this will work:. ```C++. TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(0.5);. ```. However, it doesn't work because `SetParameters` requires at least two. arguments. This commit suggests to fix that and generalize the function. to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and. therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11052
https://github.com/root-project/root/pull/11052:180,modifiability,paramet,parameters,180,"Allow also only one parameter in `TF1::SetParameters()`; People know that they can use `TF1::SetParameters()` to set the. parameter values of a TF1. For example, when you have two parameters:. ```C++. TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(1.0, 0.5);. ```. When people get rid of all parameters except for one, they therefore. automatically assume that this will work:. ```C++. TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(0.5);. ```. However, it doesn't work because `SetParameters` requires at least two. arguments. This commit suggests to fix that and generalize the function. to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and. therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11052
https://github.com/root-project/root/pull/11052:329,modifiability,paramet,parameters,329,"Allow also only one parameter in `TF1::SetParameters()`; People know that they can use `TF1::SetParameters()` to set the. parameter values of a TF1. For example, when you have two parameters:. ```C++. TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(1.0, 0.5);. ```. When people get rid of all parameters except for one, they therefore. automatically assume that this will work:. ```C++. TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(0.5);. ```. However, it doesn't work because `SetParameters` requires at least two. arguments. This commit suggests to fix that and generalize the function. to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and. therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11052
https://github.com/root-project/root/pull/11052:672,modifiability,paramet,parameter,672,"Allow also only one parameter in `TF1::SetParameters()`; People know that they can use `TF1::SetParameters()` to set the. parameter values of a TF1. For example, when you have two parameters:. ```C++. TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(1.0, 0.5);. ```. When people get rid of all parameters except for one, they therefore. automatically assume that this will work:. ```C++. TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(0.5);. ```. However, it doesn't work because `SetParameters` requires at least two. arguments. This commit suggests to fix that and generalize the function. to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and. therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11052
https://github.com/root-project/root/pull/11052:812,performance,time,time,812,"Allow also only one parameter in `TF1::SetParameters()`; People know that they can use `TF1::SetParameters()` to set the. parameter values of a TF1. For example, when you have two parameters:. ```C++. TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(1.0, 0.5);. ```. When people get rid of all parameters except for one, they therefore. automatically assume that this will work:. ```C++. TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(0.5);. ```. However, it doesn't work because `SetParameters` requires at least two. arguments. This commit suggests to fix that and generalize the function. to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and. therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11052
https://github.com/root-project/root/pull/11052:522,reliability,doe,doesn,522,"Allow also only one parameter in `TF1::SetParameters()`; People know that they can use `TF1::SetParameters()` to set the. parameter values of a TF1. For example, when you have two parameters:. ```C++. TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(1.0, 0.5);. ```. When people get rid of all parameters except for one, they therefore. automatically assume that this will work:. ```C++. TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(0.5);. ```. However, it doesn't work because `SetParameters` requires at least two. arguments. This commit suggests to fix that and generalize the function. to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and. therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11052
https://github.com/root-project/root/pull/11052:340,safety,except,except,340,"Allow also only one parameter in `TF1::SetParameters()`; People know that they can use `TF1::SetParameters()` to set the. parameter values of a TF1. For example, when you have two parameters:. ```C++. TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(1.0, 0.5);. ```. When people get rid of all parameters except for one, they therefore. automatically assume that this will work:. ```C++. TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(0.5);. ```. However, it doesn't work because `SetParameters` requires at least two. arguments. This commit suggests to fix that and generalize the function. to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and. therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11052
https://github.com/root-project/root/pull/11052:372,testability,automat,automatically,372,"Allow also only one parameter in `TF1::SetParameters()`; People know that they can use `TF1::SetParameters()` to set the. parameter values of a TF1. For example, when you have two parameters:. ```C++. TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(1.0, 0.5);. ```. When people get rid of all parameters except for one, they therefore. automatically assume that this will work:. ```C++. TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(0.5);. ```. However, it doesn't work because `SetParameters` requires at least two. arguments. This commit suggests to fix that and generalize the function. to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and. therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11052
https://github.com/root-project/root/pull/11052:735,usability,interact,interacting,735,"Allow also only one parameter in `TF1::SetParameters()`; People know that they can use `TF1::SetParameters()` to set the. parameter values of a TF1. For example, when you have two parameters:. ```C++. TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(1.0, 0.5);. ```. When people get rid of all parameters except for one, they therefore. automatically assume that this will work:. ```C++. TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(0.5);. ```. However, it doesn't work because `SetParameters` requires at least two. arguments. This commit suggests to fix that and generalize the function. to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and. therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11052
https://github.com/root-project/root/pull/11052:786,usability,user,user,786,"Allow also only one parameter in `TF1::SetParameters()`; People know that they can use `TF1::SetParameters()` to set the. parameter values of a TF1. For example, when you have two parameters:. ```C++. TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(1.0, 0.5);. ```. When people get rid of all parameters except for one, they therefore. automatically assume that this will work:. ```C++. TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(0.5);. ```. However, it doesn't work because `SetParameters` requires at least two. arguments. This commit suggests to fix that and generalize the function. to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and. therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11052
https://github.com/root-project/root/pull/11052:791,usability,experien,experience,791,"Allow also only one parameter in `TF1::SetParameters()`; People know that they can use `TF1::SetParameters()` to set the. parameter values of a TF1. For example, when you have two parameters:. ```C++. TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(1.0, 0.5);. ```. When people get rid of all parameters except for one, they therefore. automatically assume that this will work:. ```C++. TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(0.5);. ```. However, it doesn't work because `SetParameters` requires at least two. arguments. This commit suggests to fix that and generalize the function. to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and. therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11052
https://github.com/root-project/root/pull/11052:822,usability,user,users,822,"Allow also only one parameter in `TF1::SetParameters()`; People know that they can use `TF1::SetParameters()` to set the. parameter values of a TF1. For example, when you have two parameters:. ```C++. TF1 myexpo(""myexp"", ""[coef] * std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(1.0, 0.5);. ```. When people get rid of all parameters except for one, they therefore. automatically assume that this will work:. ```C++. TF1 myexpo(""myexp"", ""std::exp(-[rate] * x)"", 0, 10);. myexpo.SetParameters(0.5);. ```. However, it doesn't work because `SetParameters` requires at least two. arguments. This commit suggests to fix that and generalize the function. to take only one parameter as well. This reduces the surprises people have when interacting with a TF1 and. therefore improves the user experience for first-time ROOT users.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11052
https://github.com/root-project/root/pull/11053:14,interoperability,convers,conversion,14,"[physics] Add conversion to ROOT::Math::XYZTVector; As a wonderful side-effect, this adds support for construction from a TLorentzVector. See https://root-forum.cern.ch/t/problem-initializing-a-4-vector/50789.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11053
https://github.com/root-project/root/pull/11053:90,usability,support,support,90,"[physics] Add conversion to ROOT::Math::XYZTVector; As a wonderful side-effect, this adds support for construction from a TLorentzVector. See https://root-forum.cern.ch/t/problem-initializing-a-4-vector/50789.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11053
https://github.com/root-project/root/pull/11054:360,availability,error,error,360,"[core] Fix typo in `CompressionSettings()` declaration; Fix typo in `CompressionSettings()` function declaration to match definition in `Compression.cxx`. Many thanks for reporting @mnowakgit! This typo caused the following to fail:. ```. root [0] auto c = ROOT::RCompressionSetting::EAlgorithm::kZSTD;. root [1] CompressionSettings(c, 5);. input_line_10:2:3: error: no matching function for call to 'CompressionSettings'. (CompressionSettings(((*(enum ROOT::RCompressionSetting::EAlgorithm::EValues*)0x7f02285f4010)), 5)). ^~~~~~~~~~~~~~~~~~~. /home/jalopezg/_build/include/Compression.h:124:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'RCompressionSetting::EAlgorithm' for 1st argument. int CompressionSettings(RCompressionSetting::EAlgorithm algorithm, int compressionLevel);. ^. /home/jalopezg/_build/include/Compression.h:126:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'ROOT::ECompressionAlgorithm' for 1st argument. int CompressionSettings(ROOT::ECompressionAlgorithm algorithm, int compressionLevel);. ^. ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11054
https://github.com/root-project/root/pull/11054:227,deployability,fail,fail,227,"[core] Fix typo in `CompressionSettings()` declaration; Fix typo in `CompressionSettings()` function declaration to match definition in `Compression.cxx`. Many thanks for reporting @mnowakgit! This typo caused the following to fail:. ```. root [0] auto c = ROOT::RCompressionSetting::EAlgorithm::kZSTD;. root [1] CompressionSettings(c, 5);. input_line_10:2:3: error: no matching function for call to 'CompressionSettings'. (CompressionSettings(((*(enum ROOT::RCompressionSetting::EAlgorithm::EValues*)0x7f02285f4010)), 5)). ^~~~~~~~~~~~~~~~~~~. /home/jalopezg/_build/include/Compression.h:124:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'RCompressionSetting::EAlgorithm' for 1st argument. int CompressionSettings(RCompressionSetting::EAlgorithm algorithm, int compressionLevel);. ^. /home/jalopezg/_build/include/Compression.h:126:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'ROOT::ECompressionAlgorithm' for 1st argument. int CompressionSettings(ROOT::ECompressionAlgorithm algorithm, int compressionLevel);. ^. ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11054
https://github.com/root-project/root/pull/11054:1225,deployability,updat,updated,1225,"[core] Fix typo in `CompressionSettings()` declaration; Fix typo in `CompressionSettings()` function declaration to match definition in `Compression.cxx`. Many thanks for reporting @mnowakgit! This typo caused the following to fail:. ```. root [0] auto c = ROOT::RCompressionSetting::EAlgorithm::kZSTD;. root [1] CompressionSettings(c, 5);. input_line_10:2:3: error: no matching function for call to 'CompressionSettings'. (CompressionSettings(((*(enum ROOT::RCompressionSetting::EAlgorithm::EValues*)0x7f02285f4010)), 5)). ^~~~~~~~~~~~~~~~~~~. /home/jalopezg/_build/include/Compression.h:124:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'RCompressionSetting::EAlgorithm' for 1st argument. int CompressionSettings(RCompressionSetting::EAlgorithm algorithm, int compressionLevel);. ^. /home/jalopezg/_build/include/Compression.h:126:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'ROOT::ECompressionAlgorithm' for 1st argument. int CompressionSettings(ROOT::ECompressionAlgorithm algorithm, int compressionLevel);. ^. ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11054
https://github.com/root-project/root/pull/11054:1,energy efficiency,core,core,1,"[core] Fix typo in `CompressionSettings()` declaration; Fix typo in `CompressionSettings()` function declaration to match definition in `Compression.cxx`. Many thanks for reporting @mnowakgit! This typo caused the following to fail:. ```. root [0] auto c = ROOT::RCompressionSetting::EAlgorithm::kZSTD;. root [1] CompressionSettings(c, 5);. input_line_10:2:3: error: no matching function for call to 'CompressionSettings'. (CompressionSettings(((*(enum ROOT::RCompressionSetting::EAlgorithm::EValues*)0x7f02285f4010)), 5)). ^~~~~~~~~~~~~~~~~~~. /home/jalopezg/_build/include/Compression.h:124:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'RCompressionSetting::EAlgorithm' for 1st argument. int CompressionSettings(RCompressionSetting::EAlgorithm algorithm, int compressionLevel);. ^. /home/jalopezg/_build/include/Compression.h:126:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'ROOT::ECompressionAlgorithm' for 1st argument. int CompressionSettings(ROOT::ECompressionAlgorithm algorithm, int compressionLevel);. ^. ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11054
https://github.com/root-project/root/pull/11054:642,interoperability,convers,conversion,642,"[core] Fix typo in `CompressionSettings()` declaration; Fix typo in `CompressionSettings()` function declaration to match definition in `Compression.cxx`. Many thanks for reporting @mnowakgit! This typo caused the following to fail:. ```. root [0] auto c = ROOT::RCompressionSetting::EAlgorithm::kZSTD;. root [1] CompressionSettings(c, 5);. input_line_10:2:3: error: no matching function for call to 'CompressionSettings'. (CompressionSettings(((*(enum ROOT::RCompressionSetting::EAlgorithm::EValues*)0x7f02285f4010)), 5)). ^~~~~~~~~~~~~~~~~~~. /home/jalopezg/_build/include/Compression.h:124:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'RCompressionSetting::EAlgorithm' for 1st argument. int CompressionSettings(RCompressionSetting::EAlgorithm algorithm, int compressionLevel);. ^. /home/jalopezg/_build/include/Compression.h:126:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'ROOT::ECompressionAlgorithm' for 1st argument. int CompressionSettings(ROOT::ECompressionAlgorithm algorithm, int compressionLevel);. ^. ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11054
https://github.com/root-project/root/pull/11054:958,interoperability,convers,conversion,958,"[core] Fix typo in `CompressionSettings()` declaration; Fix typo in `CompressionSettings()` function declaration to match definition in `Compression.cxx`. Many thanks for reporting @mnowakgit! This typo caused the following to fail:. ```. root [0] auto c = ROOT::RCompressionSetting::EAlgorithm::kZSTD;. root [1] CompressionSettings(c, 5);. input_line_10:2:3: error: no matching function for call to 'CompressionSettings'. (CompressionSettings(((*(enum ROOT::RCompressionSetting::EAlgorithm::EValues*)0x7f02285f4010)), 5)). ^~~~~~~~~~~~~~~~~~~. /home/jalopezg/_build/include/Compression.h:124:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'RCompressionSetting::EAlgorithm' for 1st argument. int CompressionSettings(RCompressionSetting::EAlgorithm algorithm, int compressionLevel);. ^. /home/jalopezg/_build/include/Compression.h:126:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'ROOT::ECompressionAlgorithm' for 1st argument. int CompressionSettings(ROOT::ECompressionAlgorithm algorithm, int compressionLevel);. ^. ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11054
https://github.com/root-project/root/pull/11054:360,performance,error,error,360,"[core] Fix typo in `CompressionSettings()` declaration; Fix typo in `CompressionSettings()` function declaration to match definition in `Compression.cxx`. Many thanks for reporting @mnowakgit! This typo caused the following to fail:. ```. root [0] auto c = ROOT::RCompressionSetting::EAlgorithm::kZSTD;. root [1] CompressionSettings(c, 5);. input_line_10:2:3: error: no matching function for call to 'CompressionSettings'. (CompressionSettings(((*(enum ROOT::RCompressionSetting::EAlgorithm::EValues*)0x7f02285f4010)), 5)). ^~~~~~~~~~~~~~~~~~~. /home/jalopezg/_build/include/Compression.h:124:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'RCompressionSetting::EAlgorithm' for 1st argument. int CompressionSettings(RCompressionSetting::EAlgorithm algorithm, int compressionLevel);. ^. /home/jalopezg/_build/include/Compression.h:126:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'ROOT::ECompressionAlgorithm' for 1st argument. int CompressionSettings(ROOT::ECompressionAlgorithm algorithm, int compressionLevel);. ^. ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11054
https://github.com/root-project/root/pull/11054:227,reliability,fail,fail,227,"[core] Fix typo in `CompressionSettings()` declaration; Fix typo in `CompressionSettings()` function declaration to match definition in `Compression.cxx`. Many thanks for reporting @mnowakgit! This typo caused the following to fail:. ```. root [0] auto c = ROOT::RCompressionSetting::EAlgorithm::kZSTD;. root [1] CompressionSettings(c, 5);. input_line_10:2:3: error: no matching function for call to 'CompressionSettings'. (CompressionSettings(((*(enum ROOT::RCompressionSetting::EAlgorithm::EValues*)0x7f02285f4010)), 5)). ^~~~~~~~~~~~~~~~~~~. /home/jalopezg/_build/include/Compression.h:124:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'RCompressionSetting::EAlgorithm' for 1st argument. int CompressionSettings(RCompressionSetting::EAlgorithm algorithm, int compressionLevel);. ^. /home/jalopezg/_build/include/Compression.h:126:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'ROOT::ECompressionAlgorithm' for 1st argument. int CompressionSettings(ROOT::ECompressionAlgorithm algorithm, int compressionLevel);. ^. ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11054
https://github.com/root-project/root/pull/11054:360,safety,error,error,360,"[core] Fix typo in `CompressionSettings()` declaration; Fix typo in `CompressionSettings()` function declaration to match definition in `Compression.cxx`. Many thanks for reporting @mnowakgit! This typo caused the following to fail:. ```. root [0] auto c = ROOT::RCompressionSetting::EAlgorithm::kZSTD;. root [1] CompressionSettings(c, 5);. input_line_10:2:3: error: no matching function for call to 'CompressionSettings'. (CompressionSettings(((*(enum ROOT::RCompressionSetting::EAlgorithm::EValues*)0x7f02285f4010)), 5)). ^~~~~~~~~~~~~~~~~~~. /home/jalopezg/_build/include/Compression.h:124:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'RCompressionSetting::EAlgorithm' for 1st argument. int CompressionSettings(RCompressionSetting::EAlgorithm algorithm, int compressionLevel);. ^. /home/jalopezg/_build/include/Compression.h:126:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'ROOT::ECompressionAlgorithm' for 1st argument. int CompressionSettings(ROOT::ECompressionAlgorithm algorithm, int compressionLevel);. ^. ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11054
https://github.com/root-project/root/pull/11054:1195,safety,test,tested,1195,"[core] Fix typo in `CompressionSettings()` declaration; Fix typo in `CompressionSettings()` function declaration to match definition in `Compression.cxx`. Many thanks for reporting @mnowakgit! This typo caused the following to fail:. ```. root [0] auto c = ROOT::RCompressionSetting::EAlgorithm::kZSTD;. root [1] CompressionSettings(c, 5);. input_line_10:2:3: error: no matching function for call to 'CompressionSettings'. (CompressionSettings(((*(enum ROOT::RCompressionSetting::EAlgorithm::EValues*)0x7f02285f4010)), 5)). ^~~~~~~~~~~~~~~~~~~. /home/jalopezg/_build/include/Compression.h:124:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'RCompressionSetting::EAlgorithm' for 1st argument. int CompressionSettings(RCompressionSetting::EAlgorithm algorithm, int compressionLevel);. ^. /home/jalopezg/_build/include/Compression.h:126:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'ROOT::ECompressionAlgorithm' for 1st argument. int CompressionSettings(ROOT::ECompressionAlgorithm algorithm, int compressionLevel);. ^. ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11054
https://github.com/root-project/root/pull/11054:1225,safety,updat,updated,1225,"[core] Fix typo in `CompressionSettings()` declaration; Fix typo in `CompressionSettings()` function declaration to match definition in `Compression.cxx`. Many thanks for reporting @mnowakgit! This typo caused the following to fail:. ```. root [0] auto c = ROOT::RCompressionSetting::EAlgorithm::kZSTD;. root [1] CompressionSettings(c, 5);. input_line_10:2:3: error: no matching function for call to 'CompressionSettings'. (CompressionSettings(((*(enum ROOT::RCompressionSetting::EAlgorithm::EValues*)0x7f02285f4010)), 5)). ^~~~~~~~~~~~~~~~~~~. /home/jalopezg/_build/include/Compression.h:124:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'RCompressionSetting::EAlgorithm' for 1st argument. int CompressionSettings(RCompressionSetting::EAlgorithm algorithm, int compressionLevel);. ^. /home/jalopezg/_build/include/Compression.h:126:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'ROOT::ECompressionAlgorithm' for 1st argument. int CompressionSettings(ROOT::ECompressionAlgorithm algorithm, int compressionLevel);. ^. ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11054
https://github.com/root-project/root/pull/11054:1225,security,updat,updated,1225,"[core] Fix typo in `CompressionSettings()` declaration; Fix typo in `CompressionSettings()` function declaration to match definition in `Compression.cxx`. Many thanks for reporting @mnowakgit! This typo caused the following to fail:. ```. root [0] auto c = ROOT::RCompressionSetting::EAlgorithm::kZSTD;. root [1] CompressionSettings(c, 5);. input_line_10:2:3: error: no matching function for call to 'CompressionSettings'. (CompressionSettings(((*(enum ROOT::RCompressionSetting::EAlgorithm::EValues*)0x7f02285f4010)), 5)). ^~~~~~~~~~~~~~~~~~~. /home/jalopezg/_build/include/Compression.h:124:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'RCompressionSetting::EAlgorithm' for 1st argument. int CompressionSettings(RCompressionSetting::EAlgorithm algorithm, int compressionLevel);. ^. /home/jalopezg/_build/include/Compression.h:126:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'ROOT::ECompressionAlgorithm' for 1st argument. int CompressionSettings(ROOT::ECompressionAlgorithm algorithm, int compressionLevel);. ^. ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11054
https://github.com/root-project/root/pull/11054:1195,testability,test,tested,1195,"[core] Fix typo in `CompressionSettings()` declaration; Fix typo in `CompressionSettings()` function declaration to match definition in `Compression.cxx`. Many thanks for reporting @mnowakgit! This typo caused the following to fail:. ```. root [0] auto c = ROOT::RCompressionSetting::EAlgorithm::kZSTD;. root [1] CompressionSettings(c, 5);. input_line_10:2:3: error: no matching function for call to 'CompressionSettings'. (CompressionSettings(((*(enum ROOT::RCompressionSetting::EAlgorithm::EValues*)0x7f02285f4010)), 5)). ^~~~~~~~~~~~~~~~~~~. /home/jalopezg/_build/include/Compression.h:124:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'RCompressionSetting::EAlgorithm' for 1st argument. int CompressionSettings(RCompressionSetting::EAlgorithm algorithm, int compressionLevel);. ^. /home/jalopezg/_build/include/Compression.h:126:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'ROOT::ECompressionAlgorithm' for 1st argument. int CompressionSettings(ROOT::ECompressionAlgorithm algorithm, int compressionLevel);. ^. ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11054
https://github.com/root-project/root/pull/11054:360,usability,error,error,360,"[core] Fix typo in `CompressionSettings()` declaration; Fix typo in `CompressionSettings()` function declaration to match definition in `Compression.cxx`. Many thanks for reporting @mnowakgit! This typo caused the following to fail:. ```. root [0] auto c = ROOT::RCompressionSetting::EAlgorithm::kZSTD;. root [1] CompressionSettings(c, 5);. input_line_10:2:3: error: no matching function for call to 'CompressionSettings'. (CompressionSettings(((*(enum ROOT::RCompressionSetting::EAlgorithm::EValues*)0x7f02285f4010)), 5)). ^~~~~~~~~~~~~~~~~~~. /home/jalopezg/_build/include/Compression.h:124:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'RCompressionSetting::EAlgorithm' for 1st argument. int CompressionSettings(RCompressionSetting::EAlgorithm algorithm, int compressionLevel);. ^. /home/jalopezg/_build/include/Compression.h:126:5: note: candidate function not viable: no known conversion from 'enum ROOT::RCompressionSetting::EAlgorithm::EValues' to 'ROOT::ECompressionAlgorithm' for 1st argument. int CompressionSettings(ROOT::ECompressionAlgorithm algorithm, int compressionLevel);. ^. ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11054
https://github.com/root-project/root/pull/11055:223,deployability,updat,updated,223,[TMVA][SOFIE] Add support for Reshape layer in Keras parser; This PR adds support for parsing the Keras Reshape layer in SOFIE RModel. ## Checklist:. - [x] Parsing function. - [x] Tests. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11055
https://github.com/root-project/root/pull/11055:38,modifiability,layer,layer,38,[TMVA][SOFIE] Add support for Reshape layer in Keras parser; This PR adds support for parsing the Keras Reshape layer in SOFIE RModel. ## Checklist:. - [x] Parsing function. - [x] Tests. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11055
https://github.com/root-project/root/pull/11055:112,modifiability,layer,layer,112,[TMVA][SOFIE] Add support for Reshape layer in Keras parser; This PR adds support for parsing the Keras Reshape layer in SOFIE RModel. ## Checklist:. - [x] Parsing function. - [x] Tests. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11055
https://github.com/root-project/root/pull/11055:180,safety,Test,Tests,180,[TMVA][SOFIE] Add support for Reshape layer in Keras parser; This PR adds support for parsing the Keras Reshape layer in SOFIE RModel. ## Checklist:. - [x] Parsing function. - [x] Tests. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11055
https://github.com/root-project/root/pull/11055:193,safety,test,tested,193,[TMVA][SOFIE] Add support for Reshape layer in Keras parser; This PR adds support for parsing the Keras Reshape layer in SOFIE RModel. ## Checklist:. - [x] Parsing function. - [x] Tests. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11055
https://github.com/root-project/root/pull/11055:223,safety,updat,updated,223,[TMVA][SOFIE] Add support for Reshape layer in Keras parser; This PR adds support for parsing the Keras Reshape layer in SOFIE RModel. ## Checklist:. - [x] Parsing function. - [x] Tests. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11055
https://github.com/root-project/root/pull/11055:223,security,updat,updated,223,[TMVA][SOFIE] Add support for Reshape layer in Keras parser; This PR adds support for parsing the Keras Reshape layer in SOFIE RModel. ## Checklist:. - [x] Parsing function. - [x] Tests. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11055
https://github.com/root-project/root/pull/11055:180,testability,Test,Tests,180,[TMVA][SOFIE] Add support for Reshape layer in Keras parser; This PR adds support for parsing the Keras Reshape layer in SOFIE RModel. ## Checklist:. - [x] Parsing function. - [x] Tests. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11055
https://github.com/root-project/root/pull/11055:193,testability,test,tested,193,[TMVA][SOFIE] Add support for Reshape layer in Keras parser; This PR adds support for parsing the Keras Reshape layer in SOFIE RModel. ## Checklist:. - [x] Parsing function. - [x] Tests. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11055
https://github.com/root-project/root/pull/11055:18,usability,support,support,18,[TMVA][SOFIE] Add support for Reshape layer in Keras parser; This PR adds support for parsing the Keras Reshape layer in SOFIE RModel. ## Checklist:. - [x] Parsing function. - [x] Tests. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11055
https://github.com/root-project/root/pull/11055:74,usability,support,support,74,[TMVA][SOFIE] Add support for Reshape layer in Keras parser; This PR adds support for parsing the Keras Reshape layer in SOFIE RModel. ## Checklist:. - [x] Parsing function. - [x] Tests. - [x] tested changes locally. - [x] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11055
https://github.com/root-project/root/pull/11057:48,deployability,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 18; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9912. 2. https://github.com/root-project/root/pull/10989. 3. https://github.com/root-project/root/pull/11018. 4. https://github.com/root-project/root/pull/11023.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11057
https://github.com/root-project/root/pull/11057:175,deployability,patch,patches,175,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 18; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9912. 2. https://github.com/root-project/root/pull/10989. 3. https://github.com/root-project/root/pull/11018. 4. https://github.com/root-project/root/pull/11023.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11057
https://github.com/root-project/root/pull/11057:48,safety,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 18; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9912. 2. https://github.com/root-project/root/pull/10989. 3. https://github.com/root-project/root/pull/11018. 4. https://github.com/root-project/root/pull/11023.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11057
https://github.com/root-project/root/pull/11057:175,safety,patch,patches,175,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 18; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9912. 2. https://github.com/root-project/root/pull/10989. 3. https://github.com/root-project/root/pull/11018. 4. https://github.com/root-project/root/pull/11023.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11057
https://github.com/root-project/root/pull/11057:48,security,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 18; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9912. 2. https://github.com/root-project/root/pull/10989. 3. https://github.com/root-project/root/pull/11018. 4. https://github.com/root-project/root/pull/11023.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11057
https://github.com/root-project/root/pull/11057:175,security,patch,patches,175,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 18; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9912. 2. https://github.com/root-project/root/pull/10989. 3. https://github.com/root-project/root/pull/11018. 4. https://github.com/root-project/root/pull/11023.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11057
https://github.com/root-project/root/pull/11058:331,deployability,updat,updated,331,[cling-cpt] Removed 2 globals and implemented them with parameter passing [skip-ci]; # This Pull request: Reduces global variable mutation. ## Changes or fixes: Removed the CPT_SRC_DIR and REVISION global variables and implemented them in the functional parameter passing style. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11058
https://github.com/root-project/root/pull/11058:106,energy efficiency,Reduc,Reduces,106,[cling-cpt] Removed 2 globals and implemented them with parameter passing [skip-ci]; # This Pull request: Reduces global variable mutation. ## Changes or fixes: Removed the CPT_SRC_DIR and REVISION global variables and implemented them in the functional parameter passing style. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11058
https://github.com/root-project/root/pull/11058:56,modifiability,paramet,parameter,56,[cling-cpt] Removed 2 globals and implemented them with parameter passing [skip-ci]; # This Pull request: Reduces global variable mutation. ## Changes or fixes: Removed the CPT_SRC_DIR and REVISION global variables and implemented them in the functional parameter passing style. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11058
https://github.com/root-project/root/pull/11058:121,modifiability,variab,variable,121,[cling-cpt] Removed 2 globals and implemented them with parameter passing [skip-ci]; # This Pull request: Reduces global variable mutation. ## Changes or fixes: Removed the CPT_SRC_DIR and REVISION global variables and implemented them in the functional parameter passing style. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11058
https://github.com/root-project/root/pull/11058:205,modifiability,variab,variables,205,[cling-cpt] Removed 2 globals and implemented them with parameter passing [skip-ci]; # This Pull request: Reduces global variable mutation. ## Changes or fixes: Removed the CPT_SRC_DIR and REVISION global variables and implemented them in the functional parameter passing style. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11058
https://github.com/root-project/root/pull/11058:254,modifiability,paramet,parameter,254,[cling-cpt] Removed 2 globals and implemented them with parameter passing [skip-ci]; # This Pull request: Reduces global variable mutation. ## Changes or fixes: Removed the CPT_SRC_DIR and REVISION global variables and implemented them in the functional parameter passing style. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11058
https://github.com/root-project/root/pull/11058:300,safety,test,tested,300,[cling-cpt] Removed 2 globals and implemented them with parameter passing [skip-ci]; # This Pull request: Reduces global variable mutation. ## Changes or fixes: Removed the CPT_SRC_DIR and REVISION global variables and implemented them in the functional parameter passing style. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11058
https://github.com/root-project/root/pull/11058:331,safety,updat,updated,331,[cling-cpt] Removed 2 globals and implemented them with parameter passing [skip-ci]; # This Pull request: Reduces global variable mutation. ## Changes or fixes: Removed the CPT_SRC_DIR and REVISION global variables and implemented them in the functional parameter passing style. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11058
https://github.com/root-project/root/pull/11058:331,security,updat,updated,331,[cling-cpt] Removed 2 globals and implemented them with parameter passing [skip-ci]; # This Pull request: Reduces global variable mutation. ## Changes or fixes: Removed the CPT_SRC_DIR and REVISION global variables and implemented them in the functional parameter passing style. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11058
https://github.com/root-project/root/pull/11058:300,testability,test,tested,300,[cling-cpt] Removed 2 globals and implemented them with parameter passing [skip-ci]; # This Pull request: Reduces global variable mutation. ## Changes or fixes: Removed the CPT_SRC_DIR and REVISION global variables and implemented them in the functional parameter passing style. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11058
https://github.com/root-project/root/issues/11059:53,deployability,releas,releases,53,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:133,deployability,patch,patch,133,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:139,deployability,releas,release,139,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:212,deployability,releas,releases,212,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:501,deployability,patch,patch,501,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:507,deployability,releas,release,507,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:727,deployability,patch,patch,727,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:733,deployability,releas,release,733,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:863,deployability,patch,patch,863,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:869,deployability,releas,release,869,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:931,deployability,releas,release,931,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:2158,deployability,updat,updates,2158,"oot-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/pull/11419. - [x] https://github.com/root-project/root/pull/10842. - [x] https://github.com/root-project/root/pull/11500. Excluding the last commit that only updates the tutorials. - [x] https://github.com/root-project/root/pull/11507. - [x] https://github.com/root-project/root/pull/10811. - [x] https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11133. 2. https://github.com/root-project/root/pull/11402. 3. https://github.com/root-project/root/pull/11427. 4. https://github.com/root-project/root/pull/11505. 5. https://github.com/root-project/root/pull/11528",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:2500,deployability,patch,patches,2500,"oot-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/pull/11419. - [x] https://github.com/root-project/root/pull/10842. - [x] https://github.com/root-project/root/pull/11500. Excluding the last commit that only updates the tutorials. - [x] https://github.com/root-project/root/pull/11507. - [x] https://github.com/root-project/root/pull/10811. - [x] https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11133. 2. https://github.com/root-project/root/pull/11402. 3. https://github.com/root-project/root/pull/11427. 4. https://github.com/root-project/root/pull/11505. 5. https://github.com/root-project/root/pull/11528",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:1038,integrability,batch,batch,1038," 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/pull/11419. - [x] https://github.com/root",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:153,performance,time,time,153,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:1038,performance,batch,batch,1038," 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/pull/11419. - [x] https://github.com/root",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:133,safety,patch,patch,133,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:501,safety,patch,patch,501,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:727,safety,patch,patch,727,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:863,safety,patch,patch,863,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:1746,safety,test,testRooSimultaneous,1746,"/github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/pull/11419. - [x] https://github.com/root-project/root/pull/10842. - [x] https://github.com/root-project/root/pull/11500. Excluding the last commit that only updates the tutorials. - [x] https://github.com/root-project/root/pull/11507. - [x] https://github.com/root-project/root/pull/10811. - [x] https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11133. 2. https://github.com/root-project/root/pull/11402. 3. https://github.com/root-project/root/pull/11427. 4. https://github.com/root-project/root/pull/11505. 5. https://github.com/root-project/ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:2158,safety,updat,updates,2158,"oot-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/pull/11419. - [x] https://github.com/root-project/root/pull/10842. - [x] https://github.com/root-project/root/pull/11500. Excluding the last commit that only updates the tutorials. - [x] https://github.com/root-project/root/pull/11507. - [x] https://github.com/root-project/root/pull/10811. - [x] https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11133. 2. https://github.com/root-project/root/pull/11402. 3. https://github.com/root-project/root/pull/11427. 4. https://github.com/root-project/root/pull/11505. 5. https://github.com/root-project/root/pull/11528",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:2346,safety,Except,Except,2346,"oot-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/pull/11419. - [x] https://github.com/root-project/root/pull/10842. - [x] https://github.com/root-project/root/pull/11500. Excluding the last commit that only updates the tutorials. - [x] https://github.com/root-project/root/pull/11507. - [x] https://github.com/root-project/root/pull/10811. - [x] https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11133. 2. https://github.com/root-project/root/pull/11402. 3. https://github.com/root-project/root/pull/11427. 4. https://github.com/root-project/root/pull/11505. 5. https://github.com/root-project/root/pull/11528",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:2500,safety,patch,patches,2500,"oot-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/pull/11419. - [x] https://github.com/root-project/root/pull/10842. - [x] https://github.com/root-project/root/pull/11500. Excluding the last commit that only updates the tutorials. - [x] https://github.com/root-project/root/pull/11507. - [x] https://github.com/root-project/root/pull/10811. - [x] https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11133. 2. https://github.com/root-project/root/pull/11402. 3. https://github.com/root-project/root/pull/11427. 4. https://github.com/root-project/root/pull/11505. 5. https://github.com/root-project/root/pull/11528",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:133,security,patch,patch,133,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:501,security,patch,patch,501,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:727,security,patch,patch,727,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:863,security,patch,patch,863,"[RF] RooFit open issues and backports for 6.26.08/10 releases; The usual issue to collect what is needed for RooFit in the next 6.26 patch release, this time for 6.26.08. The related issues for the previous 6.26 releases:. 1. https://github.com/root-project/root/issues/9508. 2. https://github.com/root-project/root/issues/10112. 3. https://github.com/root-project/root/issues/10493. 4. https://github.com/root-project/root/issues/10758. **GitHub issues** that still need to be addressed for the next patch release:. - [x] https://github.com/root-project/root/issues/11332. - [x] https://github.com/root-project/root/issues/11396. The bugfix PRs that need to be backported in this order to the 6.26 branch before the next 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:2158,security,updat,updates,2158,"oot-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/pull/11419. - [x] https://github.com/root-project/root/pull/10842. - [x] https://github.com/root-project/root/pull/11500. Excluding the last commit that only updates the tutorials. - [x] https://github.com/root-project/root/pull/11507. - [x] https://github.com/root-project/root/pull/10811. - [x] https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11133. 2. https://github.com/root-project/root/pull/11402. 3. https://github.com/root-project/root/pull/11427. 4. https://github.com/root-project/root/pull/11505. 5. https://github.com/root-project/root/pull/11528",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:2500,security,patch,patches,2500,"oot-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/pull/11419. - [x] https://github.com/root-project/root/pull/10842. - [x] https://github.com/root-project/root/pull/11500. Excluding the last commit that only updates the tutorials. - [x] https://github.com/root-project/root/pull/11507. - [x] https://github.com/root-project/root/pull/10811. - [x] https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11133. 2. https://github.com/root-project/root/pull/11402. 3. https://github.com/root-project/root/pull/11427. 4. https://github.com/root-project/root/pull/11505. 5. https://github.com/root-project/root/pull/11528",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:1746,testability,test,testRooSimultaneous,1746,"/github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/pull/11419. - [x] https://github.com/root-project/root/pull/10842. - [x] https://github.com/root-project/root/pull/11500. Excluding the last commit that only updates the tutorials. - [x] https://github.com/root-project/root/pull/11507. - [x] https://github.com/root-project/root/pull/10811. - [x] https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11133. 2. https://github.com/root-project/root/pull/11402. 3. https://github.com/root-project/root/pull/11427. 4. https://github.com/root-project/root/pull/11505. 5. https://github.com/root-project/ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/issues/11059:1716,usability,behavi,behavior,1716,"t 6.26 patch release:. - [x] https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). - [x] https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. - [x] https://github.com/root-project/root/pull/11162. - [x] https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. - [x] https://github.com/root-project/root/pull/11134. Excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11195. - [x] https://github.com/root-project/root/pull/11346. - [x] https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. - [x] https://github.com/root-project/root/pull/11401. - [x] https://github.com/root-project/root/pull/11406. Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit. - [x] https://github.com/root-project/root/pull/11416. excluding the first commit with the code modernization. - [x] https://github.com/root-project/root/pull/11417. - [x] https://github.com/root-project/root/pull/11419. - [x] https://github.com/root-project/root/pull/10842. - [x] https://github.com/root-project/root/pull/11500. Excluding the last commit that only updates the tutorials. - [x] https://github.com/root-project/root/pull/11507. - [x] https://github.com/root-project/root/pull/10811. - [x] https://github.com/root-project/root/pull/11531. Except for the second commit that fixes something that was introduced in the 6.28 development cycle. The backports were grouped in a few PRs to `v6-26-00-patches`:. 1. https://github.com/root-project/root/pull/11133. 2. https://github.com/root-project/root/pull/11402. 3. https://github.com/root-project/root/pull/11427. 4. https://github.com/root-project/root/pull/11505. 5",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11059
https://github.com/root-project/root/pull/11060:1435,deployability,updat,updated,1435,"Fix computation of the radiation length and nuclear interaction lengt…; …h when ROOT uses G4 units. # This Pull request:. The PR fixes the computation of the radiation length and nuclear interaction length. which are computed wrongly when ROOT uses in G4 units. ## Changes or fixes:. All in TGeoMaterial.cpp. The fix is based on an initial pull request from Ivana:. https://github.com/root-project/root/pull/9401 . which did miss the necessary changes for mixtures. Output from constructing Iron from:. ```. 99.5 % Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]. 0.5 % Element: C Z=6 N=12.000000 A=12.010700 [g/mole]. ```. - ROOT units:. ```. $> root.exe material_test.C\(\""ROOT\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=0.0271712 index=0. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	1.75666 [cm] . 		 Interaction Length: 	16.9589 [cm] . ```. - Geant4 units:. ```. $> root.exe material_test.C\(\""G4\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=0.271712 index=3. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	17.5666 [mm] . 		 Interaction Length: 	169.589 [mm] . ```. PDG (https://pdg.lbl.gov/2020/AtomicNuclearProperties/HTML/iron_Fe.html):. ```. Specific gravity 	 7.874 	g cm-3. Nuclear interaction length 	132.1 	g cm-2 	16.77 	cm. Radiation length 	 13.84 	g cm-2 	1.757 	cm. ```. ## Checklist:. - [X ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11060
https://github.com/root-project/root/pull/11060:1245,interoperability,Specif,Specific,1245,"Fix computation of the radiation length and nuclear interaction lengt…; …h when ROOT uses G4 units. # This Pull request:. The PR fixes the computation of the radiation length and nuclear interaction length. which are computed wrongly when ROOT uses in G4 units. ## Changes or fixes:. All in TGeoMaterial.cpp. The fix is based on an initial pull request from Ivana:. https://github.com/root-project/root/pull/9401 . which did miss the necessary changes for mixtures. Output from constructing Iron from:. ```. 99.5 % Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]. 0.5 % Element: C Z=6 N=12.000000 A=12.010700 [g/mole]. ```. - ROOT units:. ```. $> root.exe material_test.C\(\""ROOT\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=0.0271712 index=0. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	1.75666 [cm] . 		 Interaction Length: 	16.9589 [cm] . ```. - Geant4 units:. ```. $> root.exe material_test.C\(\""G4\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=0.271712 index=3. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	17.5666 [mm] . 		 Interaction Length: 	169.589 [mm] . ```. PDG (https://pdg.lbl.gov/2020/AtomicNuclearProperties/HTML/iron_Fe.html):. ```. Specific gravity 	 7.874 	g cm-3. Nuclear interaction length 	132.1 	g cm-2 	16.77 	cm. Radiation length 	 13.84 	g cm-2 	1.757 	cm. ```. ## Checklist:. - [X ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11060
https://github.com/root-project/root/pull/11060:1405,safety,test,tested,1405,"Fix computation of the radiation length and nuclear interaction lengt…; …h when ROOT uses G4 units. # This Pull request:. The PR fixes the computation of the radiation length and nuclear interaction length. which are computed wrongly when ROOT uses in G4 units. ## Changes or fixes:. All in TGeoMaterial.cpp. The fix is based on an initial pull request from Ivana:. https://github.com/root-project/root/pull/9401 . which did miss the necessary changes for mixtures. Output from constructing Iron from:. ```. 99.5 % Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]. 0.5 % Element: C Z=6 N=12.000000 A=12.010700 [g/mole]. ```. - ROOT units:. ```. $> root.exe material_test.C\(\""ROOT\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=0.0271712 index=0. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	1.75666 [cm] . 		 Interaction Length: 	16.9589 [cm] . ```. - Geant4 units:. ```. $> root.exe material_test.C\(\""G4\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=0.271712 index=3. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	17.5666 [mm] . 		 Interaction Length: 	169.589 [mm] . ```. PDG (https://pdg.lbl.gov/2020/AtomicNuclearProperties/HTML/iron_Fe.html):. ```. Specific gravity 	 7.874 	g cm-3. Nuclear interaction length 	132.1 	g cm-2 	16.77 	cm. Radiation length 	 13.84 	g cm-2 	1.757 	cm. ```. ## Checklist:. - [X ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11060
https://github.com/root-project/root/pull/11060:1435,safety,updat,updated,1435,"Fix computation of the radiation length and nuclear interaction lengt…; …h when ROOT uses G4 units. # This Pull request:. The PR fixes the computation of the radiation length and nuclear interaction length. which are computed wrongly when ROOT uses in G4 units. ## Changes or fixes:. All in TGeoMaterial.cpp. The fix is based on an initial pull request from Ivana:. https://github.com/root-project/root/pull/9401 . which did miss the necessary changes for mixtures. Output from constructing Iron from:. ```. 99.5 % Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]. 0.5 % Element: C Z=6 N=12.000000 A=12.010700 [g/mole]. ```. - ROOT units:. ```. $> root.exe material_test.C\(\""ROOT\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=0.0271712 index=0. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	1.75666 [cm] . 		 Interaction Length: 	16.9589 [cm] . ```. - Geant4 units:. ```. $> root.exe material_test.C\(\""G4\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=0.271712 index=3. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	17.5666 [mm] . 		 Interaction Length: 	169.589 [mm] . ```. PDG (https://pdg.lbl.gov/2020/AtomicNuclearProperties/HTML/iron_Fe.html):. ```. Specific gravity 	 7.874 	g cm-3. Nuclear interaction length 	132.1 	g cm-2 	16.77 	cm. Radiation length 	 13.84 	g cm-2 	1.757 	cm. ```. ## Checklist:. - [X ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11060
https://github.com/root-project/root/pull/11060:1435,security,updat,updated,1435,"Fix computation of the radiation length and nuclear interaction lengt…; …h when ROOT uses G4 units. # This Pull request:. The PR fixes the computation of the radiation length and nuclear interaction length. which are computed wrongly when ROOT uses in G4 units. ## Changes or fixes:. All in TGeoMaterial.cpp. The fix is based on an initial pull request from Ivana:. https://github.com/root-project/root/pull/9401 . which did miss the necessary changes for mixtures. Output from constructing Iron from:. ```. 99.5 % Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]. 0.5 % Element: C Z=6 N=12.000000 A=12.010700 [g/mole]. ```. - ROOT units:. ```. $> root.exe material_test.C\(\""ROOT\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=0.0271712 index=0. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	1.75666 [cm] . 		 Interaction Length: 	16.9589 [cm] . ```. - Geant4 units:. ```. $> root.exe material_test.C\(\""G4\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=0.271712 index=3. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	17.5666 [mm] . 		 Interaction Length: 	169.589 [mm] . ```. PDG (https://pdg.lbl.gov/2020/AtomicNuclearProperties/HTML/iron_Fe.html):. ```. Specific gravity 	 7.874 	g cm-3. Nuclear interaction length 	132.1 	g cm-2 	16.77 	cm. Radiation length 	 13.84 	g cm-2 	1.757 	cm. ```. ## Checklist:. - [X ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11060
https://github.com/root-project/root/pull/11060:93,testability,unit,units,93,"Fix computation of the radiation length and nuclear interaction lengt…; …h when ROOT uses G4 units. # This Pull request:. The PR fixes the computation of the radiation length and nuclear interaction length. which are computed wrongly when ROOT uses in G4 units. ## Changes or fixes:. All in TGeoMaterial.cpp. The fix is based on an initial pull request from Ivana:. https://github.com/root-project/root/pull/9401 . which did miss the necessary changes for mixtures. Output from constructing Iron from:. ```. 99.5 % Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]. 0.5 % Element: C Z=6 N=12.000000 A=12.010700 [g/mole]. ```. - ROOT units:. ```. $> root.exe material_test.C\(\""ROOT\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=0.0271712 index=0. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	1.75666 [cm] . 		 Interaction Length: 	16.9589 [cm] . ```. - Geant4 units:. ```. $> root.exe material_test.C\(\""G4\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=0.271712 index=3. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	17.5666 [mm] . 		 Interaction Length: 	169.589 [mm] . ```. PDG (https://pdg.lbl.gov/2020/AtomicNuclearProperties/HTML/iron_Fe.html):. ```. Specific gravity 	 7.874 	g cm-3. Nuclear interaction length 	132.1 	g cm-2 	16.77 	cm. Radiation length 	 13.84 	g cm-2 	1.757 	cm. ```. ## Checklist:. - [X ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11060
https://github.com/root-project/root/pull/11060:255,testability,unit,units,255,"Fix computation of the radiation length and nuclear interaction lengt…; …h when ROOT uses G4 units. # This Pull request:. The PR fixes the computation of the radiation length and nuclear interaction length. which are computed wrongly when ROOT uses in G4 units. ## Changes or fixes:. All in TGeoMaterial.cpp. The fix is based on an initial pull request from Ivana:. https://github.com/root-project/root/pull/9401 . which did miss the necessary changes for mixtures. Output from constructing Iron from:. ```. 99.5 % Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]. 0.5 % Element: C Z=6 N=12.000000 A=12.010700 [g/mole]. ```. - ROOT units:. ```. $> root.exe material_test.C\(\""ROOT\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=0.0271712 index=0. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	1.75666 [cm] . 		 Interaction Length: 	16.9589 [cm] . ```. - Geant4 units:. ```. $> root.exe material_test.C\(\""G4\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=0.271712 index=3. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	17.5666 [mm] . 		 Interaction Length: 	169.589 [mm] . ```. PDG (https://pdg.lbl.gov/2020/AtomicNuclearProperties/HTML/iron_Fe.html):. ```. Specific gravity 	 7.874 	g cm-3. Nuclear interaction length 	132.1 	g cm-2 	16.77 	cm. Radiation length 	 13.84 	g cm-2 	1.757 	cm. ```. ## Checklist:. - [X ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11060
https://github.com/root-project/root/pull/11060:633,testability,unit,units,633,"Fix computation of the radiation length and nuclear interaction lengt…; …h when ROOT uses G4 units. # This Pull request:. The PR fixes the computation of the radiation length and nuclear interaction length. which are computed wrongly when ROOT uses in G4 units. ## Changes or fixes:. All in TGeoMaterial.cpp. The fix is based on an initial pull request from Ivana:. https://github.com/root-project/root/pull/9401 . which did miss the necessary changes for mixtures. Output from constructing Iron from:. ```. 99.5 % Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]. 0.5 % Element: C Z=6 N=12.000000 A=12.010700 [g/mole]. ```. - ROOT units:. ```. $> root.exe material_test.C\(\""ROOT\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=0.0271712 index=0. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	1.75666 [cm] . 		 Interaction Length: 	16.9589 [cm] . ```. - Geant4 units:. ```. $> root.exe material_test.C\(\""G4\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=0.271712 index=3. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	17.5666 [mm] . 		 Interaction Length: 	169.589 [mm] . ```. PDG (https://pdg.lbl.gov/2020/AtomicNuclearProperties/HTML/iron_Fe.html):. ```. Specific gravity 	 7.874 	g cm-3. Nuclear interaction length 	132.1 	g cm-2 	16.77 	cm. Radiation length 	 13.84 	g cm-2 	1.757 	cm. ```. ## Checklist:. - [X ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11060
https://github.com/root-project/root/pull/11060:905,testability,unit,units,905,"Fix computation of the radiation length and nuclear interaction lengt…; …h when ROOT uses G4 units. # This Pull request:. The PR fixes the computation of the radiation length and nuclear interaction length. which are computed wrongly when ROOT uses in G4 units. ## Changes or fixes:. All in TGeoMaterial.cpp. The fix is based on an initial pull request from Ivana:. https://github.com/root-project/root/pull/9401 . which did miss the necessary changes for mixtures. Output from constructing Iron from:. ```. 99.5 % Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]. 0.5 % Element: C Z=6 N=12.000000 A=12.010700 [g/mole]. ```. - ROOT units:. ```. $> root.exe material_test.C\(\""ROOT\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=0.0271712 index=0. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	1.75666 [cm] . 		 Interaction Length: 	16.9589 [cm] . ```. - Geant4 units:. ```. $> root.exe material_test.C\(\""G4\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=0.271712 index=3. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	17.5666 [mm] . 		 Interaction Length: 	169.589 [mm] . ```. PDG (https://pdg.lbl.gov/2020/AtomicNuclearProperties/HTML/iron_Fe.html):. ```. Specific gravity 	 7.874 	g cm-3. Nuclear interaction length 	132.1 	g cm-2 	16.77 	cm. Radiation length 	 13.84 	g cm-2 	1.757 	cm. ```. ## Checklist:. - [X ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11060
https://github.com/root-project/root/pull/11060:1405,testability,test,tested,1405,"Fix computation of the radiation length and nuclear interaction lengt…; …h when ROOT uses G4 units. # This Pull request:. The PR fixes the computation of the radiation length and nuclear interaction length. which are computed wrongly when ROOT uses in G4 units. ## Changes or fixes:. All in TGeoMaterial.cpp. The fix is based on an initial pull request from Ivana:. https://github.com/root-project/root/pull/9401 . which did miss the necessary changes for mixtures. Output from constructing Iron from:. ```. 99.5 % Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]. 0.5 % Element: C Z=6 N=12.000000 A=12.010700 [g/mole]. ```. - ROOT units:. ```. $> root.exe material_test.C\(\""ROOT\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=0.0271712 index=0. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	1.75666 [cm] . 		 Interaction Length: 	16.9589 [cm] . ```. - Geant4 units:. ```. $> root.exe material_test.C\(\""G4\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=0.271712 index=3. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	17.5666 [mm] . 		 Interaction Length: 	169.589 [mm] . ```. PDG (https://pdg.lbl.gov/2020/AtomicNuclearProperties/HTML/iron_Fe.html):. ```. Specific gravity 	 7.874 	g cm-3. Nuclear interaction length 	132.1 	g cm-2 	16.77 	cm. Radiation length 	 13.84 	g cm-2 	1.757 	cm. ```. ## Checklist:. - [X ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11060
https://github.com/root-project/root/pull/11060:52,usability,interact,interaction,52,"Fix computation of the radiation length and nuclear interaction lengt…; …h when ROOT uses G4 units. # This Pull request:. The PR fixes the computation of the radiation length and nuclear interaction length. which are computed wrongly when ROOT uses in G4 units. ## Changes or fixes:. All in TGeoMaterial.cpp. The fix is based on an initial pull request from Ivana:. https://github.com/root-project/root/pull/9401 . which did miss the necessary changes for mixtures. Output from constructing Iron from:. ```. 99.5 % Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]. 0.5 % Element: C Z=6 N=12.000000 A=12.010700 [g/mole]. ```. - ROOT units:. ```. $> root.exe material_test.C\(\""ROOT\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=0.0271712 index=0. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	1.75666 [cm] . 		 Interaction Length: 	16.9589 [cm] . ```. - Geant4 units:. ```. $> root.exe material_test.C\(\""G4\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=0.271712 index=3. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	17.5666 [mm] . 		 Interaction Length: 	169.589 [mm] . ```. PDG (https://pdg.lbl.gov/2020/AtomicNuclearProperties/HTML/iron_Fe.html):. ```. Specific gravity 	 7.874 	g cm-3. Nuclear interaction length 	132.1 	g cm-2 	16.77 	cm. Radiation length 	 13.84 	g cm-2 	1.757 	cm. ```. ## Checklist:. - [X ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11060
https://github.com/root-project/root/pull/11060:187,usability,interact,interaction,187,"Fix computation of the radiation length and nuclear interaction lengt…; …h when ROOT uses G4 units. # This Pull request:. The PR fixes the computation of the radiation length and nuclear interaction length. which are computed wrongly when ROOT uses in G4 units. ## Changes or fixes:. All in TGeoMaterial.cpp. The fix is based on an initial pull request from Ivana:. https://github.com/root-project/root/pull/9401 . which did miss the necessary changes for mixtures. Output from constructing Iron from:. ```. 99.5 % Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]. 0.5 % Element: C Z=6 N=12.000000 A=12.010700 [g/mole]. ```. - ROOT units:. ```. $> root.exe material_test.C\(\""ROOT\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=0.0271712 index=0. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	1.75666 [cm] . 		 Interaction Length: 	16.9589 [cm] . ```. - Geant4 units:. ```. $> root.exe material_test.C\(\""G4\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=0.271712 index=3. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	17.5666 [mm] . 		 Interaction Length: 	169.589 [mm] . ```. PDG (https://pdg.lbl.gov/2020/AtomicNuclearProperties/HTML/iron_Fe.html):. ```. Specific gravity 	 7.874 	g cm-3. Nuclear interaction length 	132.1 	g cm-2 	16.77 	cm. Radiation length 	 13.84 	g cm-2 	1.757 	cm. ```. ## Checklist:. - [X ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11060
https://github.com/root-project/root/pull/11060:855,usability,Interact,Interaction,855,"Fix computation of the radiation length and nuclear interaction lengt…; …h when ROOT uses G4 units. # This Pull request:. The PR fixes the computation of the radiation length and nuclear interaction length. which are computed wrongly when ROOT uses in G4 units. ## Changes or fixes:. All in TGeoMaterial.cpp. The fix is based on an initial pull request from Ivana:. https://github.com/root-project/root/pull/9401 . which did miss the necessary changes for mixtures. Output from constructing Iron from:. ```. 99.5 % Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]. 0.5 % Element: C Z=6 N=12.000000 A=12.010700 [g/mole]. ```. - ROOT units:. ```. $> root.exe material_test.C\(\""ROOT\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=0.0271712 index=0. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	1.75666 [cm] . 		 Interaction Length: 	16.9589 [cm] . ```. - Geant4 units:. ```. $> root.exe material_test.C\(\""G4\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=0.271712 index=3. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	17.5666 [mm] . 		 Interaction Length: 	169.589 [mm] . ```. PDG (https://pdg.lbl.gov/2020/AtomicNuclearProperties/HTML/iron_Fe.html):. ```. Specific gravity 	 7.874 	g cm-3. Nuclear interaction length 	132.1 	g cm-2 	16.77 	cm. Radiation length 	 13.84 	g cm-2 	1.757 	cm. ```. ## Checklist:. - [X ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11060
https://github.com/root-project/root/pull/11060:1124,usability,Interact,Interaction,1124,"Fix computation of the radiation length and nuclear interaction lengt…; …h when ROOT uses G4 units. # This Pull request:. The PR fixes the computation of the radiation length and nuclear interaction length. which are computed wrongly when ROOT uses in G4 units. ## Changes or fixes:. All in TGeoMaterial.cpp. The fix is based on an initial pull request from Ivana:. https://github.com/root-project/root/pull/9401 . which did miss the necessary changes for mixtures. Output from constructing Iron from:. ```. 99.5 % Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]. 0.5 % Element: C Z=6 N=12.000000 A=12.010700 [g/mole]. ```. - ROOT units:. ```. $> root.exe material_test.C\(\""ROOT\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=0.0271712 index=0. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	1.75666 [cm] . 		 Interaction Length: 	16.9589 [cm] . ```. - Geant4 units:. ```. $> root.exe material_test.C\(\""G4\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=0.271712 index=3. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	17.5666 [mm] . 		 Interaction Length: 	169.589 [mm] . ```. PDG (https://pdg.lbl.gov/2020/AtomicNuclearProperties/HTML/iron_Fe.html):. ```. Specific gravity 	 7.874 	g cm-3. Nuclear interaction length 	132.1 	g cm-2 	16.77 	cm. Radiation length 	 13.84 	g cm-2 	1.757 	cm. ```. ## Checklist:. - [X ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11060
https://github.com/root-project/root/pull/11060:1287,usability,interact,interaction,1287,"Fix computation of the radiation length and nuclear interaction lengt…; …h when ROOT uses G4 units. # This Pull request:. The PR fixes the computation of the radiation length and nuclear interaction length. which are computed wrongly when ROOT uses in G4 units. ## Changes or fixes:. All in TGeoMaterial.cpp. The fix is based on an initial pull request from Ivana:. https://github.com/root-project/root/pull/9401 . which did miss the necessary changes for mixtures. Output from constructing Iron from:. ```. 99.5 % Element: FE Z=26 N=56.000000 A=55.845000 [g/mole]. 0.5 % Element: C Z=6 N=12.000000 A=12.010700 [g/mole]. ```. - ROOT units:. ```. $> root.exe material_test.C\(\""ROOT\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=1.75666 intlen=0.0271712 index=0. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	1.75666 [cm] . 		 Interaction Length: 	16.9589 [cm] . ```. - Geant4 units:. ```. $> root.exe material_test.C\(\""G4\""\). Material Iron A=55.845 Z=26 rho=7.874 radlen=17.5666 intlen=0.271712 index=3. TGeoMaterial Iron. 		 Density: 		7.874 [g/cm^3]. 		 Radiation Length: 	17.5666 [mm] . 		 Interaction Length: 	169.589 [mm] . ```. PDG (https://pdg.lbl.gov/2020/AtomicNuclearProperties/HTML/iron_Fe.html):. ```. Specific gravity 	 7.874 	g cm-3. Nuclear interaction length 	132.1 	g cm-2 	16.77 	cm. Radiation length 	 13.84 	g cm-2 	1.757 	cm. ```. ## Checklist:. - [X ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11060
https://github.com/root-project/root/issues/11061:1403,availability,state,statement,1403,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1451,availability,Operat,Operating,1451,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1526,availability,down,download,1526,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:586,deployability,fail,fails,586,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:618,deployability,build,build,618,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1139,deployability,build,build,1139,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1439,deployability,version,version,1439,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1508,deployability,instal,install,1508,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1568,deployability,Fail,Fails,1568,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1750,deployability,fail,fails,1750,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1403,integrability,state,statement,1403,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1439,integrability,version,version,1439,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1439,modifiability,version,version,1439,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1320,performance,content,content,1320,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:586,reliability,fail,fails,586,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1568,reliability,Fail,Fails,1568,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1750,reliability,fail,fails,1750,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1093,safety,input,input,1093,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1285,safety,test,test,1285,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1724,safety,compl,complicated,1724,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1724,security,compl,complicated,1724,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1285,testability,test,test,1285,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1628,testability,context,context,1628,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1657,testability,context,context,1657,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:656,usability,clear,clear,656,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:704,usability,behavi,behavior,704,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:802,usability,behavi,behavior,802,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:820,usability,clear,clear,820,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:948,usability,behavi,behavior,948,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/issues/11061:1093,usability,input,input,1093,"[RF] Segfault for RooMomentMorph for ROOT>6.24; - [ ] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . I am using the example from https://gist.github.com/cranmer/46fff8d22015e5a26619 . it was OK for ROOT 6.24 but fails for e.g. dev3 LCG nightly build . ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. There is a segfault in segfault for RooMomentMorph for ROOT>6.24 . ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. no segfault . ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. at lxplus: . ```. source /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/setup.sh. python test.py . ```. where `tst.py` is a content of https://gist.github.com/cranmer/46fff8d22015e5a26619 with a fixed print statement. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. 1. Fails for ROOT > 6.24 . 2. lxplus . 3. LCG . ### Additional context. <!--. Add any other context about the problem here. -->. actuallt my examples are more complicated, but since it fails even for the example from the expert, I use his example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11061
https://github.com/root-project/root/pull/11063:233,availability,error,error,233,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:362,availability,error,error,362,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:513,availability,Error,Error,513,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:558,availability,down,downside,558,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:665,availability,error,errors,665,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:937,availability,error,error-distrdf-release,937,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:1863,availability,Error,Error,1863,"ld like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: ./test.o. terminate called after throwing an instance of 'std::invalid_argument'. what(): Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. Aborted (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:856,deployability,modul,module,856,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:951,deployability,releas,release,951,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:645,energy efficiency,current,current,645,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:2302,energy efficiency,core,core,2302,"ld like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: ./test.o. terminate called after throwing an instance of 'std::invalid_argument'. what(): Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. Aborted (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:79,integrability,pub,public,79,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:162,integrability,protocol,protocols,162,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:368,integrability,messag,message,368,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:162,interoperability,protocol,protocols,162,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:368,interoperability,messag,message,368,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:1131,interoperability,format,format,1131,"must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: ./test.o. terminate called after throwing an instance of 'std",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:856,modifiability,modul,module,856,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:233,performance,error,error,233,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:362,performance,error,error,362,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:513,performance,Error,Error,513,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:665,performance,error,errors,665,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:937,performance,error,error-distrdf-release,937,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:1863,performance,Error,Error,1863,"ld like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: ./test.o. terminate called after throwing an instance of 'std::invalid_argument'. what(): Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. Aborted (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:451,reliability,pra,practice,451,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:586,reliability,doe,doesn,586,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:16,safety,except,exception,16,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:233,safety,error,error,233,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:362,safety,error,error,362,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:399,safety,except,exception,399,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:513,safety,Error,Error,513,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:665,safety,error,errors,665,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:856,safety,modul,module,856,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:937,safety,error,error-distrdf-release,937,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:1863,safety,Error,Error,1863,"ld like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: ./test.o. terminate called after throwing an instance of 'std::invalid_argument'. what(): Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. Aborted (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:2075,safety,test,test,2075,"ld like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: ./test.o. terminate called after throwing an instance of 'std::invalid_argument'. what(): Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. Aborted (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:1455,security,Team,Team,1455,"ld like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: ./test.o. terminate called after throwing an instance of 'std::invalid_argument'. what(): Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. Aborted (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:792,testability,Trace,Traceback,792,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:2075,testability,test,test,2075,"ld like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: ./test.o. terminate called after throwing an instance of 'std::invalid_argument'. what(): Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. Aborted (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:214,usability,user,users,214,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:233,usability,error,error,233,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:362,usability,error,error,362,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:513,usability,Error,Error,513,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:601,usability,stop,stop,601,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:653,usability,statu,status,653,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:665,usability,error,errors,665,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:937,usability,error,error-distrdf-release,937,"[skip-ci] Raise exception in TFile constructor when remote path is passed; The public TFile constructor cannot be used for files that must be read through remote protocols. This is a common source of confusion for users. I split the error in two commits, one for the C++ constructor and one for its pythonization. I would like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:1665,usability,help,help,1665,"ld like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: ./test.o. terminate called after throwing an instance of 'std::invalid_argument'. what(): Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. Aborted (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11063:1863,usability,Error,Error,1863,"ld like to discuss:. 1. The wording of the error message. 2. The usage of `std::exception` in the C++ side. This should be a better practice in general, but the rest of TFile uses the `TObject::Error` method for this kind of problems. The downside of that is that it doesn't really stop the execution of the program. With the current status, the errors would look like this. ```python. >>> import ROOT. >>> f = ROOT.TFile(""https://root.cern/files/tutorials/hsimple.root""). Traceback (most recent call last):. File ""<stdin>"", line 1, in <module>. File ""/home/vpadulan/programs/rootproject/rootinstall/tfile-constructor-error-distrdf-release/lib/ROOT/_pythonization/_tfile.py"", line 88, in _TFileConstructor. raise ValueError(""Cannot handle path to remote file '{}' in TFile constructor. Use TFile::Open instead."".format(args[0])). ValueError: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 27 2022, 19:14:18 |. | From heads/master@v6-25-02-1893-ge1d4a59786 |. | With c++ (GCC) 12.1.1 20220507 (Red Hat 12.1.1-1) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] TFile f{""https://root.cern/files/tutorials/hsimple.root""};. Error in <TRint::HandleTermInput()>: std::invalid_argument caught: Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. ```. ```. $: ./test.o. terminate called after throwing an instance of 'std::invalid_argument'. what(): Cannot handle path to remote file 'https://root.cern/files/tutorials/hsimple.root' in TFile constructor. Use TFile::Open instead. Aborted (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11063
https://github.com/root-project/root/pull/11064:491,reliability,Doe,Doesn,491,"[RF] Fix usage of uninitialized iterators in RooMomentMorph; In commit https://github.com/root-project/root/commit/0d1f0bbde0fda028f01b116f8e5506bc3b1a11bd, some of the legacy iterator usage in. RooMomentMorph was repaced, but not all of it. When the code branches of. the remaining usage is hit now, there will be a crash because the. iterators are uninitialized. This commit fixes that problem by not using. the iterators anymore. Closes https://github.com/root-project/root/issues/11061. Doesn't need any backport, because the problem only got introduced in. this development cycle. Since this PR already touched the RooMomentMorph class, it also includes a commit with some code modernization of it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11064
https://github.com/root-project/root/pull/11064:433,usability,Close,Closes,433,"[RF] Fix usage of uninitialized iterators in RooMomentMorph; In commit https://github.com/root-project/root/commit/0d1f0bbde0fda028f01b116f8e5506bc3b1a11bd, some of the legacy iterator usage in. RooMomentMorph was repaced, but not all of it. When the code branches of. the remaining usage is hit now, there will be a crash because the. iterators are uninitialized. This commit fixes that problem by not using. the iterators anymore. Closes https://github.com/root-project/root/issues/11061. Doesn't need any backport, because the problem only got introduced in. this development cycle. Since this PR already touched the RooMomentMorph class, it also includes a commit with some code modernization of it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11064
https://github.com/root-project/root/pull/11065:37,availability,operat,operator,37,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:130,availability,operat,operator,130,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:247,availability,operat,operator,247,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:337,availability,operat,operator,337,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:363,availability,operat,operator,363,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:410,availability,operat,operator,410,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:604,availability,operat,operator,604,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:853,availability,operat,operator,853,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:323,deployability,integr,integrate,323,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:323,integrability,integr,integrate,323,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:198,interoperability,standard,standards,198,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:323,interoperability,integr,integrate,323,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:294,modifiability,scenario,scenarios,294,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:323,modifiability,integr,integrate,323,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:323,reliability,integr,integrate,323,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:459,safety,input,input,459,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:826,safety,Test,Tests,826,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:323,security,integr,integrate,323,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:323,testability,integr,integrate,323,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:826,testability,Test,Tests,826,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:18,usability,support,support,18,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:30,usability,Custom,Custom,30,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:69,usability,support,support,69,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:123,usability,custom,custom,123,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:308,usability,user,user,308,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:356,usability,custom,custom,356,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:403,usability,custom,custom,403,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:436,usability,user,user,436,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:459,usability,input,input,459,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11065:597,usability,custom,custom,597,"[TMVA][SOFIE] Add support for Custom operator in SOFIE; This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:. - [x] `ROperator_Custom` class. - [x] Including usage in generated code. - [x] Tests for ROperator_Custom operator. - [ ] Tutorials explaining the usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11065
https://github.com/root-project/root/pull/11066:92,deployability,updat,updates,92,"[core][skip-ci] Clarify documentation of `TClass::CopyCollectionProxy()`; This pull request updates the description of `TClass:CopyCollectionProxy()`, which was (sort of) misleading. Probably the name of the member function is not descriptive either, but that's a different topic. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11066
https://github.com/root-project/root/pull/11066:302,deployability,updat,updated,302,"[core][skip-ci] Clarify documentation of `TClass::CopyCollectionProxy()`; This pull request updates the description of `TClass:CopyCollectionProxy()`, which was (sort of) misleading. Probably the name of the member function is not descriptive either, but that's a different topic. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11066
https://github.com/root-project/root/pull/11066:1,energy efficiency,core,core,1,"[core][skip-ci] Clarify documentation of `TClass::CopyCollectionProxy()`; This pull request updates the description of `TClass:CopyCollectionProxy()`, which was (sort of) misleading. Probably the name of the member function is not descriptive either, but that's a different topic. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11066
https://github.com/root-project/root/pull/11066:274,integrability,topic,topic,274,"[core][skip-ci] Clarify documentation of `TClass::CopyCollectionProxy()`; This pull request updates the description of `TClass:CopyCollectionProxy()`, which was (sort of) misleading. Probably the name of the member function is not descriptive either, but that's a different topic. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11066
https://github.com/root-project/root/pull/11066:92,safety,updat,updates,92,"[core][skip-ci] Clarify documentation of `TClass::CopyCollectionProxy()`; This pull request updates the description of `TClass:CopyCollectionProxy()`, which was (sort of) misleading. Probably the name of the member function is not descriptive either, but that's a different topic. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11066
https://github.com/root-project/root/pull/11066:302,safety,updat,updated,302,"[core][skip-ci] Clarify documentation of `TClass::CopyCollectionProxy()`; This pull request updates the description of `TClass:CopyCollectionProxy()`, which was (sort of) misleading. Probably the name of the member function is not descriptive either, but that's a different topic. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11066
https://github.com/root-project/root/pull/11066:92,security,updat,updates,92,"[core][skip-ci] Clarify documentation of `TClass::CopyCollectionProxy()`; This pull request updates the description of `TClass:CopyCollectionProxy()`, which was (sort of) misleading. Probably the name of the member function is not descriptive either, but that's a different topic. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11066
https://github.com/root-project/root/pull/11066:302,security,updat,updated,302,"[core][skip-ci] Clarify documentation of `TClass::CopyCollectionProxy()`; This pull request updates the description of `TClass:CopyCollectionProxy()`, which was (sort of) misleading. Probably the name of the member function is not descriptive either, but that's a different topic. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11066
https://github.com/root-project/root/pull/11066:24,usability,document,documentation,24,"[core][skip-ci] Clarify documentation of `TClass::CopyCollectionProxy()`; This pull request updates the description of `TClass:CopyCollectionProxy()`, which was (sort of) misleading. Probably the name of the member function is not descriptive either, but that's a different topic. ## Checklist:. - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11066
https://github.com/root-project/root/issues/11067:149,deployability,integr,integration,149,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:161,deployability,configurat,configuration,161,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:221,deployability,integr,integral,221,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:390,deployability,integr,integral,390,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:606,deployability,configurat,configuration,606,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:822,deployability,Scale,Scale,822,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:1121,deployability,integr,integral,1121,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:1167,deployability,integr,integral,1167,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:822,energy efficiency,Scale,Scale,822,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:149,integrability,integr,integration,149,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:161,integrability,configur,configuration,161,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:221,integrability,integr,integral,221,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:390,integrability,integr,integral,390,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:606,integrability,configur,configuration,606,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:1121,integrability,integr,integral,1121,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:1167,integrability,integr,integral,1167,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:149,interoperability,integr,integration,149,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:221,interoperability,integr,integral,221,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:390,interoperability,integr,integral,390,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:774,interoperability,distribut,distribution,774,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:848,interoperability,distribut,distribution,848,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:1121,interoperability,integr,integral,1121,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:1167,interoperability,integr,integral,1167,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:149,modifiability,integr,integration,149,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:161,modifiability,configur,configuration,161,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:221,modifiability,integr,integral,221,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:390,modifiability,integr,integral,390,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:606,modifiability,configur,configuration,606,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:754,modifiability,paramet,parameter,754,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:822,modifiability,Scal,Scale,822,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:828,modifiability,paramet,parameter,828,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:1121,modifiability,integr,integral,1121,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:1167,modifiability,integr,integral,1167,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:822,performance,Scale,Scale,822,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:29,reliability,doe,does,29,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:149,reliability,integr,integration,149,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:221,reliability,integr,integral,221,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:255,reliability,doe,does,255,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:390,reliability,integr,integral,390,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:1121,reliability,integr,integral,1121,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:1167,reliability,integr,integral,1167,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:353,safety,except,except,353,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:149,security,integr,integration,149,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:161,security,configur,configuration,161,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:221,security,integr,integral,221,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:390,security,integr,integral,390,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:606,security,configur,configuration,606,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:1121,security,integr,integral,1121,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:1167,security,integr,integral,1167,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:149,testability,integr,integration,149,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:221,testability,integr,integral,221,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:390,testability,integr,integral,390,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:1121,testability,integr,integral,1121,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:1167,testability,integr,integral,1167,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/issues/11067:559,usability,behavi,behavior,559,"[RF] RooImproperIntegrator1D does not propagate RooNumIntConfig to RooIntegrator1D; ### Describe the bug. It is not possible to change the numerical integration configuration of RooIntegrator1D when computing an improper integral. RooImproperIntegrator1D does not forward RooNumIntConfig to RooIntegrator1D (which leads to default settings being used), except in the case of a non-improper integral :. https://github.com/root-project/root/blob/7694b13fc812bf8b533196a114ccf9930754b6ed/roofit/roofitcore/src/RooImproperIntegrator1D.cxx#L166-L178. ### Expected behavior. RooImproperIntegrator1D forwards the configuration to RooIntegrator1D in all cases. ### To Reproduce. ```cpp. RooRealVar x(""x"", ""x"", 0., -1e31, 1e8);. RooRealVar mean(""mean"", ""Location parameter of Landau distribution"", 5.);. RooRealVar sigma(""sigma"", ""Scale parameter of Landau distribution"", 5.);. RooLandau landau(""landau"", ""landau"", x, mean, sigma);. RooNumIntConfig intConfig(*RooAbsReal::defaultIntegratorConfig());. intConfig.getConfigSection(""RooIntegrator1D"").setRealValue(""maxSteps"", 30);. landau.setIntegratorConfig(intConfig);. RooAbsReal* integral = landau.createIntegral(x);. cout << integral->getVal() << endl;. ```. Produces : `... did not converge after 20 steps` instead of 30 steps. Changing `-1e31` to `-1e-29` then produces the correct result (30 steps). ### Setup. ROOT v6.26/02.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11067
https://github.com/root-project/root/pull/11068:211,deployability,integr,integral,211,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:791,deployability,updat,updated,791,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:703,energy efficiency,optim,optimal,703,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:5,integrability,compon,component-based,5,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:175,integrability,event,event,175,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:211,integrability,integr,integral,211,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:221,integrability,event,event,221,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:471,integrability,event,events,471,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:596,integrability,compon,components,596,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:5,interoperability,compon,component-based,5,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:211,interoperability,integr,integral,211,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:596,interoperability,compon,components,596,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:5,modifiability,compon,component-based,5,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:211,modifiability,integr,integral,211,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:265,modifiability,exten,extended,265,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:596,modifiability,compon,components,596,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:342,performance,time,times,342,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:454,performance,parallel,parallelize,454,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:502,performance,parallel,parallelization,502,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:579,performance,parallel,parallelize,579,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:649,performance,parallel,parallelize,649,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:211,reliability,integr,integral,211,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:761,safety,test,tested,761,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:791,safety,updat,updated,791,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:211,security,integr,integral,211,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:791,security,updat,updated,791,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:211,testability,integr,integral,211,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:761,testability,test,tested,761,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11068:685,usability,user,user,685,"[RF] component-based LikelihoodJob mode; # This Pull request:. ## Changes or fixes:. **Commit 1 (2932c2af9ce19d346807a39d990d77efd1169e09): bug fix.** When using a fractional event range smaller than an actual (integral) event, rounding to integers would cause the extended term in unbinned likelihoods in `RooUnbinnedL` to be added multiple times. **Commit 2 (18cb82c9ef0aed0b30f08b62b3161aa3a2bc3a29): new `LikelihoodJob` mode.** `LikelihoodJob` would parallelize over events, just like the old bulk parallelization mode of `RooNLLVar` (through `RooRealMPFE`). Now it can also parallelize over components and the two modes can be mixed as well to parallelize over both, allowing the user to define an optimal splitting for their usecase. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11068
https://github.com/root-project/root/pull/11069:201,deployability,updat,updated,201,[TMVA] Pythonizations for TMVA; # This Pull request:. - TMVA Pythonizations. - Translations of TMVA tutorial files into Python. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11069
https://github.com/root-project/root/pull/11069:79,integrability,Translat,Translations,79,[TMVA] Pythonizations for TMVA; # This Pull request:. - TMVA Pythonizations. - Translations of TMVA tutorial files into Python. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11069
https://github.com/root-project/root/pull/11069:79,interoperability,Translat,Translations,79,[TMVA] Pythonizations for TMVA; # This Pull request:. - TMVA Pythonizations. - Translations of TMVA tutorial files into Python. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11069
https://github.com/root-project/root/pull/11069:171,safety,test,tested,171,[TMVA] Pythonizations for TMVA; # This Pull request:. - TMVA Pythonizations. - Translations of TMVA tutorial files into Python. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11069
https://github.com/root-project/root/pull/11069:201,safety,updat,updated,201,[TMVA] Pythonizations for TMVA; # This Pull request:. - TMVA Pythonizations. - Translations of TMVA tutorial files into Python. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11069
https://github.com/root-project/root/pull/11069:201,security,updat,updated,201,[TMVA] Pythonizations for TMVA; # This Pull request:. - TMVA Pythonizations. - Translations of TMVA tutorial files into Python. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11069
https://github.com/root-project/root/pull/11069:171,testability,test,tested,171,[TMVA] Pythonizations for TMVA; # This Pull request:. - TMVA Pythonizations. - Translations of TMVA tutorial files into Python. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11069
https://github.com/root-project/root/pull/11070:147,interoperability,format,format-of-numbers-in-the-underflow-overflow-table-in-,147,Overflows and underflows are floating points; The overflow and underflows were plotted as integers. As pointed [here](https://root-forum.cern.ch/t/format-of-numbers-in-the-underflow-overflow-table-in-2d-histograms/50967) the output might be incorrect.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11070
https://github.com/root-project/root/issues/11071:19,availability,error,error,19,"there were no such error in first ; ```. 6 0x00007fc41ee3de62 in Fatima::ReadSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSFatima.so. #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:5080,availability,fault,fault,5080,"0x00007fc428f761ec in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #32 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #33 0x00007fc428f1e0f0 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #34 0x00007fc4283a380a in QCoreApplication::notifyInternal2(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #35 0x00007fc42878c7d3 in QGuiApplicationPrivate::processMouseEvent(QWindowSystemInterfacePrivate::MouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #36 0x00007fc42878e10b in QGuiApplicationPrivate::processWindowSystemEvent(QWindowSystemInterfacePrivate::WindowSystemEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #37 0x00007fc42876835b in QWindowSystemInterface::sendWindowSystemEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #38 0x00007fc4121c732e in () at /usr/lib/x86_64-linux-gnu/libQt5XcbQpa.so.5. #39 0x00007fc4269c117d in g_main_context_dispatch () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #40 0x00007fc4269c1400 in () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #41 0x00007fc4269c14a3 in g_main_context_iteration () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #42 0x00007fc4283fb435 in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #43 0x00007fc4283a23ab in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #44 0x00007fc4283aa116 in QCoreApplication::exec() () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #45 0x00007fc42d2d32ad in G4UIQt::SessionStart() () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #46 0x00005623027898e4 in main (). ===========================================================. WARNING - Attempt to delete the physical volume store while geometry closed ! Segmentation fault (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:515,deployability,instal,install,515,"there were no such error in first ; ```. 6 0x00007fc41ee3de62 in Fatima::ReadSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSFatima.so. #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:644,deployability,instal,install,644,"there were no such error in first ; ```. 6 0x00007fc41ee3de62 in Fatima::ReadSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSFatima.so. #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:766,deployability,instal,install,766,"there were no such error in first ; ```. 6 0x00007fc41ee3de62 in Fatima::ReadSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSFatima.so. #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:896,deployability,instal,install,896,"there were no such error in first ; ```. 6 0x00007fc41ee3de62 in Fatima::ReadSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSFatima.so. #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:1002,deployability,instal,install,1002,"were no such error in first ; ```. 6 0x00007fc41ee3de62 in Fatima::ReadSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSFatima.so. #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42900b03",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:1125,deployability,instal,install,1125,"Simulation/lib/libNPSFatima.so. #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42900b035 in QAbstractButton::mouseReleaseEvent(QMouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #23 0x00007fc4290",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:1256,deployability,instal,install,1256,"tool/NPSimulation/lib/libNPSCore.so. #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42900b035 in QAbstractButton::mouseReleaseEvent(QMouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #23 0x00007fc4290fe5fe in QToolButton::mouseReleaseEvent(QMouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #24 0x00007fc428f572b6 in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:1405,deployability,instal,install,1405,"libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42900b035 in QAbstractButton::mouseReleaseEvent(QMouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #23 0x00007fc4290fe5fe in QToolButton::mouseReleaseEvent(QMouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #24 0x00007fc428f572b6 in QWidget::event(QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #25 0x00007fc4290fe6a8 in QToolButton::event(QEvent*) () at /usr/lib/x86",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:1529,deployability,instal,install,1529,"vent.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42900b035 in QAbstractButton::mouseReleaseEvent(QMouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #23 0x00007fc4290fe5fe in QToolButton::mouseReleaseEvent(QMouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #24 0x00007fc428f572b6 in QWidget::event(QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #25 0x00007fc4290fe6a8 in QToolButton::event(QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #26 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:4861,deployability,instal,install,4861,"0x00007fc428f761ec in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #32 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #33 0x00007fc428f1e0f0 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #34 0x00007fc4283a380a in QCoreApplication::notifyInternal2(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #35 0x00007fc42878c7d3 in QGuiApplicationPrivate::processMouseEvent(QWindowSystemInterfacePrivate::MouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #36 0x00007fc42878e10b in QGuiApplicationPrivate::processWindowSystemEvent(QWindowSystemInterfacePrivate::WindowSystemEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #37 0x00007fc42876835b in QWindowSystemInterface::sendWindowSystemEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #38 0x00007fc4121c732e in () at /usr/lib/x86_64-linux-gnu/libQt5XcbQpa.so.5. #39 0x00007fc4269c117d in g_main_context_dispatch () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #40 0x00007fc4269c1400 in () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #41 0x00007fc4269c14a3 in g_main_context_iteration () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #42 0x00007fc4283fb435 in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #43 0x00007fc4283a23ab in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #44 0x00007fc4283aa116 in QCoreApplication::exec() () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #45 0x00007fc42d2d32ad in G4UIQt::SessionStart() () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #46 0x00005623027898e4 in main (). ===========================================================. WARNING - Attempt to delete the physical volume store while geometry closed ! Segmentation fault (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:5080,energy efficiency,fault,fault,5080,"0x00007fc428f761ec in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #32 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #33 0x00007fc428f1e0f0 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #34 0x00007fc4283a380a in QCoreApplication::notifyInternal2(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #35 0x00007fc42878c7d3 in QGuiApplicationPrivate::processMouseEvent(QWindowSystemInterfacePrivate::MouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #36 0x00007fc42878e10b in QGuiApplicationPrivate::processWindowSystemEvent(QWindowSystemInterfacePrivate::WindowSystemEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #37 0x00007fc42876835b in QWindowSystemInterface::sendWindowSystemEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #38 0x00007fc4121c732e in () at /usr/lib/x86_64-linux-gnu/libQt5XcbQpa.so.5. #39 0x00007fc4269c117d in g_main_context_dispatch () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #40 0x00007fc4269c1400 in () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #41 0x00007fc4269c14a3 in g_main_context_iteration () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #42 0x00007fc4283fb435 in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #43 0x00007fc4283a23ab in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #44 0x00007fc4283aa116 in QCoreApplication::exec() () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #45 0x00007fc42d2d32ad in G4UIQt::SessionStart() () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #46 0x00005623027898e4 in main (). ===========================================================. WARNING - Attempt to delete the physical volume store while geometry closed ! Segmentation fault (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:5087,energy efficiency,core,core,5087,"0x00007fc428f761ec in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #32 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #33 0x00007fc428f1e0f0 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #34 0x00007fc4283a380a in QCoreApplication::notifyInternal2(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #35 0x00007fc42878c7d3 in QGuiApplicationPrivate::processMouseEvent(QWindowSystemInterfacePrivate::MouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #36 0x00007fc42878e10b in QGuiApplicationPrivate::processWindowSystemEvent(QWindowSystemInterfacePrivate::WindowSystemEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #37 0x00007fc42876835b in QWindowSystemInterface::sendWindowSystemEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #38 0x00007fc4121c732e in () at /usr/lib/x86_64-linux-gnu/libQt5XcbQpa.so.5. #39 0x00007fc4269c117d in g_main_context_dispatch () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #40 0x00007fc4269c1400 in () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #41 0x00007fc4269c14a3 in g_main_context_iteration () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #42 0x00007fc4283fb435 in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #43 0x00007fc4283a23ab in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #44 0x00007fc4283aa116 in QCoreApplication::exec() () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #45 0x00007fc42d2d32ad in G4UIQt::SessionStart() () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #46 0x00005623027898e4 in main (). ===========================================================. WARNING - Attempt to delete the physical volume store while geometry closed ! Segmentation fault (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:322,integrability,Event,EventAction,322,"there were no such error in first ; ```. 6 0x00007fc41ee3de62 in Fatima::ReadSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSFatima.so. #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:2270,integrability,event,event,2270,"interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42900b035 in QAbstractButton::mouseReleaseEvent(QMouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #23 0x00007fc4290fe5fe in QToolButton::mouseReleaseEvent(QMouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #24 0x00007fc428f572b6 in QWidget::event(QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #25 0x00007fc4290fe6a8 in QToolButton::event(QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #26 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #27 0x00007fc428f1e343 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #28 0x00007fc4283a380a in QCoreApplication::notifyInternal2(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #29 0x00007fc428f1d457 in QApplicationPrivate::sendMouseEvent(QWidget*, QMouseEvent*, QWidget*, QWidget*, QWidget**, QPointer<QWidget>&, bool, bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #30 0x00007fc428f7335d in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #31 0x00007fc428f761ec in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #32 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:2376,integrability,event,event,2376,") at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42900b035 in QAbstractButton::mouseReleaseEvent(QMouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #23 0x00007fc4290fe5fe in QToolButton::mouseReleaseEvent(QMouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #24 0x00007fc428f572b6 in QWidget::event(QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #25 0x00007fc4290fe6a8 in QToolButton::event(QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #26 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #27 0x00007fc428f1e343 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #28 0x00007fc4283a380a in QCoreApplication::notifyInternal2(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #29 0x00007fc428f1d457 in QApplicationPrivate::sendMouseEvent(QWidget*, QMouseEvent*, QWidget*, QWidget*, QWidget**, QPointer<QWidget>&, bool, bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #30 0x00007fc428f7335d in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #31 0x00007fc428f761ec in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #32 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #33 0x00007fc428f1e0f0 in QApplication::notify(QObject*, QEvent*) () ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:19,performance,error,error,19,"there were no such error in first ; ```. 6 0x00007fc41ee3de62 in Fatima::ReadSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSFatima.so. #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:5080,performance,fault,fault,5080,"0x00007fc428f761ec in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #32 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #33 0x00007fc428f1e0f0 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #34 0x00007fc4283a380a in QCoreApplication::notifyInternal2(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #35 0x00007fc42878c7d3 in QGuiApplicationPrivate::processMouseEvent(QWindowSystemInterfacePrivate::MouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #36 0x00007fc42878e10b in QGuiApplicationPrivate::processWindowSystemEvent(QWindowSystemInterfacePrivate::WindowSystemEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #37 0x00007fc42876835b in QWindowSystemInterface::sendWindowSystemEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #38 0x00007fc4121c732e in () at /usr/lib/x86_64-linux-gnu/libQt5XcbQpa.so.5. #39 0x00007fc4269c117d in g_main_context_dispatch () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #40 0x00007fc4269c1400 in () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #41 0x00007fc4269c14a3 in g_main_context_iteration () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #42 0x00007fc4283fb435 in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #43 0x00007fc4283a23ab in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #44 0x00007fc4283aa116 in QCoreApplication::exec() () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #45 0x00007fc42d2d32ad in G4UIQt::SessionStart() () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #46 0x00005623027898e4 in main (). ===========================================================. WARNING - Attempt to delete the physical volume store while geometry closed ! Segmentation fault (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:582,reliability,DoE,DoEventLoop,582,"there were no such error in first ; ```. 6 0x00007fc41ee3de62 in Fatima::ReadSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSFatima.so. #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:5080,reliability,fault,fault,5080,"0x00007fc428f761ec in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #32 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #33 0x00007fc428f1e0f0 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #34 0x00007fc4283a380a in QCoreApplication::notifyInternal2(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #35 0x00007fc42878c7d3 in QGuiApplicationPrivate::processMouseEvent(QWindowSystemInterfacePrivate::MouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #36 0x00007fc42878e10b in QGuiApplicationPrivate::processWindowSystemEvent(QWindowSystemInterfacePrivate::WindowSystemEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #37 0x00007fc42876835b in QWindowSystemInterface::sendWindowSystemEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #38 0x00007fc4121c732e in () at /usr/lib/x86_64-linux-gnu/libQt5XcbQpa.so.5. #39 0x00007fc4269c117d in g_main_context_dispatch () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #40 0x00007fc4269c1400 in () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #41 0x00007fc4269c14a3 in g_main_context_iteration () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #42 0x00007fc4283fb435 in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #43 0x00007fc4283a23ab in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #44 0x00007fc4283aa116 in QCoreApplication::exec() () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #45 0x00007fc42d2d32ad in G4UIQt::SessionStart() () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #46 0x00005623027898e4 in main (). ===========================================================. WARNING - Attempt to delete the physical volume store while geometry closed ! Segmentation fault (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:19,safety,error,error,19,"there were no such error in first ; ```. 6 0x00007fc41ee3de62 in Fatima::ReadSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSFatima.so. #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:186,safety,Detect,DetectorConstruction,186,"there were no such error in first ; ```. 6 0x00007fc41ee3de62 in Fatima::ReadSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSFatima.so. #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:5080,safety,fault,fault,5080,"0x00007fc428f761ec in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #32 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #33 0x00007fc428f1e0f0 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #34 0x00007fc4283a380a in QCoreApplication::notifyInternal2(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #35 0x00007fc42878c7d3 in QGuiApplicationPrivate::processMouseEvent(QWindowSystemInterfacePrivate::MouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #36 0x00007fc42878e10b in QGuiApplicationPrivate::processWindowSystemEvent(QWindowSystemInterfacePrivate::WindowSystemEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #37 0x00007fc42876835b in QWindowSystemInterface::sendWindowSystemEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #38 0x00007fc4121c732e in () at /usr/lib/x86_64-linux-gnu/libQt5XcbQpa.so.5. #39 0x00007fc4269c117d in g_main_context_dispatch () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #40 0x00007fc4269c1400 in () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #41 0x00007fc4269c14a3 in g_main_context_iteration () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #42 0x00007fc4283fb435 in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #43 0x00007fc4283a23ab in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #44 0x00007fc4283aa116 in QCoreApplication::exec() () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #45 0x00007fc42d2d32ad in G4UIQt::SessionStart() () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #46 0x00005623027898e4 in main (). ===========================================================. WARNING - Attempt to delete the physical volume store while geometry closed ! Segmentation fault (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:186,security,Detect,DetectorConstruction,186,"there were no such error in first ; ```. 6 0x00007fc41ee3de62 in Fatima::ReadSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSFatima.so. #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:4819,security,Session,SessionStart,4819,"0x00007fc428f761ec in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #32 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #33 0x00007fc428f1e0f0 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #34 0x00007fc4283a380a in QCoreApplication::notifyInternal2(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #35 0x00007fc42878c7d3 in QGuiApplicationPrivate::processMouseEvent(QWindowSystemInterfacePrivate::MouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #36 0x00007fc42878e10b in QGuiApplicationPrivate::processWindowSystemEvent(QWindowSystemInterfacePrivate::WindowSystemEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #37 0x00007fc42876835b in QWindowSystemInterface::sendWindowSystemEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #38 0x00007fc4121c732e in () at /usr/lib/x86_64-linux-gnu/libQt5XcbQpa.so.5. #39 0x00007fc4269c117d in g_main_context_dispatch () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #40 0x00007fc4269c1400 in () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #41 0x00007fc4269c14a3 in g_main_context_iteration () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #42 0x00007fc4283fb435 in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #43 0x00007fc4283a23ab in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #44 0x00007fc4283aa116 in QCoreApplication::exec() () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #45 0x00007fc42d2d32ad in G4UIQt::SessionStart() () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #46 0x00005623027898e4 in main (). ===========================================================. WARNING - Attempt to delete the physical volume store while geometry closed ! Segmentation fault (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:19,usability,error,error,19,"there were no such error in first ; ```. 6 0x00007fc41ee3de62 in Fatima::ReadSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSFatima.so. #7 0x00007fc42d774f3d in DetectorConstruction::ReadAllSensitive(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #8 0x00007fc42d756444 in EventAction::EndOfEventAction(G4Event const*) () at /home/apal/nptool/NPSimulation/lib/libNPSCore.so. #9 0x00007fc42b8aaf23 in G4EventManager::DoProcessing(G4Event*) () at /home/apal/G4/geant4-install/lib/libG4event.so. #10 0x00007fc42d2240f7 in G4RunManager::DoEventLoop(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #11 0x00007fc42d221d22 in G4RunManager::BeamOn(int, char const*, int) () at /home/apal/G4/geant4-install/lib/libG4run.so. #12 0x00007fc42d23fb27 in G4RunMessenger::SetNewValue(G4UIcommand*, G4String) () at /home/apal/G4/geant4-install/lib/libG4run.so. #13 0x00007fc42d14f35f in G4UIcommand::DoIt(G4String) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #14 0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:2028,usability,mous,mouseReleaseEvent,2028,"0x00007fc42d16cc9a in G4UImanager::ApplyCommand(char const*) () at /home/apal/G4/geant4-install/lib/libG4intercoms.so. #15 0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42900b035 in QAbstractButton::mouseReleaseEvent(QMouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #23 0x00007fc4290fe5fe in QToolButton::mouseReleaseEvent(QMouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #24 0x00007fc428f572b6 in QWidget::event(QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #25 0x00007fc4290fe6a8 in QToolButton::event(QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #26 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #27 0x00007fc428f1e343 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #28 0x00007fc4283a380a in QCoreApplication::notifyInternal2(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #29 0x00007fc428f1d457 in QApplicationPrivate::sendMouseEvent(QWidget*, QMouseEvent*, QWidget*, QWidget*, QWidget**, QPointer<QWidget>&, bool, bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #30 0x00007fc42",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:2151,usability,mous,mouseReleaseEvent,2151,"0x00007fc42d2e28bf in G4VBasicShell::ExecuteCommand(G4String const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #16 0x00007fc42d2e7afe in G4VBasicShell::ApplyShellCommand(G4String const&, bool&, bool&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #17 0x00007fc42d2daac4 in G4UIQt::ButtonCallback(QString const&) () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #18 0x00007fc4283cf328 in QMetaObject::activate(QObject*, int, int, void**) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #19 0x00007fc428f0e3e6 in QAction::triggered(bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #20 0x00007fc428f10aa2 in QAction::activate(QAction::ActionEvent) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #21 0x00007fc42900ae10 in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #22 0x00007fc42900b035 in QAbstractButton::mouseReleaseEvent(QMouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #23 0x00007fc4290fe5fe in QToolButton::mouseReleaseEvent(QMouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #24 0x00007fc428f572b6 in QWidget::event(QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #25 0x00007fc4290fe6a8 in QToolButton::event(QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #26 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #27 0x00007fc428f1e343 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #28 0x00007fc4283a380a in QCoreApplication::notifyInternal2(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #29 0x00007fc428f1d457 in QApplicationPrivate::sendMouseEvent(QWidget*, QMouseEvent*, QWidget*, QWidget*, QWidget**, QPointer<QWidget>&, bool, bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #30 0x00007fc428f7335d in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #31 0x00007fc428f761ec in () at /usr/lib/x86_64-linux-gnu/li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:3655,usability,Mous,MouseEvent,3655,"64-linux-gnu/libQt5Widgets.so.5. #28 0x00007fc4283a380a in QCoreApplication::notifyInternal2(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #29 0x00007fc428f1d457 in QApplicationPrivate::sendMouseEvent(QWidget*, QMouseEvent*, QWidget*, QWidget*, QWidget**, QPointer<QWidget>&, bool, bool) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #30 0x00007fc428f7335d in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #31 0x00007fc428f761ec in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #32 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #33 0x00007fc428f1e0f0 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #34 0x00007fc4283a380a in QCoreApplication::notifyInternal2(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #35 0x00007fc42878c7d3 in QGuiApplicationPrivate::processMouseEvent(QWindowSystemInterfacePrivate::MouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #36 0x00007fc42878e10b in QGuiApplicationPrivate::processWindowSystemEvent(QWindowSystemInterfacePrivate::WindowSystemEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #37 0x00007fc42876835b in QWindowSystemInterface::sendWindowSystemEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #38 0x00007fc4121c732e in () at /usr/lib/x86_64-linux-gnu/libQt5XcbQpa.so.5. #39 0x00007fc4269c117d in g_main_context_dispatch () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #40 0x00007fc4269c1400 in () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #41 0x00007fc4269c14a3 in g_main_context_iteration () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #42 0x00007fc4283fb435 in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #43 0x00007fc4283a23ab in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-li",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/issues/11071:5058,usability,close,closed,5058,"0x00007fc428f761ec in () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #32 0x00007fc428f14a66 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #33 0x00007fc428f1e0f0 in QApplication::notify(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Widgets.so.5. #34 0x00007fc4283a380a in QCoreApplication::notifyInternal2(QObject*, QEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #35 0x00007fc42878c7d3 in QGuiApplicationPrivate::processMouseEvent(QWindowSystemInterfacePrivate::MouseEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #36 0x00007fc42878e10b in QGuiApplicationPrivate::processWindowSystemEvent(QWindowSystemInterfacePrivate::WindowSystemEvent*) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #37 0x00007fc42876835b in QWindowSystemInterface::sendWindowSystemEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Gui.so.5. #38 0x00007fc4121c732e in () at /usr/lib/x86_64-linux-gnu/libQt5XcbQpa.so.5. #39 0x00007fc4269c117d in g_main_context_dispatch () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #40 0x00007fc4269c1400 in () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #41 0x00007fc4269c14a3 in g_main_context_iteration () at /usr/lib/x86_64-linux-gnu/libglib-2.0.so.0. #42 0x00007fc4283fb435 in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #43 0x00007fc4283a23ab in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #44 0x00007fc4283aa116 in QCoreApplication::exec() () at /usr/lib/x86_64-linux-gnu/libQt5Core.so.5. #45 0x00007fc42d2d32ad in G4UIQt::SessionStart() () at /home/apal/G4/geant4-install/lib/libG4interfaces.so. #46 0x00005623027898e4 in main (). ===========================================================. WARNING - Attempt to delete the physical volume store while geometry closed ! Segmentation fault (core dumped). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11071
https://github.com/root-project/root/pull/11072:41,modifiability,layer,layer,41,[TMVA][SOFIE] Support for parsing Concat layer in Keras parser; This PR adds support for parsing the Keras concat layer in SOFIE Keras parser.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11072
https://github.com/root-project/root/pull/11072:114,modifiability,layer,layer,114,[TMVA][SOFIE] Support for parsing Concat layer in Keras parser; This PR adds support for parsing the Keras concat layer in SOFIE Keras parser.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11072
https://github.com/root-project/root/pull/11072:14,usability,Support,Support,14,[TMVA][SOFIE] Support for parsing Concat layer in Keras parser; This PR adds support for parsing the Keras concat layer in SOFIE Keras parser.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11072
https://github.com/root-project/root/pull/11072:77,usability,support,support,77,[TMVA][SOFIE] Support for parsing Concat layer in Keras parser; This PR adds support for parsing the Keras concat layer in SOFIE Keras parser.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11072
https://github.com/root-project/root/pull/11073:14,usability,Support,Support,14,"[TMVA][SOFIE] Support for parsing Softmax, LeakyRelu, and Tanh in Keras parser; This PR adds support for parsing activation functions like Softmax, LeakyRelu and Tanh in SOFIE Keras parser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11073
https://github.com/root-project/root/pull/11073:93,usability,support,support,93,"[TMVA][SOFIE] Support for parsing Softmax, LeakyRelu, and Tanh in Keras parser; This PR adds support for parsing activation functions like Softmax, LeakyRelu and Tanh in SOFIE Keras parser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11073
https://github.com/root-project/root/pull/11074:23,deployability,integr,integrator,23,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:100,deployability,integr,integrator,100,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:249,deployability,Configurat,Configuration,249,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:266,deployability,Depend,Depends,266,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:407,deployability,integr,integrator,407,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:418,deployability,configurat,configuration,418,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:486,deployability,configurat,configuration,486,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:579,deployability,integr,integrator,579,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:614,deployability,configurat,configuration,614,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:23,integrability,integr,integrator,23,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:100,integrability,integr,integrator,100,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:249,integrability,Configur,Configuration,249,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:266,integrability,Depend,Depends,266,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:407,integrability,integr,integrator,407,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:418,integrability,configur,configuration,418,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:486,integrability,configur,configuration,486,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:579,integrability,integr,integrator,579,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:614,integrability,configur,configuration,614,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:23,interoperability,integr,integrator,23,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:100,interoperability,integr,integrator,100,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:407,interoperability,integr,integrator,407,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:579,interoperability,integr,integrator,579,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:23,modifiability,integr,integrator,23,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:100,modifiability,integr,integrator,100,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:249,modifiability,Configur,Configuration,249,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:266,modifiability,Depend,Depends,266,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:407,modifiability,integr,integrator,407,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:418,modifiability,configur,configuration,418,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:486,modifiability,configur,configuration,486,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:579,modifiability,integr,integrator,579,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:614,modifiability,configur,configuration,614,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:23,reliability,integr,integrator,23,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:100,reliability,integr,integrator,100,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:350,reliability,doe,does,350,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:407,reliability,integr,integrator,407,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:579,reliability,integr,integrator,579,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:266,safety,Depend,Depends,266,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:23,security,integr,integrator,23,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:100,security,integr,integrator,100,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:249,security,Configur,Configuration,249,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:407,security,integr,integrator,407,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:418,security,configur,configuration,418,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:486,security,configur,configuration,486,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:579,security,integr,integrator,579,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:614,security,configur,configuration,614,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:23,testability,integr,integrator,23,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:100,testability,integr,integrator,100,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:266,testability,Depend,Depends,266,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:407,testability,integr,integrator,407,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:579,testability,integr,integrator,579,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11074:696,usability,Close,Closes,696,"[RF] Correctly forward integrator config in RooImproperIntegrator1D; If you print a default numeric integrator config object, it will tell. you for the RooImproperIntegrator1D:. ```. *** RooImproperIntegrator1D ***. Capabilities: [1-D] [OpenEnded]. Configuration:. (Depends on 'RooIntegrator1D'). ```. However, in almost all of the code branches, it does not use the. `RooIntegrator1D` of the given numeric integrator configuration, but. falls back to the default by not forwarding the configuration to the. created `RooIntegrator1D`. This commit fixes that, copying the correct integrator config to create. a new configuration object with the required summation rule for the. `RooIntegrator1D`. Closes https://github.com/root-project/root/issues/11067.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11074
https://github.com/root-project/root/pull/11075:47,availability,operat,operators,47,"[TMVA][SOFIE] Support for parsing Basic Binary operators in Keras parser; This PR adds support for parsing basic binary operators like Add, Subtract, and Multiply in the SOFIE Keras parser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11075
https://github.com/root-project/root/pull/11075:120,availability,operat,operators,120,"[TMVA][SOFIE] Support for parsing Basic Binary operators in Keras parser; This PR adds support for parsing basic binary operators like Add, Subtract, and Multiply in the SOFIE Keras parser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11075
https://github.com/root-project/root/pull/11075:140,integrability,Sub,Subtract,140,"[TMVA][SOFIE] Support for parsing Basic Binary operators in Keras parser; This PR adds support for parsing basic binary operators like Add, Subtract, and Multiply in the SOFIE Keras parser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11075
https://github.com/root-project/root/pull/11075:14,usability,Support,Support,14,"[TMVA][SOFIE] Support for parsing Basic Binary operators in Keras parser; This PR adds support for parsing basic binary operators like Add, Subtract, and Multiply in the SOFIE Keras parser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11075
https://github.com/root-project/root/pull/11075:87,usability,support,support,87,"[TMVA][SOFIE] Support for parsing Basic Binary operators in Keras parser; This PR adds support for parsing basic binary operators like Add, Subtract, and Multiply in the SOFIE Keras parser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11075
https://github.com/root-project/root/pull/11076:66,deployability,patch,patches,66,"Drop llvm::GlobalValue in DeferredDeclsToEmit; The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`. into a struct that contains a `llvm::GlobalVlaue`, but it seems that this. field is useless and can be dropped. I have tested this patch in Cling and. spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11076
https://github.com/root-project/root/pull/11076:142,deployability,contain,contains,142,"Drop llvm::GlobalValue in DeferredDeclsToEmit; The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`. into a struct that contains a `llvm::GlobalVlaue`, but it seems that this. field is useless and can be dropped. I have tested this patch in Cling and. spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11076
https://github.com/root-project/root/pull/11076:254,deployability,patch,patch,254,"Drop llvm::GlobalValue in DeferredDeclsToEmit; The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`. into a struct that contains a `llvm::GlobalVlaue`, but it seems that this. field is useless and can be dropped. I have tested this patch in Cling and. spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11076
https://github.com/root-project/root/pull/11076:295,deployability,fail,failing,295,"Drop llvm::GlobalValue in DeferredDeclsToEmit; The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`. into a struct that contains a `llvm::GlobalVlaue`, but it seems that this. field is useless and can be dropped. I have tested this patch in Cling and. spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11076
https://github.com/root-project/root/pull/11076:74,integrability,wrap,wraps,74,"Drop llvm::GlobalValue in DeferredDeclsToEmit; The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`. into a struct that contains a `llvm::GlobalVlaue`, but it seems that this. field is useless and can be dropped. I have tested this patch in Cling and. spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11076
https://github.com/root-project/root/pull/11076:295,reliability,fail,failing,295,"Drop llvm::GlobalValue in DeferredDeclsToEmit; The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`. into a struct that contains a `llvm::GlobalVlaue`, but it seems that this. field is useless and can be dropped. I have tested this patch in Cling and. spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11076
https://github.com/root-project/root/pull/11076:66,safety,patch,patches,66,"Drop llvm::GlobalValue in DeferredDeclsToEmit; The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`. into a struct that contains a `llvm::GlobalVlaue`, but it seems that this. field is useless and can be dropped. I have tested this patch in Cling and. spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11076
https://github.com/root-project/root/pull/11076:242,safety,test,tested,242,"Drop llvm::GlobalValue in DeferredDeclsToEmit; The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`. into a struct that contains a `llvm::GlobalVlaue`, but it seems that this. field is useless and can be dropped. I have tested this patch in Cling and. spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11076
https://github.com/root-project/root/pull/11076:254,safety,patch,patch,254,"Drop llvm::GlobalValue in DeferredDeclsToEmit; The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`. into a struct that contains a `llvm::GlobalVlaue`, but it seems that this. field is useless and can be dropped. I have tested this patch in Cling and. spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11076
https://github.com/root-project/root/pull/11076:289,safety,test,tests,289,"Drop llvm::GlobalValue in DeferredDeclsToEmit; The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`. into a struct that contains a `llvm::GlobalVlaue`, but it seems that this. field is useless and can be dropped. I have tested this patch in Cling and. spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11076
https://github.com/root-project/root/pull/11076:66,security,patch,patches,66,"Drop llvm::GlobalValue in DeferredDeclsToEmit; The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`. into a struct that contains a `llvm::GlobalVlaue`, but it seems that this. field is useless and can be dropped. I have tested this patch in Cling and. spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11076
https://github.com/root-project/root/pull/11076:254,security,patch,patch,254,"Drop llvm::GlobalValue in DeferredDeclsToEmit; The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`. into a struct that contains a `llvm::GlobalVlaue`, but it seems that this. field is useless and can be dropped. I have tested this patch in Cling and. spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11076
https://github.com/root-project/root/pull/11076:330,security,Sign,Signed-off-by,330,"Drop llvm::GlobalValue in DeferredDeclsToEmit; The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`. into a struct that contains a `llvm::GlobalVlaue`, but it seems that this. field is useless and can be dropped. I have tested this patch in Cling and. spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11076
https://github.com/root-project/root/pull/11076:242,testability,test,tested,242,"Drop llvm::GlobalValue in DeferredDeclsToEmit; The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`. into a struct that contains a `llvm::GlobalVlaue`, but it seems that this. field is useless and can be dropped. I have tested this patch in Cling and. spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11076
https://github.com/root-project/root/pull/11076:289,testability,test,tests,289,"Drop llvm::GlobalValue in DeferredDeclsToEmit; The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`. into a struct that contains a `llvm::GlobalVlaue`, but it seems that this. field is useless and can be dropped. I have tested this patch in Cling and. spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11076
https://github.com/root-project/root/pull/11077:218,deployability,instal,install,218,"Rename libraries to always have ROOT prefix; # This Pull request:. ## Changes or fixes:. Adds an option to the `ROOT_STANDARD_LIBRARY_PACKAGE` macro to allow renaming libraries with sub-optimal names (e.g. libGui). On install, it will symlink from the legacy name to the new name (e.g. libGui.so -> libROOTGui.so). This is still a draft with a proof of concept. The libraries have not been renamed yet and it is not optional at the moment (requires for Windows and nice to have for distributions). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). - [ ] make it optional. - [ ] prefix all libraries with ROOT. This PR fixes #10985.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11077
https://github.com/root-project/root/pull/11077:549,deployability,updat,updated,549,"Rename libraries to always have ROOT prefix; # This Pull request:. ## Changes or fixes:. Adds an option to the `ROOT_STANDARD_LIBRARY_PACKAGE` macro to allow renaming libraries with sub-optimal names (e.g. libGui). On install, it will symlink from the legacy name to the new name (e.g. libGui.so -> libROOTGui.so). This is still a draft with a proof of concept. The libraries have not been renamed yet and it is not optional at the moment (requires for Windows and nice to have for distributions). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). - [ ] make it optional. - [ ] prefix all libraries with ROOT. This PR fixes #10985.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11077
https://github.com/root-project/root/pull/11077:186,energy efficiency,optim,optimal,186,"Rename libraries to always have ROOT prefix; # This Pull request:. ## Changes or fixes:. Adds an option to the `ROOT_STANDARD_LIBRARY_PACKAGE` macro to allow renaming libraries with sub-optimal names (e.g. libGui). On install, it will symlink from the legacy name to the new name (e.g. libGui.so -> libROOTGui.so). This is still a draft with a proof of concept. The libraries have not been renamed yet and it is not optional at the moment (requires for Windows and nice to have for distributions). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). - [ ] make it optional. - [ ] prefix all libraries with ROOT. This PR fixes #10985.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11077
https://github.com/root-project/root/pull/11077:182,integrability,sub,sub-optimal,182,"Rename libraries to always have ROOT prefix; # This Pull request:. ## Changes or fixes:. Adds an option to the `ROOT_STANDARD_LIBRARY_PACKAGE` macro to allow renaming libraries with sub-optimal names (e.g. libGui). On install, it will symlink from the legacy name to the new name (e.g. libGui.so -> libROOTGui.so). This is still a draft with a proof of concept. The libraries have not been renamed yet and it is not optional at the moment (requires for Windows and nice to have for distributions). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). - [ ] make it optional. - [ ] prefix all libraries with ROOT. This PR fixes #10985.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11077
https://github.com/root-project/root/pull/11077:482,interoperability,distribut,distributions,482,"Rename libraries to always have ROOT prefix; # This Pull request:. ## Changes or fixes:. Adds an option to the `ROOT_STANDARD_LIBRARY_PACKAGE` macro to allow renaming libraries with sub-optimal names (e.g. libGui). On install, it will symlink from the legacy name to the new name (e.g. libGui.so -> libROOTGui.so). This is still a draft with a proof of concept. The libraries have not been renamed yet and it is not optional at the moment (requires for Windows and nice to have for distributions). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). - [ ] make it optional. - [ ] prefix all libraries with ROOT. This PR fixes #10985.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11077
https://github.com/root-project/root/pull/11077:519,safety,test,tested,519,"Rename libraries to always have ROOT prefix; # This Pull request:. ## Changes or fixes:. Adds an option to the `ROOT_STANDARD_LIBRARY_PACKAGE` macro to allow renaming libraries with sub-optimal names (e.g. libGui). On install, it will symlink from the legacy name to the new name (e.g. libGui.so -> libROOTGui.so). This is still a draft with a proof of concept. The libraries have not been renamed yet and it is not optional at the moment (requires for Windows and nice to have for distributions). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). - [ ] make it optional. - [ ] prefix all libraries with ROOT. This PR fixes #10985.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11077
https://github.com/root-project/root/pull/11077:549,safety,updat,updated,549,"Rename libraries to always have ROOT prefix; # This Pull request:. ## Changes or fixes:. Adds an option to the `ROOT_STANDARD_LIBRARY_PACKAGE` macro to allow renaming libraries with sub-optimal names (e.g. libGui). On install, it will symlink from the legacy name to the new name (e.g. libGui.so -> libROOTGui.so). This is still a draft with a proof of concept. The libraries have not been renamed yet and it is not optional at the moment (requires for Windows and nice to have for distributions). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). - [ ] make it optional. - [ ] prefix all libraries with ROOT. This PR fixes #10985.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11077
https://github.com/root-project/root/pull/11077:549,security,updat,updated,549,"Rename libraries to always have ROOT prefix; # This Pull request:. ## Changes or fixes:. Adds an option to the `ROOT_STANDARD_LIBRARY_PACKAGE` macro to allow renaming libraries with sub-optimal names (e.g. libGui). On install, it will symlink from the legacy name to the new name (e.g. libGui.so -> libROOTGui.so). This is still a draft with a proof of concept. The libraries have not been renamed yet and it is not optional at the moment (requires for Windows and nice to have for distributions). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). - [ ] make it optional. - [ ] prefix all libraries with ROOT. This PR fixes #10985.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11077
https://github.com/root-project/root/pull/11077:519,testability,test,tested,519,"Rename libraries to always have ROOT prefix; # This Pull request:. ## Changes or fixes:. Adds an option to the `ROOT_STANDARD_LIBRARY_PACKAGE` macro to allow renaming libraries with sub-optimal names (e.g. libGui). On install, it will symlink from the legacy name to the new name (e.g. libGui.so -> libROOTGui.so). This is still a draft with a proof of concept. The libraries have not been renamed yet and it is not optional at the moment (requires for Windows and nice to have for distributions). ## Checklist:. - [ ] tested changes locally. - [x] updated the docs (if necessary). - [ ] make it optional. - [ ] prefix all libraries with ROOT. This PR fixes #10985.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11077
https://github.com/root-project/root/pull/11078:209,deployability,updat,updated,209,Pythonized RDF Define; Implemented pythonization to RDF Define. Define can now directly accept a python callable. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11078
https://github.com/root-project/root/pull/11078:179,safety,test,tested,179,Pythonized RDF Define; Implemented pythonization to RDF Define. Define can now directly accept a python callable. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11078
https://github.com/root-project/root/pull/11078:209,safety,updat,updated,209,Pythonized RDF Define; Implemented pythonization to RDF Define. Define can now directly accept a python callable. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11078
https://github.com/root-project/root/pull/11078:209,security,updat,updated,209,Pythonized RDF Define; Implemented pythonization to RDF Define. Define can now directly accept a python callable. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11078
https://github.com/root-project/root/pull/11078:179,testability,test,tested,179,Pythonized RDF Define; Implemented pythonization to RDF Define. Define can now directly accept a python callable. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11078
https://github.com/root-project/root/pull/11079:266,availability,operat,operator,266,"[RF] Disable copy assignment for RooAbsArg and derived types; Copy assignment for RooAbsArgs was implemented in an unexpected and. inconsistent way. While one would expect that the copy assignment is. copying the object, it said in the documentation of. `RooAbsArg::operator=` that it will ""assign all boolean and string. properties of the original bject. Transient properties and client-server. links are not assigned."" This contradicted with the implementation,. where the server links were actually copied too. Indeed it is. questionable that adding also the servers of the `other` RooAbsArg makes. sense when the proxies are not changed. There was also a memory leak of the `_ownedComponents`, because. `_ownedComponents` got reset to `nullptr` without deleting the. pointed-to owned collection. Furthermore, in `RooAbsRealLValue`, the assigment operator was. overloaded by a function that only assigns the value of another. `RooAbsReal`. With all these inconsistencies, it was deemed safer to disable copy. assignment of RooAbsArgs from now on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11079
https://github.com/root-project/root/pull/11079:850,availability,operat,operator,850,"[RF] Disable copy assignment for RooAbsArg and derived types; Copy assignment for RooAbsArgs was implemented in an unexpected and. inconsistent way. While one would expect that the copy assignment is. copying the object, it said in the documentation of. `RooAbsArg::operator=` that it will ""assign all boolean and string. properties of the original bject. Transient properties and client-server. links are not assigned."" This contradicted with the implementation,. where the server links were actually copied too. Indeed it is. questionable that adding also the servers of the `other` RooAbsArg makes. sense when the proxies are not changed. There was also a memory leak of the `_ownedComponents`, because. `_ownedComponents` got reset to `nullptr` without deleting the. pointed-to owned collection. Furthermore, in `RooAbsRealLValue`, the assigment operator was. overloaded by a function that only assigns the value of another. `RooAbsReal`. With all these inconsistencies, it was deemed safer to disable copy. assignment of RooAbsArgs from now on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11079
https://github.com/root-project/root/pull/11079:381,interoperability,client-serv,client-server,381,"[RF] Disable copy assignment for RooAbsArg and derived types; Copy assignment for RooAbsArgs was implemented in an unexpected and. inconsistent way. While one would expect that the copy assignment is. copying the object, it said in the documentation of. `RooAbsArg::operator=` that it will ""assign all boolean and string. properties of the original bject. Transient properties and client-server. links are not assigned."" This contradicted with the implementation,. where the server links were actually copied too. Indeed it is. questionable that adding also the servers of the `other` RooAbsArg makes. sense when the proxies are not changed. There was also a memory leak of the `_ownedComponents`, because. `_ownedComponents` got reset to `nullptr` without deleting the. pointed-to owned collection. Furthermore, in `RooAbsRealLValue`, the assigment operator was. overloaded by a function that only assigns the value of another. `RooAbsReal`. With all these inconsistencies, it was deemed safer to disable copy. assignment of RooAbsArgs from now on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11079
https://github.com/root-project/root/pull/11079:617,interoperability,prox,proxies,617,"[RF] Disable copy assignment for RooAbsArg and derived types; Copy assignment for RooAbsArgs was implemented in an unexpected and. inconsistent way. While one would expect that the copy assignment is. copying the object, it said in the documentation of. `RooAbsArg::operator=` that it will ""assign all boolean and string. properties of the original bject. Transient properties and client-server. links are not assigned."" This contradicted with the implementation,. where the server links were actually copied too. Indeed it is. questionable that adding also the servers of the `other` RooAbsArg makes. sense when the proxies are not changed. There was also a memory leak of the `_ownedComponents`, because. `_ownedComponents` got reset to `nullptr` without deleting the. pointed-to owned collection. Furthermore, in `RooAbsRealLValue`, the assigment operator was. overloaded by a function that only assigns the value of another. `RooAbsReal`. With all these inconsistencies, it was deemed safer to disable copy. assignment of RooAbsArgs from now on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11079
https://github.com/root-project/root/pull/11079:659,performance,memor,memory,659,"[RF] Disable copy assignment for RooAbsArg and derived types; Copy assignment for RooAbsArgs was implemented in an unexpected and. inconsistent way. While one would expect that the copy assignment is. copying the object, it said in the documentation of. `RooAbsArg::operator=` that it will ""assign all boolean and string. properties of the original bject. Transient properties and client-server. links are not assigned."" This contradicted with the implementation,. where the server links were actually copied too. Indeed it is. questionable that adding also the servers of the `other` RooAbsArg makes. sense when the proxies are not changed. There was also a memory leak of the `_ownedComponents`, because. `_ownedComponents` got reset to `nullptr` without deleting the. pointed-to owned collection. Furthermore, in `RooAbsRealLValue`, the assigment operator was. overloaded by a function that only assigns the value of another. `RooAbsReal`. With all these inconsistencies, it was deemed safer to disable copy. assignment of RooAbsArgs from now on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11079
https://github.com/root-project/root/pull/11079:989,safety,safe,safer,989,"[RF] Disable copy assignment for RooAbsArg and derived types; Copy assignment for RooAbsArgs was implemented in an unexpected and. inconsistent way. While one would expect that the copy assignment is. copying the object, it said in the documentation of. `RooAbsArg::operator=` that it will ""assign all boolean and string. properties of the original bject. Transient properties and client-server. links are not assigned."" This contradicted with the implementation,. where the server links were actually copied too. Indeed it is. questionable that adding also the servers of the `other` RooAbsArg makes. sense when the proxies are not changed. There was also a memory leak of the `_ownedComponents`, because. `_ownedComponents` got reset to `nullptr` without deleting the. pointed-to owned collection. Furthermore, in `RooAbsRealLValue`, the assigment operator was. overloaded by a function that only assigns the value of another. `RooAbsReal`. With all these inconsistencies, it was deemed safer to disable copy. assignment of RooAbsArgs from now on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11079
https://github.com/root-project/root/pull/11079:236,usability,document,documentation,236,"[RF] Disable copy assignment for RooAbsArg and derived types; Copy assignment for RooAbsArgs was implemented in an unexpected and. inconsistent way. While one would expect that the copy assignment is. copying the object, it said in the documentation of. `RooAbsArg::operator=` that it will ""assign all boolean and string. properties of the original bject. Transient properties and client-server. links are not assigned."" This contradicted with the implementation,. where the server links were actually copied too. Indeed it is. questionable that adding also the servers of the `other` RooAbsArg makes. sense when the proxies are not changed. There was also a memory leak of the `_ownedComponents`, because. `_ownedComponents` got reset to `nullptr` without deleting the. pointed-to owned collection. Furthermore, in `RooAbsRealLValue`, the assigment operator was. overloaded by a function that only assigns the value of another. `RooAbsReal`. With all these inconsistencies, it was deemed safer to disable copy. assignment of RooAbsArgs from now on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11079
https://github.com/root-project/root/pull/11079:659,usability,memor,memory,659,"[RF] Disable copy assignment for RooAbsArg and derived types; Copy assignment for RooAbsArgs was implemented in an unexpected and. inconsistent way. While one would expect that the copy assignment is. copying the object, it said in the documentation of. `RooAbsArg::operator=` that it will ""assign all boolean and string. properties of the original bject. Transient properties and client-server. links are not assigned."" This contradicted with the implementation,. where the server links were actually copied too. Indeed it is. questionable that adding also the servers of the `other` RooAbsArg makes. sense when the proxies are not changed. There was also a memory leak of the `_ownedComponents`, because. `_ownedComponents` got reset to `nullptr` without deleting the. pointed-to owned collection. Furthermore, in `RooAbsRealLValue`, the assigment operator was. overloaded by a function that only assigns the value of another. `RooAbsReal`. With all these inconsistencies, it was deemed safer to disable copy. assignment of RooAbsArgs from now on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11079
https://github.com/root-project/root/issues/11080:312,deployability,version,version,312,"Backport the fix on computation of the radiation and nuclear interaction lengths to v6.24; Would it be possible to backport:. https://github.com/root-project/root/pull/11060 (already merged into [root-project:master]) . (from what I understand a followup PR is also needed). to the v6.24 branch, and retag a new version of ROOT after that is done. . This would use use it as part of a LCG 101 patch release. Many thanks. FYI @andresailer @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11080
https://github.com/root-project/root/issues/11080:393,deployability,patch,patch,393,"Backport the fix on computation of the radiation and nuclear interaction lengths to v6.24; Would it be possible to backport:. https://github.com/root-project/root/pull/11060 (already merged into [root-project:master]) . (from what I understand a followup PR is also needed). to the v6.24 branch, and retag a new version of ROOT after that is done. . This would use use it as part of a LCG 101 patch release. Many thanks. FYI @andresailer @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11080
https://github.com/root-project/root/issues/11080:399,deployability,releas,release,399,"Backport the fix on computation of the radiation and nuclear interaction lengths to v6.24; Would it be possible to backport:. https://github.com/root-project/root/pull/11060 (already merged into [root-project:master]) . (from what I understand a followup PR is also needed). to the v6.24 branch, and retag a new version of ROOT after that is done. . This would use use it as part of a LCG 101 patch release. Many thanks. FYI @andresailer @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11080
https://github.com/root-project/root/issues/11080:312,integrability,version,version,312,"Backport the fix on computation of the radiation and nuclear interaction lengths to v6.24; Would it be possible to backport:. https://github.com/root-project/root/pull/11060 (already merged into [root-project:master]) . (from what I understand a followup PR is also needed). to the v6.24 branch, and retag a new version of ROOT after that is done. . This would use use it as part of a LCG 101 patch release. Many thanks. FYI @andresailer @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11080
https://github.com/root-project/root/issues/11080:312,modifiability,version,version,312,"Backport the fix on computation of the radiation and nuclear interaction lengths to v6.24; Would it be possible to backport:. https://github.com/root-project/root/pull/11060 (already merged into [root-project:master]) . (from what I understand a followup PR is also needed). to the v6.24 branch, and retag a new version of ROOT after that is done. . This would use use it as part of a LCG 101 patch release. Many thanks. FYI @andresailer @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11080
https://github.com/root-project/root/issues/11080:393,safety,patch,patch,393,"Backport the fix on computation of the radiation and nuclear interaction lengths to v6.24; Would it be possible to backport:. https://github.com/root-project/root/pull/11060 (already merged into [root-project:master]) . (from what I understand a followup PR is also needed). to the v6.24 branch, and retag a new version of ROOT after that is done. . This would use use it as part of a LCG 101 patch release. Many thanks. FYI @andresailer @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11080
https://github.com/root-project/root/issues/11080:393,security,patch,patch,393,"Backport the fix on computation of the radiation and nuclear interaction lengths to v6.24; Would it be possible to backport:. https://github.com/root-project/root/pull/11060 (already merged into [root-project:master]) . (from what I understand a followup PR is also needed). to the v6.24 branch, and retag a new version of ROOT after that is done. . This would use use it as part of a LCG 101 patch release. Many thanks. FYI @andresailer @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11080
https://github.com/root-project/root/issues/11080:233,testability,understand,understand,233,"Backport the fix on computation of the radiation and nuclear interaction lengths to v6.24; Would it be possible to backport:. https://github.com/root-project/root/pull/11060 (already merged into [root-project:master]) . (from what I understand a followup PR is also needed). to the v6.24 branch, and retag a new version of ROOT after that is done. . This would use use it as part of a LCG 101 patch release. Many thanks. FYI @andresailer @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11080
https://github.com/root-project/root/issues/11080:61,usability,interact,interaction,61,"Backport the fix on computation of the radiation and nuclear interaction lengths to v6.24; Would it be possible to backport:. https://github.com/root-project/root/pull/11060 (already merged into [root-project:master]) . (from what I understand a followup PR is also needed). to the v6.24 branch, and retag a new version of ROOT after that is done. . This would use use it as part of a LCG 101 patch release. Many thanks. FYI @andresailer @bellenot",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11080
https://github.com/root-project/root/pull/11086:31,availability,Operat,Operator,31,[GSOC][TMVA][SOFIE] Shape ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Shape ONNX Operator with the corresponding unit tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:128,availability,Operat,Operator,128,[GSOC][TMVA][SOFIE] Shape ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Shape ONNX Operator with the corresponding unit tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:223,deployability,updat,updated,223,[GSOC][TMVA][SOFIE] Shape ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Shape ONNX Operator with the corresponding unit tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:80,safety,test,tests,80,[GSOC][TMVA][SOFIE] Shape ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Shape ONNX Operator with the corresponding unit tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:165,safety,test,tests,165,[GSOC][TMVA][SOFIE] Shape ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Shape ONNX Operator with the corresponding unit tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:193,safety,test,tested,193,[GSOC][TMVA][SOFIE] Shape ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Shape ONNX Operator with the corresponding unit tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:223,safety,updat,updated,223,[GSOC][TMVA][SOFIE] Shape ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Shape ONNX Operator with the corresponding unit tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:223,security,updat,updated,223,[GSOC][TMVA][SOFIE] Shape ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Shape ONNX Operator with the corresponding unit tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:75,testability,unit,unit,75,[GSOC][TMVA][SOFIE] Shape ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Shape ONNX Operator with the corresponding unit tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:80,testability,test,tests,80,[GSOC][TMVA][SOFIE] Shape ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Shape ONNX Operator with the corresponding unit tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:160,testability,unit,unit,160,[GSOC][TMVA][SOFIE] Shape ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Shape ONNX Operator with the corresponding unit tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:165,testability,test,tests,165,[GSOC][TMVA][SOFIE] Shape ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Shape ONNX Operator with the corresponding unit tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11086:193,testability,test,tested,193,[GSOC][TMVA][SOFIE] Shape ONNX Operator implemented with the corresponding unit tests; # This Pull request: Adds the Shape ONNX Operator with the corresponding unit tests. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11086
https://github.com/root-project/root/pull/11087:202,energy efficiency,profil,profiles-tutorial-clarification,202,"[DF] Simplify df003_profiles.{C,py}; Explicitly pass column names rather than relying on a default. column list, which is not the focus of the tutorial. See also https://root-forum.cern.ch/t/data-frame-profiles-tutorial-clarification/50988 for motivation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11087
https://github.com/root-project/root/pull/11087:202,performance,profil,profiles-tutorial-clarification,202,"[DF] Simplify df003_profiles.{C,py}; Explicitly pass column names rather than relying on a default. column list, which is not the focus of the tutorial. See also https://root-forum.cern.ch/t/data-frame-profiles-tutorial-clarification/50988 for motivation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11087
https://github.com/root-project/root/pull/11087:5,testability,Simpl,Simplify,5,"[DF] Simplify df003_profiles.{C,py}; Explicitly pass column names rather than relying on a default. column list, which is not the focus of the tutorial. See also https://root-forum.cern.ch/t/data-frame-profiles-tutorial-clarification/50988 for motivation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11087
https://github.com/root-project/root/pull/11087:5,usability,Simpl,Simplify,5,"[DF] Simplify df003_profiles.{C,py}; Explicitly pass column names rather than relying on a default. column list, which is not the focus of the tutorial. See also https://root-forum.cern.ch/t/data-frame-profiles-tutorial-clarification/50988 for motivation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11087
https://github.com/root-project/root/pull/11089:254,deployability,patch,patch,254,"[DF] Remove false sharing from BufferedFillHelper; In a synthetic benchmark that only fills a single histogram for. which no binning was provided (i.e. the case in which. BufferedFillHelper gets used), these are sample runtimes on my. laptop before this patch:. ```. 0 3735. 1 3742. 2 3534. 4 3191. 8 2733. 16 1725. ```. and after:. ```. 0 3552. 1 3876. 2 2466. 4 1696. 8 1202. 16 1038. ```. where over 8 threads hyper-threading kicks in and 0 threads means. no `EnableImplicitMT()` at all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11089
https://github.com/root-project/root/pull/11089:31,integrability,Buffer,BufferedFillHelper,31,"[DF] Remove false sharing from BufferedFillHelper; In a synthetic benchmark that only fills a single histogram for. which no binning was provided (i.e. the case in which. BufferedFillHelper gets used), these are sample runtimes on my. laptop before this patch:. ```. 0 3735. 1 3742. 2 3534. 4 3191. 8 2733. 16 1725. ```. and after:. ```. 0 3552. 1 3876. 2 2466. 4 1696. 8 1202. 16 1038. ```. where over 8 threads hyper-threading kicks in and 0 threads means. no `EnableImplicitMT()` at all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11089
https://github.com/root-project/root/pull/11089:171,integrability,Buffer,BufferedFillHelper,171,"[DF] Remove false sharing from BufferedFillHelper; In a synthetic benchmark that only fills a single histogram for. which no binning was provided (i.e. the case in which. BufferedFillHelper gets used), these are sample runtimes on my. laptop before this patch:. ```. 0 3735. 1 3742. 2 3534. 4 3191. 8 2733. 16 1725. ```. and after:. ```. 0 3552. 1 3876. 2 2466. 4 1696. 8 1202. 16 1038. ```. where over 8 threads hyper-threading kicks in and 0 threads means. no `EnableImplicitMT()` at all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11089
https://github.com/root-project/root/pull/11089:254,safety,patch,patch,254,"[DF] Remove false sharing from BufferedFillHelper; In a synthetic benchmark that only fills a single histogram for. which no binning was provided (i.e. the case in which. BufferedFillHelper gets used), these are sample runtimes on my. laptop before this patch:. ```. 0 3735. 1 3742. 2 3534. 4 3191. 8 2733. 16 1725. ```. and after:. ```. 0 3552. 1 3876. 2 2466. 4 1696. 8 1202. 16 1038. ```. where over 8 threads hyper-threading kicks in and 0 threads means. no `EnableImplicitMT()` at all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11089
https://github.com/root-project/root/pull/11089:254,security,patch,patch,254,"[DF] Remove false sharing from BufferedFillHelper; In a synthetic benchmark that only fills a single histogram for. which no binning was provided (i.e. the case in which. BufferedFillHelper gets used), these are sample runtimes on my. laptop before this patch:. ```. 0 3735. 1 3742. 2 3534. 4 3191. 8 2733. 16 1725. ```. and after:. ```. 0 3552. 1 3876. 2 2466. 4 1696. 8 1202. 16 1038. ```. where over 8 threads hyper-threading kicks in and 0 threads means. no `EnableImplicitMT()` at all.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11089
https://github.com/root-project/root/pull/11090:136,reliability,doe,does,136,"[RF] Speed up `RooAbsRealLValue::setBin` by removing `inRange` check; Replaced `RooAbsVar::setVal` with `RooRealVar::setValFast`, which does . not call `RooAbsRealLValue::inRange`, in `RooAbsRealLValue::setBin`. It is possible to make this change because `setBin` gets passed a bin center, . and thus the bin is already in range by construction. This led to a big . improvement in speed for `setBin`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11090
https://github.com/root-project/root/pull/11092:128,energy efficiency,alloc,allocated,128,"[RF] Fix various memory leaks in RooFit from opened TFile objects; In quite a few places in RooFit, TFile objects were manually allocated. but not deleted afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11092
https://github.com/root-project/root/pull/11092:17,performance,memor,memory,17,"[RF] Fix various memory leaks in RooFit from opened TFile objects; In quite a few places in RooFit, TFile objects were manually allocated. but not deleted afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11092
https://github.com/root-project/root/pull/11092:17,usability,memor,memory,17,"[RF] Fix various memory leaks in RooFit from opened TFile objects; In quite a few places in RooFit, TFile objects were manually allocated. but not deleted afterwards.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11092
https://github.com/root-project/root/pull/11093:331,availability,error,errors,331,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:357,availability,error,errors,357,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:12,deployability,log,logging-related,12,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:78,deployability,version,version,78,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:302,deployability,log,logging,302,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:324,deployability,log,logged,324,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:78,integrability,version,version,78,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:78,modifiability,version,version,78,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:331,performance,error,errors,331,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:357,performance,error,errors,357,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:12,safety,log,logging-related,12,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:302,safety,log,logging,302,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:324,safety,log,logged,324,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:331,safety,error,errors,331,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:341,safety,avoid,avoid,341,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:357,safety,error,errors,357,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:12,security,log,logging-related,12,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:302,security,log,logging,302,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:324,security,log,logged,324,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:12,testability,log,logging-related,12,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:302,testability,log,logging,302,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:324,testability,log,logged,324,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:331,usability,error,errors,331,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11093:357,usability,error,errors,357,"[RF] Remove logging-related pdf members or make them transient; The RooAbsPdf version number is incremented, going with the removal of. some unused data members:. * `_rawValue`. * `_traceCount`. * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it. is only related to logging, counting the logged errors to avoid printing. errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11093
https://github.com/root-project/root/pull/11094:237,deployability,updat,updated,237,[geom] Added test for usage of units for materials (M. Frank).; # This Pull request:. Adds a unit test for testing the use of Geant4 units when creating materials. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:13,safety,test,test,13,[geom] Added test for usage of units for materials (M. Frank).; # This Pull request:. Adds a unit test for testing the use of Geant4 units when creating materials. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:98,safety,test,test,98,[geom] Added test for usage of units for materials (M. Frank).; # This Pull request:. Adds a unit test for testing the use of Geant4 units when creating materials. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:107,safety,test,testing,107,[geom] Added test for usage of units for materials (M. Frank).; # This Pull request:. Adds a unit test for testing the use of Geant4 units when creating materials. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:207,safety,test,tested,207,[geom] Added test for usage of units for materials (M. Frank).; # This Pull request:. Adds a unit test for testing the use of Geant4 units when creating materials. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:237,safety,updat,updated,237,[geom] Added test for usage of units for materials (M. Frank).; # This Pull request:. Adds a unit test for testing the use of Geant4 units when creating materials. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:237,security,updat,updated,237,[geom] Added test for usage of units for materials (M. Frank).; # This Pull request:. Adds a unit test for testing the use of Geant4 units when creating materials. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:13,testability,test,test,13,[geom] Added test for usage of units for materials (M. Frank).; # This Pull request:. Adds a unit test for testing the use of Geant4 units when creating materials. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:31,testability,unit,units,31,[geom] Added test for usage of units for materials (M. Frank).; # This Pull request:. Adds a unit test for testing the use of Geant4 units when creating materials. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:93,testability,unit,unit,93,[geom] Added test for usage of units for materials (M. Frank).; # This Pull request:. Adds a unit test for testing the use of Geant4 units when creating materials. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:98,testability,test,test,98,[geom] Added test for usage of units for materials (M. Frank).; # This Pull request:. Adds a unit test for testing the use of Geant4 units when creating materials. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:107,testability,test,testing,107,[geom] Added test for usage of units for materials (M. Frank).; # This Pull request:. Adds a unit test for testing the use of Geant4 units when creating materials. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:133,testability,unit,units,133,[geom] Added test for usage of units for materials (M. Frank).; # This Pull request:. Adds a unit test for testing the use of Geant4 units when creating materials. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11094:207,testability,test,tested,207,[geom] Added test for usage of units for materials (M. Frank).; # This Pull request:. Adds a unit test for testing the use of Geant4 units when creating materials. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11094
https://github.com/root-project/root/pull/11096:577,deployability,fail,failing,577,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:126,energy efficiency,current,currently,126,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:604,performance,memor,memory-memory,604,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:577,reliability,fail,failing,577,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:326,safety,test,tests,326,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:549,safety,test,tests,549,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:572,safety,test,test,572,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:637,safety,test,test,637,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:268,security,access,accessing,268,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:326,testability,test,tests,326,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:455,testability,understand,understand,455,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:549,testability,test,tests,549,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:572,testability,test,test,572,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:637,testability,test,test,637,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:19,usability,support,support,19,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:88,usability,support,support,88,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:136,usability,support,supports,136,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:259,usability,support,supports,259,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:470,usability,support,support,470,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11096:604,usability,memor,memory-memory,604,[PyROOT] Add numba support to PyROOT; These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`). - [ ] Add numba test to `roottest`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11096
https://github.com/root-project/root/pull/11097:113,deployability,updat,updated,113,Create Wordle.py; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11097
https://github.com/root-project/root/pull/11097:83,safety,test,tested,83,Create Wordle.py; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11097
https://github.com/root-project/root/pull/11097:113,safety,updat,updated,113,Create Wordle.py; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11097
https://github.com/root-project/root/pull/11097:113,security,updat,updated,113,Create Wordle.py; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11097
https://github.com/root-project/root/pull/11097:83,testability,test,tested,83,Create Wordle.py; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11097
https://github.com/root-project/root/pull/11098:313,deployability,updat,updated,313,"[cling-cpt] Added some more fixes to the download_llvm_binary function [skip-ci]; # This Pull request: Improves the download_llvm_binary function . ## Changes or fixes: Added LLVM 13 support, fixed the binary flags, and fixed the llvm_config_path and llvm_dir. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11098
https://github.com/root-project/root/pull/11098:282,safety,test,tested,282,"[cling-cpt] Added some more fixes to the download_llvm_binary function [skip-ci]; # This Pull request: Improves the download_llvm_binary function . ## Changes or fixes: Added LLVM 13 support, fixed the binary flags, and fixed the llvm_config_path and llvm_dir. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11098
https://github.com/root-project/root/pull/11098:313,safety,updat,updated,313,"[cling-cpt] Added some more fixes to the download_llvm_binary function [skip-ci]; # This Pull request: Improves the download_llvm_binary function . ## Changes or fixes: Added LLVM 13 support, fixed the binary flags, and fixed the llvm_config_path and llvm_dir. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11098
https://github.com/root-project/root/pull/11098:313,security,updat,updated,313,"[cling-cpt] Added some more fixes to the download_llvm_binary function [skip-ci]; # This Pull request: Improves the download_llvm_binary function . ## Changes or fixes: Added LLVM 13 support, fixed the binary flags, and fixed the llvm_config_path and llvm_dir. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11098
https://github.com/root-project/root/pull/11098:282,testability,test,tested,282,"[cling-cpt] Added some more fixes to the download_llvm_binary function [skip-ci]; # This Pull request: Improves the download_llvm_binary function . ## Changes or fixes: Added LLVM 13 support, fixed the binary flags, and fixed the llvm_config_path and llvm_dir. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11098
https://github.com/root-project/root/pull/11098:183,usability,support,support,183,"[cling-cpt] Added some more fixes to the download_llvm_binary function [skip-ci]; # This Pull request: Improves the download_llvm_binary function . ## Changes or fixes: Added LLVM 13 support, fixed the binary flags, and fixed the llvm_config_path and llvm_dir. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11098
https://github.com/root-project/root/issues/11099:120,availability,servic,service,120,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:203,availability,servic,service,203,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:264,availability,avail,available,264,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:324,availability,down,down,324,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1340,availability,slo,slow,1340,"e particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. just setup ROOT from a LCG release and run it, it will print memory use on each iteration, for me it grows by ~35MB on each loop. ### Setup. Tested this with ROOT 6.24.06 from LCG_101",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:120,deployability,servic,service,120,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:203,deployability,servic,service,203,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:820,deployability,manag,managed,820,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2186,deployability,releas,release,2186,"n TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. just setup ROOT from a LCG release and run it, it will print memory use on each iteration, for me it grows by ~35MB on each loop. ### Setup. Tested this with ROOT 6.24.06 from LCG_101 and ROOT 6.26.04 from LCG_102 on CentOS7 host (x86_64-centos7-gcc11-opt). ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:820,energy efficiency,manag,managed,820,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:120,integrability,servic,service,120,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:203,integrability,servic,service,203,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:120,modifiability,servic,service,120,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:203,modifiability,servic,service,203,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:7,performance,memor,memory,7,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:231,performance,memor,memory,231,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:274,performance,memor,memory,274,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:513,performance,time,time,513,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:552,performance,memor,memory,552,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:697,performance,Memor,Memory,697,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:738,performance,memor,memory,738,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2010,performance,Memor,Memory,2010,"n TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. just setup ROOT from a LCG release and run it, it will print memory use on each iteration, for me it grows by ~35MB on each loop. ### Setup. Tested this with ROOT 6.24.06 from LCG_101 and ROOT 6.26.04 from LCG_102 on CentOS7 host (x86_64-centos7-gcc11-opt). ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2220,performance,memor,memory,2220,"n TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. just setup ROOT from a LCG release and run it, it will print memory use on each iteration, for me it grows by ~35MB on each loop. ### Setup. Tested this with ROOT 6.24.06 from LCG_101 and ROOT 6.26.04 from LCG_102 on CentOS7 host (x86_64-centos7-gcc11-opt). ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:264,reliability,availab,available,264,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1340,reliability,slo,slow,1340,"e particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. just setup ROOT from a LCG release and run it, it will print memory use on each iteration, for me it grows by ~35MB on each loop. ### Setup. Tested this with ROOT 6.24.06 from LCG_101",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:264,safety,avail,available,264,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:820,safety,manag,managed,820,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1076,safety,test,testfile,1076,"escribe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1109,safety,test,test,1109,"-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f}",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2300,safety,Test,Tested,2300,"n TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. just setup ROOT from a LCG release and run it, it will print memory use on each iteration, for me it grows by ~35MB on each loop. ### Setup. Tested this with ROOT 6.24.06 from LCG_101 and ROOT 6.26.04 from LCG_102 on CentOS7 host (x86_64-centos7-gcc11-opt). ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:264,security,availab,available,264,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:859,testability,simpl,simple,859,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1076,testability,test,testfile,1076,"escribe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1109,testability,test,test,1109,"-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f}",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2300,testability,Test,Tested,2300,"n TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. just setup ROOT from a LCG release and run it, it will print memory use on each iteration, for me it grows by ~35MB on each loop. ### Setup. Tested this with ROOT 6.24.06 from LCG_101 and ROOT 6.26.04 from LCG_102 on CentOS7 host (x86_64-centos7-gcc11-opt). ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2432,testability,context,context,2432,"n TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. just setup ROOT from a LCG release and run it, it will print memory use on each iteration, for me it grows by ~35MB on each loop. ### Setup. Tested this with ROOT 6.24.06 from LCG_101 and ROOT 6.26.04 from LCG_102 on CentOS7 host (x86_64-centos7-gcc11-opt). ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:7,usability,memor,memory,7,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:231,usability,memor,memory,231,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:274,usability,memor,memory,274,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:552,usability,memor,memory,552,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:687,usability,behavi,behavior,687,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:697,usability,Memor,Memory,697,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:738,usability,memor,memory,738,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:859,usability,simpl,simple,859,"PyROOT memory leak reading TMap from a file; - [X] Checked for duplicates. ### Describe the bug. We have a long-running service which reads some information from ROOT files and we have noticed that this service regularly grows its memory use until it consumes all available memory and gets killed. I think I have tracked it down to reading one particular object type `TMap`. We have relatively large `TMap` object stored in files, the key in TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:1812,usability,Close,Close,1812,"n TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. just setup ROOT from a LCG release and run it, it will print memory use on each iteration, for me it grows by ~35MB on each loop. ### Setup. Tested this with ROOT 6.24.06 from LCG_101 and ROOT 6.26.04 from LCG_102 on CentOS7 host (x86_64-centos7-gcc11-opt). ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2010,usability,Memor,Memory,2010,"n TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. just setup ROOT from a LCG release and run it, it will print memory use on each iteration, for me it grows by ~35MB on each loop. ### Setup. Tested this with ROOT 6.24.06 from LCG_101 and ROOT 6.26.04 from LCG_102 on CentOS7 host (x86_64-centos7-gcc11-opt). ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/issues/11099:2220,usability,memor,memory,2220,"n TMap is `TObjString` and values are `TObjArray` of `TObjString`. Every time when TMap is read from a file the memory use grows dramatically by many megabytes, even though the Python object is discarded almost immediately after use. ### Expected behavior. Memory use should not grow indefinitely, memory should be deallocated when Python object is destroyed. ### To Reproduce. I managed to reproduce this issue with a simple script, attached here:. ```python. import os. import tempfile. import psutil. import ROOT. def main():. proc = psutil.Process(). with tempfile.TemporaryDirectory() as tmpdir:. file_name = os.path.join(tmpdir, ""testfile.root""). print(""Creating test root file"", file_name). _make_file_with_tmap(file_name). mem0 = proc.memory_info(). rootfile = ROOT.TFile.Open(file_name, ""READ""). while True:. ann_obj = rootfile.Get(""annotations""). # ann_obj.DeleteAll() # DeleteAll seems to slow leak but not 100%. del ann_obj. mem1 = proc.memory_info(). _memstat(mem0, mem1). mem0 = mem1. def _make_file_with_tmap(file_name):. rootfile = ROOT.TFile.Open(file_name, ""RECREATE""). map = ROOT.TMap(). for i in range(50_000):. key = ROOT.TObjString(""long_histogram_name_"" * 10 + str(i)). value = ROOT.TObjArray(). value.Add(ROOT.TObjString(""annotation"")). value.Add(ROOT.TObjString(f""10000"")). map.Add(key, value). rootfile.WriteTObject(map, ""annotations""). rootfile.Close(). def _memstat(mem0, mem1):. MB = 1024 * 1024. rss_mb = mem1.rss // MB. vms_mb = mem1.vms // MB. rss_delta_mb = (mem1.rss - mem0.rss) / MB. vms_delta_mb = (mem1.vms - mem0.vms) / MB. print(f""Memory stat: RSS={rss_mb} MB, VMS={vms_mb} MB. Delta RSS={rss_delta_mb:.2f} MB VMS={vms_delta_mb:.2f} MB""). if __name__ == ""__main__"":. main(). ```. just setup ROOT from a LCG release and run it, it will print memory use on each iteration, for me it grows by ~35MB on each loop. ### Setup. Tested this with ROOT 6.24.06 from LCG_101 and ROOT 6.26.04 from LCG_102 on CentOS7 host (x86_64-centos7-gcc11-opt). ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11099
https://github.com/root-project/root/pull/11100:59,modifiability,paramet,parameters,59,"[RF] Use `nullptr` and not `0` literal for default pointer parameters; This is not only modernizing the RooFit code, but also improving the. documentation because the default parameter values are also listed in. the doxygen. By using the `nullptr` instead of the `0` literal for default pointer. parameters in the documentation, the users are also taught to write. better C++. In some places, this commit also changed from `0` to `0.0` for default. floating point values for the same reasons.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11100
https://github.com/root-project/root/pull/11100:175,modifiability,paramet,parameter,175,"[RF] Use `nullptr` and not `0` literal for default pointer parameters; This is not only modernizing the RooFit code, but also improving the. documentation because the default parameter values are also listed in. the doxygen. By using the `nullptr` instead of the `0` literal for default pointer. parameters in the documentation, the users are also taught to write. better C++. In some places, this commit also changed from `0` to `0.0` for default. floating point values for the same reasons.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11100
https://github.com/root-project/root/pull/11100:296,modifiability,paramet,parameters,296,"[RF] Use `nullptr` and not `0` literal for default pointer parameters; This is not only modernizing the RooFit code, but also improving the. documentation because the default parameter values are also listed in. the doxygen. By using the `nullptr` instead of the `0` literal for default pointer. parameters in the documentation, the users are also taught to write. better C++. In some places, this commit also changed from `0` to `0.0` for default. floating point values for the same reasons.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11100
https://github.com/root-project/root/pull/11100:141,usability,document,documentation,141,"[RF] Use `nullptr` and not `0` literal for default pointer parameters; This is not only modernizing the RooFit code, but also improving the. documentation because the default parameter values are also listed in. the doxygen. By using the `nullptr` instead of the `0` literal for default pointer. parameters in the documentation, the users are also taught to write. better C++. In some places, this commit also changed from `0` to `0.0` for default. floating point values for the same reasons.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11100
https://github.com/root-project/root/pull/11100:314,usability,document,documentation,314,"[RF] Use `nullptr` and not `0` literal for default pointer parameters; This is not only modernizing the RooFit code, but also improving the. documentation because the default parameter values are also listed in. the doxygen. By using the `nullptr` instead of the `0` literal for default pointer. parameters in the documentation, the users are also taught to write. better C++. In some places, this commit also changed from `0` to `0.0` for default. floating point values for the same reasons.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11100
https://github.com/root-project/root/pull/11100:333,usability,user,users,333,"[RF] Use `nullptr` and not `0` literal for default pointer parameters; This is not only modernizing the RooFit code, but also improving the. documentation because the default parameter values are also listed in. the doxygen. By using the `nullptr` instead of the `0` literal for default pointer. parameters in the documentation, the users are also taught to write. better C++. In some places, this commit also changed from `0` to `0.0` for default. floating point values for the same reasons.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11100
https://github.com/root-project/root/pull/11101:159,availability,restor,restores,159,"Add context manager for TRedirectOutputGuard; The TRedirectOutputGuard class redirects both stdout and stderr to. the input file. It is an RAII construct that restores the stdout. and stderr streams after it is destructed. This commit adds a. Python context manager for this class, so that it can be used with. a Pythonic syntax in PyROOT applications. This is helpful because. redirecting C++'s stdout and stderr is not trivial from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11101
https://github.com/root-project/root/pull/11101:12,deployability,manag,manager,12,"Add context manager for TRedirectOutputGuard; The TRedirectOutputGuard class redirects both stdout and stderr to. the input file. It is an RAII construct that restores the stdout. and stderr streams after it is destructed. This commit adds a. Python context manager for this class, so that it can be used with. a Pythonic syntax in PyROOT applications. This is helpful because. redirecting C++'s stdout and stderr is not trivial from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11101
https://github.com/root-project/root/pull/11101:258,deployability,manag,manager,258,"Add context manager for TRedirectOutputGuard; The TRedirectOutputGuard class redirects both stdout and stderr to. the input file. It is an RAII construct that restores the stdout. and stderr streams after it is destructed. This commit adds a. Python context manager for this class, so that it can be used with. a Pythonic syntax in PyROOT applications. This is helpful because. redirecting C++'s stdout and stderr is not trivial from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11101
https://github.com/root-project/root/pull/11101:12,energy efficiency,manag,manager,12,"Add context manager for TRedirectOutputGuard; The TRedirectOutputGuard class redirects both stdout and stderr to. the input file. It is an RAII construct that restores the stdout. and stderr streams after it is destructed. This commit adds a. Python context manager for this class, so that it can be used with. a Pythonic syntax in PyROOT applications. This is helpful because. redirecting C++'s stdout and stderr is not trivial from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11101
https://github.com/root-project/root/pull/11101:258,energy efficiency,manag,manager,258,"Add context manager for TRedirectOutputGuard; The TRedirectOutputGuard class redirects both stdout and stderr to. the input file. It is an RAII construct that restores the stdout. and stderr streams after it is destructed. This commit adds a. Python context manager for this class, so that it can be used with. a Pythonic syntax in PyROOT applications. This is helpful because. redirecting C++'s stdout and stderr is not trivial from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11101
https://github.com/root-project/root/pull/11101:159,reliability,restor,restores,159,"Add context manager for TRedirectOutputGuard; The TRedirectOutputGuard class redirects both stdout and stderr to. the input file. It is an RAII construct that restores the stdout. and stderr streams after it is destructed. This commit adds a. Python context manager for this class, so that it can be used with. a Pythonic syntax in PyROOT applications. This is helpful because. redirecting C++'s stdout and stderr is not trivial from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11101
https://github.com/root-project/root/pull/11101:12,safety,manag,manager,12,"Add context manager for TRedirectOutputGuard; The TRedirectOutputGuard class redirects both stdout and stderr to. the input file. It is an RAII construct that restores the stdout. and stderr streams after it is destructed. This commit adds a. Python context manager for this class, so that it can be used with. a Pythonic syntax in PyROOT applications. This is helpful because. redirecting C++'s stdout and stderr is not trivial from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11101
https://github.com/root-project/root/pull/11101:118,safety,input,input,118,"Add context manager for TRedirectOutputGuard; The TRedirectOutputGuard class redirects both stdout and stderr to. the input file. It is an RAII construct that restores the stdout. and stderr streams after it is destructed. This commit adds a. Python context manager for this class, so that it can be used with. a Pythonic syntax in PyROOT applications. This is helpful because. redirecting C++'s stdout and stderr is not trivial from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11101
https://github.com/root-project/root/pull/11101:258,safety,manag,manager,258,"Add context manager for TRedirectOutputGuard; The TRedirectOutputGuard class redirects both stdout and stderr to. the input file. It is an RAII construct that restores the stdout. and stderr streams after it is destructed. This commit adds a. Python context manager for this class, so that it can be used with. a Pythonic syntax in PyROOT applications. This is helpful because. redirecting C++'s stdout and stderr is not trivial from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11101
https://github.com/root-project/root/pull/11101:4,testability,context,context,4,"Add context manager for TRedirectOutputGuard; The TRedirectOutputGuard class redirects both stdout and stderr to. the input file. It is an RAII construct that restores the stdout. and stderr streams after it is destructed. This commit adds a. Python context manager for this class, so that it can be used with. a Pythonic syntax in PyROOT applications. This is helpful because. redirecting C++'s stdout and stderr is not trivial from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11101
https://github.com/root-project/root/pull/11101:250,testability,context,context,250,"Add context manager for TRedirectOutputGuard; The TRedirectOutputGuard class redirects both stdout and stderr to. the input file. It is an RAII construct that restores the stdout. and stderr streams after it is destructed. This commit adds a. Python context manager for this class, so that it can be used with. a Pythonic syntax in PyROOT applications. This is helpful because. redirecting C++'s stdout and stderr is not trivial from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11101
https://github.com/root-project/root/pull/11101:118,usability,input,input,118,"Add context manager for TRedirectOutputGuard; The TRedirectOutputGuard class redirects both stdout and stderr to. the input file. It is an RAII construct that restores the stdout. and stderr streams after it is destructed. This commit adds a. Python context manager for this class, so that it can be used with. a Pythonic syntax in PyROOT applications. This is helpful because. redirecting C++'s stdout and stderr is not trivial from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11101
https://github.com/root-project/root/pull/11101:361,usability,help,helpful,361,"Add context manager for TRedirectOutputGuard; The TRedirectOutputGuard class redirects both stdout and stderr to. the input file. It is an RAII construct that restores the stdout. and stderr streams after it is destructed. This commit adds a. Python context manager for this class, so that it can be used with. a Pythonic syntax in PyROOT applications. This is helpful because. redirecting C++'s stdout and stderr is not trivial from Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11101
https://github.com/root-project/root/pull/11102:7,deployability,Integr,Integrate,7,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:192,deployability,configurat,configurations,192,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:232,deployability,Integr,Integrates,232,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:362,deployability,instal,installed,362,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:479,deployability,updat,updated,479,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:7,integrability,Integr,Integrate,7,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:192,integrability,configur,configurations,192,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:232,integrability,Integr,Integrates,232,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:7,interoperability,Integr,Integrate,7,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:232,interoperability,Integr,Integrates,232,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:7,modifiability,Integr,Integrate,7,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:110,modifiability,pac,package,110,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:192,modifiability,configur,configurations,192,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:232,modifiability,Integr,Integrates,232,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:141,performance,throughput,throughputs,141,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:7,reliability,Integr,Integrate,7,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:232,reliability,Integr,Integrates,232,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:133,safety,test,testing,133,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:386,safety,test,test,386,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:449,safety,test,tested,449,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:479,safety,updat,updated,479,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:7,security,Integr,Integrate,7,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:192,security,configur,configurations,192,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:232,security,Integr,Integrates,232,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:479,security,updat,updated,479,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:7,testability,Integr,Integrate,7,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:133,testability,test,testing,133,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:232,testability,Integr,Integrates,232,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:386,testability,test,test,386,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11102:449,testability,test,tested,449,"[tree] Integrate rootreadspeed into ROOT; # This Pull request:. Adds the rootreadspeed executable to the ROOT package. It allows for testing throughputs when reading .root files under various configurations. ## Changes or fixes:. - Integrates the source code into ROOT (under `tree/readspeed`). - Adds the `rootreadspeed` executable, runnable once ROOT has been installed. - Adds a new test suite for the readspeed application. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes - N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11102
https://github.com/root-project/root/pull/11103:446,deployability,updat,updated,446,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11103
https://github.com/root-project/root/pull/11103:416,safety,test,tested,416,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11103
https://github.com/root-project/root/pull/11103:446,safety,updat,updated,446,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11103
https://github.com/root-project/root/pull/11103:446,security,updat,updated,446,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11103
https://github.com/root-project/root/pull/11103:176,testability,unit,units,176,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11103
https://github.com/root-project/root/pull/11103:274,testability,unit,units,274,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11103
https://github.com/root-project/root/pull/11103:416,testability,test,tested,416,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11103
https://github.com/root-project/root/pull/11103:52,usability,interact,interaction,52,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11103
https://github.com/root-project/root/pull/11103:139,usability,interact,interaction,139,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11103
https://github.com/root-project/root/pull/11103:237,usability,interact,interaction,237,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11103
https://github.com/root-project/root/pull/11104:446,deployability,updat,updated,446,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11080.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11104:416,safety,test,tested,416,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11080.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11104:446,safety,updat,updated,446,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11080.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11104:446,security,updat,updated,446,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11080.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11104:176,testability,unit,units,176,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11080.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11104:274,testability,unit,units,274,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11080.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11104:416,testability,test,tested,416,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11080.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11104:52,usability,interact,interaction,52,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11080.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11104:139,usability,interact,interaction,139,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11080.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11104:237,usability,interact,interaction,237,Fix computation of the radiation length and nuclear interaction lengt…; …… (#11060). * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. * Fix computation of the radiation length and nuclear interaction length when ROOT uses G4 units. (cherry picked from commit 103bb7e4d930b4921debceec6ad7d418bacae4fc). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11080.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11104
https://github.com/root-project/root/pull/11105:51,modifiability,layer,layer,51,[TMVA][SOFIE] Fix copying shape tensor for reshape layer in SOFIE Keras parser; This PR fixes the way in which the shape tensor is extracted and then copied & added as an Initialized tensor in the RModel for the Reshape layer in SOFIE Keras parser.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11105
https://github.com/root-project/root/pull/11105:220,modifiability,layer,layer,220,[TMVA][SOFIE] Fix copying shape tensor for reshape layer in SOFIE Keras parser; This PR fixes the way in which the shape tensor is extracted and then copied & added as an Initialized tensor in the RModel for the Reshape layer in SOFIE Keras parser.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11105
https://github.com/root-project/root/pull/11107:570,performance,memor,memory,570,"[RF] New mechanism to create RooHistPdf/Func that own the RooDataHist; It happens often that you want to create a RooDataHist just to serve a. RooHistPdf or a RooHistFunc. In this case, it is convenient for the. HistPdf/HistFunc to take ownership of the RooDataHist. The cleanest way to implement this is probably via additional. constructors that take the RooDataHist via `std::unique_ptr`, such that. the ownership is always clear. A new transient member of. HistPdf/HistFunc is then taking over the ownership. With this change, it is easy to fix one of the remaining memory leaks in. the RooLagrangianMorphFunc. I second commit in this PR applies also some general code modernization to RooHistPdf and RooHistFunc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11107
https://github.com/root-project/root/pull/11107:427,usability,clear,clear,427,"[RF] New mechanism to create RooHistPdf/Func that own the RooDataHist; It happens often that you want to create a RooDataHist just to serve a. RooHistPdf or a RooHistFunc. In this case, it is convenient for the. HistPdf/HistFunc to take ownership of the RooDataHist. The cleanest way to implement this is probably via additional. constructors that take the RooDataHist via `std::unique_ptr`, such that. the ownership is always clear. A new transient member of. HistPdf/HistFunc is then taking over the ownership. With this change, it is easy to fix one of the remaining memory leaks in. the RooLagrangianMorphFunc. I second commit in this PR applies also some general code modernization to RooHistPdf and RooHistFunc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11107
https://github.com/root-project/root/pull/11107:570,usability,memor,memory,570,"[RF] New mechanism to create RooHistPdf/Func that own the RooDataHist; It happens often that you want to create a RooDataHist just to serve a. RooHistPdf or a RooHistFunc. In this case, it is convenient for the. HistPdf/HistFunc to take ownership of the RooDataHist. The cleanest way to implement this is probably via additional. constructors that take the RooDataHist via `std::unique_ptr`, such that. the ownership is always clear. A new transient member of. HistPdf/HistFunc is then taking over the ownership. With this change, it is easy to fix one of the remaining memory leaks in. the RooLagrangianMorphFunc. I second commit in this PR applies also some general code modernization to RooHistPdf and RooHistFunc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11107
https://github.com/root-project/root/pull/11108:51,modifiability,paramet,parameters,51,"[VecOps] Do not enforce const-ness in Map function parameters; Before this PR, the lambda passed to VecOps::Map could not. take arguments by non-const reference as the implementation was. adding a const qualifier to the RVec arguments. We now instead forward RVecs from Map to MapImpl keeping their. cv qualifiers. A test has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11108
https://github.com/root-project/root/pull/11108:317,safety,test,test,317,"[VecOps] Do not enforce const-ness in Map function parameters; Before this PR, the lambda passed to VecOps::Map could not. take arguments by non-const reference as the implementation was. adding a const qualifier to the RVec arguments. We now instead forward RVecs from Map to MapImpl keeping their. cv qualifiers. A test has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11108
https://github.com/root-project/root/pull/11108:317,testability,test,test,317,"[VecOps] Do not enforce const-ness in Map function parameters; Before this PR, the lambda passed to VecOps::Map could not. take arguments by non-const reference as the implementation was. adding a const qualifier to the RVec arguments. We now instead forward RVecs from Map to MapImpl keeping their. cv qualifiers. A test has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11108
https://github.com/root-project/root/pull/11109:14,deployability,Updat,Update,14,v626: [cmake] Update xrootd hash after a new version of the xrootd tar file…; Back port of #11106.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11109
https://github.com/root-project/root/pull/11109:45,deployability,version,version,45,v626: [cmake] Update xrootd hash after a new version of the xrootd tar file…; Back port of #11106.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11109
https://github.com/root-project/root/pull/11109:45,integrability,version,version,45,v626: [cmake] Update xrootd hash after a new version of the xrootd tar file…; Back port of #11106.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11109
https://github.com/root-project/root/pull/11109:45,modifiability,version,version,45,v626: [cmake] Update xrootd hash after a new version of the xrootd tar file…; Back port of #11106.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11109
https://github.com/root-project/root/pull/11109:14,safety,Updat,Update,14,v626: [cmake] Update xrootd hash after a new version of the xrootd tar file…; Back port of #11106.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11109
https://github.com/root-project/root/pull/11109:14,security,Updat,Update,14,v626: [cmake] Update xrootd hash after a new version of the xrootd tar file…; Back port of #11106.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11109
https://github.com/root-project/root/pull/11109:28,security,hash,hash,28,v626: [cmake] Update xrootd hash after a new version of the xrootd tar file…; Back port of #11106.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11109
https://github.com/root-project/root/pull/11110:95,deployability,version,versions,95,"[tmva] Fix Keras and PyTorch tutorials; This PR fixes the TMVA tutorials for new Keras,PyTorch versions and for running them in parallel in the CI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11110
https://github.com/root-project/root/pull/11110:95,integrability,version,versions,95,"[tmva] Fix Keras and PyTorch tutorials; This PR fixes the TMVA tutorials for new Keras,PyTorch versions and for running them in parallel in the CI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11110
https://github.com/root-project/root/pull/11110:95,modifiability,version,versions,95,"[tmva] Fix Keras and PyTorch tutorials; This PR fixes the TMVA tutorials for new Keras,PyTorch versions and for running them in parallel in the CI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11110
https://github.com/root-project/root/pull/11110:128,performance,parallel,parallel,128,"[tmva] Fix Keras and PyTorch tutorials; This PR fixes the TMVA tutorials for new Keras,PyTorch versions and for running them in parallel in the CI",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11110
https://github.com/root-project/root/pull/11111:1041,deployability,build,build,1041,"[cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protection against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This PR is backported in https://github.com/root-project/root/pull/11132.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11111
https://github.com/root-project/root/pull/11111:264,modifiability,variab,variable,264,"[cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protection against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This PR is backported in https://github.com/root-project/root/pull/11132.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11111
https://github.com/root-project/root/pull/11111:64,usability,command,command,64,"[cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protection against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This PR is backported in https://github.com/root-project/root/pull/11132.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11111
https://github.com/root-project/root/pull/11111:91,usability,command,command,91,"[cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protection against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This PR is backported in https://github.com/root-project/root/pull/11132.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11111
https://github.com/root-project/root/pull/11111:433,usability,command,command,433,"[cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protection against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This PR is backported in https://github.com/root-project/root/pull/11132.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11111
https://github.com/root-project/root/pull/11111:584,usability,document,documentation,584,"[cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protection against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This PR is backported in https://github.com/root-project/root/pull/11132.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11111
https://github.com/root-project/root/pull/11111:633,usability,help,help,633,"[cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protection against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This PR is backported in https://github.com/root-project/root/pull/11132.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11111
https://github.com/root-project/root/pull/11111:850,usability,command,command,850,"[cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protection against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This PR is backported in https://github.com/root-project/root/pull/11132.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11111
https://github.com/root-project/root/issues/11112:37,availability,error,error,37,"[RF] Fitting unweighted dataset with error corrections gives inconsistent result; ### Describe the bug. The fit parameter uncertainties you get when using [RooAbsPdf::fitTo()](https://root.cern.ch/doc/master/classRooAbsPdf.html#a5f79f16f4a26a19c9e66fb5c080f59c5) with the `AsymptoticError()` or `SumW2Error()` option for an unweighted dataset are not the same as without the `AsymptoticError()` option. ### Expected behavior. For an unweighted dataset, both the `SumW2Error()` and `AsymptoticError()` options should have no effect on the fit result. This is not the case, which is alarming and probably hints to a problem in the implementation. For the `AsymptoticError()` option, the differences are even more striking. ### To Reproduce. ```C++. using namespace RooFit;. using FitResPtr = std::unique_ptr<RooFitResult>;. RooRealVar x(""x"", ""x"", 70.0, 70.0, 120.0);. RooRealVar x0(""x0"", ""x0"", 90, 70, 120.0);. RooRealVar sigma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:1988,availability,error,error,1988,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2041,availability,Error,Error,2041,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2326,availability,Error,Error,2326,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2573,availability,error,error,2573,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2615,availability,Error,Error,2615,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:1958,energy efficiency,current,current,1958,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:112,modifiability,paramet,parameter,112,"[RF] Fitting unweighted dataset with error corrections gives inconsistent result; ### Describe the bug. The fit parameter uncertainties you get when using [RooAbsPdf::fitTo()](https://root.cern.ch/doc/master/classRooAbsPdf.html#a5f79f16f4a26a19c9e66fb5c080f59c5) with the `AsymptoticError()` or `SumW2Error()` option for an unweighted dataset are not the same as without the `AsymptoticError()` option. ### Expected behavior. For an unweighted dataset, both the `SumW2Error()` and `AsymptoticError()` options should have no effect on the fit result. This is not the case, which is alarming and probably hints to a problem in the implementation. For the `AsymptoticError()` option, the differences are even more striking. ### To Reproduce. ```C++. using namespace RooFit;. using FitResPtr = std::unique_ptr<RooFitResult>;. RooRealVar x(""x"", ""x"", 70.0, 70.0, 120.0);. RooRealVar x0(""x0"", ""x0"", 90, 70, 120.0);. RooRealVar sigma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2016,modifiability,Paramet,Parameter,2016,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2301,modifiability,Paramet,Parameter,2301,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2590,modifiability,Paramet,Parameter,2590,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:37,performance,error,error,37,"[RF] Fitting unweighted dataset with error corrections gives inconsistent result; ### Describe the bug. The fit parameter uncertainties you get when using [RooAbsPdf::fitTo()](https://root.cern.ch/doc/master/classRooAbsPdf.html#a5f79f16f4a26a19c9e66fb5c080f59c5) with the `AsymptoticError()` or `SumW2Error()` option for an unweighted dataset are not the same as without the `AsymptoticError()` option. ### Expected behavior. For an unweighted dataset, both the `SumW2Error()` and `AsymptoticError()` options should have no effect on the fit result. This is not the case, which is alarming and probably hints to a problem in the implementation. For the `AsymptoticError()` option, the differences are even more striking. ### To Reproduce. ```C++. using namespace RooFit;. using FitResPtr = std::unique_ptr<RooFitResult>;. RooRealVar x(""x"", ""x"", 70.0, 70.0, 120.0);. RooRealVar x0(""x0"", ""x0"", 90, 70, 120.0);. RooRealVar sigma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:1988,performance,error,error,1988,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2041,performance,Error,Error,2041,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2326,performance,Error,Error,2326,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2573,performance,error,error,2573,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2615,performance,Error,Error,2615,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:37,safety,error,error,37,"[RF] Fitting unweighted dataset with error corrections gives inconsistent result; ### Describe the bug. The fit parameter uncertainties you get when using [RooAbsPdf::fitTo()](https://root.cern.ch/doc/master/classRooAbsPdf.html#a5f79f16f4a26a19c9e66fb5c080f59c5) with the `AsymptoticError()` or `SumW2Error()` option for an unweighted dataset are not the same as without the `AsymptoticError()` option. ### Expected behavior. For an unweighted dataset, both the `SumW2Error()` and `AsymptoticError()` options should have no effect on the fit result. This is not the case, which is alarming and probably hints to a problem in the implementation. For the `AsymptoticError()` option, the differences are even more striking. ### To Reproduce. ```C++. using namespace RooFit;. using FitResPtr = std::unique_ptr<RooFitResult>;. RooRealVar x(""x"", ""x"", 70.0, 70.0, 120.0);. RooRealVar x0(""x0"", ""x0"", 90, 70, 120.0);. RooRealVar sigma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:1988,safety,error,error,1988,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2041,safety,Error,Error,2041,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2326,safety,Error,Error,2326,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2573,safety,error,error,2573,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2615,safety,Error,Error,2615,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2909,testability,context,context,2909,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:37,usability,error,error,37,"[RF] Fitting unweighted dataset with error corrections gives inconsistent result; ### Describe the bug. The fit parameter uncertainties you get when using [RooAbsPdf::fitTo()](https://root.cern.ch/doc/master/classRooAbsPdf.html#a5f79f16f4a26a19c9e66fb5c080f59c5) with the `AsymptoticError()` or `SumW2Error()` option for an unweighted dataset are not the same as without the `AsymptoticError()` option. ### Expected behavior. For an unweighted dataset, both the `SumW2Error()` and `AsymptoticError()` options should have no effect on the fit result. This is not the case, which is alarming and probably hints to a problem in the implementation. For the `AsymptoticError()` option, the differences are even more striking. ### To Reproduce. ```C++. using namespace RooFit;. using FitResPtr = std::unique_ptr<RooFitResult>;. RooRealVar x(""x"", ""x"", 70.0, 70.0, 120.0);. RooRealVar x0(""x0"", ""x0"", 90, 70, 120.0);. RooRealVar sigma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:416,usability,behavi,behavior,416,"[RF] Fitting unweighted dataset with error corrections gives inconsistent result; ### Describe the bug. The fit parameter uncertainties you get when using [RooAbsPdf::fitTo()](https://root.cern.ch/doc/master/classRooAbsPdf.html#a5f79f16f4a26a19c9e66fb5c080f59c5) with the `AsymptoticError()` or `SumW2Error()` option for an unweighted dataset are not the same as without the `AsymptoticError()` option. ### Expected behavior. For an unweighted dataset, both the `SumW2Error()` and `AsymptoticError()` options should have no effect on the fit result. This is not the case, which is alarming and probably hints to a problem in the implementation. For the `AsymptoticError()` option, the differences are even more striking. ### To Reproduce. ```C++. using namespace RooFit;. using FitResPtr = std::unique_ptr<RooFitResult>;. RooRealVar x(""x"", ""x"", 70.0, 70.0, 120.0);. RooRealVar x0(""x0"", ""x0"", 90, 70, 120.0);. RooRealVar sigma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:603,usability,hint,hints,603,"[RF] Fitting unweighted dataset with error corrections gives inconsistent result; ### Describe the bug. The fit parameter uncertainties you get when using [RooAbsPdf::fitTo()](https://root.cern.ch/doc/master/classRooAbsPdf.html#a5f79f16f4a26a19c9e66fb5c080f59c5) with the `AsymptoticError()` or `SumW2Error()` option for an unweighted dataset are not the same as without the `AsymptoticError()` option. ### Expected behavior. For an unweighted dataset, both the `SumW2Error()` and `AsymptoticError()` options should have no effect on the fit result. This is not the case, which is alarming and probably hints to a problem in the implementation. For the `AsymptoticError()` option, the differences are even more striking. ### To Reproduce. ```C++. using namespace RooFit;. using FitResPtr = std::unique_ptr<RooFitResult>;. RooRealVar x(""x"", ""x"", 70.0, 70.0, 120.0);. RooRealVar x0(""x0"", ""x0"", 90, 70, 120.0);. RooRealVar sigma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:1988,usability,error,error,1988,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2041,usability,Error,Error,2041,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2326,usability,Error,Error,2326,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2573,usability,error,error,2573,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/issues/11112:2615,usability,Error,Error,2615,"ma(""sigma"", ""sigma"", 5, 1, 100);. RooRealVar alphaL(""alphaL"", ""alphaL"", 1.05, 0.1, 10);. RooRealVar alphaR(""alphaR"", ""alphaR"", 1.3, 0.1, 10);. RooRealVar nL(""nL"", ""nL"", 5, 0.1, 10);. RooRealVar nR(""nR"", ""nR"", 2, 0.1, 10);. auto resetParameters = [&]() {. x0.setVal(80.0);. sigma.setVal(3.0);. alphaL.setVal(1.0);. alphaR.setVal(1.0);. nL.setVal(3.0);. nR.setVal(3.0);. x0.setError(0.0);. sigma.setError(0.0);. alphaL.setError(0.0);. alphaR.setError(0.0);. nL.setError(0.0);. nR.setError(0.0);. };. RooCrystalBall cb{""cb"", ""cb"", x, x0, sigma, sigma, alphaL, nL, alphaR, nR};. std::size_t nEvents = 1000;. std::unique_ptr<RooDataSet> data{cb.generate(x, nEvents)};. resetParameters();. FitResPtr res0{cb.fitTo(*data, PrintLevel(-1), Save(1))};. res0->Print();. resetParameters();. FitResPtr res1{cb.fitTo(*data, PrintLevel(-1), Save(1), SumW2Error(true))};. res1->Print();. resetParameters();. FitResPtr res2{cb.fitTo(*data, PrintLevel(-1), Save(1), AsymptoticError(true))};. res2->Print();. ```. The output will be as follows, with the current ROOT master:. ```. No error correction:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.47e-02. alphaR 2.3792e-01 +/- 5.51e-02. nL 1.0000e+01 +/- 6.13e+00. nR 5.1244e+00 +/- 2.23e+00. sigma 1.0000e+00 +/- 1.95e-01. x0 9.0956e+01 +/- 2.93e-01. SumW2Error():. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 2.28e-02. alphaR 2.3794e-01 +/- 5.85e-02. nL 1.0000e+01 +/- 1.47e-02. nR 5.1241e+00 +/- 2.48e+00. sigma 1.0000e+00 +/- 1.43e-03. x0 9.0957e+01 +/- 3.00e-01. Asymptotic error:. Floating Parameter FinalValue +/- Error . -------------------- --------------------------. alphaL 1.7354e-01 +/- 8.94e-02. alphaR 2.3794e-01 +/- 3.91e-01. nL 1.0000e+01 +/- 1.10e-04. nR 5.1241e+00 +/- 1.72e+01. sigma 1.0000e+00 +/- 5.90e-03. x0 9.0957e+01 +/- 1.20e+00. ```. ### Setup. ROOT master on Arch Linux. ### Additional context. None.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11112
https://github.com/root-project/root/pull/11113:247,availability,state,state,247,"[Minuit2] make the MnHesse implementation easily replaceable; # This Pull request:. ## Changes or fixes:. The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:184,deployability,contain,contained,184,"[Minuit2] make the MnHesse implementation easily replaceable; # This Pull request:. ## Changes or fixes:. The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:769,deployability,updat,updated,769,"[Minuit2] make the MnHesse implementation easily replaceable; # This Pull request:. ## Changes or fixes:. The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:247,integrability,state,state,247,"[Minuit2] make the MnHesse implementation easily replaceable; # This Pull request:. ## Changes or fixes:. The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:395,integrability,interfac,interface,395,"[Minuit2] make the MnHesse implementation easily replaceable; # This Pull request:. ## Changes or fixes:. The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:629,integrability,pub,public,629,"[Minuit2] make the MnHesse implementation easily replaceable; # This Pull request:. ## Changes or fixes:. The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:395,interoperability,interfac,interface,395,"[Minuit2] make the MnHesse implementation easily replaceable; # This Pull request:. ## Changes or fixes:. The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:395,modifiability,interfac,interface,395,"[Minuit2] make the MnHesse implementation easily replaceable; # This Pull request:. ## Changes or fixes:. The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:739,safety,test,tested,739,"[Minuit2] make the MnHesse implementation easily replaceable; # This Pull request:. ## Changes or fixes:. The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:769,safety,updat,updated,769,"[Minuit2] make the MnHesse implementation easily replaceable; # This Pull request:. ## Changes or fixes:. The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:769,security,updat,updated,769,"[Minuit2] make the MnHesse implementation easily replaceable; # This Pull request:. ## Changes or fixes:. The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:739,testability,test,tested,739,"[Minuit2] make the MnHesse implementation easily replaceable; # This Pull request:. ## Changes or fixes:. The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:640,usability,user,users,640,"[Minuit2] make the MnHesse implementation easily replaceable; # This Pull request:. ## Changes or fixes:. The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11113:710,usability,prefer,prefer,710,"[Minuit2] make the MnHesse implementation easily replaceable; # This Pull request:. ## Changes or fixes:. The actual calculation of the Hessian / covariance matrix done by MnHesse was contained to a single function. Since the only needed internal state was the `MnStrategy` object, it was easy to turn this calculation function into a static member function. The implementation of the ""internal interface"" (previously the calculation function) now forwards its call to a static class member `std::function` object. By default, this object is set to be the now-static calculation function. However, this `std::function` object is public, so users can easily replace it with any Hessian calculator function they prefer. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11113
https://github.com/root-project/root/pull/11114:116,deployability,manag,management,116,[RF] Replace some manually-allocated C-style arrays with `std::vector`; This is part of the effort of making memory management in RooFit more. automatic and safer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11114
https://github.com/root-project/root/pull/11114:143,deployability,automat,automatic,143,[RF] Replace some manually-allocated C-style arrays with `std::vector`; This is part of the effort of making memory management in RooFit more. automatic and safer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11114
https://github.com/root-project/root/pull/11114:27,energy efficiency,alloc,allocated,27,[RF] Replace some manually-allocated C-style arrays with `std::vector`; This is part of the effort of making memory management in RooFit more. automatic and safer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11114
https://github.com/root-project/root/pull/11114:116,energy efficiency,manag,management,116,[RF] Replace some manually-allocated C-style arrays with `std::vector`; This is part of the effort of making memory management in RooFit more. automatic and safer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11114
https://github.com/root-project/root/pull/11114:109,performance,memor,memory,109,[RF] Replace some manually-allocated C-style arrays with `std::vector`; This is part of the effort of making memory management in RooFit more. automatic and safer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11114
https://github.com/root-project/root/pull/11114:116,safety,manag,management,116,[RF] Replace some manually-allocated C-style arrays with `std::vector`; This is part of the effort of making memory management in RooFit more. automatic and safer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11114
https://github.com/root-project/root/pull/11114:157,safety,safe,safer,157,[RF] Replace some manually-allocated C-style arrays with `std::vector`; This is part of the effort of making memory management in RooFit more. automatic and safer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11114
https://github.com/root-project/root/pull/11114:143,testability,automat,automatic,143,[RF] Replace some manually-allocated C-style arrays with `std::vector`; This is part of the effort of making memory management in RooFit more. automatic and safer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11114
https://github.com/root-project/root/pull/11114:109,usability,memor,memory,109,[RF] Replace some manually-allocated C-style arrays with `std::vector`; This is part of the effort of making memory management in RooFit more. automatic and safer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11114
https://github.com/root-project/root/pull/11115:561,deployability,updat,updated,561,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; . # This Pull request:. Fix to compute radiation length on call TGeoMixture::ComputeDerivedQuantities(). The call leads to wrong results if the TGeoManager was created before the . TGeo units change. This was not detected by the test previously prepared. for PR https://github.com/root-project/root/pull/11060. ## Changes or fixes:. Fix to call TGeoMixture::ComputeRadiationLength() to take into account the correct. unit normalizations. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11060.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:285,safety,detect,detected,285,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; . # This Pull request:. Fix to compute radiation length on call TGeoMixture::ComputeDerivedQuantities(). The call leads to wrong results if the TGeoManager was created before the . TGeo units change. This was not detected by the test previously prepared. for PR https://github.com/root-project/root/pull/11060. ## Changes or fixes:. Fix to call TGeoMixture::ComputeRadiationLength() to take into account the correct. unit normalizations. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11060.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:301,safety,test,test,301,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; . # This Pull request:. Fix to compute radiation length on call TGeoMixture::ComputeDerivedQuantities(). The call leads to wrong results if the TGeoManager was created before the . TGeo units change. This was not detected by the test previously prepared. for PR https://github.com/root-project/root/pull/11060. ## Changes or fixes:. Fix to call TGeoMixture::ComputeRadiationLength() to take into account the correct. unit normalizations. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11060.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:531,safety,test,tested,531,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; . # This Pull request:. Fix to compute radiation length on call TGeoMixture::ComputeDerivedQuantities(). The call leads to wrong results if the TGeoManager was created before the . TGeo units change. This was not detected by the test previously prepared. for PR https://github.com/root-project/root/pull/11060. ## Changes or fixes:. Fix to call TGeoMixture::ComputeRadiationLength() to take into account the correct. unit normalizations. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11060.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:561,safety,updat,updated,561,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; . # This Pull request:. Fix to compute radiation length on call TGeoMixture::ComputeDerivedQuantities(). The call leads to wrong results if the TGeoManager was created before the . TGeo units change. This was not detected by the test previously prepared. for PR https://github.com/root-project/root/pull/11060. ## Changes or fixes:. Fix to call TGeoMixture::ComputeRadiationLength() to take into account the correct. unit normalizations. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11060.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:285,security,detect,detected,285,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; . # This Pull request:. Fix to compute radiation length on call TGeoMixture::ComputeDerivedQuantities(). The call leads to wrong results if the TGeoManager was created before the . TGeo units change. This was not detected by the test previously prepared. for PR https://github.com/root-project/root/pull/11060. ## Changes or fixes:. Fix to call TGeoMixture::ComputeRadiationLength() to take into account the correct. unit normalizations. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11060.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:561,security,updat,updated,561,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; . # This Pull request:. Fix to compute radiation length on call TGeoMixture::ComputeDerivedQuantities(). The call leads to wrong results if the TGeoManager was created before the . TGeo units change. This was not detected by the test previously prepared. for PR https://github.com/root-project/root/pull/11060. ## Changes or fixes:. Fix to call TGeoMixture::ComputeRadiationLength() to take into account the correct. unit normalizations. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11060.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:258,testability,unit,units,258,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; . # This Pull request:. Fix to compute radiation length on call TGeoMixture::ComputeDerivedQuantities(). The call leads to wrong results if the TGeoManager was created before the . TGeo units change. This was not detected by the test previously prepared. for PR https://github.com/root-project/root/pull/11060. ## Changes or fixes:. Fix to call TGeoMixture::ComputeRadiationLength() to take into account the correct. unit normalizations. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11060.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:301,testability,test,test,301,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; . # This Pull request:. Fix to compute radiation length on call TGeoMixture::ComputeDerivedQuantities(). The call leads to wrong results if the TGeoManager was created before the . TGeo units change. This was not detected by the test previously prepared. for PR https://github.com/root-project/root/pull/11060. ## Changes or fixes:. Fix to call TGeoMixture::ComputeRadiationLength() to take into account the correct. unit normalizations. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11060.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:489,testability,unit,unit,489,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; . # This Pull request:. Fix to compute radiation length on call TGeoMixture::ComputeDerivedQuantities(). The call leads to wrong results if the TGeoManager was created before the . TGeo units change. This was not detected by the test previously prepared. for PR https://github.com/root-project/root/pull/11060. ## Changes or fixes:. Fix to call TGeoMixture::ComputeRadiationLength() to take into account the correct. unit normalizations. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11060.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11115:531,testability,test,tested,531,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; . # This Pull request:. Fix to compute radiation length on call TGeoMixture::ComputeDerivedQuantities(). The call leads to wrong results if the TGeoManager was created before the . TGeo units change. This was not detected by the test previously prepared. for PR https://github.com/root-project/root/pull/11060. ## Changes or fixes:. Fix to call TGeoMixture::ComputeRadiationLength() to take into account the correct. unit normalizations. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes #11060.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11115
https://github.com/root-project/root/pull/11116:59,deployability,patch,patch,59,"[DF] Preserve ordering of snapshotted columns; Before this patch (and since a2156969b4), Snapshot was enforcing. alphabetical ordering of the output branches. The ordering. specified as argument, however, could carry meaning: it might. make sense to have branches carrying related physics information. close together in the TTree so that they appear close to each. other e.g. in TTree::Print or in TBrowser. With this patch we keep the original column ordering (the one. explicitly specified by the user or the one coming from TTree). when creating output branches. One exception are branches from the input TTree that are. Redefine'd in case of auto-generated lists of output columns:. Define'd and Redefine'd columns appear before TTree branches,. which might move the position of branches that have been. Redefine'd with respect to others that have not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:418,deployability,patch,patch,418,"[DF] Preserve ordering of snapshotted columns; Before this patch (and since a2156969b4), Snapshot was enforcing. alphabetical ordering of the output branches. The ordering. specified as argument, however, could carry meaning: it might. make sense to have branches carrying related physics information. close together in the TTree so that they appear close to each. other e.g. in TTree::Print or in TBrowser. With this patch we keep the original column ordering (the one. explicitly specified by the user or the one coming from TTree). when creating output branches. One exception are branches from the input TTree that are. Redefine'd in case of auto-generated lists of output columns:. Define'd and Redefine'd columns appear before TTree branches,. which might move the position of branches that have been. Redefine'd with respect to others that have not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:173,interoperability,specif,specified,173,"[DF] Preserve ordering of snapshotted columns; Before this patch (and since a2156969b4), Snapshot was enforcing. alphabetical ordering of the output branches. The ordering. specified as argument, however, could carry meaning: it might. make sense to have branches carrying related physics information. close together in the TTree so that they appear close to each. other e.g. in TTree::Print or in TBrowser. With this patch we keep the original column ordering (the one. explicitly specified by the user or the one coming from TTree). when creating output branches. One exception are branches from the input TTree that are. Redefine'd in case of auto-generated lists of output columns:. Define'd and Redefine'd columns appear before TTree branches,. which might move the position of branches that have been. Redefine'd with respect to others that have not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:482,interoperability,specif,specified,482,"[DF] Preserve ordering of snapshotted columns; Before this patch (and since a2156969b4), Snapshot was enforcing. alphabetical ordering of the output branches. The ordering. specified as argument, however, could carry meaning: it might. make sense to have branches carrying related physics information. close together in the TTree so that they appear close to each. other e.g. in TTree::Print or in TBrowser. With this patch we keep the original column ordering (the one. explicitly specified by the user or the one coming from TTree). when creating output branches. One exception are branches from the input TTree that are. Redefine'd in case of auto-generated lists of output columns:. Define'd and Redefine'd columns appear before TTree branches,. which might move the position of branches that have been. Redefine'd with respect to others that have not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:59,safety,patch,patch,59,"[DF] Preserve ordering of snapshotted columns; Before this patch (and since a2156969b4), Snapshot was enforcing. alphabetical ordering of the output branches. The ordering. specified as argument, however, could carry meaning: it might. make sense to have branches carrying related physics information. close together in the TTree so that they appear close to each. other e.g. in TTree::Print or in TBrowser. With this patch we keep the original column ordering (the one. explicitly specified by the user or the one coming from TTree). when creating output branches. One exception are branches from the input TTree that are. Redefine'd in case of auto-generated lists of output columns:. Define'd and Redefine'd columns appear before TTree branches,. which might move the position of branches that have been. Redefine'd with respect to others that have not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:418,safety,patch,patch,418,"[DF] Preserve ordering of snapshotted columns; Before this patch (and since a2156969b4), Snapshot was enforcing. alphabetical ordering of the output branches. The ordering. specified as argument, however, could carry meaning: it might. make sense to have branches carrying related physics information. close together in the TTree so that they appear close to each. other e.g. in TTree::Print or in TBrowser. With this patch we keep the original column ordering (the one. explicitly specified by the user or the one coming from TTree). when creating output branches. One exception are branches from the input TTree that are. Redefine'd in case of auto-generated lists of output columns:. Define'd and Redefine'd columns appear before TTree branches,. which might move the position of branches that have been. Redefine'd with respect to others that have not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:570,safety,except,exception,570,"[DF] Preserve ordering of snapshotted columns; Before this patch (and since a2156969b4), Snapshot was enforcing. alphabetical ordering of the output branches. The ordering. specified as argument, however, could carry meaning: it might. make sense to have branches carrying related physics information. close together in the TTree so that they appear close to each. other e.g. in TTree::Print or in TBrowser. With this patch we keep the original column ordering (the one. explicitly specified by the user or the one coming from TTree). when creating output branches. One exception are branches from the input TTree that are. Redefine'd in case of auto-generated lists of output columns:. Define'd and Redefine'd columns appear before TTree branches,. which might move the position of branches that have been. Redefine'd with respect to others that have not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:602,safety,input,input,602,"[DF] Preserve ordering of snapshotted columns; Before this patch (and since a2156969b4), Snapshot was enforcing. alphabetical ordering of the output branches. The ordering. specified as argument, however, could carry meaning: it might. make sense to have branches carrying related physics information. close together in the TTree so that they appear close to each. other e.g. in TTree::Print or in TBrowser. With this patch we keep the original column ordering (the one. explicitly specified by the user or the one coming from TTree). when creating output branches. One exception are branches from the input TTree that are. Redefine'd in case of auto-generated lists of output columns:. Define'd and Redefine'd columns appear before TTree branches,. which might move the position of branches that have been. Redefine'd with respect to others that have not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:59,security,patch,patch,59,"[DF] Preserve ordering of snapshotted columns; Before this patch (and since a2156969b4), Snapshot was enforcing. alphabetical ordering of the output branches. The ordering. specified as argument, however, could carry meaning: it might. make sense to have branches carrying related physics information. close together in the TTree so that they appear close to each. other e.g. in TTree::Print or in TBrowser. With this patch we keep the original column ordering (the one. explicitly specified by the user or the one coming from TTree). when creating output branches. One exception are branches from the input TTree that are. Redefine'd in case of auto-generated lists of output columns:. Define'd and Redefine'd columns appear before TTree branches,. which might move the position of branches that have been. Redefine'd with respect to others that have not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:418,security,patch,patch,418,"[DF] Preserve ordering of snapshotted columns; Before this patch (and since a2156969b4), Snapshot was enforcing. alphabetical ordering of the output branches. The ordering. specified as argument, however, could carry meaning: it might. make sense to have branches carrying related physics information. close together in the TTree so that they appear close to each. other e.g. in TTree::Print or in TBrowser. With this patch we keep the original column ordering (the one. explicitly specified by the user or the one coming from TTree). when creating output branches. One exception are branches from the input TTree that are. Redefine'd in case of auto-generated lists of output columns:. Define'd and Redefine'd columns appear before TTree branches,. which might move the position of branches that have been. Redefine'd with respect to others that have not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:302,usability,close,close,302,"[DF] Preserve ordering of snapshotted columns; Before this patch (and since a2156969b4), Snapshot was enforcing. alphabetical ordering of the output branches. The ordering. specified as argument, however, could carry meaning: it might. make sense to have branches carrying related physics information. close together in the TTree so that they appear close to each. other e.g. in TTree::Print or in TBrowser. With this patch we keep the original column ordering (the one. explicitly specified by the user or the one coming from TTree). when creating output branches. One exception are branches from the input TTree that are. Redefine'd in case of auto-generated lists of output columns:. Define'd and Redefine'd columns appear before TTree branches,. which might move the position of branches that have been. Redefine'd with respect to others that have not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:350,usability,close,close,350,"[DF] Preserve ordering of snapshotted columns; Before this patch (and since a2156969b4), Snapshot was enforcing. alphabetical ordering of the output branches. The ordering. specified as argument, however, could carry meaning: it might. make sense to have branches carrying related physics information. close together in the TTree so that they appear close to each. other e.g. in TTree::Print or in TBrowser. With this patch we keep the original column ordering (the one. explicitly specified by the user or the one coming from TTree). when creating output branches. One exception are branches from the input TTree that are. Redefine'd in case of auto-generated lists of output columns:. Define'd and Redefine'd columns appear before TTree branches,. which might move the position of branches that have been. Redefine'd with respect to others that have not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:499,usability,user,user,499,"[DF] Preserve ordering of snapshotted columns; Before this patch (and since a2156969b4), Snapshot was enforcing. alphabetical ordering of the output branches. The ordering. specified as argument, however, could carry meaning: it might. make sense to have branches carrying related physics information. close together in the TTree so that they appear close to each. other e.g. in TTree::Print or in TBrowser. With this patch we keep the original column ordering (the one. explicitly specified by the user or the one coming from TTree). when creating output branches. One exception are branches from the input TTree that are. Redefine'd in case of auto-generated lists of output columns:. Define'd and Redefine'd columns appear before TTree branches,. which might move the position of branches that have been. Redefine'd with respect to others that have not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11116:602,usability,input,input,602,"[DF] Preserve ordering of snapshotted columns; Before this patch (and since a2156969b4), Snapshot was enforcing. alphabetical ordering of the output branches. The ordering. specified as argument, however, could carry meaning: it might. make sense to have branches carrying related physics information. close together in the TTree so that they appear close to each. other e.g. in TTree::Print or in TBrowser. With this patch we keep the original column ordering (the one. explicitly specified by the user or the one coming from TTree). when creating output branches. One exception are branches from the input TTree that are. Redefine'd in case of auto-generated lists of output columns:. Define'd and Redefine'd columns appear before TTree branches,. which might move the position of branches that have been. Redefine'd with respect to others that have not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11116
https://github.com/root-project/root/pull/11117:423,availability,failur,failures,423,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:818,availability,failur,failure,818,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:423,deployability,fail,failures,423,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:751,deployability,releas,releases,751,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:818,deployability,fail,failure,818,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:901,deployability,build,builds,901,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:775,energy efficiency,sustainab,sustainable,775,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:881,integrability,interfac,interfaces,881,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:881,interoperability,interfac,interfaces,881,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:881,modifiability,interfac,interfaces,881,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:423,performance,failur,failures,423,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:818,performance,failur,failure,818,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:264,reliability,doe,doesn,264,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:423,reliability,fail,failures,423,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:818,reliability,fail,failure,818,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:734,safety,test,tested,734,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:363,testability,assert,assertions,363,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:413,testability,assert,assertion,413,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:734,testability,test,tested,734,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:808,testability,assert,assertion,808,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:832,testability,simpl,simply,832,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:631,usability,clear,clearly,631,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11117:832,usability,simpl,simply,832,"[RF] Remove RooMultiCatIter and comparison with old-style evaluation in RooMultiCategory; The `computeCategoryOldStyle` function in the RooMultiCategory class. gave wrong results in case the multi-category uses categories where the. ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for. assertions in debug mode, this caused unnecessary assertion failures as. reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in. `RooMultiCategory::evaluate()` clearly demonstrated that the old-style. implementation is wrong. As the new implementation is already tested for a few releases now, the. most sustainable way to fix the wrong assertion failure is to simply. remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated. `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that. deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11117
https://github.com/root-project/root/pull/11118:4,usability,help,helper,4,"Add helper method to create a thread-friendly TChain, use it in TTreeProcessorMT; @ikabadzhov @vepadulano I guess this could be interesting for distRDF+MT as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11118
https://github.com/root-project/root/pull/11121:198,deployability,log,logic,198,"[DF] Move large parts of RInterface to a non-template base class; This is to reduce the amount of code generated for every separate. RInterface instantiation. The PR should not otherwise modify any logic or functionality. I hoped this would reduce compile times of RDF-heavy code, but on an artificial benchmark the changes have little to no effect. This might be a good refactoring to have nonetheless. What do people think? In order to minimize conflicts with other PRs, this must be merged after:. - https://github.com/root-project/root/pull/11314. - https://github.com/root-project/root/pull/11307. - https://github.com/root-project/root/pull/11306. - https://github.com/root-project/root/pull/11149",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11121
https://github.com/root-project/root/pull/11121:77,energy efficiency,reduc,reduce,77,"[DF] Move large parts of RInterface to a non-template base class; This is to reduce the amount of code generated for every separate. RInterface instantiation. The PR should not otherwise modify any logic or functionality. I hoped this would reduce compile times of RDF-heavy code, but on an artificial benchmark the changes have little to no effect. This might be a good refactoring to have nonetheless. What do people think? In order to minimize conflicts with other PRs, this must be merged after:. - https://github.com/root-project/root/pull/11314. - https://github.com/root-project/root/pull/11307. - https://github.com/root-project/root/pull/11306. - https://github.com/root-project/root/pull/11149",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11121
https://github.com/root-project/root/pull/11121:241,energy efficiency,reduc,reduce,241,"[DF] Move large parts of RInterface to a non-template base class; This is to reduce the amount of code generated for every separate. RInterface instantiation. The PR should not otherwise modify any logic or functionality. I hoped this would reduce compile times of RDF-heavy code, but on an artificial benchmark the changes have little to no effect. This might be a good refactoring to have nonetheless. What do people think? In order to minimize conflicts with other PRs, this must be merged after:. - https://github.com/root-project/root/pull/11314. - https://github.com/root-project/root/pull/11307. - https://github.com/root-project/root/pull/11306. - https://github.com/root-project/root/pull/11149",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11121
https://github.com/root-project/root/pull/11121:447,interoperability,conflict,conflicts,447,"[DF] Move large parts of RInterface to a non-template base class; This is to reduce the amount of code generated for every separate. RInterface instantiation. The PR should not otherwise modify any logic or functionality. I hoped this would reduce compile times of RDF-heavy code, but on an artificial benchmark the changes have little to no effect. This might be a good refactoring to have nonetheless. What do people think? In order to minimize conflicts with other PRs, this must be merged after:. - https://github.com/root-project/root/pull/11314. - https://github.com/root-project/root/pull/11307. - https://github.com/root-project/root/pull/11306. - https://github.com/root-project/root/pull/11149",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11121
https://github.com/root-project/root/pull/11121:371,modifiability,refact,refactoring,371,"[DF] Move large parts of RInterface to a non-template base class; This is to reduce the amount of code generated for every separate. RInterface instantiation. The PR should not otherwise modify any logic or functionality. I hoped this would reduce compile times of RDF-heavy code, but on an artificial benchmark the changes have little to no effect. This might be a good refactoring to have nonetheless. What do people think? In order to minimize conflicts with other PRs, this must be merged after:. - https://github.com/root-project/root/pull/11314. - https://github.com/root-project/root/pull/11307. - https://github.com/root-project/root/pull/11306. - https://github.com/root-project/root/pull/11149",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11121
https://github.com/root-project/root/pull/11121:256,performance,time,times,256,"[DF] Move large parts of RInterface to a non-template base class; This is to reduce the amount of code generated for every separate. RInterface instantiation. The PR should not otherwise modify any logic or functionality. I hoped this would reduce compile times of RDF-heavy code, but on an artificial benchmark the changes have little to no effect. This might be a good refactoring to have nonetheless. What do people think? In order to minimize conflicts with other PRs, this must be merged after:. - https://github.com/root-project/root/pull/11314. - https://github.com/root-project/root/pull/11307. - https://github.com/root-project/root/pull/11306. - https://github.com/root-project/root/pull/11149",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11121
https://github.com/root-project/root/pull/11121:371,performance,refactor,refactoring,371,"[DF] Move large parts of RInterface to a non-template base class; This is to reduce the amount of code generated for every separate. RInterface instantiation. The PR should not otherwise modify any logic or functionality. I hoped this would reduce compile times of RDF-heavy code, but on an artificial benchmark the changes have little to no effect. This might be a good refactoring to have nonetheless. What do people think? In order to minimize conflicts with other PRs, this must be merged after:. - https://github.com/root-project/root/pull/11314. - https://github.com/root-project/root/pull/11307. - https://github.com/root-project/root/pull/11306. - https://github.com/root-project/root/pull/11149",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11121
https://github.com/root-project/root/pull/11121:198,safety,log,logic,198,"[DF] Move large parts of RInterface to a non-template base class; This is to reduce the amount of code generated for every separate. RInterface instantiation. The PR should not otherwise modify any logic or functionality. I hoped this would reduce compile times of RDF-heavy code, but on an artificial benchmark the changes have little to no effect. This might be a good refactoring to have nonetheless. What do people think? In order to minimize conflicts with other PRs, this must be merged after:. - https://github.com/root-project/root/pull/11314. - https://github.com/root-project/root/pull/11307. - https://github.com/root-project/root/pull/11306. - https://github.com/root-project/root/pull/11149",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11121
https://github.com/root-project/root/pull/11121:187,security,modif,modify,187,"[DF] Move large parts of RInterface to a non-template base class; This is to reduce the amount of code generated for every separate. RInterface instantiation. The PR should not otherwise modify any logic or functionality. I hoped this would reduce compile times of RDF-heavy code, but on an artificial benchmark the changes have little to no effect. This might be a good refactoring to have nonetheless. What do people think? In order to minimize conflicts with other PRs, this must be merged after:. - https://github.com/root-project/root/pull/11314. - https://github.com/root-project/root/pull/11307. - https://github.com/root-project/root/pull/11306. - https://github.com/root-project/root/pull/11149",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11121
https://github.com/root-project/root/pull/11121:198,security,log,logic,198,"[DF] Move large parts of RInterface to a non-template base class; This is to reduce the amount of code generated for every separate. RInterface instantiation. The PR should not otherwise modify any logic or functionality. I hoped this would reduce compile times of RDF-heavy code, but on an artificial benchmark the changes have little to no effect. This might be a good refactoring to have nonetheless. What do people think? In order to minimize conflicts with other PRs, this must be merged after:. - https://github.com/root-project/root/pull/11314. - https://github.com/root-project/root/pull/11307. - https://github.com/root-project/root/pull/11306. - https://github.com/root-project/root/pull/11149",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11121
https://github.com/root-project/root/pull/11121:198,testability,log,logic,198,"[DF] Move large parts of RInterface to a non-template base class; This is to reduce the amount of code generated for every separate. RInterface instantiation. The PR should not otherwise modify any logic or functionality. I hoped this would reduce compile times of RDF-heavy code, but on an artificial benchmark the changes have little to no effect. This might be a good refactoring to have nonetheless. What do people think? In order to minimize conflicts with other PRs, this must be merged after:. - https://github.com/root-project/root/pull/11314. - https://github.com/root-project/root/pull/11307. - https://github.com/root-project/root/pull/11306. - https://github.com/root-project/root/pull/11149",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11121
https://github.com/root-project/root/pull/11121:438,usability,minim,minimize,438,"[DF] Move large parts of RInterface to a non-template base class; This is to reduce the amount of code generated for every separate. RInterface instantiation. The PR should not otherwise modify any logic or functionality. I hoped this would reduce compile times of RDF-heavy code, but on an artificial benchmark the changes have little to no effect. This might be a good refactoring to have nonetheless. What do people think? In order to minimize conflicts with other PRs, this must be merged after:. - https://github.com/root-project/root/pull/11314. - https://github.com/root-project/root/pull/11307. - https://github.com/root-project/root/pull/11306. - https://github.com/root-project/root/pull/11149",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11121
https://github.com/root-project/root/pull/11122:8,deployability,Updat,Update,8,[v6-24] Update the freetype library from 2.6.1 to 2.12.1; This fixes the graphics with the latest Visual Studio 2022 (17.2),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11122
https://github.com/root-project/root/pull/11122:8,safety,Updat,Update,8,[v6-24] Update the freetype library from 2.6.1 to 2.12.1; This fixes the graphics with the latest Visual Studio 2022 (17.2),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11122
https://github.com/root-project/root/pull/11122:8,security,Updat,Update,8,[v6-24] Update the freetype library from 2.6.1 to 2.12.1; This fixes the graphics with the latest Visual Studio 2022 (17.2),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11122
https://github.com/root-project/root/pull/11122:98,usability,Visual,Visual,98,[v6-24] Update the freetype library from 2.6.1 to 2.12.1; This fixes the graphics with the latest Visual Studio 2022 (17.2),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11122
https://github.com/root-project/root/pull/11123:198,energy efficiency,model,model,198,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:441,energy efficiency,profil,profile,441,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:46,integrability,Batch,BatchMode,46,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:85,integrability,Batch,BatchMode,85,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:175,integrability,Batch,BatchMode,175,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:236,integrability,Batch,BatchModeHelpers,236,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:271,integrability,interfac,interface,271,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:345,integrability,Batch,BatchMode,345,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:480,integrability,Batch,BatchMode,480,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:578,integrability,Batch,BatchMode,578,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:271,interoperability,interfac,interface,271,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:119,modifiability,variab,variable,119,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:271,modifiability,interfac,interface,271,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:408,modifiability,exten,extending,408,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:46,performance,Batch,BatchMode,46,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:85,performance,Batch,BatchMode,85,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:175,performance,Batch,BatchMode,175,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:236,performance,Batch,BatchModeHelpers,236,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:345,performance,Batch,BatchMode,345,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:441,performance,profil,profile,441,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:480,performance,Batch,BatchMode,480,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:542,performance,time,times,542,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:578,performance,Batch,BatchMode,578,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:185,reliability,doe,doesn,185,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:98,safety,Avoid,Avoid,98,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:198,security,model,model,198,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/pull/11123:423,testability,coverag,coverage,423,"[RF] Necessary changes to RooFit plotting and BatchMode to plot likelihoods that use BatchMode; * Avoid coning of plot variable twice then plotting a `RooAbsReal`, as the new BatchMode doesn't like model cloning. * Some minor fixes in `BatchModeHelpers`. * Improving the interface of `RooAbsReal::createPlotProjection`. * Use also the different BatchMode backends in the `createNLL` calls in `stressRooFit`, extending text coverage also to (profile) likelihood scans with the new BatchMode. The likelihood scans in the tutorials are up to 10 times faster now when using the new BatchMode compared to RooFit legacy. More detail can be found in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11123
https://github.com/root-project/root/issues/11124:315,availability,error,error,315,"Several improvements of df103_NanoAODHiggsAnalysis.C; There is a missing include in `df103_NanoAODHiggsAnalysis.C`. Trying to compile gives:. ```. $ g++ -g -Wall -Wextra -Wpedantic -O2 -o h higgs.cpp $(root-config --cflags --libs). higgs.cpp: In function 'void df103_NanoAODHiggsAnalysis(bool)':. higgs.cpp:459:15: error: 'RunGraphs' is not a member of 'ROOT::RDF'. 459 | ROOT::RDF::RunGraphs({df_h_sig_4mu, df_h_bkg_4mu, df_h_data_4mu,. | . ```. Quickfix: `#include <ROOT/RDFHelpers.hxx>`. Also, currently I get the following warnings:. ```. Warning in <TCanvas::Constructor>: Deleting canvas with same name: c. ... Warning in <TCanvas::Constructor>: Deleting canvas with same name: c. ... Warning in <TCanvas::Constructor>: Deleting canvas with same name: c. ```. CC: @eguiraud",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:497,energy efficiency,current,currently,497,"Several improvements of df103_NanoAODHiggsAnalysis.C; There is a missing include in `df103_NanoAODHiggsAnalysis.C`. Trying to compile gives:. ```. $ g++ -g -Wall -Wextra -Wpedantic -O2 -o h higgs.cpp $(root-config --cflags --libs). higgs.cpp: In function 'void df103_NanoAODHiggsAnalysis(bool)':. higgs.cpp:459:15: error: 'RunGraphs' is not a member of 'ROOT::RDF'. 459 | ROOT::RDF::RunGraphs({df_h_sig_4mu, df_h_bkg_4mu, df_h_data_4mu,. | . ```. Quickfix: `#include <ROOT/RDFHelpers.hxx>`. Also, currently I get the following warnings:. ```. Warning in <TCanvas::Constructor>: Deleting canvas with same name: c. ... Warning in <TCanvas::Constructor>: Deleting canvas with same name: c. ... Warning in <TCanvas::Constructor>: Deleting canvas with same name: c. ```. CC: @eguiraud",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:315,performance,error,error,315,"Several improvements of df103_NanoAODHiggsAnalysis.C; There is a missing include in `df103_NanoAODHiggsAnalysis.C`. Trying to compile gives:. ```. $ g++ -g -Wall -Wextra -Wpedantic -O2 -o h higgs.cpp $(root-config --cflags --libs). higgs.cpp: In function 'void df103_NanoAODHiggsAnalysis(bool)':. higgs.cpp:459:15: error: 'RunGraphs' is not a member of 'ROOT::RDF'. 459 | ROOT::RDF::RunGraphs({df_h_sig_4mu, df_h_bkg_4mu, df_h_data_4mu,. | . ```. Quickfix: `#include <ROOT/RDFHelpers.hxx>`. Also, currently I get the following warnings:. ```. Warning in <TCanvas::Constructor>: Deleting canvas with same name: c. ... Warning in <TCanvas::Constructor>: Deleting canvas with same name: c. ... Warning in <TCanvas::Constructor>: Deleting canvas with same name: c. ```. CC: @eguiraud",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:315,safety,error,error,315,"Several improvements of df103_NanoAODHiggsAnalysis.C; There is a missing include in `df103_NanoAODHiggsAnalysis.C`. Trying to compile gives:. ```. $ g++ -g -Wall -Wextra -Wpedantic -O2 -o h higgs.cpp $(root-config --cflags --libs). higgs.cpp: In function 'void df103_NanoAODHiggsAnalysis(bool)':. higgs.cpp:459:15: error: 'RunGraphs' is not a member of 'ROOT::RDF'. 459 | ROOT::RDF::RunGraphs({df_h_sig_4mu, df_h_bkg_4mu, df_h_data_4mu,. | . ```. Quickfix: `#include <ROOT/RDFHelpers.hxx>`. Also, currently I get the following warnings:. ```. Warning in <TCanvas::Constructor>: Deleting canvas with same name: c. ... Warning in <TCanvas::Constructor>: Deleting canvas with same name: c. ... Warning in <TCanvas::Constructor>: Deleting canvas with same name: c. ```. CC: @eguiraud",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/issues/11124:315,usability,error,error,315,"Several improvements of df103_NanoAODHiggsAnalysis.C; There is a missing include in `df103_NanoAODHiggsAnalysis.C`. Trying to compile gives:. ```. $ g++ -g -Wall -Wextra -Wpedantic -O2 -o h higgs.cpp $(root-config --cflags --libs). higgs.cpp: In function 'void df103_NanoAODHiggsAnalysis(bool)':. higgs.cpp:459:15: error: 'RunGraphs' is not a member of 'ROOT::RDF'. 459 | ROOT::RDF::RunGraphs({df_h_sig_4mu, df_h_bkg_4mu, df_h_data_4mu,. | . ```. Quickfix: `#include <ROOT/RDFHelpers.hxx>`. Also, currently I get the following warnings:. ```. Warning in <TCanvas::Constructor>: Deleting canvas with same name: c. ... Warning in <TCanvas::Constructor>: Deleting canvas with same name: c. ... Warning in <TCanvas::Constructor>: Deleting canvas with same name: c. ```. CC: @eguiraud",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11124
https://github.com/root-project/root/pull/11125:552,deployability,api,api-guidelines,552,"[DF] Rename RDF factory functions; This PR changes names such as `ROOT::RDF::MakeCsvDataFrame` to the nicer/clearer convention `ROOT::RDF::FromCSV`, deprecating the previous spellings. Although what's nicer and clearer is generally subjective, I think there is strong enough evidence in this case to warrant the change: . - https://root-forum.cern.ch/t/makenumpydataframe-function-name/50566. - the `FromXXX` naming convention is already widespread across libraries and programming languages (e.g. [rust naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#naming), [pandas](https://pandas.pydata.org/pandas-docs/stable/reference/frame.html#serialization-io-conversion). - the current naming convention does not work for factory functions that we might want in the future such as `ROOT::RDF::FromJSONDatasetSpec` (`MakeJSONDatasetSpecDataFrame`, `MakeJSONDataFrame`?). ### To do. - [x] check with @jblomer that moving `ROOT::Experimental::MakeNTupleDataFrame` to `ROOT::RDF::Experimental::FromNTuple` (not the change of namespace) is ok. - [x] rename `ROOT.RDF.MakeNumpyDataFrame` to `ROOT.RDF.FromNumpy`: @etejedor how do I deprecate a Python-only method? - [x] `FromCSV` vs `FromCsv` -- I think it should be `CSV`, just like we already have [`TBufferJSON::FromJSON`](https://root.cern/doc/master/classTBufferJSON.html#abefb8455a4514bc7ea5e722ebd2dc203). P.S. in case it wasn't clear, this is basically a RFC :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:699,energy efficiency,current,current,699,"[DF] Rename RDF factory functions; This PR changes names such as `ROOT::RDF::MakeCsvDataFrame` to the nicer/clearer convention `ROOT::RDF::FromCSV`, deprecating the previous spellings. Although what's nicer and clearer is generally subjective, I think there is strong enough evidence in this case to warrant the change: . - https://root-forum.cern.ch/t/makenumpydataframe-function-name/50566. - the `FromXXX` naming convention is already widespread across libraries and programming languages (e.g. [rust naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#naming), [pandas](https://pandas.pydata.org/pandas-docs/stable/reference/frame.html#serialization-io-conversion). - the current naming convention does not work for factory functions that we might want in the future such as `ROOT::RDF::FromJSONDatasetSpec` (`MakeJSONDatasetSpecDataFrame`, `MakeJSONDataFrame`?). ### To do. - [x] check with @jblomer that moving `ROOT::Experimental::MakeNTupleDataFrame` to `ROOT::RDF::Experimental::FromNTuple` (not the change of namespace) is ok. - [x] rename `ROOT.RDF.MakeNumpyDataFrame` to `ROOT.RDF.FromNumpy`: @etejedor how do I deprecate a Python-only method? - [x] `FromCSV` vs `FromCsv` -- I think it should be `CSV`, just like we already have [`TBufferJSON::FromJSON`](https://root.cern/doc/master/classTBufferJSON.html#abefb8455a4514bc7ea5e722ebd2dc203). P.S. in case it wasn't clear, this is basically a RFC :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:232,integrability,sub,subjective,232,"[DF] Rename RDF factory functions; This PR changes names such as `ROOT::RDF::MakeCsvDataFrame` to the nicer/clearer convention `ROOT::RDF::FromCSV`, deprecating the previous spellings. Although what's nicer and clearer is generally subjective, I think there is strong enough evidence in this case to warrant the change: . - https://root-forum.cern.ch/t/makenumpydataframe-function-name/50566. - the `FromXXX` naming convention is already widespread across libraries and programming languages (e.g. [rust naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#naming), [pandas](https://pandas.pydata.org/pandas-docs/stable/reference/frame.html#serialization-io-conversion). - the current naming convention does not work for factory functions that we might want in the future such as `ROOT::RDF::FromJSONDatasetSpec` (`MakeJSONDatasetSpecDataFrame`, `MakeJSONDataFrame`?). ### To do. - [x] check with @jblomer that moving `ROOT::Experimental::MakeNTupleDataFrame` to `ROOT::RDF::Experimental::FromNTuple` (not the change of namespace) is ok. - [x] rename `ROOT.RDF.MakeNumpyDataFrame` to `ROOT.RDF.FromNumpy`: @etejedor how do I deprecate a Python-only method? - [x] `FromCSV` vs `FromCsv` -- I think it should be `CSV`, just like we already have [`TBufferJSON::FromJSON`](https://root.cern/doc/master/classTBufferJSON.html#abefb8455a4514bc7ea5e722ebd2dc203). P.S. in case it wasn't clear, this is basically a RFC :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:552,integrability,api,api-guidelines,552,"[DF] Rename RDF factory functions; This PR changes names such as `ROOT::RDF::MakeCsvDataFrame` to the nicer/clearer convention `ROOT::RDF::FromCSV`, deprecating the previous spellings. Although what's nicer and clearer is generally subjective, I think there is strong enough evidence in this case to warrant the change: . - https://root-forum.cern.ch/t/makenumpydataframe-function-name/50566. - the `FromXXX` naming convention is already widespread across libraries and programming languages (e.g. [rust naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#naming), [pandas](https://pandas.pydata.org/pandas-docs/stable/reference/frame.html#serialization-io-conversion). - the current naming convention does not work for factory functions that we might want in the future such as `ROOT::RDF::FromJSONDatasetSpec` (`MakeJSONDatasetSpecDataFrame`, `MakeJSONDataFrame`?). ### To do. - [x] check with @jblomer that moving `ROOT::Experimental::MakeNTupleDataFrame` to `ROOT::RDF::Experimental::FromNTuple` (not the change of namespace) is ok. - [x] rename `ROOT.RDF.MakeNumpyDataFrame` to `ROOT.RDF.FromNumpy`: @etejedor how do I deprecate a Python-only method? - [x] `FromCSV` vs `FromCsv` -- I think it should be `CSV`, just like we already have [`TBufferJSON::FromJSON`](https://root.cern/doc/master/classTBufferJSON.html#abefb8455a4514bc7ea5e722ebd2dc203). P.S. in case it wasn't clear, this is basically a RFC :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:552,interoperability,api,api-guidelines,552,"[DF] Rename RDF factory functions; This PR changes names such as `ROOT::RDF::MakeCsvDataFrame` to the nicer/clearer convention `ROOT::RDF::FromCSV`, deprecating the previous spellings. Although what's nicer and clearer is generally subjective, I think there is strong enough evidence in this case to warrant the change: . - https://root-forum.cern.ch/t/makenumpydataframe-function-name/50566. - the `FromXXX` naming convention is already widespread across libraries and programming languages (e.g. [rust naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#naming), [pandas](https://pandas.pydata.org/pandas-docs/stable/reference/frame.html#serialization-io-conversion). - the current naming convention does not work for factory functions that we might want in the future such as `ROOT::RDF::FromJSONDatasetSpec` (`MakeJSONDatasetSpecDataFrame`, `MakeJSONDataFrame`?). ### To do. - [x] check with @jblomer that moving `ROOT::Experimental::MakeNTupleDataFrame` to `ROOT::RDF::Experimental::FromNTuple` (not the change of namespace) is ok. - [x] rename `ROOT.RDF.MakeNumpyDataFrame` to `ROOT.RDF.FromNumpy`: @etejedor how do I deprecate a Python-only method? - [x] `FromCSV` vs `FromCsv` -- I think it should be `CSV`, just like we already have [`TBufferJSON::FromJSON`](https://root.cern/doc/master/classTBufferJSON.html#abefb8455a4514bc7ea5e722ebd2dc203). P.S. in case it wasn't clear, this is basically a RFC :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:680,interoperability,convers,conversion,680,"[DF] Rename RDF factory functions; This PR changes names such as `ROOT::RDF::MakeCsvDataFrame` to the nicer/clearer convention `ROOT::RDF::FromCSV`, deprecating the previous spellings. Although what's nicer and clearer is generally subjective, I think there is strong enough evidence in this case to warrant the change: . - https://root-forum.cern.ch/t/makenumpydataframe-function-name/50566. - the `FromXXX` naming convention is already widespread across libraries and programming languages (e.g. [rust naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#naming), [pandas](https://pandas.pydata.org/pandas-docs/stable/reference/frame.html#serialization-io-conversion). - the current naming convention does not work for factory functions that we might want in the future such as `ROOT::RDF::FromJSONDatasetSpec` (`MakeJSONDatasetSpecDataFrame`, `MakeJSONDataFrame`?). ### To do. - [x] check with @jblomer that moving `ROOT::Experimental::MakeNTupleDataFrame` to `ROOT::RDF::Experimental::FromNTuple` (not the change of namespace) is ok. - [x] rename `ROOT.RDF.MakeNumpyDataFrame` to `ROOT.RDF.FromNumpy`: @etejedor how do I deprecate a Python-only method? - [x] `FromCSV` vs `FromCsv` -- I think it should be `CSV`, just like we already have [`TBufferJSON::FromJSON`](https://root.cern/doc/master/classTBufferJSON.html#abefb8455a4514bc7ea5e722ebd2dc203). P.S. in case it wasn't clear, this is basically a RFC :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:725,reliability,doe,does,725,"[DF] Rename RDF factory functions; This PR changes names such as `ROOT::RDF::MakeCsvDataFrame` to the nicer/clearer convention `ROOT::RDF::FromCSV`, deprecating the previous spellings. Although what's nicer and clearer is generally subjective, I think there is strong enough evidence in this case to warrant the change: . - https://root-forum.cern.ch/t/makenumpydataframe-function-name/50566. - the `FromXXX` naming convention is already widespread across libraries and programming languages (e.g. [rust naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#naming), [pandas](https://pandas.pydata.org/pandas-docs/stable/reference/frame.html#serialization-io-conversion). - the current naming convention does not work for factory functions that we might want in the future such as `ROOT::RDF::FromJSONDatasetSpec` (`MakeJSONDatasetSpecDataFrame`, `MakeJSONDataFrame`?). ### To do. - [x] check with @jblomer that moving `ROOT::Experimental::MakeNTupleDataFrame` to `ROOT::RDF::Experimental::FromNTuple` (not the change of namespace) is ok. - [x] rename `ROOT.RDF.MakeNumpyDataFrame` to `ROOT.RDF.FromNumpy`: @etejedor how do I deprecate a Python-only method? - [x] `FromCSV` vs `FromCsv` -- I think it should be `CSV`, just like we already have [`TBufferJSON::FromJSON`](https://root.cern/doc/master/classTBufferJSON.html#abefb8455a4514bc7ea5e722ebd2dc203). P.S. in case it wasn't clear, this is basically a RFC :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:108,usability,clear,clearer,108,"[DF] Rename RDF factory functions; This PR changes names such as `ROOT::RDF::MakeCsvDataFrame` to the nicer/clearer convention `ROOT::RDF::FromCSV`, deprecating the previous spellings. Although what's nicer and clearer is generally subjective, I think there is strong enough evidence in this case to warrant the change: . - https://root-forum.cern.ch/t/makenumpydataframe-function-name/50566. - the `FromXXX` naming convention is already widespread across libraries and programming languages (e.g. [rust naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#naming), [pandas](https://pandas.pydata.org/pandas-docs/stable/reference/frame.html#serialization-io-conversion). - the current naming convention does not work for factory functions that we might want in the future such as `ROOT::RDF::FromJSONDatasetSpec` (`MakeJSONDatasetSpecDataFrame`, `MakeJSONDataFrame`?). ### To do. - [x] check with @jblomer that moving `ROOT::Experimental::MakeNTupleDataFrame` to `ROOT::RDF::Experimental::FromNTuple` (not the change of namespace) is ok. - [x] rename `ROOT.RDF.MakeNumpyDataFrame` to `ROOT.RDF.FromNumpy`: @etejedor how do I deprecate a Python-only method? - [x] `FromCSV` vs `FromCsv` -- I think it should be `CSV`, just like we already have [`TBufferJSON::FromJSON`](https://root.cern/doc/master/classTBufferJSON.html#abefb8455a4514bc7ea5e722ebd2dc203). P.S. in case it wasn't clear, this is basically a RFC :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:211,usability,clear,clearer,211,"[DF] Rename RDF factory functions; This PR changes names such as `ROOT::RDF::MakeCsvDataFrame` to the nicer/clearer convention `ROOT::RDF::FromCSV`, deprecating the previous spellings. Although what's nicer and clearer is generally subjective, I think there is strong enough evidence in this case to warrant the change: . - https://root-forum.cern.ch/t/makenumpydataframe-function-name/50566. - the `FromXXX` naming convention is already widespread across libraries and programming languages (e.g. [rust naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#naming), [pandas](https://pandas.pydata.org/pandas-docs/stable/reference/frame.html#serialization-io-conversion). - the current naming convention does not work for factory functions that we might want in the future such as `ROOT::RDF::FromJSONDatasetSpec` (`MakeJSONDatasetSpecDataFrame`, `MakeJSONDataFrame`?). ### To do. - [x] check with @jblomer that moving `ROOT::Experimental::MakeNTupleDataFrame` to `ROOT::RDF::Experimental::FromNTuple` (not the change of namespace) is ok. - [x] rename `ROOT.RDF.MakeNumpyDataFrame` to `ROOT.RDF.FromNumpy`: @etejedor how do I deprecate a Python-only method? - [x] `FromCSV` vs `FromCsv` -- I think it should be `CSV`, just like we already have [`TBufferJSON::FromJSON`](https://root.cern/doc/master/classTBufferJSON.html#abefb8455a4514bc7ea5e722ebd2dc203). P.S. in case it wasn't clear, this is basically a RFC :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:556,usability,guid,guidelines,556,"[DF] Rename RDF factory functions; This PR changes names such as `ROOT::RDF::MakeCsvDataFrame` to the nicer/clearer convention `ROOT::RDF::FromCSV`, deprecating the previous spellings. Although what's nicer and clearer is generally subjective, I think there is strong enough evidence in this case to warrant the change: . - https://root-forum.cern.ch/t/makenumpydataframe-function-name/50566. - the `FromXXX` naming convention is already widespread across libraries and programming languages (e.g. [rust naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#naming), [pandas](https://pandas.pydata.org/pandas-docs/stable/reference/frame.html#serialization-io-conversion). - the current naming convention does not work for factory functions that we might want in the future such as `ROOT::RDF::FromJSONDatasetSpec` (`MakeJSONDatasetSpecDataFrame`, `MakeJSONDataFrame`?). ### To do. - [x] check with @jblomer that moving `ROOT::Experimental::MakeNTupleDataFrame` to `ROOT::RDF::Experimental::FromNTuple` (not the change of namespace) is ok. - [x] rename `ROOT.RDF.MakeNumpyDataFrame` to `ROOT.RDF.FromNumpy`: @etejedor how do I deprecate a Python-only method? - [x] `FromCSV` vs `FromCsv` -- I think it should be `CSV`, just like we already have [`TBufferJSON::FromJSON`](https://root.cern/doc/master/classTBufferJSON.html#abefb8455a4514bc7ea5e722ebd2dc203). P.S. in case it wasn't clear, this is basically a RFC :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11125:1401,usability,clear,clear,1401,"[DF] Rename RDF factory functions; This PR changes names such as `ROOT::RDF::MakeCsvDataFrame` to the nicer/clearer convention `ROOT::RDF::FromCSV`, deprecating the previous spellings. Although what's nicer and clearer is generally subjective, I think there is strong enough evidence in this case to warrant the change: . - https://root-forum.cern.ch/t/makenumpydataframe-function-name/50566. - the `FromXXX` naming convention is already widespread across libraries and programming languages (e.g. [rust naming conventions](https://rust-lang.github.io/api-guidelines/naming.html#naming), [pandas](https://pandas.pydata.org/pandas-docs/stable/reference/frame.html#serialization-io-conversion). - the current naming convention does not work for factory functions that we might want in the future such as `ROOT::RDF::FromJSONDatasetSpec` (`MakeJSONDatasetSpecDataFrame`, `MakeJSONDataFrame`?). ### To do. - [x] check with @jblomer that moving `ROOT::Experimental::MakeNTupleDataFrame` to `ROOT::RDF::Experimental::FromNTuple` (not the change of namespace) is ok. - [x] rename `ROOT.RDF.MakeNumpyDataFrame` to `ROOT.RDF.FromNumpy`: @etejedor how do I deprecate a Python-only method? - [x] `FromCSV` vs `FromCsv` -- I think it should be `CSV`, just like we already have [`TBufferJSON::FromJSON`](https://root.cern/doc/master/classTBufferJSON.html#abefb8455a4514bc7ea5e722ebd2dc203). P.S. in case it wasn't clear, this is basically a RFC :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11125
https://github.com/root-project/root/pull/11127:44,usability,help,helper,44,[DF] Use generic lambda instead of template helper function; Lambdas are implicitly marked constexpr whenever possible already. in C++14.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11127
https://github.com/root-project/root/issues/11128:751,availability,Error,Error,751,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:2147,availability,error,error,2147,"dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:2483,availability,error,error,2483,"ib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:2830,availability,error,error,2830,"MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:3192,availability,error,error,3192,"case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration typ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:3579,availability,error,error,3579,"~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:3915,availability,error,error,3915,"G):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:4262,availability,error,error,4262," | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:4624,availability,error,error,4624,"case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration typ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:5011,availability,error,error,5011,"~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:5347,availability,error,error,5347,"G):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:5694,availability,error,error,5694," | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6056,availability,error,error,6056,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6382,availability,error,errors,6382,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6698,availability,failur,failure,6698,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:12,deployability,build,build,12,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:143,deployability,build,build,143,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:172,deployability,fail,fails,172,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:243,deployability,version,version,243,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:258,deployability,version,version,258,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:410,deployability,Instal,InstalledDir,410,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:772,deployability,FAIL,FAILED,772,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1443,deployability,Build,Build,1443,"n. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6412,deployability,Build,Building,6412,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6487,deployability,build,build,6487,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6513,deployability,fail,failed,6513,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6568,deployability,build,build,6568,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6605,deployability,version,version,6605,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6698,deployability,fail,failure,6698,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:396,energy efficiency,model,model,396,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:924,energy efficiency,core,core,924,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:959,energy efficiency,core,core,959,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1003,energy efficiency,core,core,1003," can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollect",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1041,energy efficiency,core,core,1041," added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1082,energy efficiency,core,core,1082,"r; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1122,energy efficiency,core,core,1122,"ing clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollecti",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1159,energy efficiency,core,core,1159,"ranch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case va",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1193,energy efficiency,core,core,1193,"e is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1228,energy efficiency,core,core,1228,"`. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1263,energy efficiency,core,core,1263," 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/de",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1298,energy efficiency,core,core,1298,"vm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1332,energy efficiency,core,core,1332,"84815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer val",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1367,energy efficiency,core,core,1367,"-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid r",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1408,energy efficiency,core,core,1408,"InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumerati",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1479,energy efficiency,core,core,1479," -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:243,integrability,version,version,243,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:258,integrability,version,version,258,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:757,integrability,messag,message,757,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6502,integrability,sub,subcommand,6502,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6605,integrability,version,version,6605,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6813,integrability,discover,discovered,6813,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:757,interoperability,messag,message,757,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1742,interoperability,convers,conversion,1742,"ts. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6813,interoperability,discover,discovered,6813,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:243,modifiability,version,version,243,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:258,modifiability,version,version,258,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6605,modifiability,version,version,6605,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:751,performance,Error,Error,751,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:2147,performance,error,error,2147,"dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:2483,performance,error,error,2483,"ib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:2830,performance,error,error,2830,"MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:3192,performance,error,error,3192,"case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration typ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:3579,performance,error,error,3579,"~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:3915,performance,error,error,3915,"G):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:4262,performance,error,error,4262," | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:4624,performance,error,error,4624,"case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration typ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:5011,performance,error,error,5011,"~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:5347,performance,error,error,5347,"G):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:5694,performance,error,error,5694," | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6056,performance,error,error,6056,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6382,performance,error,errors,6382,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6561,performance,time,time,6561,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6698,performance,failur,failure,6698,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:50,reliability,diagno,diagnostic,50,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:172,reliability,fail,fails,172,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:772,reliability,FAIL,FAILED,772,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1531,reliability,diagno,diagnostics,1531,"ANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case E",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6513,reliability,fail,failed,6513,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6698,reliability,fail,failure,6698,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6764,reliability,diagno,diagnostic,6764,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:751,safety,Error,Error,751,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:2147,safety,error,error,2147,"dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:2362,safety,valid,valid,2362,"t/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:2483,safety,error,error,2483,"ib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:2709,safety,valid,valid,2709,"t-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:2830,safety,error,error,2830,"MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:3071,safety,valid,valid,3071,"mer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenColl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:3192,safety,error,error,3192,"case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration typ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:3458,safety,valid,valid,3458,"nStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: not",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:3579,safety,error,error,3579,"~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:3794,safety,valid,valid,3794,"enCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:3915,safety,error,error,3915,"G):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:4141,safety,valid,valid,4141,"ot/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:4262,safety,error,error,4262," | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:4503,safety,valid,valid,4503,"on type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenColl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:4624,safety,error,error,4624,"case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration typ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:4890,safety,valid,valid,4890,"nStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: not",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:5011,safety,error,error,5011,"~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:5226,safety,valid,valid,5226,"enCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:5347,safety,error,error,5347,"G):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:5573,safety,valid,valid,5573,"ot/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build RO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:5694,safety,error,error,5694," | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:5935,safety,valid,valid,5935,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6056,safety,error,error,6056,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6322,safety,valid,valid,6322,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6382,safety,error,errors,6382,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:396,security,model,model,396,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:50,testability,diagno,diagnostic,50,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:1531,testability,diagno,diagnostics,1531,"ANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case E",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6764,testability,diagno,diagnostic,6764,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:77,usability,behavi,behavior,77,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:460,usability,command,commands,460,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:751,usability,Error,Error,751,"Clang can't build ROOT anymore due to a new added diagnostic about undefined behavior; - [x] Checked for duplicates. When using clang trunk to build ROOT (main branch), it fails due to `case value is not a constant expression`. ```. ❯ clang --version. clang version 16.0.0 (https://github.com/llvm/llvm-project/ dde41c6c560b67165c7ac884815cd50fdce446f8). Target: x86_64-unknown-linux-gnu. Thread model: posix. InstalledDir: /home/jun/opt/clang/bin. ```. cmake commands:. ```. cmake -DCMAKE_BUILD_TYPE=Debug \. -DCMAKE_EXPORT_COMPILE_COMMANDS=YES \. -DCMAKE_C_COMPILER=clang \. -DCMAKE_CXX_COMPILER=clang++ \. -DCMAKE_EXE_LINKER_FLAGS=""-fuse-ld=lld"" \. -GNinja .. ```. System info:. I have tried Ubuntu 22 and WSL (Ubuntu 20) and got the same results. Error message:. ```. FAILED: io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o . /home/jun/opt/clang/bin/clang++ -I/home/jun/dev/root/io/io/inc -I/home/jun/dev/root/core/unix/inc -I/home/jun/dev/root/core/foundation/v7/inc -I/home/jun/dev/root/core/base/v7/inc -I/home/jun/dev/root/core/clingutils/inc -I/home/jun/dev/root/core/textinput/inc -I/home/jun/dev/root/core/thread/inc -I/home/jun/dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:2147,usability,error,error,2147,"dev/root/core/zip/inc -I/home/jun/dev/root/core/rint/inc -I/home/jun/dev/root/core/clib/inc -I/home/jun/dev/root/core/meta/inc -I/home/jun/dev/root/core/gui/inc -I/home/jun/dev/root/core/cont/inc -I/home/jun/dev/root/core/foundation/inc -I/home/jun/dev/root/core/base/inc -I/home/jun/dev/root/Build/ginclude -I/home/jun/dev/root/core/clib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:2483,usability,error,error,2483,"ib/res -I/home/jun/dev/root/builtins -fcolor-diagnostics -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -pipe -Wall -W -Woverloaded-virtual -fsigned-char -pthread -g -fPIC -std=c++14 -MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:2830,usability,error,error,2830,"MD -MT io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -MF io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o.d -o io/io/CMakeFiles/RIO.dir/src/TGenCollectionStreamer.cxx.o -c /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:3192,usability,error,error,3192,"case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:392:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration typ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:3579,usability,error,error,3579,"~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:394:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:3915,usability,error,error,3915,"G):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:396:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:4262,usability,error,error,4262," | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:398:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:4624,usability,error,error,4624,"case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:445:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration typ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:5011,usability,error,error,5011,"~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:450:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:5347,usability,error,error,5347,"G):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:454:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:5694,usability,error,error,5694," | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6056,usability,error,error,6056,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6382,usability,error,errors,6382,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6493,usability,stop,stopped,6493,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/issues/11128:6813,usability,discov,discovered,6813,"mer.cxx:458:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: error: case value is not a constant expression. case EProperty(kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:867:18: note: integer value 536870912 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: error: case value is not a constant expression. case EProperty(kIsPointer | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:870:18: note: integer value 4097 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISSTRING):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:873:18: note: integer value 536875008 is outside the valid range of values [0, 63] for this enumeration type. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: error: case value is not a constant expression. case EProperty(kIsPointer | kBIT_ISTSTRING | kIsClass):. ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /home/jun/dev/root/io/io/src/TGenCollectionStreamer.cxx:876:18: note: integer value 1073745921 is outside the valid range of values [0, 63] for this enumeration type. 12 errors generated. [4730/6768] Building CXX object io/io/CMakeFiles/RIO.dir/src/TBufferJSON.cxx.o. ninja: build stopped: subcommand failed. ```. In addition, I found that the last time I build ROOT using clang trunk (before version 16), it was fine. So I guess there're some changes in the upstream that trigger this failure. However, I'm not sure if is it a false positive of clang diagnostic or a potential bug in ROOT we haven't discovered yet.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11128
https://github.com/root-project/root/pull/11129:186,deployability,depend,depend,186,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:484,deployability,observ,observables,484,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:57,integrability,interfac,interface,57,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:186,integrability,depend,depend,186,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:260,integrability,Batch,BatchMode,260,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:293,integrability,interfac,interface,293,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:43,interoperability,client-serv,client-server,43,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:57,interoperability,interfac,interface,57,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:293,interoperability,interfac,interface,293,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:552,interoperability,prox,proxies,552,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:57,modifiability,interfac,interface,57,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:186,modifiability,depend,depend,186,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:293,modifiability,interfac,interface,293,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:260,performance,Batch,BatchMode,260,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:640,reliability,doe,does,640,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:186,safety,depend,depend,186,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:186,testability,depend,depend,186,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/pull/11129:484,testability,observ,observables,484,"[RF] Make RooRealIntegral conform with the client-server interface; In pass through mode, the RooRealIntegral should have registered the. function as a value server, because we directly depend on its value. It's important to do this correctly, because the new BatchMode uses the. value server interface to analyze the computation graph. Furthermore, it is now ensured that in pass-through mode, no servers are. registered other than the actual function and the additional factorized. observables. There are also some other commits to ensure no invalid proxies are created. via copy/move assignment and construction. Final commit in this PR does some code modernization of the RooRealIntegral.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11129
https://github.com/root-project/root/issues/11130:376,availability,error,error,376,"ROOT doesn't compile with new nlohmann-json version 3.11.0; from https://github.com/root-project/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:446,availability,operat,operator,446,"ROOT doesn't compile with new nlohmann-json version 3.11.0; from https://github.com/root-project/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1345,availability,Error,Error,1345,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1428,availability,Operat,Operating,1428,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1643,availability,Error,Error,1643,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1810,availability,error,error,1810,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2167,availability,error,error,2167,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2253,availability,Error,Error,2253,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2260,availability,Error,Error,2260,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:44,deployability,version,version,44,"ROOT doesn't compile with new nlohmann-json version 3.11.0; from https://github.com/root-project/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:152,deployability,Build,Building,152,"ROOT doesn't compile with new nlohmann-json version 3.11.0; from https://github.com/root-project/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:273,deployability,build,build,273,"ROOT doesn't compile with new nlohmann-json version 3.11.0; from https://github.com/root-project/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1087,deployability,upgrad,upgraded,1087,"oject/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file inclu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1275,deployability,Instal,Install,1275,"root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1330,deployability,build,build,1330,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1358,deployability,build,build,1358,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1384,deployability,version,version,1384,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1415,deployability,version,version,1415,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1465,deployability,Build,Build,1465,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1649,deployability,log,log,1649,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1961,deployability,build,build,1961,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1976,deployability,build,build,1976,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2266,energy efficiency,load,loading,2266,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:44,integrability,version,version,44,"ROOT doesn't compile with new nlohmann-json version 3.11.0; from https://github.com/root-project/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1384,integrability,version,version,1384,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1415,integrability,version,version,1415,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:672,interoperability,convers,conversions,672,"ROOT doesn't compile with new nlohmann-json version 3.11.0; from https://github.com/root-project/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1598,interoperability,specif,specific,1598,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1621,interoperability,stub,stubs-,1621,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2147,interoperability,stub,stubs,2147,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2179,interoperability,stub,stubs-,2179,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2222,interoperability,stub,stubs-,2222,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:44,modifiability,version,version,44,"ROOT doesn't compile with new nlohmann-json version 3.11.0; from https://github.com/root-project/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1087,modifiability,upgrad,upgraded,1087,"oject/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file inclu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1384,modifiability,version,version,1384,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1415,modifiability,version,version,1415,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:376,performance,error,error,376,"ROOT doesn't compile with new nlohmann-json version 3.11.0; from https://github.com/root-project/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1345,performance,Error,Error,1345,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1643,performance,Error,Error,1643,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1810,performance,error,error,1810,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2167,performance,error,error,2167,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2253,performance,Error,Error,2253,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2260,performance,Error,Error,2260,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2266,performance,load,loading,2266,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:5,reliability,doe,doesn,5,"ROOT doesn't compile with new nlohmann-json version 3.11.0; from https://github.com/root-project/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:220,safety,Test,TestStatistics,220,"ROOT doesn't compile with new nlohmann-json version 3.11.0; from https://github.com/root-project/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:376,safety,error,error,376,"ROOT doesn't compile with new nlohmann-json version 3.11.0; from https://github.com/root-project/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:618,safety,except,exceptions,618,"ROOT doesn't compile with new nlohmann-json version 3.11.0; from https://github.com/root-project/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1345,safety,Error,Error,1345,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1643,safety,Error,Error,1643,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1649,safety,log,log,1649,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1810,safety,error,error,1810,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2167,safety,error,error,2167,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2253,safety,Error,Error,2253,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2260,safety,Error,Error,2260,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1649,security,log,log,1649,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1839,security,ident,identifier,1839,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:220,testability,Test,TestStatistics,220,"ROOT doesn't compile with new nlohmann-json version 3.11.0; from https://github.com/root-project/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1524,testability,context,context,1524,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1621,testability,stub,stubs-,1621,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1649,testability,log,log,1649,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2016,testability,assert,assert,2016,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2064,testability,assert,assert,2064,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2147,testability,stub,stubs,2147,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2179,testability,stub,stubs-,2179,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2222,testability,stub,stubs-,2222,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:376,usability,error,error,376,"ROOT doesn't compile with new nlohmann-json version 3.11.0; from https://github.com/root-project/root/issues/11130#issuecomment-1207464193. ```. [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clan",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1204,usability,behavi,behaviour,1204,"re.dir/src/TestStatistics/RooSumL.cxx.o. In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1345,usability,Error,Error,1345,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1643,usability,Error,Error,1643,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1791,usability,command,command,1791,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:1810,usability,error,error,1810,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2167,usability,error,error,2167,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2253,usability,Error,Error,2253,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/issues/11130:2260,usability,Error,Error,2260,".cxx:20:. /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous. 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n). | ^~~~~~~~. In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,. from /usr/include/nlohmann/detail/exceptions.hpp:22,. from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,. from /usr/include/nlohmann/adl_serializer.hpp:14,. from /usr/include/nlohmann/json.hpp:35:. /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’. 61 | using json = basic_json<>;. | ^~~~. ..... ```. ---. <details>. <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug. ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour. ROOT should compile with `glibc 2.36`. ### To Reproduce. 1. Install `glibc 2.36` and relevant compilers. 2. Try to build ROOT. 3. Error during build. ### Setup. 1. ROOT version: 6.26/06 (or any other version). 2. Operating system: Arch Linux x86. 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context. An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well. Error log:. ```cpp. ... [ 73%] Built target Thread. [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap. In file included from <built-in>:400:. <command line>:1:9: error: macro name must be an identifier. #define -compilerI/usr/include/c++/12.1.1 1. ^. In file included from input_line_3:1:. In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:. In file included from /usr/include/assert.h:35:. In file included from /usr/include/features.h:514:. /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found. # include <gnu/stubs-32.h>. ^~~~~~~~~~~~~~~~. Error: Error loading the default rootcling header files. . ```. </details>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11130
https://github.com/root-project/root/pull/11131:144,safety,test,tested,144,"[skip-ci][DF] Add a missing include + minor improvements in df103; Fix: https://github.com/root-project/root/issues/11124. This tutorial is not tested by the CI, hence CI is skipped.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11131
https://github.com/root-project/root/pull/11131:144,testability,test,tested,144,"[skip-ci][DF] Add a missing include + minor improvements in df103; Fix: https://github.com/root-project/root/issues/11124. This tutorial is not tested by the CI, hence CI is skipped.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11131
https://github.com/root-project/root/pull/11132:1048,deployability,build,build,1048,"[v6-26][cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protextion against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This is a backport of https://github.com/root-project/root/pull/11111.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11132
https://github.com/root-project/root/pull/11132:271,modifiability,variab,variable,271,"[v6-26][cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protextion against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This is a backport of https://github.com/root-project/root/pull/11111.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11132
https://github.com/root-project/root/pull/11132:71,usability,command,command,71,"[v6-26][cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protextion against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This is a backport of https://github.com/root-project/root/pull/11111.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11132
https://github.com/root-project/root/pull/11132:98,usability,command,command,98,"[v6-26][cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protextion against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This is a backport of https://github.com/root-project/root/pull/11111.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11132
https://github.com/root-project/root/pull/11132:440,usability,command,command,440,"[v6-26][cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protextion against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This is a backport of https://github.com/root-project/root/pull/11111.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11132
https://github.com/root-project/root/pull/11132:591,usability,document,documentation,591,"[v6-26][cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protextion against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This is a backport of https://github.com/root-project/root/pull/11111.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11132
https://github.com/root-project/root/pull/11132:640,usability,help,help,640,"[v6-26][cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protextion against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This is a backport of https://github.com/root-project/root/pull/11111.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11132
https://github.com/root-project/root/pull/11132:857,usability,command,command,857,"[v6-26][cmake] Protect against empty `COMPILE_DEFINITIONS` in rootcint command; In the `rootcint` command defined in `RootMacros.cmake`, the. `COMPILE_DEFINITIONS` from the target are forwarded as compiler flags. The `COMPILE_DEFINITIONS` are stored in the `module_defs` variable with. a generator expression:. ```. set(module_defs $<TARGET_PROPERTY:${ARG_MODULE},COMPILE_DEFINITIONS>). ```. Then, the definitions are added to the rootcint command with this. expression:. ```. ""$<$<BOOL:${module_defs}>:-D$<JOIN:${module_defs},;-D>>"". ```. This code was almost copied exactly from the CMake documentation. example:. https://cmake.org/cmake/help/latest/manual/cmake-generator-expressions.7.html. In particular, the `BOOL` check makes sure that the if the target. property is empty, we will not get a bare `-D` with nothing after it,. corrupting the rootcint command. However, there is no protextion against the case where the. `COMPILE_DEFINITIONS` target property is not empty, but its elements are. empty strings! This happened to me in my recent build. Instead of trying to figure out where the empty strings are added to the. `COMPILE_DEFINITIONS`, it is better to also protect against empty target. property elements in the CMake generator expressions, which is. implemented in this commit. This is a backport of https://github.com/root-project/root/pull/11111.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11132
https://github.com/root-project/root/pull/11133:48,deployability,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 19; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). 2. https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. 3. https://github.com/root-project/root/pull/11162. 4. https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. 5. https://github.com/root-project/root/pull/11134. 6. https://github.com/root-project/root/pull/11195. 7. https://github.com/root-project/root/pull/11346. 8. https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. Furthermore, an initial commit is added to sync the RooLagrangianMorphFunc with the `master` before the first backported commit, in order to make the cherry-picking of backport commits easier. Addresses https://github.com/root-project/root/issues/11059.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11133
https://github.com/root-project/root/pull/11133:175,deployability,patch,patches,175,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 19; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). 2. https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. 3. https://github.com/root-project/root/pull/11162. 4. https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. 5. https://github.com/root-project/root/pull/11134. 6. https://github.com/root-project/root/pull/11195. 7. https://github.com/root-project/root/pull/11346. 8. https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. Furthermore, an initial commit is added to sync the RooLagrangianMorphFunc with the `master` before the first backported commit, in order to make the cherry-picking of backport commits easier. Addresses https://github.com/root-project/root/issues/11059.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11133
https://github.com/root-project/root/pull/11133:372,deployability,patch,patch,372,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 19; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). 2. https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. 3. https://github.com/root-project/root/pull/11162. 4. https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. 5. https://github.com/root-project/root/pull/11134. 6. https://github.com/root-project/root/pull/11195. 7. https://github.com/root-project/root/pull/11346. 8. https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. Furthermore, an initial commit is added to sync the RooLagrangianMorphFunc with the `master` before the first backported commit, in order to make the cherry-picking of backport commits easier. Addresses https://github.com/root-project/root/issues/11059.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11133
https://github.com/root-project/root/pull/11133:378,deployability,releas,release,378,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 19; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). 2. https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. 3. https://github.com/root-project/root/pull/11162. 4. https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. 5. https://github.com/root-project/root/pull/11134. 6. https://github.com/root-project/root/pull/11195. 7. https://github.com/root-project/root/pull/11346. 8. https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. Furthermore, an initial commit is added to sync the RooLagrangianMorphFunc with the `master` before the first backported commit, in order to make the cherry-picking of backport commits easier. Addresses https://github.com/root-project/root/issues/11059.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11133
https://github.com/root-project/root/pull/11133:440,deployability,releas,release,440,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 19; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). 2. https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. 3. https://github.com/root-project/root/pull/11162. 4. https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. 5. https://github.com/root-project/root/pull/11134. 6. https://github.com/root-project/root/pull/11195. 7. https://github.com/root-project/root/pull/11346. 8. https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. Furthermore, an initial commit is added to sync the RooLagrangianMorphFunc with the `master` before the first backported commit, in order to make the cherry-picking of backport commits easier. Addresses https://github.com/root-project/root/issues/11059.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11133
https://github.com/root-project/root/pull/11133:544,integrability,batch,batch,544,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 19; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). 2. https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. 3. https://github.com/root-project/root/pull/11162. 4. https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. 5. https://github.com/root-project/root/pull/11134. 6. https://github.com/root-project/root/pull/11195. 7. https://github.com/root-project/root/pull/11346. 8. https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. Furthermore, an initial commit is added to sync the RooLagrangianMorphFunc with the `master` before the first backported commit, in order to make the cherry-picking of backport commits easier. Addresses https://github.com/root-project/root/issues/11059.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11133
https://github.com/root-project/root/pull/11133:544,performance,batch,batch,544,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 19; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). 2. https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. 3. https://github.com/root-project/root/pull/11162. 4. https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. 5. https://github.com/root-project/root/pull/11134. 6. https://github.com/root-project/root/pull/11195. 7. https://github.com/root-project/root/pull/11346. 8. https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. Furthermore, an initial commit is added to sync the RooLagrangianMorphFunc with the `master` before the first backported commit, in order to make the cherry-picking of backport commits easier. Addresses https://github.com/root-project/root/issues/11059.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11133
https://github.com/root-project/root/pull/11133:48,safety,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 19; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). 2. https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. 3. https://github.com/root-project/root/pull/11162. 4. https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. 5. https://github.com/root-project/root/pull/11134. 6. https://github.com/root-project/root/pull/11195. 7. https://github.com/root-project/root/pull/11346. 8. https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. Furthermore, an initial commit is added to sync the RooLagrangianMorphFunc with the `master` before the first backported commit, in order to make the cherry-picking of backport commits easier. Addresses https://github.com/root-project/root/issues/11059.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11133
https://github.com/root-project/root/pull/11133:175,safety,patch,patches,175,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 19; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). 2. https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. 3. https://github.com/root-project/root/pull/11162. 4. https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. 5. https://github.com/root-project/root/pull/11134. 6. https://github.com/root-project/root/pull/11195. 7. https://github.com/root-project/root/pull/11346. 8. https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. Furthermore, an initial commit is added to sync the RooLagrangianMorphFunc with the `master` before the first backported commit, in order to make the cherry-picking of backport commits easier. Addresses https://github.com/root-project/root/issues/11059.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11133
https://github.com/root-project/root/pull/11133:372,safety,patch,patch,372,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 19; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). 2. https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. 3. https://github.com/root-project/root/pull/11162. 4. https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. 5. https://github.com/root-project/root/pull/11134. 6. https://github.com/root-project/root/pull/11195. 7. https://github.com/root-project/root/pull/11346. 8. https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. Furthermore, an initial commit is added to sync the RooLagrangianMorphFunc with the `master` before the first backported commit, in order to make the cherry-picking of backport commits easier. Addresses https://github.com/root-project/root/issues/11059.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11133
https://github.com/root-project/root/pull/11133:48,security,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 19; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). 2. https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. 3. https://github.com/root-project/root/pull/11162. 4. https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. 5. https://github.com/root-project/root/pull/11134. 6. https://github.com/root-project/root/pull/11195. 7. https://github.com/root-project/root/pull/11346. 8. https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. Furthermore, an initial commit is added to sync the RooLagrangianMorphFunc with the `master` before the first backported commit, in order to make the cherry-picking of backport commits easier. Addresses https://github.com/root-project/root/issues/11059.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11133
https://github.com/root-project/root/pull/11133:175,security,patch,patches,175,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 19; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). 2. https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. 3. https://github.com/root-project/root/pull/11162. 4. https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. 5. https://github.com/root-project/root/pull/11134. 6. https://github.com/root-project/root/pull/11195. 7. https://github.com/root-project/root/pull/11346. 8. https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. Furthermore, an initial commit is added to sync the RooLagrangianMorphFunc with the `master` before the first backported commit, in order to make the cherry-picking of backport commits easier. Addresses https://github.com/root-project/root/issues/11059.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11133
https://github.com/root-project/root/pull/11133:372,security,patch,patch,372,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 19; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11023. Only the last commit, which has not been backported for the last patch release yet (the rest of PR was backported before the 6.26.04 release). 2. https://github.com/root-project/root/pull/11123. Only the first commit that relates to the batch mode. 3. https://github.com/root-project/root/pull/11162. 4. https://github.com/root-project/root/pull/11129. Only the first two commits that are note just code modernization. 5. https://github.com/root-project/root/pull/11134. 6. https://github.com/root-project/root/pull/11195. 7. https://github.com/root-project/root/pull/11346. 8. https://github.com/root-project/root/pull/11343. Only the first commit that is not code modernization. Furthermore, an initial commit is added to sync the RooLagrangianMorphFunc with the `master` before the first backported commit, in order to make the cherry-picking of backport commits easier. Addresses https://github.com/root-project/root/issues/11059.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11133
https://github.com/root-project/root/pull/11134:119,energy efficiency,optim,optimize,119,"[RF] Don't skip zero-weight events by default in new BatchMode; The new RooFit batchMode skipped zero-weight events to optimize the. likelihood calculation. However, this should not be done in general,. because it is unexpected to users is the output of batched computations. is not aligned with the original dataset. This commit also adds a smaller commit with a change to ensure that. norm set args are part of the graph in NormalizationHelpers, also used. in the new BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11134
https://github.com/root-project/root/pull/11134:28,integrability,event,events,28,"[RF] Don't skip zero-weight events by default in new BatchMode; The new RooFit batchMode skipped zero-weight events to optimize the. likelihood calculation. However, this should not be done in general,. because it is unexpected to users is the output of batched computations. is not aligned with the original dataset. This commit also adds a smaller commit with a change to ensure that. norm set args are part of the graph in NormalizationHelpers, also used. in the new BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11134
https://github.com/root-project/root/pull/11134:53,integrability,Batch,BatchMode,53,"[RF] Don't skip zero-weight events by default in new BatchMode; The new RooFit batchMode skipped zero-weight events to optimize the. likelihood calculation. However, this should not be done in general,. because it is unexpected to users is the output of batched computations. is not aligned with the original dataset. This commit also adds a smaller commit with a change to ensure that. norm set args are part of the graph in NormalizationHelpers, also used. in the new BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11134
https://github.com/root-project/root/pull/11134:79,integrability,batch,batchMode,79,"[RF] Don't skip zero-weight events by default in new BatchMode; The new RooFit batchMode skipped zero-weight events to optimize the. likelihood calculation. However, this should not be done in general,. because it is unexpected to users is the output of batched computations. is not aligned with the original dataset. This commit also adds a smaller commit with a change to ensure that. norm set args are part of the graph in NormalizationHelpers, also used. in the new BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11134
https://github.com/root-project/root/pull/11134:109,integrability,event,events,109,"[RF] Don't skip zero-weight events by default in new BatchMode; The new RooFit batchMode skipped zero-weight events to optimize the. likelihood calculation. However, this should not be done in general,. because it is unexpected to users is the output of batched computations. is not aligned with the original dataset. This commit also adds a smaller commit with a change to ensure that. norm set args are part of the graph in NormalizationHelpers, also used. in the new BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11134
https://github.com/root-project/root/pull/11134:254,integrability,batch,batched,254,"[RF] Don't skip zero-weight events by default in new BatchMode; The new RooFit batchMode skipped zero-weight events to optimize the. likelihood calculation. However, this should not be done in general,. because it is unexpected to users is the output of batched computations. is not aligned with the original dataset. This commit also adds a smaller commit with a change to ensure that. norm set args are part of the graph in NormalizationHelpers, also used. in the new BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11134
https://github.com/root-project/root/pull/11134:470,integrability,Batch,BatchMode,470,"[RF] Don't skip zero-weight events by default in new BatchMode; The new RooFit batchMode skipped zero-weight events to optimize the. likelihood calculation. However, this should not be done in general,. because it is unexpected to users is the output of batched computations. is not aligned with the original dataset. This commit also adds a smaller commit with a change to ensure that. norm set args are part of the graph in NormalizationHelpers, also used. in the new BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11134
https://github.com/root-project/root/pull/11134:53,performance,Batch,BatchMode,53,"[RF] Don't skip zero-weight events by default in new BatchMode; The new RooFit batchMode skipped zero-weight events to optimize the. likelihood calculation. However, this should not be done in general,. because it is unexpected to users is the output of batched computations. is not aligned with the original dataset. This commit also adds a smaller commit with a change to ensure that. norm set args are part of the graph in NormalizationHelpers, also used. in the new BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11134
https://github.com/root-project/root/pull/11134:79,performance,batch,batchMode,79,"[RF] Don't skip zero-weight events by default in new BatchMode; The new RooFit batchMode skipped zero-weight events to optimize the. likelihood calculation. However, this should not be done in general,. because it is unexpected to users is the output of batched computations. is not aligned with the original dataset. This commit also adds a smaller commit with a change to ensure that. norm set args are part of the graph in NormalizationHelpers, also used. in the new BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11134
https://github.com/root-project/root/pull/11134:119,performance,optimiz,optimize,119,"[RF] Don't skip zero-weight events by default in new BatchMode; The new RooFit batchMode skipped zero-weight events to optimize the. likelihood calculation. However, this should not be done in general,. because it is unexpected to users is the output of batched computations. is not aligned with the original dataset. This commit also adds a smaller commit with a change to ensure that. norm set args are part of the graph in NormalizationHelpers, also used. in the new BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11134
https://github.com/root-project/root/pull/11134:254,performance,batch,batched,254,"[RF] Don't skip zero-weight events by default in new BatchMode; The new RooFit batchMode skipped zero-weight events to optimize the. likelihood calculation. However, this should not be done in general,. because it is unexpected to users is the output of batched computations. is not aligned with the original dataset. This commit also adds a smaller commit with a change to ensure that. norm set args are part of the graph in NormalizationHelpers, also used. in the new BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11134
https://github.com/root-project/root/pull/11134:470,performance,Batch,BatchMode,470,"[RF] Don't skip zero-weight events by default in new BatchMode; The new RooFit batchMode skipped zero-weight events to optimize the. likelihood calculation. However, this should not be done in general,. because it is unexpected to users is the output of batched computations. is not aligned with the original dataset. This commit also adds a smaller commit with a change to ensure that. norm set args are part of the graph in NormalizationHelpers, also used. in the new BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11134
https://github.com/root-project/root/pull/11134:231,usability,user,users,231,"[RF] Don't skip zero-weight events by default in new BatchMode; The new RooFit batchMode skipped zero-weight events to optimize the. likelihood calculation. However, this should not be done in general,. because it is unexpected to users is the output of batched computations. is not aligned with the original dataset. This commit also adds a smaller commit with a change to ensure that. norm set args are part of the graph in NormalizationHelpers, also used. in the new BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11134
https://github.com/root-project/root/issues/11135:821,availability,operat,operator,821,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:981,availability,error,error-when-call-createphi-in-llvm,981,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:1177,availability,down,down,1177,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:51,deployability,build,building,51,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:203,deployability,BUILD,BUILD,203,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:283,deployability,BUILD,BUILD,283,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:370,deployability,BUILD,BUILD,370,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:533,deployability,BUILD,BUILD,533,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:733,deployability,fail,failed,733,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:944,deployability,stack,stackoverflow,944,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:1194,deployability,build,build,1194,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:1351,deployability,version,version,1351,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:1396,deployability,build,build,1396,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:1351,integrability,version,version,1351,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:1351,modifiability,version,version,1351,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:981,performance,error,error-when-call-createphi-in-llvm,981,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:733,reliability,fail,failed,733,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:981,safety,error,error-when-call-createphi-in-llvm,981,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:669,security,HasH,HasHungOffUses,669,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:751,security,HasH,HasHungOffUses,751,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:658,testability,Assert,Assertion,658,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:589,usability,User,User,589,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:612,usability,User,User,612,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:815,usability,User,User,815,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:864,usability,behavi,behavior,864,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:981,usability,error,error-when-call-createphi-in-llvm,981,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11135:1029,usability,behavi,behavior,1029,"Builtin libLLVM is broken when using GCC + LTO for building; - [x] Checked for duplicates. ### Describe the bug. ```. [ 1675s] [100%] Generating tutorials/hsimple.root. [ 1675s] cd /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/tutorials && LD_LIBRARY_PATH=/home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/lib: ROOTIGNOREPREFIX=1 ROOT_HIST=0 /home/abuild/rpmbuild/BUILD/root-6.26.06/_builddir/bin/root.exe -l -q -b -n -x hsimple.C -e return. [ 1675s] . [ 1675s] Processing hsimple.C... [ 1675s] root.exe: /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/llvm/src/include/llvm/IR/User.h:216: void llvm::User::setNumHungOffUseOperands(unsigned int): Assertion `HasHungOffUses && ""Must have hung off uses to use this method""' failed. ```. The `HasHungOffUses` member is initialized in the overloaded `clang::User::operator new`, which may trigger undefined behavior. See e.g.:. https://github.com/llvm/llvm-project/issues/47560. https://stackoverflow.com/questions/34892732/error-when-call-createphi-in-llvm. ### Expected behavior. Builtin libLLVM works correctly. Though this is an LLVM upstream issue, either force-disabling LTO, or adding a CMake option to pass this down to the LLVM build (similar to `LLVM_BUILD_TYPE`) might be an option. ### To Reproduce. CXXFLAGS=... -O2 -flto=auto. cmake -B _builddir -S .. && make. ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Tumbleweed. 3. build from source.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11135
https://github.com/root-project/root/issues/11136:241,deployability,modul,modules,241,"Misleading warning with `builtin_clang=OFF`; In case `builtin_clang=OFF` and/or `builtin_llvm=OFF` is passed to CMake, an awkward warning is generated. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootBuildOptions.cmake#L391-L395. The `NOT`s seem to be incorrect.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11136
https://github.com/root-project/root/issues/11136:241,modifiability,modul,modules,241,"Misleading warning with `builtin_clang=OFF`; In case `builtin_clang=OFF` and/or `builtin_llvm=OFF` is passed to CMake, an awkward warning is generated. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootBuildOptions.cmake#L391-L395. The `NOT`s seem to be incorrect.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11136
https://github.com/root-project/root/issues/11136:241,safety,modul,modules,241,"Misleading warning with `builtin_clang=OFF`; In case `builtin_clang=OFF` and/or `builtin_llvm=OFF` is passed to CMake, an awkward warning is generated. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootBuildOptions.cmake#L391-L395. The `NOT`s seem to be incorrect.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11136
https://github.com/root-project/root/pull/11137:269,availability,error,error,269,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:335,deployability,updat,updated,335,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:143,integrability,sub,subprocess,143,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:35,modifiability,pac,packaging,35,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:94,modifiability,pac,packaging,94,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:269,performance,error,error,269,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:269,safety,error,error,269,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:304,safety,test,tested,304,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:335,safety,updat,updated,335,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:231,security,modif,modified,231,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:335,security,updat,updated,335,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:304,testability,test,tested,304,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:77,usability,Help,Helps,77,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:154,usability,command,commands,154,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:240,usability,Progress,ProgressBar,240,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/pull/11137:269,usability,error,error,269,"[cling-cpt] Added fixes for debian packaging [skip-ci]; # This Pull request: Helps the debian packaging effort. ## Changes or fixes: Fixed the subprocess commands in the debianize() function credit to dimitry-ishenko and have also modified ProgressBar.py, which caused error before. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11137
https://github.com/root-project/root/issues/11138:201,availability,error,error,201,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:512,availability,Error,Error,512,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:662,availability,Error,Error,662,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:814,availability,Error,Error,814,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:112,deployability,build,build,112,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:519,deployability,instal,install,519,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:669,deployability,instal,install,669,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:821,deployability,instal,install,821,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1387,deployability,modul,modules,1387,"e_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1563,deployability,instal,installed,1563,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1727,deployability,fail,fails,1727,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1783,deployability,VERSION,VERSION,1783,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:2038,deployability,fail,fails,2038,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:2231,deployability,instal,install,2231,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:2278,deployability,instal,install,2278,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:2398,deployability,contain,contains,2398,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:2489,deployability,version,version,2489,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:442,energy efficiency,cpu,cpu,442,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1253,energy efficiency,core,core,1253,"ng builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shL",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:481,integrability,Configur,Configuring,481,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1146,integrability,PUB,PUBLIC,1146,"tin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1693,integrability,PUB,PUBLIC,1693,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1783,integrability,VERSION,VERSION,1783,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:2017,integrability,PUB,PUBLIC,2017,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:2216,integrability,PUB,PUBLIC,2216,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:2489,integrability,version,version,2489,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:404,interoperability,share,shared,404,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:459,interoperability,xml,xml,459,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1068,interoperability,SHARE,SHARED,1068,"es. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shL",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1583,interoperability,specif,specified,1583,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1912,interoperability,SHARE,SHARED,1912,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:481,modifiability,Configur,Configuring,481,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1387,modifiability,modul,modules,1387,"e_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1783,modifiability,VERSION,VERSION,1783,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:2489,modifiability,version,version,2489,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:201,performance,error,error,201,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:442,performance,cpu,cpu,442,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:512,performance,Error,Error,512,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:662,performance,Error,Error,662,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:814,performance,Error,Error,814,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1727,reliability,fail,fails,1727,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:2038,reliability,fail,fails,2038,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:201,safety,error,error,201,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:290,safety,except,exceptions,290,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:512,safety,Error,Error,512,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:662,safety,Error,Error,662,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:814,safety,Error,Error,814,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1387,safety,modul,modules,1387,"e_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:428,security,ssl,ssl,428,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:481,security,Configur,Configuring,481,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:2555,testability,context,context,2555,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:201,usability,error,error,201,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:231,usability,support,support,231,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:512,usability,Error,Error,512,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:662,usability,Error,Error,662,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:814,usability,Error,Error,814,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:990,usability,behavi,behavior,990,"Broken CMake EXPORT set with external LLVM ; - [x] Checked for duplicates. ### Describe the bug. When trying to build with `--builtin_llvm=OFF --builtin_clang=OFF --builtin_cling=ON`, CMake reports an error. ```. [ 52s] -- Enabled support for: builtin_cling builtin_openui5 dataframe davix exceptions fftw3 gdml gnuinstall http imt mathmore mlp minuit2 mysql opengl pgsql roofit rpath runtime_cxxmodules shared soversion sqlite ssl tmva tmva-cpu spectrum x11 xml xrootd. [ 52s] -- Configuring done. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/issues/11138:1622,usability,minim,minimal,1622,"arget ""Cling"" which requires target ""clingInterpreter"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingMetaProcessor"" that is not in any export set. [ 53s] CMake Error: install(EXPORT ""ROOTExports"" ...) includes target ""Cling"" which requires target ""clingUtils"" that is not in any export set. [ 54s] -- Generating done. ```. ### Expected behavior. CMake call succeeds. ### To Reproduce. The problem is caused by the SHARED libCling (TARGET Cling) specyfing the 3 OBJECT libraries from above as PUBLIC link libraries:. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/core/metacling/src/CMakeLists.txt#L107-L112. https://github.com/root-project/root/blob/69002fa23d19ad50ff8dd6c7678a6343748ba3fd/cmake/modules/RootMacros.cmake#L889. `CLING_LIBRARIES` is `clingInterpreter;clingMetaProcessor;clingUtils`. OBJECT libraries which are just used as convenience libraries and are not installed should by specified as PRIVATE link libraries. A minimal reproducer is given below, with `PRIVATE` it works fine, with `PUBLIC` `cmake -B _builddir -S .` fails. ```. project(exportTest). cmake_minimum_required(VERSION 3.1). add_library(objLib OBJECT). target_sources(objLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/objA.cxx). add_library(shLib SHARED). target_sources(shLib PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/libA.cxx). target_link_libraries(shLib PUBLIC objLib) # <-- fails. #target_link_libraries(shLib PRIVATE objLib) # <-- OK. add_executable(main). target_sources(main PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/main.cxx). target_link_libraries(main PUBLIC shLib). install(TARGETS main shLib EXPORT exportTest). install(EXPORT exportTest DESTINATION lib/exportTest). ```. (`libA.cxx` and `objA.cxx` are empty files. `main.cxx` just contains an empty main function: `int main(int, char**) { return 0;}`). ### Setup. 1. ROOT version: 6.26.06. 2. openSUSE Leap 15.4, SLE15SP4. ### Additional context.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11138
https://github.com/root-project/root/pull/11139:158,modifiability,refact,refactored,158,"[RF] Avoid code duplication in RooAddModel cache generation; The `RooAddModel::CacheElem` was exactly the same as for the RooAddPdf. Hence, the RooAddPdf was refactored a bit such that the code to generate. the CacheElem could be reused in the RooAddModel.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11139
https://github.com/root-project/root/pull/11139:230,modifiability,reu,reused,230,"[RF] Avoid code duplication in RooAddModel cache generation; The `RooAddModel::CacheElem` was exactly the same as for the RooAddPdf. Hence, the RooAddPdf was refactored a bit such that the code to generate. the CacheElem could be reused in the RooAddModel.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11139
https://github.com/root-project/root/pull/11139:43,performance,cach,cache,43,"[RF] Avoid code duplication in RooAddModel cache generation; The `RooAddModel::CacheElem` was exactly the same as for the RooAddPdf. Hence, the RooAddPdf was refactored a bit such that the code to generate. the CacheElem could be reused in the RooAddModel.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11139
https://github.com/root-project/root/pull/11139:79,performance,Cach,CacheElem,79,"[RF] Avoid code duplication in RooAddModel cache generation; The `RooAddModel::CacheElem` was exactly the same as for the RooAddPdf. Hence, the RooAddPdf was refactored a bit such that the code to generate. the CacheElem could be reused in the RooAddModel.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11139
https://github.com/root-project/root/pull/11139:158,performance,refactor,refactored,158,"[RF] Avoid code duplication in RooAddModel cache generation; The `RooAddModel::CacheElem` was exactly the same as for the RooAddPdf. Hence, the RooAddPdf was refactored a bit such that the code to generate. the CacheElem could be reused in the RooAddModel.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11139
https://github.com/root-project/root/pull/11139:211,performance,Cach,CacheElem,211,"[RF] Avoid code duplication in RooAddModel cache generation; The `RooAddModel::CacheElem` was exactly the same as for the RooAddPdf. Hence, the RooAddPdf was refactored a bit such that the code to generate. the CacheElem could be reused in the RooAddModel.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11139
https://github.com/root-project/root/pull/11139:5,safety,Avoid,Avoid,5,"[RF] Avoid code duplication in RooAddModel cache generation; The `RooAddModel::CacheElem` was exactly the same as for the RooAddPdf. Hence, the RooAddPdf was refactored a bit such that the code to generate. the CacheElem could be reused in the RooAddModel.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11139
https://github.com/root-project/root/pull/11140:194,availability,error,errors,194,[cling-cpt] Formatted the beginning functions of the cpt [skip-ci]; # This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11140
https://github.com/root-project/root/pull/11140:148,deployability,Automat,Automatically,148,[cling-cpt] Formatted the beginning functions of the cpt [skip-ci]; # This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11140
https://github.com/root-project/root/pull/11140:254,deployability,updat,updated,254,[cling-cpt] Formatted the beginning functions of the cpt [skip-ci]; # This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11140
https://github.com/root-project/root/pull/11140:116,integrability,complian,compliant,116,[cling-cpt] Formatted the beginning functions of the cpt [skip-ci]; # This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11140
https://github.com/root-project/root/pull/11140:12,interoperability,Format,Formatted,12,[cling-cpt] Formatted the beginning functions of the cpt [skip-ci]; # This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11140
https://github.com/root-project/root/pull/11140:194,performance,error,errors,194,[cling-cpt] Formatted the beginning functions of the cpt [skip-ci]; # This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11140
https://github.com/root-project/root/pull/11140:116,safety,compl,compliant,116,[cling-cpt] Formatted the beginning functions of the cpt [skip-ci]; # This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11140
https://github.com/root-project/root/pull/11140:194,safety,error,errors,194,[cling-cpt] Formatted the beginning functions of the cpt [skip-ci]; # This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11140
https://github.com/root-project/root/pull/11140:223,safety,test,tested,223,[cling-cpt] Formatted the beginning functions of the cpt [skip-ci]; # This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11140
https://github.com/root-project/root/pull/11140:254,safety,updat,updated,254,[cling-cpt] Formatted the beginning functions of the cpt [skip-ci]; # This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11140
https://github.com/root-project/root/pull/11140:116,security,compl,compliant,116,[cling-cpt] Formatted the beginning functions of the cpt [skip-ci]; # This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11140
https://github.com/root-project/root/pull/11140:254,security,updat,updated,254,[cling-cpt] Formatted the beginning functions of the cpt [skip-ci]; # This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11140
https://github.com/root-project/root/pull/11140:148,testability,Automat,Automatically,148,[cling-cpt] Formatted the beginning functions of the cpt [skip-ci]; # This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11140
https://github.com/root-project/root/pull/11140:223,testability,test,tested,223,[cling-cpt] Formatted the beginning functions of the cpt [skip-ci]; # This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11140
https://github.com/root-project/root/pull/11140:194,usability,error,errors,194,[cling-cpt] Formatted the beginning functions of the cpt [skip-ci]; # This Pull request: Makes the code more flake8 compliant. ## Changes or fixes: Automatically split the lines and fixed other errors. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes #406 mentioned in meta-issue list (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11140
https://github.com/root-project/root/pull/11141:220,deployability,updat,updated,220,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; …antities() (#11115). cherry-picked from cd992545ae. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11141
https://github.com/root-project/root/pull/11141:190,safety,test,tested,190,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; …antities() (#11115). cherry-picked from cd992545ae. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11141
https://github.com/root-project/root/pull/11141:220,safety,updat,updated,220,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; …antities() (#11115). cherry-picked from cd992545ae. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11141
https://github.com/root-project/root/pull/11141:220,security,updat,updated,220,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; …antities() (#11115). cherry-picked from cd992545ae. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11141
https://github.com/root-project/root/pull/11141:190,testability,test,tested,190,Fix to compute radiation length on call TGeoMixture::ComputeDerivedQu…; …antities() (#11115). cherry-picked from cd992545ae. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11141
https://github.com/root-project/root/pull/11142:115,deployability,updat,updated,115,[v6.26] Fix 11115; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11142
https://github.com/root-project/root/pull/11142:85,safety,test,tested,85,[v6.26] Fix 11115; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11142
https://github.com/root-project/root/pull/11142:115,safety,updat,updated,115,[v6.26] Fix 11115; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11142
https://github.com/root-project/root/pull/11142:115,security,updat,updated,115,[v6.26] Fix 11115; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11142
https://github.com/root-project/root/pull/11142:85,testability,test,tested,85,[v6.26] Fix 11115; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11142
https://github.com/root-project/root/issues/11143:517,usability,Document,Documentation,517,"[hist] Chi-square computation in Binned likelihood fits; As reported in https://root-forum.cern.ch/t/chi-square-definition-in-root/51083/3, . the reported chi-square from `TF1::GetChisquare` and from `FitResult` is not correct. . A Neyman chi-square is computed but using also the empty bins. . See https://github.com/root-project/root/blob/master/math/mathcore/src/FitResult.cxx#L183. We should return in this case as chi-square the value suggested by Baker-Cousins, i.e. 2 * MinNLL. . In addition we have also :. - Documentation for `TF1::GetChisquare` and `ROOT::Fit::FitResult::Chi2` is missing. - `TH1::Chisquare` and `ROOT::Fit::Chisquare` should compute also the Pearson chi-square",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11143
https://github.com/root-project/root/pull/11144:225,deployability,depend,dependencies,225,"[tree/RDF] Move GTLBN from RDF to TreeInternalUtils; # This Pull request:. Moves GetTopLevelBranchNames from the RDF Internals namespace to the Internal TreeUtils namespace, as it does not rely on RDF and creates unnecessary dependencies. ## Changes or fixes:. - Move GetTopLevelBranch names and its implementation from `/tree/dataframe` to `/tree/tree`. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11144
https://github.com/root-project/root/pull/11144:406,deployability,updat,updated,406,"[tree/RDF] Move GTLBN from RDF to TreeInternalUtils; # This Pull request:. Moves GetTopLevelBranchNames from the RDF Internals namespace to the Internal TreeUtils namespace, as it does not rely on RDF and creates unnecessary dependencies. ## Changes or fixes:. - Move GetTopLevelBranch names and its implementation from `/tree/dataframe` to `/tree/tree`. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11144
https://github.com/root-project/root/pull/11144:225,integrability,depend,dependencies,225,"[tree/RDF] Move GTLBN from RDF to TreeInternalUtils; # This Pull request:. Moves GetTopLevelBranchNames from the RDF Internals namespace to the Internal TreeUtils namespace, as it does not rely on RDF and creates unnecessary dependencies. ## Changes or fixes:. - Move GetTopLevelBranch names and its implementation from `/tree/dataframe` to `/tree/tree`. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11144
https://github.com/root-project/root/pull/11144:225,modifiability,depend,dependencies,225,"[tree/RDF] Move GTLBN from RDF to TreeInternalUtils; # This Pull request:. Moves GetTopLevelBranchNames from the RDF Internals namespace to the Internal TreeUtils namespace, as it does not rely on RDF and creates unnecessary dependencies. ## Changes or fixes:. - Move GetTopLevelBranch names and its implementation from `/tree/dataframe` to `/tree/tree`. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11144
https://github.com/root-project/root/pull/11144:180,reliability,doe,does,180,"[tree/RDF] Move GTLBN from RDF to TreeInternalUtils; # This Pull request:. Moves GetTopLevelBranchNames from the RDF Internals namespace to the Internal TreeUtils namespace, as it does not rely on RDF and creates unnecessary dependencies. ## Changes or fixes:. - Move GetTopLevelBranch names and its implementation from `/tree/dataframe` to `/tree/tree`. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11144
https://github.com/root-project/root/pull/11144:225,safety,depend,dependencies,225,"[tree/RDF] Move GTLBN from RDF to TreeInternalUtils; # This Pull request:. Moves GetTopLevelBranchNames from the RDF Internals namespace to the Internal TreeUtils namespace, as it does not rely on RDF and creates unnecessary dependencies. ## Changes or fixes:. - Move GetTopLevelBranch names and its implementation from `/tree/dataframe` to `/tree/tree`. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11144
https://github.com/root-project/root/pull/11144:376,safety,test,tested,376,"[tree/RDF] Move GTLBN from RDF to TreeInternalUtils; # This Pull request:. Moves GetTopLevelBranchNames from the RDF Internals namespace to the Internal TreeUtils namespace, as it does not rely on RDF and creates unnecessary dependencies. ## Changes or fixes:. - Move GetTopLevelBranch names and its implementation from `/tree/dataframe` to `/tree/tree`. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11144
https://github.com/root-project/root/pull/11144:406,safety,updat,updated,406,"[tree/RDF] Move GTLBN from RDF to TreeInternalUtils; # This Pull request:. Moves GetTopLevelBranchNames from the RDF Internals namespace to the Internal TreeUtils namespace, as it does not rely on RDF and creates unnecessary dependencies. ## Changes or fixes:. - Move GetTopLevelBranch names and its implementation from `/tree/dataframe` to `/tree/tree`. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11144
https://github.com/root-project/root/pull/11144:406,security,updat,updated,406,"[tree/RDF] Move GTLBN from RDF to TreeInternalUtils; # This Pull request:. Moves GetTopLevelBranchNames from the RDF Internals namespace to the Internal TreeUtils namespace, as it does not rely on RDF and creates unnecessary dependencies. ## Changes or fixes:. - Move GetTopLevelBranch names and its implementation from `/tree/dataframe` to `/tree/tree`. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11144
https://github.com/root-project/root/pull/11144:225,testability,depend,dependencies,225,"[tree/RDF] Move GTLBN from RDF to TreeInternalUtils; # This Pull request:. Moves GetTopLevelBranchNames from the RDF Internals namespace to the Internal TreeUtils namespace, as it does not rely on RDF and creates unnecessary dependencies. ## Changes or fixes:. - Move GetTopLevelBranch names and its implementation from `/tree/dataframe` to `/tree/tree`. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11144
https://github.com/root-project/root/pull/11144:376,testability,test,tested,376,"[tree/RDF] Move GTLBN from RDF to TreeInternalUtils; # This Pull request:. Moves GetTopLevelBranchNames from the RDF Internals namespace to the Internal TreeUtils namespace, as it does not rely on RDF and creates unnecessary dependencies. ## Changes or fixes:. - Move GetTopLevelBranch names and its implementation from `/tree/dataframe` to `/tree/tree`. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes N/A.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11144
https://github.com/root-project/root/pull/11145:178,energy efficiency,reduc,reduce,178,"[RF] Remove CINT export code from RooWorkspace; The export of RooWorkspace contents to CINT didn't work anymore since. ROOT 6, and the code associated to it should be removed to reduce. maintanance burden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11145
https://github.com/root-project/root/pull/11145:75,performance,content,contents,75,"[RF] Remove CINT export code from RooWorkspace; The export of RooWorkspace contents to CINT didn't work anymore since. ROOT 6, and the code associated to it should be removed to reduce. maintanance burden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11145
https://github.com/root-project/root/issues/11146:231,availability,Error,Error,231,"builtin_llvm=OFF broken, LinkedObjects member is private in upstream; - [x] Checked for duplicates. ```. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h: In member function 'llvm::Error cling::IncrementalJIT::RemovableObjectLinkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:435,availability,error,error,435,"builtin_llvm=OFF broken, LinkedObjects member is private in upstream; - [x] Checked for duplicates. ```. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h: In member function 'llvm::Error cling::IncrementalJIT::RemovableObjectLinkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1377,availability,Error,Error,1377,"nkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:134,deployability,BUILD,BUILD,134,"builtin_llvm=OFF broken, LinkedObjects member is private in upstream; - [x] Checked for duplicates. ```. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h: In member function 'llvm::Error cling::IncrementalJIT::RemovableObjectLinkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:357,deployability,BUILD,BUILD,357,"builtin_llvm=OFF broken, LinkedObjects member is private in upstream; - [x] Checked for duplicates. ```. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h: In member function 'llvm::Error cling::IncrementalJIT::RemovableObjectLinkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:786,deployability,BUILD,BUILD,786,"builtin_llvm=OFF broken, LinkedObjects member is private in upstream; - [x] Checked for duplicates. ```. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h: In member function 'llvm::Error cling::IncrementalJIT::RemovableObjectLinkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:897,deployability,BUILD,BUILD,897,"builtin_llvm=OFF broken, LinkedObjects member is private in upstream; - [x] Checked for duplicates. ```. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h: In member function 'llvm::Error cling::IncrementalJIT::RemovableObjectLinkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1270,deployability,build,build,1270,"ctLinkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1536,deployability,Patch,Patched,1536,"nkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1544,deployability,version,version,1544,"nkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1951,deployability,Resourc,ResourcesGetter,1951,"nkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1951,energy efficiency,Resourc,ResourcesGetter,1951,"nkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1544,integrability,version,version,1544,"nkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1544,modifiability,version,version,1544,"nkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:231,performance,Error,Error,231,"builtin_llvm=OFF broken, LinkedObjects member is private in upstream; - [x] Checked for duplicates. ```. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h: In member function 'llvm::Error cling::IncrementalJIT::RemovableObjectLinkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:435,performance,error,error,435,"builtin_llvm=OFF broken, LinkedObjects member is private in upstream; - [x] Checked for duplicates. ```. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h: In member function 'llvm::Error cling::IncrementalJIT::RemovableObjectLinkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1377,performance,Error,Error,1377,"nkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1951,performance,Resourc,ResourcesGetter,1951,"nkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:231,safety,Error,Error,231,"builtin_llvm=OFF broken, LinkedObjects member is private in upstream; - [x] Checked for duplicates. ```. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h: In member function 'llvm::Error cling::IncrementalJIT::RemovableObjectLinkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:435,safety,error,error,435,"builtin_llvm=OFF broken, LinkedObjects member is private in upstream; - [x] Checked for duplicates. ```. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h: In member function 'llvm::Error cling::IncrementalJIT::RemovableObjectLinkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1377,safety,Error,Error,1377,"nkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1536,safety,Patch,Patched,1536,"nkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1951,safety,Resourc,ResourcesGetter,1951,"nkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:667,security,Access,AccessSymbolTable,667,"builtin_llvm=OFF broken, LinkedObjects member is private in upstream; - [x] Checked for duplicates. ```. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h: In member function 'llvm::Error cling::IncrementalJIT::RemovableObjectLinkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1536,security,Patch,Patched,1536,"nkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:631,testability,context,context,631,"builtin_llvm=OFF broken, LinkedObjects member is private in upstream; - [x] Checked for duplicates. ```. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h: In member function 'llvm::Error cling::IncrementalJIT::RemovableObjectLinkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1951,testability,Resourc,ResourcesGetter,1951,"nkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:231,usability,Error,Error,231,"builtin_llvm=OFF broken, LinkedObjects member is private in upstream; - [x] Checked for duplicates. ```. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h: In member function 'llvm::Error cling::IncrementalJIT::RemovableObjectLinkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:435,usability,error,error,435,"builtin_llvm=OFF broken, LinkedObjects member is private in upstream; - [x] Checked for duplicates. ```. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h: In member function 'llvm::Error cling::IncrementalJIT::RemovableObjectLinkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor N",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/issues/11146:1377,usability,Error,Error,1377,"nkingLayer::removeObject(llvm::orc::VModuleKey)':. [ 82s] /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:118:49: error: 'std::map<long unsigned int, std::unique_ptr<llvm::orc::LegacyRTDyldObjectLinkingLayerBase::LinkedObject> > llvm::orc::LegacyRTDyldObjectLinkingLayer::LinkedObjects' is private within this context. [ 82s] = static_cast<const AccessSymbolTable*>(LinkedObjects[K].get());. [ 82s] ^~~~~~~~~~~~~. [ 82s] In file included from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/IncrementalJIT.h:22:0,. [ 82s] from /home/abuild/rpmbuild/BUILD/root-6.26.06/interpreter/cling/lib/Interpreter/BackendPasses.cpp:12:. [ 82s] /usr/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h:475:55: note: declared private here. [ 82s] std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. [ 82s] ^~~~~~~~~~~~~. [ 82s] make[2]: *** [interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/build.make:125: interpreter/cling/lib/Interpreter/CMakeFiles/obj.clingInterpreter.dir/BackendPasses.cpp.o] Error 1. ```. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/cling/lib/Interpreter/IncrementalJIT.h#L111-L112. Patched version in ROOT:. https://github.com/root-project/root/blob/cd992545ae18f0d036e382408d4acfccfa16db48/interpreter/llvm/src/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L473-L476. Upstream (LLVM 9.x):. https://github.com/llvm/llvm-project/blob/c1a0a213378a458fbea1a5c77b315c7dce08fd05/llvm/include/llvm/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.h#L465. ```. private:. ExecutionSession &ES;. ResourcesGetter GetResources;. NotifyLoadedFtor NotifyLoaded;. NotifyFinalizedFtor NotifyFinalized;. NotifyFreedFtor NotifyFreed;. // NB! `LinkedObjects` needs to be destroyed before `NotifyFreed` because. // `~ConcreteLinkedObject` calls `NotifyFreed`. std::map<VModuleKey, std::unique_ptr<LinkedObject>> LinkedObjects;. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11146
https://github.com/root-project/root/pull/11147:56,deployability,build,build,56,"Remove outdated RTTI flags; Since commit 0a5b6c60e0, we build LLVM with RTTI enabled. It doesn't make sense anymore to build some of our source files without RTTI just because they are pulling in LLVM headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:119,deployability,build,build,119,"Remove outdated RTTI flags; Since commit 0a5b6c60e0, we build LLVM with RTTI enabled. It doesn't make sense anymore to build some of our source files without RTTI just because they are pulling in LLVM headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11147:89,reliability,doe,doesn,89,"Remove outdated RTTI flags; Since commit 0a5b6c60e0, we build LLVM with RTTI enabled. It doesn't make sense anymore to build some of our source files without RTTI just because they are pulling in LLVM headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11147
https://github.com/root-project/root/pull/11148:140,availability,error,error,140,"[io] Make case values constant expressions; Current `clang-16` from main complains: ""case value is not a constant expression"". Even if that error is probably relaxed before Clang 16 is released early next year, there is really no point in converting an integer into an enum just to get a numeric value back. This is (intentionally) a partial revert of commit https://github.com/root-project/root/commit/ac36d879629fd67cf6fc9e955923ec9f98a2361c. An alternative solution appears to be replacing `EProperty` (which refers. to the enum type in `TVirtualCollectionProxy`) with `::EProperty` from `TDictionary.h`. However, since the enum values are used as a bit mask and `fCase` is defined as `UInt_t` anyhow, it makes more sense to compare integer constants from the start. This PR fixes #11128",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:657,availability,mask,mask,657,"[io] Make case values constant expressions; Current `clang-16` from main complains: ""case value is not a constant expression"". Even if that error is probably relaxed before Clang 16 is released early next year, there is really no point in converting an integer into an enum just to get a numeric value back. This is (intentionally) a partial revert of commit https://github.com/root-project/root/commit/ac36d879629fd67cf6fc9e955923ec9f98a2361c. An alternative solution appears to be replacing `EProperty` (which refers. to the enum type in `TVirtualCollectionProxy`) with `::EProperty` from `TDictionary.h`. However, since the enum values are used as a bit mask and `fCase` is defined as `UInt_t` anyhow, it makes more sense to compare integer constants from the start. This PR fixes #11128",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:185,deployability,releas,released,185,"[io] Make case values constant expressions; Current `clang-16` from main complains: ""case value is not a constant expression"". Even if that error is probably relaxed before Clang 16 is released early next year, there is really no point in converting an integer into an enum just to get a numeric value back. This is (intentionally) a partial revert of commit https://github.com/root-project/root/commit/ac36d879629fd67cf6fc9e955923ec9f98a2361c. An alternative solution appears to be replacing `EProperty` (which refers. to the enum type in `TVirtualCollectionProxy`) with `::EProperty` from `TDictionary.h`. However, since the enum values are used as a bit mask and `fCase` is defined as `UInt_t` anyhow, it makes more sense to compare integer constants from the start. This PR fixes #11128",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:44,energy efficiency,Current,Current,44,"[io] Make case values constant expressions; Current `clang-16` from main complains: ""case value is not a constant expression"". Even if that error is probably relaxed before Clang 16 is released early next year, there is really no point in converting an integer into an enum just to get a numeric value back. This is (intentionally) a partial revert of commit https://github.com/root-project/root/commit/ac36d879629fd67cf6fc9e955923ec9f98a2361c. An alternative solution appears to be replacing `EProperty` (which refers. to the enum type in `TVirtualCollectionProxy`) with `::EProperty` from `TDictionary.h`. However, since the enum values are used as a bit mask and `fCase` is defined as `UInt_t` anyhow, it makes more sense to compare integer constants from the start. This PR fixes #11128",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:140,performance,error,error,140,"[io] Make case values constant expressions; Current `clang-16` from main complains: ""case value is not a constant expression"". Even if that error is probably relaxed before Clang 16 is released early next year, there is really no point in converting an integer into an enum just to get a numeric value back. This is (intentionally) a partial revert of commit https://github.com/root-project/root/commit/ac36d879629fd67cf6fc9e955923ec9f98a2361c. An alternative solution appears to be replacing `EProperty` (which refers. to the enum type in `TVirtualCollectionProxy`) with `::EProperty` from `TDictionary.h`. However, since the enum values are used as a bit mask and `fCase` is defined as `UInt_t` anyhow, it makes more sense to compare integer constants from the start. This PR fixes #11128",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:73,safety,compl,complains,73,"[io] Make case values constant expressions; Current `clang-16` from main complains: ""case value is not a constant expression"". Even if that error is probably relaxed before Clang 16 is released early next year, there is really no point in converting an integer into an enum just to get a numeric value back. This is (intentionally) a partial revert of commit https://github.com/root-project/root/commit/ac36d879629fd67cf6fc9e955923ec9f98a2361c. An alternative solution appears to be replacing `EProperty` (which refers. to the enum type in `TVirtualCollectionProxy`) with `::EProperty` from `TDictionary.h`. However, since the enum values are used as a bit mask and `fCase` is defined as `UInt_t` anyhow, it makes more sense to compare integer constants from the start. This PR fixes #11128",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:140,safety,error,error,140,"[io] Make case values constant expressions; Current `clang-16` from main complains: ""case value is not a constant expression"". Even if that error is probably relaxed before Clang 16 is released early next year, there is really no point in converting an integer into an enum just to get a numeric value back. This is (intentionally) a partial revert of commit https://github.com/root-project/root/commit/ac36d879629fd67cf6fc9e955923ec9f98a2361c. An alternative solution appears to be replacing `EProperty` (which refers. to the enum type in `TVirtualCollectionProxy`) with `::EProperty` from `TDictionary.h`. However, since the enum values are used as a bit mask and `fCase` is defined as `UInt_t` anyhow, it makes more sense to compare integer constants from the start. This PR fixes #11128",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:73,security,compl,complains,73,"[io] Make case values constant expressions; Current `clang-16` from main complains: ""case value is not a constant expression"". Even if that error is probably relaxed before Clang 16 is released early next year, there is really no point in converting an integer into an enum just to get a numeric value back. This is (intentionally) a partial revert of commit https://github.com/root-project/root/commit/ac36d879629fd67cf6fc9e955923ec9f98a2361c. An alternative solution appears to be replacing `EProperty` (which refers. to the enum type in `TVirtualCollectionProxy`) with `::EProperty` from `TDictionary.h`. However, since the enum values are used as a bit mask and `fCase` is defined as `UInt_t` anyhow, it makes more sense to compare integer constants from the start. This PR fixes #11128",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11148:140,usability,error,error,140,"[io] Make case values constant expressions; Current `clang-16` from main complains: ""case value is not a constant expression"". Even if that error is probably relaxed before Clang 16 is released early next year, there is really no point in converting an integer into an enum just to get a numeric value back. This is (intentionally) a partial revert of commit https://github.com/root-project/root/commit/ac36d879629fd67cf6fc9e955923ec9f98a2361c. An alternative solution appears to be replacing `EProperty` (which refers. to the enum type in `TVirtualCollectionProxy`) with `::EProperty` from `TDictionary.h`. However, since the enum values are used as a bit mask and `fCase` is defined as `UInt_t` anyhow, it makes more sense to compare integer constants from the start. This PR fixes #11128",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11148
https://github.com/root-project/root/pull/11149:204,availability,down,down,204,"[DF] Decouple type of RVariation storage from type returned by Vary expression; To this end, we now propagate compile-time information on how many columns are varied (one or more than one simultaneously) down from `Vary` to `RVariation`. We can take advantage of this information to simplify a number of. helper functions, e.g. substituting SFINAE with simple function. overloading, and to specify a storage type for results of `Vary ` expressions potentially different from the type returned by the expression itself, which will be necessary to implement bulk evaluation of systematic variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11149
https://github.com/root-project/root/pull/11149:328,integrability,sub,substituting,328,"[DF] Decouple type of RVariation storage from type returned by Vary expression; To this end, we now propagate compile-time information on how many columns are varied (one or more than one simultaneously) down from `Vary` to `RVariation`. We can take advantage of this information to simplify a number of. helper functions, e.g. substituting SFINAE with simple function. overloading, and to specify a storage type for results of `Vary ` expressions potentially different from the type returned by the expression itself, which will be necessary to implement bulk evaluation of systematic variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11149
https://github.com/root-project/root/pull/11149:390,interoperability,specif,specify,390,"[DF] Decouple type of RVariation storage from type returned by Vary expression; To this end, we now propagate compile-time information on how many columns are varied (one or more than one simultaneously) down from `Vary` to `RVariation`. We can take advantage of this information to simplify a number of. helper functions, e.g. substituting SFINAE with simple function. overloading, and to specify a storage type for results of `Vary ` expressions potentially different from the type returned by the expression itself, which will be necessary to implement bulk evaluation of systematic variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11149
https://github.com/root-project/root/pull/11149:5,modifiability,Deco,Decouple,5,"[DF] Decouple type of RVariation storage from type returned by Vary expression; To this end, we now propagate compile-time information on how many columns are varied (one or more than one simultaneously) down from `Vary` to `RVariation`. We can take advantage of this information to simplify a number of. helper functions, e.g. substituting SFINAE with simple function. overloading, and to specify a storage type for results of `Vary ` expressions potentially different from the type returned by the expression itself, which will be necessary to implement bulk evaluation of systematic variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11149
https://github.com/root-project/root/pull/11149:118,performance,time,time,118,"[DF] Decouple type of RVariation storage from type returned by Vary expression; To this end, we now propagate compile-time information on how many columns are varied (one or more than one simultaneously) down from `Vary` to `RVariation`. We can take advantage of this information to simplify a number of. helper functions, e.g. substituting SFINAE with simple function. overloading, and to specify a storage type for results of `Vary ` expressions potentially different from the type returned by the expression itself, which will be necessary to implement bulk evaluation of systematic variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11149
https://github.com/root-project/root/pull/11149:188,testability,simul,simultaneously,188,"[DF] Decouple type of RVariation storage from type returned by Vary expression; To this end, we now propagate compile-time information on how many columns are varied (one or more than one simultaneously) down from `Vary` to `RVariation`. We can take advantage of this information to simplify a number of. helper functions, e.g. substituting SFINAE with simple function. overloading, and to specify a storage type for results of `Vary ` expressions potentially different from the type returned by the expression itself, which will be necessary to implement bulk evaluation of systematic variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11149
https://github.com/root-project/root/pull/11149:283,testability,simpl,simplify,283,"[DF] Decouple type of RVariation storage from type returned by Vary expression; To this end, we now propagate compile-time information on how many columns are varied (one or more than one simultaneously) down from `Vary` to `RVariation`. We can take advantage of this information to simplify a number of. helper functions, e.g. substituting SFINAE with simple function. overloading, and to specify a storage type for results of `Vary ` expressions potentially different from the type returned by the expression itself, which will be necessary to implement bulk evaluation of systematic variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11149
https://github.com/root-project/root/pull/11149:353,testability,simpl,simple,353,"[DF] Decouple type of RVariation storage from type returned by Vary expression; To this end, we now propagate compile-time information on how many columns are varied (one or more than one simultaneously) down from `Vary` to `RVariation`. We can take advantage of this information to simplify a number of. helper functions, e.g. substituting SFINAE with simple function. overloading, and to specify a storage type for results of `Vary ` expressions potentially different from the type returned by the expression itself, which will be necessary to implement bulk evaluation of systematic variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11149
https://github.com/root-project/root/pull/11149:283,usability,simpl,simplify,283,"[DF] Decouple type of RVariation storage from type returned by Vary expression; To this end, we now propagate compile-time information on how many columns are varied (one or more than one simultaneously) down from `Vary` to `RVariation`. We can take advantage of this information to simplify a number of. helper functions, e.g. substituting SFINAE with simple function. overloading, and to specify a storage type for results of `Vary ` expressions potentially different from the type returned by the expression itself, which will be necessary to implement bulk evaluation of systematic variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11149
https://github.com/root-project/root/pull/11149:305,usability,help,helper,305,"[DF] Decouple type of RVariation storage from type returned by Vary expression; To this end, we now propagate compile-time information on how many columns are varied (one or more than one simultaneously) down from `Vary` to `RVariation`. We can take advantage of this information to simplify a number of. helper functions, e.g. substituting SFINAE with simple function. overloading, and to specify a storage type for results of `Vary ` expressions potentially different from the type returned by the expression itself, which will be necessary to implement bulk evaluation of systematic variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11149
https://github.com/root-project/root/pull/11149:353,usability,simpl,simple,353,"[DF] Decouple type of RVariation storage from type returned by Vary expression; To this end, we now propagate compile-time information on how many columns are varied (one or more than one simultaneously) down from `Vary` to `RVariation`. We can take advantage of this information to simplify a number of. helper functions, e.g. substituting SFINAE with simple function. overloading, and to specify a storage type for results of `Vary ` expressions potentially different from the type returned by the expression itself, which will be necessary to implement bulk evaluation of systematic variations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11149
https://github.com/root-project/root/pull/11150:124,integrability,event,event,124,[DF] Better name for test file; `NeverWrittenOut.root` is actually written out (because the exception. is thrown during the event loop). Change the file name so that it's deleted at the end of the test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11150
https://github.com/root-project/root/pull/11150:21,safety,test,test,21,[DF] Better name for test file; `NeverWrittenOut.root` is actually written out (because the exception. is thrown during the event loop). Change the file name so that it's deleted at the end of the test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11150
https://github.com/root-project/root/pull/11150:92,safety,except,exception,92,[DF] Better name for test file; `NeverWrittenOut.root` is actually written out (because the exception. is thrown during the event loop). Change the file name so that it's deleted at the end of the test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11150
https://github.com/root-project/root/pull/11150:197,safety,test,test,197,[DF] Better name for test file; `NeverWrittenOut.root` is actually written out (because the exception. is thrown during the event loop). Change the file name so that it's deleted at the end of the test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11150
https://github.com/root-project/root/pull/11150:21,testability,test,test,21,[DF] Better name for test file; `NeverWrittenOut.root` is actually written out (because the exception. is thrown during the event loop). Change the file name so that it's deleted at the end of the test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11150
https://github.com/root-project/root/pull/11150:197,testability,test,test,197,[DF] Better name for test file; `NeverWrittenOut.root` is actually written out (because the exception. is thrown during the event loop). Change the file name so that it's deleted at the end of the test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11150
https://github.com/root-project/root/pull/11151:726,deployability,version,version,726,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:748,deployability,automat,automatically,748,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:31,integrability,interfac,interface,31,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:84,integrability,interfac,interface,84,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:396,integrability,interfac,interface,396,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:602,integrability,buffer,buffer,602,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:726,integrability,version,version,726,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:31,interoperability,interfac,interface,31,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:84,interoperability,interfac,interface,84,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:396,interoperability,interfac,interface,396,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:31,modifiability,interfac,interface,31,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:84,modifiability,interfac,interface,84,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:396,modifiability,interfac,interface,396,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:585,modifiability,reu,reuse,585,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:726,modifiability,version,version,726,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:833,performance,perform,performance,833,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:846,performance,overhead,overhead,846,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:813,reliability,doe,doesn,813,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:771,safety,test,test,771,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:748,testability,automat,automatically,748,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:771,testability,test,test,771,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:777,testability,coverag,coverage,777,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:794,testability,verif,verified,794,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11151:833,usability,perform,performance,833,"[RF] Vectorize `RooAbsBinning` interface for bin index lookups; The `RooAbsBinning` interface for bin index lookups was changed to. enable vectorized implementations. Instead of having the override. `RooAbsBinning::binNumber()`, the binning implementations now have to. override the `RooAbsBinning::binNumbers()` function to evaluate the bin. indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate. the accregation of bin indices over multiple dimensions, and it uses a. `double` ouput vector such that the caller can reuse the output buffer. for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms. of the vectorized version, such that we automatically get wide test. coverage. It was verified that this doesn't come with a performance. overhead. This will greatly facilitate the vectorization of the RooHistPdf and. RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11151
https://github.com/root-project/root/pull/11152:158,deployability,configurat,configurations,158,"[VecOps] Add missing #include <limits> to RVec.hxx; The file uses `std::numeric_limits`, defined in `<limits>` . That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11152
https://github.com/root-project/root/pull/11152:199,deployability,build,building,199,"[VecOps] Add missing #include <limits> to RVec.hxx; The file uses `std::numeric_limits`, defined in `<limits>` . That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11152
https://github.com/root-project/root/pull/11152:158,integrability,configur,configurations,158,"[VecOps] Add missing #include <limits> to RVec.hxx; The file uses `std::numeric_limits`, defined in `<limits>` . That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11152
https://github.com/root-project/root/pull/11152:268,integrability,configur,configuring,268,"[VecOps] Add missing #include <limits> to RVec.hxx; The file uses `std::numeric_limits`, defined in `<limits>` . That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11152
https://github.com/root-project/root/pull/11152:158,modifiability,configur,configurations,158,"[VecOps] Add missing #include <limits> to RVec.hxx; The file uses `std::numeric_limits`, defined in `<limits>` . That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11152
https://github.com/root-project/root/pull/11152:268,modifiability,configur,configuring,268,"[VecOps] Add missing #include <limits> to RVec.hxx; The file uses `std::numeric_limits`, defined in `<limits>` . That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11152
https://github.com/root-project/root/pull/11152:158,security,configur,configurations,158,"[VecOps] Add missing #include <limits> to RVec.hxx; The file uses `std::numeric_limits`, defined in `<limits>` . That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11152
https://github.com/root-project/root/pull/11152:268,security,configur,configuring,268,"[VecOps] Add missing #include <limits> to RVec.hxx; The file uses `std::numeric_limits`, defined in `<limits>` . That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11152
https://github.com/root-project/root/pull/11153:82,availability,error,errors,82,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:189,availability,error,error,189,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1984,availability,error,error,1984,"ellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2225,availability,error,error,2225,"::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2679,availability,error,error,2679,"e to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2906,availability,error,error,2906,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3137,availability,error,error,3137,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3375,availability,error,error,3375,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:275,deployability,build,build,275,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:285,deployability,releas,release,285,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:483,deployability,build,build,483,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:493,deployability,releas,release,493,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:995,deployability,build,build,995,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1005,deployability,releas,release,1005,"ple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils':",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1521,deployability,build,build,1521,"asource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1531,deployability,releas,release,1531,"ite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\bui",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1836,deployability,build,build,1836,"oxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1846,deployability,releas,release,1846,"ource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\mast",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2077,deployability,build,build,2077,"it\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2087,deployability,releas,release,2087,"ree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2324,deployability,build,build,2324,"OOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2334,deployability,releas,release,2334,"Interface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2532,deployability,build,build,2532,"ase\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2542,deployability,releas,release,2542,"taframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2758,deployability,build,build,2758,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2768,deployability,releas,release,2768,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2990,deployability,build,build,2990,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3000,deployability,releas,release,3000,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3228,deployability,build,build,3228,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3238,deployability,releas,release,3238,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3512,deployability,build,build,3512,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3522,deployability,releas,release,3522,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3583,deployability,Build,Building,3583,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3619,deployability,build,build,3619,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3629,deployability,releas,release,3629,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3705,deployability,FAIL,FAILED,3705,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3418,energy efficiency,alloc,allocator,3418,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:6,integrability,coupl,couple,6,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:413,integrability,messag,message,413,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:628,integrability,messag,message,628,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1137,integrability,messag,message,1137,"dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1660,integrability,messag,message,1660,"late member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterfac",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2462,integrability,messag,message,2462,"RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:413,interoperability,messag,message,413,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:628,interoperability,messag,message,628,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:752,interoperability,Prox,Proxied,752,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:837,interoperability,Prox,Proxied,837,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1137,interoperability,messag,message,1137,"dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1263,interoperability,Prox,Proxied,1263,"ellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1348,interoperability,Prox,Proxied,1348,"llenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1660,interoperability,messag,message,1660,"late member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterfac",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1761,interoperability,Prox,Proxied,1761,"ource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2462,interoperability,messag,message,2462,"RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:6,modifiability,coupl,couple,6,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:82,performance,error,errors,82,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:189,performance,error,error,189,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1984,performance,error,error,1984,"ellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2225,performance,error,error,2225,"::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2679,performance,error,error,2679,"e to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2906,performance,error,error,2906,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3137,performance,error,error,3137,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3375,performance,error,error,3375,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3705,reliability,FAIL,FAILED,3705,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:82,safety,error,errors,82,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:189,safety,error,error,189,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:308,safety,test,test,308,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:516,safety,test,test,516,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1028,safety,test,test,1028,":"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the le",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1105,safety,test,test,1105,"C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\datafra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1554,safety,test,test,1554,"s\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1869,safety,test,test,1869,"void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1984,safety,error,error,1984,"ellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2110,safety,test,test,2110,"tasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2225,safety,error,error,2225,"::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2357,safety,test,test,2357,"aSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterfa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2565,safety,test,test,2565,"ce_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2679,safety,error,error,2679,"e to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2791,safety,test,test,2791,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2906,safety,error,error,2906,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3023,safety,test,test,3023,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3137,safety,error,error,3137,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3261,safety,test,test,3261,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3375,safety,error,error,3375,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3545,safety,test,test,3545,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3652,safety,test,test,3652,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2718,security,ident,identifier,2718,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:6,testability,coupl,couple,6,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:308,testability,test,test,308,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:516,testability,test,test,516,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1028,testability,test,test,1028,":"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the le",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1105,testability,test,test,1105,"C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\datafra",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1554,testability,test,test,1554,"s\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1869,testability,test,test,1869,"void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2110,testability,test,test,2110,"tasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2357,testability,test,test,2357,"aSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterfa",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2565,testability,test,test,2565,"ce_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2791,testability,test,test,2791,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3023,testability,test,test,3023,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3261,testability,test,test,3261,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3545,testability,test,test,3545,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3652,testability,test,test,3652,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:82,usability,error,errors,82,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:110,usability,User,Users,110,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:189,usability,error,error,189,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:260,usability,User,Users,260,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:344,usability,User,Users,344,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:468,usability,User,Users,468,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:552,usability,User,Users,552,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:980,usability,User,Users,980,"Add a couple of missing ""ROOT::"" namespaces; This fixes the following compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'Tr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1064,usability,User,Users,1064,"ng compilation errors on Windows:. ```. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1506,usability,User,Users,1506,"aframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Intern",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1590,usability,User,Users,1590,"inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxpr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1821,usability,User,Users,1821,"::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1905,usability,User,Users,1905,":string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): er",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:1984,usability,error,error,1984,"ellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2062,usability,User,Users,2062,"sers\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2146,usability,User,Users,2146,"e reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2225,usability,error,error,2225,"::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2309,usability,User,Users,2309,"F::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2393,usability,User,Users,2393,"t(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::ve",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2517,usability,User,Users,2517,"\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2601,usability,User,Users,2601,"\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2679,usability,error,error,2679,"e to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2743,usability,User,Users,2743,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2827,usability,User,Users,2827,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2906,usability,error,error,2906,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:2975,usability,User,Users,2975,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3059,usability,User,Users,3059,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3137,usability,error,error,3137,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3213,usability,User,Users,3213,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3297,usability,User,Users,3297,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3375,usability,error,error,3375,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3497,usability,User,Users,3497,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/pull/11153:3604,usability,User,Users,3604,"ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]. Done Building Project ""C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj"" (default targets) -- FAILED. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11153
https://github.com/root-project/root/issues/11154:138,availability,error,error-on-fitresult-scan,138,[math][fit] FitResult is empty or corrupted after FitData class is deleted; As shown in the code attached in https://root-forum.cern.ch/t/error-on-fitresult-scan/51014. one cannot use FitResult::Scan when the Fitter class has been deleted. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11154
https://github.com/root-project/root/issues/11154:138,performance,error,error-on-fitresult-scan,138,[math][fit] FitResult is empty or corrupted after FitData class is deleted; As shown in the code attached in https://root-forum.cern.ch/t/error-on-fitresult-scan/51014. one cannot use FitResult::Scan when the Fitter class has been deleted. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11154
https://github.com/root-project/root/issues/11154:138,safety,error,error-on-fitresult-scan,138,[math][fit] FitResult is empty or corrupted after FitData class is deleted; As shown in the code attached in https://root-forum.cern.ch/t/error-on-fitresult-scan/51014. one cannot use FitResult::Scan when the Fitter class has been deleted. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11154
https://github.com/root-project/root/issues/11154:138,usability,error,error-on-fitresult-scan,138,[math][fit] FitResult is empty or corrupted after FitData class is deleted; As shown in the code attached in https://root-forum.cern.ch/t/error-on-fitresult-scan/51014. one cannot use FitResult::Scan when the Fitter class has been deleted. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11154
https://github.com/root-project/root/pull/11155:188,deployability,updat,updated,188,Zero copy merge (WIP); # This Pull request:. Add a draft implementation of zero-copy merge of RNTuples. @jblomer . ## Changes or fixes:. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11155
https://github.com/root-project/root/pull/11155:158,safety,test,tested,158,Zero copy merge (WIP); # This Pull request:. Add a draft implementation of zero-copy merge of RNTuples. @jblomer . ## Changes or fixes:. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11155
https://github.com/root-project/root/pull/11155:188,safety,updat,updated,188,Zero copy merge (WIP); # This Pull request:. Add a draft implementation of zero-copy merge of RNTuples. @jblomer . ## Changes or fixes:. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11155
https://github.com/root-project/root/pull/11155:188,security,updat,updated,188,Zero copy merge (WIP); # This Pull request:. Add a draft implementation of zero-copy merge of RNTuples. @jblomer . ## Changes or fixes:. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11155
https://github.com/root-project/root/pull/11155:158,testability,test,tested,158,Zero copy merge (WIP); # This Pull request:. Add a draft implementation of zero-copy merge of RNTuples. @jblomer . ## Changes or fixes:. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11155
https://github.com/root-project/root/pull/11156:165,deployability,configurat,configurations,165,"[VecOps] Add missing #include <limits> to RVec.hxx [v6.26]; The file uses `std::numeric_limits`, defined in `<limits>`. That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT. (cherry picked from commit d2e56f982e303d83784f28e1524bc24c39b350c4). Backport of PR https://github.com/root-project/root/pull/11152",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11156
https://github.com/root-project/root/pull/11156:206,deployability,build,building,206,"[VecOps] Add missing #include <limits> to RVec.hxx [v6.26]; The file uses `std::numeric_limits`, defined in `<limits>`. That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT. (cherry picked from commit d2e56f982e303d83784f28e1524bc24c39b350c4). Backport of PR https://github.com/root-project/root/pull/11152",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11156
https://github.com/root-project/root/pull/11156:165,integrability,configur,configurations,165,"[VecOps] Add missing #include <limits> to RVec.hxx [v6.26]; The file uses `std::numeric_limits`, defined in `<limits>`. That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT. (cherry picked from commit d2e56f982e303d83784f28e1524bc24c39b350c4). Backport of PR https://github.com/root-project/root/pull/11152",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11156
https://github.com/root-project/root/pull/11156:275,integrability,configur,configuring,275,"[VecOps] Add missing #include <limits> to RVec.hxx [v6.26]; The file uses `std::numeric_limits`, defined in `<limits>`. That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT. (cherry picked from commit d2e56f982e303d83784f28e1524bc24c39b350c4). Backport of PR https://github.com/root-project/root/pull/11152",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11156
https://github.com/root-project/root/pull/11156:165,modifiability,configur,configurations,165,"[VecOps] Add missing #include <limits> to RVec.hxx [v6.26]; The file uses `std::numeric_limits`, defined in `<limits>`. That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT. (cherry picked from commit d2e56f982e303d83784f28e1524bc24c39b350c4). Backport of PR https://github.com/root-project/root/pull/11152",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11156
https://github.com/root-project/root/pull/11156:275,modifiability,configur,configuring,275,"[VecOps] Add missing #include <limits> to RVec.hxx [v6.26]; The file uses `std::numeric_limits`, defined in `<limits>`. That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT. (cherry picked from commit d2e56f982e303d83784f28e1524bc24c39b350c4). Backport of PR https://github.com/root-project/root/pull/11152",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11156
https://github.com/root-project/root/pull/11156:165,security,configur,configurations,165,"[VecOps] Add missing #include <limits> to RVec.hxx [v6.26]; The file uses `std::numeric_limits`, defined in `<limits>`. That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT. (cherry picked from commit d2e56f982e303d83784f28e1524bc24c39b350c4). Backport of PR https://github.com/root-project/root/pull/11152",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11156
https://github.com/root-project/root/pull/11156:275,security,configur,configuring,275,"[VecOps] Add missing #include <limits> to RVec.hxx [v6.26]; The file uses `std::numeric_limits`, defined in `<limits>`. That header is transitively included in most configurations, but for example not when building with a recent libstdc++ (with less transitive includes) and configuring with cxx14 and without VDT. (cherry picked from commit d2e56f982e303d83784f28e1524bc24c39b350c4). Backport of PR https://github.com/root-project/root/pull/11152",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11156
https://github.com/root-project/root/pull/11157:19,modifiability,variab,variables,19,"Remove more unused variables in various areas; First delete nop method `TMVA::SVWorkingSet::PrintStat()`, then remove many more unused variables in various areas. **Note**: If you absolutely require your part of this PR be split out, we can discuss but it's going to be work that I'd like to avoid if possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11157
https://github.com/root-project/root/pull/11157:135,modifiability,variab,variables,135,"Remove more unused variables in various areas; First delete nop method `TMVA::SVWorkingSet::PrintStat()`, then remove many more unused variables in various areas. **Note**: If you absolutely require your part of this PR be split out, we can discuss but it's going to be work that I'd like to avoid if possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11157
https://github.com/root-project/root/pull/11157:292,safety,avoid,avoid,292,"Remove more unused variables in various areas; First delete nop method `TMVA::SVWorkingSet::PrintStat()`, then remove many more unused variables in various areas. **Note**: If you absolutely require your part of this PR be split out, we can discuss but it's going to be work that I'd like to avoid if possible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11157
https://github.com/root-project/root/pull/11158:137,energy efficiency,current,current,137,"[DF] Apply some include fixes from include-what-you-use; This is not all the suggested fixes, but it should be an improvement w.r.t. the current situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11158
https://github.com/root-project/root/pull/11159:108,deployability,contain,contains,108,"Make IsAboveMaxEdm() return true if Edm is NaN; Minuit2's MnHesse sometimes returns success, but the matrix contains only NaN values (this should be fixed, but that is a bigger issue not addressed here). In this case, IsAboveMaxEdm() returns false, since NaN < threshold is false, irregardless of the threshold. This leads to Minuit2 wrongly reporting that the minimum is ""valid"". This fix makes sure that IsAboveMaxEdm() returns true if the Edm value is NaN and the fit is reported as **invalid**, which is not perfect but better than the current confusing behavior. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11159
https://github.com/root-project/root/pull/11159:540,energy efficiency,current,current,540,"Make IsAboveMaxEdm() return true if Edm is NaN; Minuit2's MnHesse sometimes returns success, but the matrix contains only NaN values (this should be fixed, but that is a bigger issue not addressed here). In this case, IsAboveMaxEdm() returns false, since NaN < threshold is false, irregardless of the threshold. This leads to Minuit2 wrongly reporting that the minimum is ""valid"". This fix makes sure that IsAboveMaxEdm() returns true if the Edm value is NaN and the fit is reported as **invalid**, which is not perfect but better than the current confusing behavior. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11159
https://github.com/root-project/root/pull/11159:373,safety,valid,valid,373,"Make IsAboveMaxEdm() return true if Edm is NaN; Minuit2's MnHesse sometimes returns success, but the matrix contains only NaN values (this should be fixed, but that is a bigger issue not addressed here). In this case, IsAboveMaxEdm() returns false, since NaN < threshold is false, irregardless of the threshold. This leads to Minuit2 wrongly reporting that the minimum is ""valid"". This fix makes sure that IsAboveMaxEdm() returns true if the Edm value is NaN and the fit is reported as **invalid**, which is not perfect but better than the current confusing behavior. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11159
https://github.com/root-project/root/pull/11159:589,safety,test,tested,589,"Make IsAboveMaxEdm() return true if Edm is NaN; Minuit2's MnHesse sometimes returns success, but the matrix contains only NaN values (this should be fixed, but that is a bigger issue not addressed here). In this case, IsAboveMaxEdm() returns false, since NaN < threshold is false, irregardless of the threshold. This leads to Minuit2 wrongly reporting that the minimum is ""valid"". This fix makes sure that IsAboveMaxEdm() returns true if the Edm value is NaN and the fit is reported as **invalid**, which is not perfect but better than the current confusing behavior. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11159
https://github.com/root-project/root/pull/11159:589,testability,test,tested,589,"Make IsAboveMaxEdm() return true if Edm is NaN; Minuit2's MnHesse sometimes returns success, but the matrix contains only NaN values (this should be fixed, but that is a bigger issue not addressed here). In this case, IsAboveMaxEdm() returns false, since NaN < threshold is false, irregardless of the threshold. This leads to Minuit2 wrongly reporting that the minimum is ""valid"". This fix makes sure that IsAboveMaxEdm() returns true if the Edm value is NaN and the fit is reported as **invalid**, which is not perfect but better than the current confusing behavior. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11159
https://github.com/root-project/root/pull/11159:361,usability,minim,minimum,361,"Make IsAboveMaxEdm() return true if Edm is NaN; Minuit2's MnHesse sometimes returns success, but the matrix contains only NaN values (this should be fixed, but that is a bigger issue not addressed here). In this case, IsAboveMaxEdm() returns false, since NaN < threshold is false, irregardless of the threshold. This leads to Minuit2 wrongly reporting that the minimum is ""valid"". This fix makes sure that IsAboveMaxEdm() returns true if the Edm value is NaN and the fit is reported as **invalid**, which is not perfect but better than the current confusing behavior. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11159
https://github.com/root-project/root/pull/11159:558,usability,behavi,behavior,558,"Make IsAboveMaxEdm() return true if Edm is NaN; Minuit2's MnHesse sometimes returns success, but the matrix contains only NaN values (this should be fixed, but that is a bigger issue not addressed here). In this case, IsAboveMaxEdm() returns false, since NaN < threshold is false, irregardless of the threshold. This leads to Minuit2 wrongly reporting that the minimum is ""valid"". This fix makes sure that IsAboveMaxEdm() returns true if the Edm value is NaN and the fit is reported as **invalid**, which is not perfect but better than the current confusing behavior. ## Checklist:. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11159
https://github.com/root-project/root/issues/11160:740,availability,Operat,Operating,740,"Wrong Xrootd SHA256 has in release v6-26-06; - [ ] Checked for duplicates. ### Describe the bug. Compilation of Root v6-26-06 from github release fails. The SHA256 hash is wrong and has been corrected after this release on. https://github.com/root-project/root/commit/ce4ca3e1537be6776b93ef7bf8cd39d942c7de27. ### Expected behavior. Compilation of Root v6-26-06 from github release succeeds. ### To Reproduce. Steps to reproduce the behavior:. 1. git clone http://root.cern.ch/git/root.git. 2. rootvers=""6-26-06""; git checkout v$rootvers. 3. mkdir ../root-build; cd ../root-build. 4. cmake -DCMAKE_INSTALL_PREFIX=$rootinstall -Dbuiltin_xrootd=ON -Droofit=ON -Dpythia8=ON -Dmysql=OFF ../root-sources. ### Setup. 1. ROOT version v6-26-06. 2. Operating system Linux Fedora 36. 3. git clone http://root.cern.ch/git/root.git.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:27,deployability,releas,release,27,"Wrong Xrootd SHA256 has in release v6-26-06; - [ ] Checked for duplicates. ### Describe the bug. Compilation of Root v6-26-06 from github release fails. The SHA256 hash is wrong and has been corrected after this release on. https://github.com/root-project/root/commit/ce4ca3e1537be6776b93ef7bf8cd39d942c7de27. ### Expected behavior. Compilation of Root v6-26-06 from github release succeeds. ### To Reproduce. Steps to reproduce the behavior:. 1. git clone http://root.cern.ch/git/root.git. 2. rootvers=""6-26-06""; git checkout v$rootvers. 3. mkdir ../root-build; cd ../root-build. 4. cmake -DCMAKE_INSTALL_PREFIX=$rootinstall -Dbuiltin_xrootd=ON -Droofit=ON -Dpythia8=ON -Dmysql=OFF ../root-sources. ### Setup. 1. ROOT version v6-26-06. 2. Operating system Linux Fedora 36. 3. git clone http://root.cern.ch/git/root.git.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:138,deployability,releas,release,138,"Wrong Xrootd SHA256 has in release v6-26-06; - [ ] Checked for duplicates. ### Describe the bug. Compilation of Root v6-26-06 from github release fails. The SHA256 hash is wrong and has been corrected after this release on. https://github.com/root-project/root/commit/ce4ca3e1537be6776b93ef7bf8cd39d942c7de27. ### Expected behavior. Compilation of Root v6-26-06 from github release succeeds. ### To Reproduce. Steps to reproduce the behavior:. 1. git clone http://root.cern.ch/git/root.git. 2. rootvers=""6-26-06""; git checkout v$rootvers. 3. mkdir ../root-build; cd ../root-build. 4. cmake -DCMAKE_INSTALL_PREFIX=$rootinstall -Dbuiltin_xrootd=ON -Droofit=ON -Dpythia8=ON -Dmysql=OFF ../root-sources. ### Setup. 1. ROOT version v6-26-06. 2. Operating system Linux Fedora 36. 3. git clone http://root.cern.ch/git/root.git.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:146,deployability,fail,fails,146,"Wrong Xrootd SHA256 has in release v6-26-06; - [ ] Checked for duplicates. ### Describe the bug. Compilation of Root v6-26-06 from github release fails. The SHA256 hash is wrong and has been corrected after this release on. https://github.com/root-project/root/commit/ce4ca3e1537be6776b93ef7bf8cd39d942c7de27. ### Expected behavior. Compilation of Root v6-26-06 from github release succeeds. ### To Reproduce. Steps to reproduce the behavior:. 1. git clone http://root.cern.ch/git/root.git. 2. rootvers=""6-26-06""; git checkout v$rootvers. 3. mkdir ../root-build; cd ../root-build. 4. cmake -DCMAKE_INSTALL_PREFIX=$rootinstall -Dbuiltin_xrootd=ON -Droofit=ON -Dpythia8=ON -Dmysql=OFF ../root-sources. ### Setup. 1. ROOT version v6-26-06. 2. Operating system Linux Fedora 36. 3. git clone http://root.cern.ch/git/root.git.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:212,deployability,releas,release,212,"Wrong Xrootd SHA256 has in release v6-26-06; - [ ] Checked for duplicates. ### Describe the bug. Compilation of Root v6-26-06 from github release fails. The SHA256 hash is wrong and has been corrected after this release on. https://github.com/root-project/root/commit/ce4ca3e1537be6776b93ef7bf8cd39d942c7de27. ### Expected behavior. Compilation of Root v6-26-06 from github release succeeds. ### To Reproduce. Steps to reproduce the behavior:. 1. git clone http://root.cern.ch/git/root.git. 2. rootvers=""6-26-06""; git checkout v$rootvers. 3. mkdir ../root-build; cd ../root-build. 4. cmake -DCMAKE_INSTALL_PREFIX=$rootinstall -Dbuiltin_xrootd=ON -Droofit=ON -Dpythia8=ON -Dmysql=OFF ../root-sources. ### Setup. 1. ROOT version v6-26-06. 2. Operating system Linux Fedora 36. 3. git clone http://root.cern.ch/git/root.git.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:374,deployability,releas,release,374,"Wrong Xrootd SHA256 has in release v6-26-06; - [ ] Checked for duplicates. ### Describe the bug. Compilation of Root v6-26-06 from github release fails. The SHA256 hash is wrong and has been corrected after this release on. https://github.com/root-project/root/commit/ce4ca3e1537be6776b93ef7bf8cd39d942c7de27. ### Expected behavior. Compilation of Root v6-26-06 from github release succeeds. ### To Reproduce. Steps to reproduce the behavior:. 1. git clone http://root.cern.ch/git/root.git. 2. rootvers=""6-26-06""; git checkout v$rootvers. 3. mkdir ../root-build; cd ../root-build. 4. cmake -DCMAKE_INSTALL_PREFIX=$rootinstall -Dbuiltin_xrootd=ON -Droofit=ON -Dpythia8=ON -Dmysql=OFF ../root-sources. ### Setup. 1. ROOT version v6-26-06. 2. Operating system Linux Fedora 36. 3. git clone http://root.cern.ch/git/root.git.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:556,deployability,build,build,556,"Wrong Xrootd SHA256 has in release v6-26-06; - [ ] Checked for duplicates. ### Describe the bug. Compilation of Root v6-26-06 from github release fails. The SHA256 hash is wrong and has been corrected after this release on. https://github.com/root-project/root/commit/ce4ca3e1537be6776b93ef7bf8cd39d942c7de27. ### Expected behavior. Compilation of Root v6-26-06 from github release succeeds. ### To Reproduce. Steps to reproduce the behavior:. 1. git clone http://root.cern.ch/git/root.git. 2. rootvers=""6-26-06""; git checkout v$rootvers. 3. mkdir ../root-build; cd ../root-build. 4. cmake -DCMAKE_INSTALL_PREFIX=$rootinstall -Dbuiltin_xrootd=ON -Droofit=ON -Dpythia8=ON -Dmysql=OFF ../root-sources. ### Setup. 1. ROOT version v6-26-06. 2. Operating system Linux Fedora 36. 3. git clone http://root.cern.ch/git/root.git.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:574,deployability,build,build,574,"Wrong Xrootd SHA256 has in release v6-26-06; - [ ] Checked for duplicates. ### Describe the bug. Compilation of Root v6-26-06 from github release fails. The SHA256 hash is wrong and has been corrected after this release on. https://github.com/root-project/root/commit/ce4ca3e1537be6776b93ef7bf8cd39d942c7de27. ### Expected behavior. Compilation of Root v6-26-06 from github release succeeds. ### To Reproduce. Steps to reproduce the behavior:. 1. git clone http://root.cern.ch/git/root.git. 2. rootvers=""6-26-06""; git checkout v$rootvers. 3. mkdir ../root-build; cd ../root-build. 4. cmake -DCMAKE_INSTALL_PREFIX=$rootinstall -Dbuiltin_xrootd=ON -Droofit=ON -Dpythia8=ON -Dmysql=OFF ../root-sources. ### Setup. 1. ROOT version v6-26-06. 2. Operating system Linux Fedora 36. 3. git clone http://root.cern.ch/git/root.git.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:719,deployability,version,version,719,"Wrong Xrootd SHA256 has in release v6-26-06; - [ ] Checked for duplicates. ### Describe the bug. Compilation of Root v6-26-06 from github release fails. The SHA256 hash is wrong and has been corrected after this release on. https://github.com/root-project/root/commit/ce4ca3e1537be6776b93ef7bf8cd39d942c7de27. ### Expected behavior. Compilation of Root v6-26-06 from github release succeeds. ### To Reproduce. Steps to reproduce the behavior:. 1. git clone http://root.cern.ch/git/root.git. 2. rootvers=""6-26-06""; git checkout v$rootvers. 3. mkdir ../root-build; cd ../root-build. 4. cmake -DCMAKE_INSTALL_PREFIX=$rootinstall -Dbuiltin_xrootd=ON -Droofit=ON -Dpythia8=ON -Dmysql=OFF ../root-sources. ### Setup. 1. ROOT version v6-26-06. 2. Operating system Linux Fedora 36. 3. git clone http://root.cern.ch/git/root.git.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:719,integrability,version,version,719,"Wrong Xrootd SHA256 has in release v6-26-06; - [ ] Checked for duplicates. ### Describe the bug. Compilation of Root v6-26-06 from github release fails. The SHA256 hash is wrong and has been corrected after this release on. https://github.com/root-project/root/commit/ce4ca3e1537be6776b93ef7bf8cd39d942c7de27. ### Expected behavior. Compilation of Root v6-26-06 from github release succeeds. ### To Reproduce. Steps to reproduce the behavior:. 1. git clone http://root.cern.ch/git/root.git. 2. rootvers=""6-26-06""; git checkout v$rootvers. 3. mkdir ../root-build; cd ../root-build. 4. cmake -DCMAKE_INSTALL_PREFIX=$rootinstall -Dbuiltin_xrootd=ON -Droofit=ON -Dpythia8=ON -Dmysql=OFF ../root-sources. ### Setup. 1. ROOT version v6-26-06. 2. Operating system Linux Fedora 36. 3. git clone http://root.cern.ch/git/root.git.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:719,modifiability,version,version,719,"Wrong Xrootd SHA256 has in release v6-26-06; - [ ] Checked for duplicates. ### Describe the bug. Compilation of Root v6-26-06 from github release fails. The SHA256 hash is wrong and has been corrected after this release on. https://github.com/root-project/root/commit/ce4ca3e1537be6776b93ef7bf8cd39d942c7de27. ### Expected behavior. Compilation of Root v6-26-06 from github release succeeds. ### To Reproduce. Steps to reproduce the behavior:. 1. git clone http://root.cern.ch/git/root.git. 2. rootvers=""6-26-06""; git checkout v$rootvers. 3. mkdir ../root-build; cd ../root-build. 4. cmake -DCMAKE_INSTALL_PREFIX=$rootinstall -Dbuiltin_xrootd=ON -Droofit=ON -Dpythia8=ON -Dmysql=OFF ../root-sources. ### Setup. 1. ROOT version v6-26-06. 2. Operating system Linux Fedora 36. 3. git clone http://root.cern.ch/git/root.git.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:146,reliability,fail,fails,146,"Wrong Xrootd SHA256 has in release v6-26-06; - [ ] Checked for duplicates. ### Describe the bug. Compilation of Root v6-26-06 from github release fails. The SHA256 hash is wrong and has been corrected after this release on. https://github.com/root-project/root/commit/ce4ca3e1537be6776b93ef7bf8cd39d942c7de27. ### Expected behavior. Compilation of Root v6-26-06 from github release succeeds. ### To Reproduce. Steps to reproduce the behavior:. 1. git clone http://root.cern.ch/git/root.git. 2. rootvers=""6-26-06""; git checkout v$rootvers. 3. mkdir ../root-build; cd ../root-build. 4. cmake -DCMAKE_INSTALL_PREFIX=$rootinstall -Dbuiltin_xrootd=ON -Droofit=ON -Dpythia8=ON -Dmysql=OFF ../root-sources. ### Setup. 1. ROOT version v6-26-06. 2. Operating system Linux Fedora 36. 3. git clone http://root.cern.ch/git/root.git.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
https://github.com/root-project/root/issues/11160:164,security,hash,hash,164,"Wrong Xrootd SHA256 has in release v6-26-06; - [ ] Checked for duplicates. ### Describe the bug. Compilation of Root v6-26-06 from github release fails. The SHA256 hash is wrong and has been corrected after this release on. https://github.com/root-project/root/commit/ce4ca3e1537be6776b93ef7bf8cd39d942c7de27. ### Expected behavior. Compilation of Root v6-26-06 from github release succeeds. ### To Reproduce. Steps to reproduce the behavior:. 1. git clone http://root.cern.ch/git/root.git. 2. rootvers=""6-26-06""; git checkout v$rootvers. 3. mkdir ../root-build; cd ../root-build. 4. cmake -DCMAKE_INSTALL_PREFIX=$rootinstall -Dbuiltin_xrootd=ON -Droofit=ON -Dpythia8=ON -Dmysql=OFF ../root-sources. ### Setup. 1. ROOT version v6-26-06. 2. Operating system Linux Fedora 36. 3. git clone http://root.cern.ch/git/root.git.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11160
