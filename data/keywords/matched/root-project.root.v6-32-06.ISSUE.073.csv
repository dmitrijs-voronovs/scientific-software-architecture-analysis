id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/11627:594,usability,user,user,594,"[RF] Add PriorityQueue in MultiProcess; # This Pull request:. ## Changes or fixes:. In preparation for coming optimizations, we introduce here some changes to RooFit::MultiProcess::Queue. 1. Queue itself is now an abstract base class. This means we must access it as a pointer from e.g. within JobManager. Queue still holds a lot of the old generic Queue functionality, like Queue::loop. 2. The old ""default"" Queue implementation is now FIFOQueue. This behaves the same as before: first task in == first task out. 3. A new Queue implementation is added: PriorityQueue. As the name implies: the user can set task priorities when using this queue. The type of Queue and also task priorities can be set through RooFit::MultiProcess::Config::Queue. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11627
https://github.com/root-project/root/pull/11628:195,energy efficiency,optim,optimizations,195,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/pull/11628:137,integrability,wrap,wrapped,137,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/pull/11628:394,integrability,event,event,394,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/pull/11628:403,integrability,event,event,403,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/pull/11628:159,modifiability,Maintain,Maintaining,159,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/pull/11628:195,performance,optimiz,optimizations,195,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/pull/11628:481,performance,perform,performance,481,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/pull/11628:547,performance,disk,disk,547,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/pull/11628:552,performance,cach,cache,552,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/pull/11628:159,safety,Maintain,Maintaining,159,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/pull/11628:543,safety,hot,hot,543,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/pull/11628:575,safety,input,input,575,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/pull/11628:254,testability,simpl,simple,254,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/pull/11628:254,usability,simpl,simple,254,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/pull/11628:481,usability,perform,performance,481,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/pull/11628:575,usability,input,input,575,"[ntuple] Store and use type traits in RField; Introduces the ""trivially constructible"" and ""trivially destructible"" traits for the types wrapped by an RField. Maintaining these traits allows for optimizations when reading collections: for collections of simple types (e.g., `int`s, `float`s), we don't need to call the element constructors and destructors when the collection changes size from event to event. For the vector-heavy ATLAS OpenData benchmark, this results in a 5-10% performance improvement both with RDF and with RNTuple views (hot disk cache, zstd compressed input). Fixes #10520",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11628
https://github.com/root-project/root/issues/11629:283,availability,ERROR,ERROR,283,"global-buffer-overflow in tutorial-rcanvas-df104-py; After recent fixes on the interaction between Python and AddressSanitizer (https://github.com/root-project/root/pull/11621), there is now a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:. ```. 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258. 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0. 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:39",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:1137,availability,operat,operator,1137,"b.com/root-project/root/pull/11621), there is now a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:. ```. 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258. 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0. 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:3901:9. 1148: #11 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:1491,availability,operat,operator,1491,"_asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:3901:9. 1148: #11 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #12 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #13 0x7f7b0e2242c7 in TBufferIO::WriteObjectAny(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferIO.cxx:522:7. 1148: #14 0x7f7b0e2d5991 in TBufferJSON::WriteFastArray(voi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:3095,availability,operat,operator,3095,"nfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #12 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #13 0x7f7b0e2242c7 in TBufferIO::WriteObjectAny(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferIO.cxx:522:7. 1148: #14 0x7f7b0e2d5991 in TBufferJSON::WriteFastArray(void**, TClass const*, int, bool, TMemberStreamer*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3507:17. 1148: #15 0x7f7b0e9b7581 in int TStreamerInfo::WriteBufferAux<char**>(TBuffer&, char** const&, TStreamerInfo::TCompInfo* const*, int, int, int, int, int) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoWriteBuffer.cxx:441:30. 1148: #16 0x7f7b0e4bcea4 in TStreamerInfoActions::GenericWriteAction(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:202:45. 1148: #17 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #18 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #19 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #20 0x7f7ae69b14df in TF1::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TF1.cxx:3643:9. 1148: #21 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #22 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #23 0x7f7b0e224288 in TBufferIO::WriteObjectAny(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferIO.cxx:519:7. 1148: #24 0x7f7b0e2d5991 in TBufferJSON::WriteFastArray(void**, TCl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:4691,availability,operat,operator,4691,"nfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #22 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #23 0x7f7b0e224288 in TBufferIO::WriteObjectAny(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferIO.cxx:519:7. 1148: #24 0x7f7b0e2d5991 in TBufferJSON::WriteFastArray(void**, TClass const*, int, bool, TMemberStreamer*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3507:17. 1148: #25 0x7f7b0e9b7581 in int TStreamerInfo::WriteBufferAux<char**>(TBuffer&, char** const&, TStreamerInfo::TCompInfo* const*, int, int, int, int, int) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoWriteBuffer.cxx:441:30. 1148: #26 0x7f7b0e4bcea4 in TStreamerInfoActions::GenericWriteAction(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:202:45. 1148: #27 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #28 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #29 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #30 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #31 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #32 0x7f7b0e224288 in TBufferIO::WriteObjectAny(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferIO.cxx:519:7. 1148: #33 0x7f7b0e3ac0a5 in TGenCollectionStreamer::WriteObjects(int, TBuffer&) /home/jhahnfel/ROOT/src/io/io/src/TGenCollectionStreamer.cxx:982:16. 1148: #34 0x7f7b0e3ae662",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:6910,availability,operat,operator,6910,"l/ROOT/src/io/io/src/TCollectionProxyFactory.cxx:166:18. 1148: #36 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #37 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #38 0x7f7b0e2d48d1 in TBufferJSON::WriteFastArray(void*, TClass const*, int, TMemberStreamer*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3458:10. 1148: #39 0x7f7b0e9b95fd in int TStreamerInfo::WriteBufferAux<char**>(TBuffer&, char** const&, TStreamerInfo::TCompInfo* const*, int, int, int, int, int) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoWriteBuffer.cxx:611:24. 1148: #40 0x7f7b0e4bcea4 in TStreamerInfoActions::GenericWriteAction(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:202:45. 1148: #41 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #42 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #43 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #44 0x7f7b0fbf6e16 in TClass::WriteBuffer(TBuffer&, void*, char const*) /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:6770:6. 1148: #45 0x7f7b0fc67e80 in TStreamerBase::WriteBuffer(TBuffer&, char*) /home/jhahnfel/ROOT/src/core/meta/src/TStreamerElement.cxx. 1148: #46 0x7f7b0e5a7d47 in TStreamerInfoActions::WriteTextBaseClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:277:30. 1148: #47 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:7845,availability,operat,operator,7845,"1 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #42 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #43 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #44 0x7f7b0fbf6e16 in TClass::WriteBuffer(TBuffer&, void*, char const*) /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:6770:6. 1148: #45 0x7f7b0fc67e80 in TStreamerBase::WriteBuffer(TBuffer&, char*) /home/jhahnfel/ROOT/src/core/meta/src/TStreamerElement.cxx. 1148: #46 0x7f7b0e5a7d47 in TStreamerInfoActions::WriteTextBaseClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:277:30. 1148: #47 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #48 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #49 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #50 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #51 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #52 0x7f7b0e224288 in TBufferIO::WriteObjectAny(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferIO.cxx:519:7. 1148: #53 0x7f7b0e3ac0a5 in TGenCollectionStreamer::WriteObjects(int, TBuffer&) /home/jhahnfel/ROOT/src/io/io/src/TGenCollectionStreamer.cxx:982:16. 1148: #54 0x7f7b0e3ae662",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:10064,availability,operat,operator,10064,"l/ROOT/src/io/io/src/TCollectionProxyFactory.cxx:166:18. 1148: #56 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #57 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #58 0x7f7b0e2d48d1 in TBufferJSON::WriteFastArray(void*, TClass const*, int, TMemberStreamer*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3458:10. 1148: #59 0x7f7b0e9b95fd in int TStreamerInfo::WriteBufferAux<char**>(TBuffer&, char** const&, TStreamerInfo::TCompInfo* const*, int, int, int, int, int) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoWriteBuffer.cxx:611:24. 1148: #60 0x7f7b0e4bcea4 in TStreamerInfoActions::GenericWriteAction(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:202:45. 1148: #61 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #62 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #63 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #64 0x7f7b0fbf6e16 in TClass::WriteBuffer(TBuffer&, void*, char const*) /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:6770:6. 1148: #65 0x7f7b0fc67e80 in TStreamerBase::WriteBuffer(TBuffer&, char*) /home/jhahnfel/ROOT/src/core/meta/src/TStreamerElement.cxx. 1148: #66 0x7f7b0e5a7d47 in TStreamerInfoActions::WriteTextBaseClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:277:30. 1148: #67 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:10999,availability,operat,operator,10999,"1 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #62 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #63 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #64 0x7f7b0fbf6e16 in TClass::WriteBuffer(TBuffer&, void*, char const*) /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:6770:6. 1148: #65 0x7f7b0fc67e80 in TStreamerBase::WriteBuffer(TBuffer&, char*) /home/jhahnfel/ROOT/src/core/meta/src/TStreamerElement.cxx. 1148: #66 0x7f7b0e5a7d47 in TStreamerInfoActions::WriteTextBaseClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:277:30. 1148: #67 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #68 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #69 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #70 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #71 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspaint",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:581,deployability,Build,BuildId,581,"global-buffer-overflow in tutorial-rcanvas-df104-py; After recent fixes on the interaction between Python and AddressSanitizer (https://github.com/root-project/root/pull/11621), there is now a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:. ```. 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258. 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0. 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:39",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12540,deployability,modul,module,12540,"#71 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:14159,deployability,Build,BuildId,14159,"space)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpytho",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:14276,deployability,Build,BuildId,14276,"ppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpython3.6m.so.1.0+0xdff73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/lib",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:14421,deployability,Build,BuildId,14421,"OOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpython3.6m.so.1.0+0xdff73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/libexec/platform-python3.6+0xb95) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148: #95 0x7f7b13594d84 in __libc_start_main (/lib64/libc.so",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:14537,deployability,Build,BuildId,14537,"cute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpython3.6m.so.1.0+0xdff73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/libexec/platform-python3.6+0xb95) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148: #95 0x7f7b13594d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f65c85bfdb904b623d4fe2139b4d7c25cf8c0b58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/pl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:14673,deployability,Build,BuildId,14673,"f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpython3.6m.so.1.0+0xdff73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/libexec/platform-python3.6+0xb95) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148: #95 0x7f7b13594d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f65c85bfdb904b623d4fe2139b4d7c25cf8c0b58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/platform-python3.6+0xd1d) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148:. 1148: 0x7f7b0e15ea65 is located 59 bytes to the left",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:14790,deployability,Build,BuildId,14790,"hahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpython3.6m.so.1.0+0xdff73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/libexec/platform-python3.6+0xb95) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148: #95 0x7f7b13594d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f65c85bfdb904b623d4fe2139b4d7c25cf8c0b58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/platform-python3.6+0xd1d) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148:. 1148: 0x7f7b0e15ea65 is located 59 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1353:110' (0x7f7",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:14927,deployability,Build,BuildId,14927,"_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpython3.6m.so.1.0+0xdff73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/libexec/platform-python3.6+0xb95) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148: #95 0x7f7b13594d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f65c85bfdb904b623d4fe2139b4d7c25cf8c0b58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/platform-python3.6+0xd1d) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148:. 1148: 0x7f7b0e15ea65 is located 59 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1353:110' (0x7f7b0e15eaa0) of size 12. 1148: '<string literal>' is ascii string 'JSON_object'. 1148: 0x7f7b0e15ea65 is located 27 bytes to the left of gl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:15070,deployability,Build,BuildId,15070,0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpython3.6m.so.1.0+0xdff73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/libexec/platform-python3.6+0xb95) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148: #95 0x7f7b13594d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f65c85bfdb904b623d4fe2139b4d7c25cf8c0b58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/platform-python3.6+0xd1d) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148:. 1148: 0x7f7b0e15ea65 is located 59 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1353:110' (0x7f7b0e15eaa0) of size 12. 1148: '<string literal>' is ascii string 'JSON_object'. 1148: 0x7f7b0e15ea65 is located 27 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:33' (0x7f7b0e15ea80) of size 6. 1148: '<str,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:15186,deployability,Build,BuildId,15186,d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpython3.6m.so.1.0+0xdff73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/libexec/platform-python3.6+0xb95) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148: #95 0x7f7b13594d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f65c85bfdb904b623d4fe2139b4d7c25cf8c0b58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/platform-python3.6+0xd1d) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148:. 1148: 0x7f7b0e15ea65 is located 59 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1353:110' (0x7f7b0e15eaa0) of size 12. 1148: '<string literal>' is ascii string 'JSON_object'. 1148: 0x7f7b0e15ea65 is located 27 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:33' (0x7f7b0e15ea80) of size 6. 1148: '<string literal>' is ascii string 'false'. 1148: 0x7f7b0e15ea65 is located 0 bytes to the right of global variable '<str,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:15312,deployability,Build,BuildId,15312,548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpython3.6m.so.1.0+0xdff73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/libexec/platform-python3.6+0xb95) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148: #95 0x7f7b13594d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f65c85bfdb904b623d4fe2139b4d7c25cf8c0b58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/platform-python3.6+0xd1d) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148:. 1148: 0x7f7b0e15ea65 is located 59 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1353:110' (0x7f7b0e15eaa0) of size 12. 1148: '<string literal>' is ascii string 'JSON_object'. 1148: 0x7f7b0e15ea65 is located 27 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:33' (0x7f7b0e15ea80) of size 6. 1148: '<string literal>' is ascii string 'false'. 1148: 0x7f7b0e15ea65 is located 0 bytes to the right of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<strin,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:15438,deployability,Build,BuildId,15438,90c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpython3.6m.so.1.0+0xdff73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/libexec/platform-python3.6+0xb95) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148: #95 0x7f7b13594d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f65c85bfdb904b623d4fe2139b4d7c25cf8c0b58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/platform-python3.6+0xd1d) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148:. 1148: 0x7f7b0e15ea65 is located 59 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1353:110' (0x7f7b0e15eaa0) of size 12. 1148: '<string literal>' is ascii string 'JSON_object'. 1148: 0x7f7b0e15ea65 is located 27 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:33' (0x7f7b0e15ea80) of size 6. 1148: '<string literal>' is ascii string 'false'. 1148: 0x7f7b0e15ea65 is located 0 bytes to the right of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:15566,deployability,Build,BuildId,15566,8bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpython3.6m.so.1.0+0xdff73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/libexec/platform-python3.6+0xb95) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148: #95 0x7f7b13594d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f65c85bfdb904b623d4fe2139b4d7c25cf8c0b58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/platform-python3.6+0xd1d) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148:. 1148: 0x7f7b0e15ea65 is located 59 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1353:110' (0x7f7b0e15eaa0) of size 12. 1148: '<string literal>' is ascii string 'JSON_object'. 1148: 0x7f7b0e15ea65 is located 27 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:33' (0x7f7b0e15ea80) of size 6. 1148: '<string literal>' is ascii string 'false'. 1148: 0x7f7b0e15ea65 is located 0 bytes to the right of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes a,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:16481,deployability,Build,BuildId,16481,58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/platform-python3.6+0xd1d) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148:. 1148: 0x7f7b0e15ea65 is located 59 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1353:110' (0x7f7b0e15eaa0) of size 12. 1148: '<string literal>' is ascii string 'JSON_object'. 1148: 0x7f7b0e15ea65 is located 27 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:33' (0x7f7b0e15ea80) of size 6. 1148: '<string literal>' is ascii string 'false'. 1148: 0x7f7b0e15ea65 is located 0 bytes to the right of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: P,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:17593,deployability,Stack,Stack,17593,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:17623,deployability,Stack,Stack,17623,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:17652,deployability,Stack,Stack,17652,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:17683,deployability,Stack,Stack,17683,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:17713,deployability,Stack,Stack,17713,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:17829,deployability,Contain,Container,17829,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:18144,deployability,build,build,18144,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:729,energy efficiency,core,core,729,"global-buffer-overflow in tutorial-rcanvas-df104-py; After recent fixes on the interaction between Python and AddressSanitizer (https://github.com/root-project/root/pull/11621), there is now a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:. ```. 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258. 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0. 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:39",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:844,energy efficiency,core,core,844,"global-buffer-overflow in tutorial-rcanvas-df104-py; After recent fixes on the interaction between Python and AddressSanitizer (https://github.com/root-project/root/pull/11621), there is now a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:. ```. 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258. 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0. 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:39",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:1188,energy efficiency,core,core,1188," a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:. ```. 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258. 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0. 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:3901:9. 1148: #11 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #12 0x7f7b0e2278c8 in TBufferJSON::JsonWr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:2113,energy efficiency,core,core,2113," #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:3901:9. 1148: #11 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #12 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #13 0x7f7b0e2242c7 in TBufferIO::WriteObjectAny(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferIO.cxx:522:7. 1148: #14 0x7f7b0e2d5991 in TBufferJSON::WriteFastArray(void**, TClass const*, int, bool, TMemberStreamer*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3507:17. 1148: #15 0x7f7b0e9b7581 in int TStreamerInfo::WriteBufferAux<char**>(TBuffer&, char** const&, TStreamerInfo::TCompInfo* const*, int, int, int, int, int) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoWriteBuffer.cxx:441:30. 1148: #16 0x7f7b0e4bcea4 in TStreamerInfoActions::GenericWriteAction(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:202:45. 1148: #17 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:3709,energy efficiency,core,core,3709,"::TCompInfo* const*, int, int, int, int, int) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoWriteBuffer.cxx:441:30. 1148: #16 0x7f7b0e4bcea4 in TStreamerInfoActions::GenericWriteAction(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:202:45. 1148: #17 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #18 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #19 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #20 0x7f7ae69b14df in TF1::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TF1.cxx:3643:9. 1148: #21 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #22 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #23 0x7f7b0e224288 in TBufferIO::WriteObjectAny(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferIO.cxx:519:7. 1148: #24 0x7f7b0e2d5991 in TBufferJSON::WriteFastArray(void**, TClass const*, int, bool, TMemberStreamer*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3507:17. 1148: #25 0x7f7b0e9b7581 in int TStreamerInfo::WriteBufferAux<char**>(TBuffer&, char** const&, TStreamerInfo::TCompInfo* const*, int, int, int, int, int) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoWriteBuffer.cxx:441:30. 1148: #26 0x7f7b0e4bcea4 in TStreamerInfoActions::GenericWriteAction(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:202:45. 1148: #27 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:5199,energy efficiency,core,core,5199,"48: #25 0x7f7b0e9b7581 in int TStreamerInfo::WriteBufferAux<char**>(TBuffer&, char** const&, TStreamerInfo::TCompInfo* const*, int, int, int, int, int) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoWriteBuffer.cxx:441:30. 1148: #26 0x7f7b0e4bcea4 in TStreamerInfoActions::GenericWriteAction(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:202:45. 1148: #27 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #28 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #29 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #30 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #31 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #32 0x7f7b0e224288 in TBufferIO::WriteObjectAny(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferIO.cxx:519:7. 1148: #33 0x7f7b0e3ac0a5 in TGenCollectionStreamer::WriteObjects(int, TBuffer&) /home/jhahnfel/ROOT/src/io/io/src/TGenCollectionStreamer.cxx:982:16. 1148: #34 0x7f7b0e3ae662 in TGenCollectionStreamer::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/io/io/src/TGenCollectionStreamer.cxx:1452:22. 1148: #35 0x7f7b0e32a94d in TCollectionStreamer::Streamer(TBuffer&, void*, int, TClass*) /home/jhahnfel/ROOT/src/io/io/src/TCollectionProxyFactory.cxx:166:18. 1148: #36 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #37 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:6078,energy efficiency,core,core,6078,".cxx:211:4. 1148: #30 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #31 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #32 0x7f7b0e224288 in TBufferIO::WriteObjectAny(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferIO.cxx:519:7. 1148: #33 0x7f7b0e3ac0a5 in TGenCollectionStreamer::WriteObjects(int, TBuffer&) /home/jhahnfel/ROOT/src/io/io/src/TGenCollectionStreamer.cxx:982:16. 1148: #34 0x7f7b0e3ae662 in TGenCollectionStreamer::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/io/io/src/TGenCollectionStreamer.cxx:1452:22. 1148: #35 0x7f7b0e32a94d in TCollectionStreamer::Streamer(TBuffer&, void*, int, TClass*) /home/jhahnfel/ROOT/src/io/io/src/TCollectionProxyFactory.cxx:166:18. 1148: #36 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #37 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #38 0x7f7b0e2d48d1 in TBufferJSON::WriteFastArray(void*, TClass const*, int, TMemberStreamer*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3458:10. 1148: #39 0x7f7b0e9b95fd in int TStreamerInfo::WriteBufferAux<char**>(TBuffer&, char** const&, TStreamerInfo::TCompInfo* const*, int, int, int, int, int) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoWriteBuffer.cxx:611:24. 1148: #40 0x7f7b0e4bcea4 in TStreamerInfoActions::GenericWriteAction(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:202:45. 1148: #41 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #42 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoAct",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:7413,energy efficiency,core,core,7413,"0. 1148: #39 0x7f7b0e9b95fd in int TStreamerInfo::WriteBufferAux<char**>(TBuffer&, char** const&, TStreamerInfo::TCompInfo* const*, int, int, int, int, int) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoWriteBuffer.cxx:611:24. 1148: #40 0x7f7b0e4bcea4 in TStreamerInfoActions::GenericWriteAction(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:202:45. 1148: #41 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #42 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #43 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #44 0x7f7b0fbf6e16 in TClass::WriteBuffer(TBuffer&, void*, char const*) /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:6770:6. 1148: #45 0x7f7b0fc67e80 in TStreamerBase::WriteBuffer(TBuffer&, char*) /home/jhahnfel/ROOT/src/core/meta/src/TStreamerElement.cxx. 1148: #46 0x7f7b0e5a7d47 in TStreamerInfoActions::WriteTextBaseClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:277:30. 1148: #47 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #48 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #49 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #50 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #51 0x7f7b0e2278c8 in TBuf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:7542,energy efficiency,core,core,7542,"*, int, int, int, int, int) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoWriteBuffer.cxx:611:24. 1148: #40 0x7f7b0e4bcea4 in TStreamerInfoActions::GenericWriteAction(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:202:45. 1148: #41 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #42 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #43 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #44 0x7f7b0fbf6e16 in TClass::WriteBuffer(TBuffer&, void*, char const*) /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:6770:6. 1148: #45 0x7f7b0fc67e80 in TStreamerBase::WriteBuffer(TBuffer&, char*) /home/jhahnfel/ROOT/src/core/meta/src/TStreamerElement.cxx. 1148: #46 0x7f7b0e5a7d47 in TStreamerInfoActions::WriteTextBaseClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:277:30. 1148: #47 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #48 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #49 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #50 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #51 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #52 0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:8353,energy efficiency,core,core,8353,"fer(TBuffer&, void*, char const*) /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:6770:6. 1148: #45 0x7f7b0fc67e80 in TStreamerBase::WriteBuffer(TBuffer&, char*) /home/jhahnfel/ROOT/src/core/meta/src/TStreamerElement.cxx. 1148: #46 0x7f7b0e5a7d47 in TStreamerInfoActions::WriteTextBaseClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:277:30. 1148: #47 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #48 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #49 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #50 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #51 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #52 0x7f7b0e224288 in TBufferIO::WriteObjectAny(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferIO.cxx:519:7. 1148: #53 0x7f7b0e3ac0a5 in TGenCollectionStreamer::WriteObjects(int, TBuffer&) /home/jhahnfel/ROOT/src/io/io/src/TGenCollectionStreamer.cxx:982:16. 1148: #54 0x7f7b0e3ae662 in TGenCollectionStreamer::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/io/io/src/TGenCollectionStreamer.cxx:1452:22. 1148: #55 0x7f7b0e32a94d in TCollectionStreamer::Streamer(TBuffer&, void*, int, TClass*) /home/jhahnfel/ROOT/src/io/io/src/TCollectionProxyFactory.cxx:166:18. 1148: #56 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #57 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /h",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:9232,energy efficiency,core,core,9232,".cxx:211:4. 1148: #50 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #51 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #52 0x7f7b0e224288 in TBufferIO::WriteObjectAny(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferIO.cxx:519:7. 1148: #53 0x7f7b0e3ac0a5 in TGenCollectionStreamer::WriteObjects(int, TBuffer&) /home/jhahnfel/ROOT/src/io/io/src/TGenCollectionStreamer.cxx:982:16. 1148: #54 0x7f7b0e3ae662 in TGenCollectionStreamer::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/io/io/src/TGenCollectionStreamer.cxx:1452:22. 1148: #55 0x7f7b0e32a94d in TCollectionStreamer::Streamer(TBuffer&, void*, int, TClass*) /home/jhahnfel/ROOT/src/io/io/src/TCollectionProxyFactory.cxx:166:18. 1148: #56 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #57 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #58 0x7f7b0e2d48d1 in TBufferJSON::WriteFastArray(void*, TClass const*, int, TMemberStreamer*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3458:10. 1148: #59 0x7f7b0e9b95fd in int TStreamerInfo::WriteBufferAux<char**>(TBuffer&, char** const&, TStreamerInfo::TCompInfo* const*, int, int, int, int, int) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoWriteBuffer.cxx:611:24. 1148: #60 0x7f7b0e4bcea4 in TStreamerInfoActions::GenericWriteAction(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:202:45. 1148: #61 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #62 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoAct",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:10567,energy efficiency,core,core,10567,"0. 1148: #59 0x7f7b0e9b95fd in int TStreamerInfo::WriteBufferAux<char**>(TBuffer&, char** const&, TStreamerInfo::TCompInfo* const*, int, int, int, int, int) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoWriteBuffer.cxx:611:24. 1148: #60 0x7f7b0e4bcea4 in TStreamerInfoActions::GenericWriteAction(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:202:45. 1148: #61 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #62 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #63 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #64 0x7f7b0fbf6e16 in TClass::WriteBuffer(TBuffer&, void*, char const*) /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:6770:6. 1148: #65 0x7f7b0fc67e80 in TStreamerBase::WriteBuffer(TBuffer&, char*) /home/jhahnfel/ROOT/src/core/meta/src/TStreamerElement.cxx. 1148: #66 0x7f7b0e5a7d47 in TStreamerInfoActions::WriteTextBaseClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:277:30. 1148: #67 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #68 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #69 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #70 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #71 0x7f7b0e2278c8 in TBuf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:10696,energy efficiency,core,core,10696,"*, int, int, int, int, int) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoWriteBuffer.cxx:611:24. 1148: #60 0x7f7b0e4bcea4 in TStreamerInfoActions::GenericWriteAction(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:202:45. 1148: #61 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #62 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #63 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #64 0x7f7b0fbf6e16 in TClass::WriteBuffer(TBuffer&, void*, char const*) /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:6770:6. 1148: #65 0x7f7b0fc67e80 in TStreamerBase::WriteBuffer(TBuffer&, char*) /home/jhahnfel/ROOT/src/core/meta/src/TStreamerElement.cxx. 1148: #66 0x7f7b0e5a7d47 in TStreamerInfoActions::WriteTextBaseClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:277:30. 1148: #67 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #68 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #69 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #70 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #71 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:11507,energy efficiency,core,core,11507,"fer(TBuffer&, void*, char const*) /home/jhahnfel/ROOT/src/core/meta/src/TClass.cxx:6770:6. 1148: #65 0x7f7b0fc67e80 in TStreamerBase::WriteBuffer(TBuffer&, char*) /home/jhahnfel/ROOT/src/core/meta/src/TStreamerElement.cxx. 1148: #66 0x7f7b0e5a7d47 in TStreamerInfoActions::WriteTextBaseClass(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:277:30. 1148: #67 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #68 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #69 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #70 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #71 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12182,energy efficiency,alloc,allocator,12182,"nce const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #69 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #70 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #71 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12417,energy efficiency,alloc,allocator,12417,"c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #71 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfe",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:17945,energy efficiency,alloc,alloca,17945,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:17977,energy efficiency,alloc,alloca,17977,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:7,integrability,buffer,buffer-overflow,7,"global-buffer-overflow in tutorial-rcanvas-df104-py; After recent fixes on the interaction between Python and AddressSanitizer (https://github.com/root-project/root/pull/11621), there is now a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:. ```. 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258. 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0. 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:39",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:201,integrability,buffer,buffer-overflow,201,"global-buffer-overflow in tutorial-rcanvas-df104-py; After recent fixes on the interaction between Python and AddressSanitizer (https://github.com/root-project/root/pull/11621), there is now a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:. ```. 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258. 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0. 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:39",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:315,integrability,buffer,buffer-overflow,315,"global-buffer-overflow in tutorial-rcanvas-df104-py; After recent fixes on the interaction between Python and AddressSanitizer (https://github.com/root-project/root/pull/11621), there is now a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:. ```. 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258. 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0. 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:39",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12578,integrability,Wrap,WrapperCall,12578,"iteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:16392,integrability,buffer,buffer-overflow,16392,tart_main (/lib64/libc.so.6+0x3ad84) (BuildId: f65c85bfdb904b623d4fe2139b4d7c25cf8c0b58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/platform-python3.6+0xd1d) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148:. 1148: 0x7f7b0e15ea65 is located 59 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1353:110' (0x7f7b0e15eaa0) of size 12. 1148: '<string literal>' is ascii string 'JSON_object'. 1148: 0x7f7b0e15ea65 is located 27 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:33' (0x7f7b0e15ea80) of size 6. 1148: '<string literal>' is ascii string 'false'. 1148: 0x7f7b0e15ea65 is located 0 bytes to the right of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte leg,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12578,interoperability,Wrapper,WrapperCall,12578,"iteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12656,interoperability,bind,bindings,12656,"c/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12856,interoperability,bind,bindings,12856,"xperimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:13033,interoperability,bind,bindings,13033,"1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:13254,interoperability,bind,bindings,13254,"r/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:13433,interoperability,bind,bindings,13433,"nst&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:13607,interoperability,bind,bindings,13607,"void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:13811,interoperability,bind,bindings,13811,"ned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:14005,interoperability,bind,bindings,14005,"/home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in Py",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:15285,interoperability,platform,platform-,15285,4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpython3.6m.so.1.0+0xdff73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/libexec/platform-python3.6+0xb95) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148: #95 0x7f7b13594d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f65c85bfdb904b623d4fe2139b4d7c25cf8c0b58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/platform-python3.6+0xd1d) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148:. 1148: 0x7f7b0e15ea65 is located 59 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1353:110' (0x7f7b0e15eaa0) of size 12. 1148: '<string literal>' is ascii string 'JSON_object'. 1148: 0x7f7b0e15ea65 is located 27 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:33' (0x7f7b0e15ea80) of size 6. 1148: '<string literal>' is ascii string 'false'. 1148: 0x7f7b0e15ea65 is located 0 bytes to the right of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:15539,interoperability,platform,platform-,15539,: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpython3.6m.so.1.0+0xdff73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/libexec/platform-python3.6+0xb95) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148: #95 0x7f7b13594d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f65c85bfdb904b623d4fe2139b4d7c25cf8c0b58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/platform-python3.6+0xd1d) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148:. 1148: 0x7f7b0e15ea65 is located 59 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1353:110' (0x7f7b0e15eaa0) of size 12. 1148: '<string literal>' is ascii string 'JSON_object'. 1148: 0x7f7b0e15ea65 is located 27 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:33' (0x7f7b0e15ea80) of size 6. 1148: '<string literal>' is ascii string 'false'. 1148: 0x7f7b0e15ea65 is located 0 bytes to the right of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_me,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12540,modifiability,modul,module,12540,"#71 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12656,modifiability,bind,bindings,12656,"c/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12856,modifiability,bind,bindings,12856,"xperimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:13033,modifiability,bind,bindings,13033,"1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:13254,modifiability,bind,bindings,13254,"r/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:13433,modifiability,bind,bindings,13433,"nst&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:13607,modifiability,bind,bindings,13607,"void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:13811,modifiability,bind,bindings,13811,"ned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:14005,modifiability,bind,bindings,14005,"/home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execute(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:725:18. 1148: #83 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Call(CPyCppyy::CPPInstance*&, _object*, _object*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:783:40. 1148: #84 0x7f7b0ffb1e23 in CPyCppyy::(anonymous namespace)::mp_call(CPyCppyy::CPPOverload*, _object*, _object*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPOverload.cxx:566:40. 1148: #85 0x7f7b14466aea in _PyObject_FastCallKeywords (/lib64/libpython3.6m.so.1.0+0x19caea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #86 0x7f7b144674b5 (/lib64/libpython3.6m.so.1.0+0x19d4b5) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #87 0x7f7b14467fb7 in _PyEval_EvalFrameDefault (/lib64/libpython3.6m.so.1.0+0x19dfb7) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #88 0x7f7b143c3983 (/lib64/libpython3.6m.so.1.0+0xf9983) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #89 0x7f7b14484bd2 in PyEval_EvalCode (/lib64/libpython3.6m.so.1.0+0x1babd2) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in Py",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:15688,modifiability,variab,variable,15688,b590c1226116d08bd8586548d89519). 1148: #90 0x7f7b144d3941 (/lib64/libpython3.6m.so.1.0+0x209941) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #91 0x7f7b143a44ea in PyRun_FileExFlags (/lib64/libpython3.6m.so.1.0+0xda4ea) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpython3.6m.so.1.0+0xdff73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/libexec/platform-python3.6+0xb95) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148: #95 0x7f7b13594d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f65c85bfdb904b623d4fe2139b4d7c25cf8c0b58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/platform-python3.6+0xd1d) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148:. 1148: 0x7f7b0e15ea65 is located 59 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1353:110' (0x7f7b0e15eaa0) of size 12. 1148: '<string literal>' is ascii string 'JSON_object'. 1148: 0x7f7b0e15ea65 is located 27 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:33' (0x7f7b0e15ea80) of size 6. 1148: '<string literal>' is ascii string 'false'. 1148: 0x7f7b0e15ea65 is located 0 bytes to the right of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 ,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:15936,modifiability,variab,variable,15936,b4e335b590c1226116d08bd8586548d89519). 1148: #92 0x7f7b143a9624 in PyRun_SimpleFileExFlags (/lib64/libpython3.6m.so.1.0+0xdf624) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #93 0x7f7b143a9f73 (/lib64/libpython3.6m.so.1.0+0xdff73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/libexec/platform-python3.6+0xb95) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148: #95 0x7f7b13594d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f65c85bfdb904b623d4fe2139b4d7c25cf8c0b58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/platform-python3.6+0xd1d) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148:. 1148: 0x7f7b0e15ea65 is located 59 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1353:110' (0x7f7b0e15eaa0) of size 12. 1148: '<string literal>' is ascii string 'JSON_object'. 1148: 0x7f7b0e15ea65 is located 27 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:33' (0x7f7b0e15ea80) of size 6. 1148: '<string literal>' is ascii string 'false'. 1148: 0x7f7b0e15ea65 is located 0 bytes to the right of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:16176,modifiability,variab,variable,16176,f73) (BuildId: 465cb4e335b590c1226116d08bd8586548d89519). 1148: #94 0x562b1934eb95 in main (/usr/libexec/platform-python3.6+0xb95) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148: #95 0x7f7b13594d84 in __libc_start_main (/lib64/libc.so.6+0x3ad84) (BuildId: f65c85bfdb904b623d4fe2139b4d7c25cf8c0b58). 1148: #96 0x562b1934ed1d in _start (/usr/libexec/platform-python3.6+0xd1d) (BuildId: f236d8f7fc650f4e7be110015de1de715f85b20c). 1148:. 1148: 0x7f7b0e15ea65 is located 59 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1353:110' (0x7f7b0e15eaa0) of size 12. 1148: '<string literal>' is ascii string 'JSON_object'. 1148: 0x7f7b0e15ea65 is located 27 bytes to the left of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:33' (0x7f7b0e15ea80) of size 6. 1148: '<string literal>' is ascii string 'false'. 1148: 0x7f7b0e15ea65 is located 0 bytes to the right of global variable '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:283,performance,ERROR,ERROR,283,"global-buffer-overflow in tutorial-rcanvas-df104-py; After recent fixes on the interaction between Python and AddressSanitizer (https://github.com/root-project/root/pull/11621), there is now a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:. ```. 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258. 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0. 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:39",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:35,reliability,rca,rcanvas-,35,"global-buffer-overflow in tutorial-rcanvas-df104-py; After recent fixes on the interaction between Python and AddressSanitizer (https://github.com/root-project/root/pull/11621), there is now a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:. ```. 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258. 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0. 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:39",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:241,reliability,rca,rcanvas-,241,"global-buffer-overflow in tutorial-rcanvas-df104-py; After recent fixes on the interaction between Python and AddressSanitizer (https://github.com/root-project/root/pull/11621), there is now a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:. ```. 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258. 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0. 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:39",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:11873,reliability,RCa,RCanvasPainter,11873,"OT/src/io/io/src/TStreamerInfoActions.cxx:277:30. 1148: #67 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #68 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #69 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #70 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #71 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12010,reliability,RCa,RCanvasPainter,12010,"&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #68 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #69 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #70 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #71 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12085,reliability,RCa,RCanvasPainter,12085,"3:17. 1148: #68 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #69 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #70 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #71 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingw",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12264,reliability,RCa,RCanvasPainter,12264,"9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #70 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #71 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/c",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12339,reliability,RCa,RCanvas,12339,"/home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #70 0x7f7b0e2278c8 in TClass::Streamer(void*, TBuffer&, TClass const*) const /home/jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #71 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyC",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12485,reliability,RCa,RCanvas,12485,"jhahnfel/ROOT/src/core/meta/inc/TClass.h:610:7. 1148: #71 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:283,safety,ERROR,ERROR,283,"global-buffer-overflow in tutorial-rcanvas-df104-py; After recent fixes on the interaction between Python and AddressSanitizer (https://github.com/root-project/root/pull/11621), there is now a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:. ```. 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258. 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0. 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:39",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:12540,safety,modul,module,12540,"#71 0x7f7b0e2278c8 in TBufferJSON::JsonWriteObject(void const*, TClass const*, bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1416:35. 1148: #72 0x7f7b0e2265db in TBufferJSON::StoreObject(void const*, TClass const*) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:708:7. 1148: #73 0x7f7ad3c6329b in ROOT::Experimental::RCanvasPainter::CreateSnapshot[abi:cxx11](ROOT::Experimental::RDrawable::RDisplayContext&) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:739:20. 1148: #74 0x7f7ad3c669ad in ROOT::Experimental::RCanvasPainter::ProduceBatchOutput(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int) /home/jhahnfel/ROOT/src/gui/canvaspainter/src/RCanvasPainter.cxx:461:20. 1148: #75 0x7f7afc354443 in ROOT::Experimental::RCanvas::SaveAs(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) /home/jhahnfel/ROOT/src/graf2d/gpadv7/src/RCanvas.cxx:176:21. 1148: #76 0x7f7afeafe017 (<unknown module>). 1148: #77 0x7f7b121bc8c9 in WrapperCall(long, unsigned long, void*, void*, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:778:13. 1148: #78 0x7f7b121bd174 in unsigned char CallT<unsigned char>(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:816:9. 1148: #79 0x7f7b121bd174 in Cppyy::CallB(long, void*, unsigned long, void*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:833:1. 1148: #80 0x7f7b0ffe1a61 in CPyCppyy::(anonymous namespace)::BoolExecutor::Execute(long, void*, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/Executors.cxx:148:19. 1148: #81 0x7f7b0ffaf717 in CPyCppyy::CPPMethod::ExecuteFast(void*, long, CPyCppyy::CallContext*) /home/jhahnfel/ROOT/src/bindings/pyroot/cppyy/CPyCppyy/src/CPPMethod.cxx:74:29. 1148: #82 0x7f7b0ffaeb24 in CPyCppyy::CPPMethod::Execu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:18070,safety,test,test,18070,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:18159,safety,test,test,18159,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:17865,security,cookie,cookie,17865,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:18070,testability,test,test,18070,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:18131,testability,instrument,instrumented,18131,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:18159,testability,test,test,18159,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:79,usability,interact,interaction,79,"global-buffer-overflow in tutorial-rcanvas-df104-py; After recent fixes on the interaction between Python and AddressSanitizer (https://github.com/root-project/root/pull/11621), there is now a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:. ```. 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258. 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0. 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:39",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:283,usability,ERROR,ERROR,283,"global-buffer-overflow in tutorial-rcanvas-df104-py; After recent fixes on the interaction between Python and AddressSanitizer (https://github.com/root-project/root/pull/11621), there is now a `global-buffer-overflow` reported for `tutorial-rcanvas-df104-py`:. ```. 1148: ==4075620==ERROR: AddressSanitizer: global-buffer-overflow on address 0x7f7b0e15ea65 at pc 0x7f7b14df7aaa bp 0x7fff988d9ab0 sp 0x7fff988d9258. 1148: READ of size 156 at 0x7f7b0e15ea65 thread T0. 1148: #0 0x7f7b14df7aa9 in __asan_memcpy (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db). 1148: #1 0x7f7b0fa19ba1 in TString::Replace(int, int, char const*, int) /home/jhahnfel/ROOT/src/core/base/src/TString.cxx:1069:16. 1148: #2 0x7f7b0e2d9e7d in TString::Append(char const*) /home/jhahnfel/ROOT/src/core/base/inc/TString.h:565:10. 1148: #3 0x7f7b0e2d9e7d in TBufferJSON::JsonWriteBasic(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3963:11. 1148: #4 0x7f7b0e2d9e7d in TBufferJSON::WriteBool(bool) /home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:3724:4. 1148: #5 0x7f7b0e5a62bc in operator<<(TBuffer&, bool) /home/jhahnfel/ROOT/src/core/base/inc/TBuffer.h:361:60. 1148: #6 0x7f7b0e5a62bc in int TStreamerInfoActions::WriteBasicType<bool>(TBuffer&, void*, TStreamerInfoActions::TConfiguration const*) /home/jhahnfel/ROOT/src/io/io/src/TStreamerInfoActions.cxx:253:11. 1148: #7 0x7f7b0e21d31d in TStreamerInfoActions::TConfiguredAction::operator()(TBuffer&, void*) const /home/jhahnfel/ROOT/src/io/io/inc/TStreamerInfoActions.h:123:17. 1148: #8 0x7f7b0e21d31d in TBufferText::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:91:10. 1148: #9 0x7f7b0e21e1c1 in TBufferText::WriteClassBuffer(TClass const*, void*) /home/jhahnfel/ROOT/src/io/io/src/TBufferText.cxx:211:4. 1148: #10 0x7f7ae6a268ba in TFormula::Streamer(TBuffer&) /home/jhahnfel/ROOT/src/hist/hist/src/TFormula.cxx:39",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/issues/11629:17813,usability,user,user,17813,le '<string literal>' defined in '/home/jhahnfel/ROOT/src/io/io/src/TBufferJSON.cxx:1330:24' (0x7f7b0e15ea60) of size 5. 1148: '<string literal>' is ascii string 'true'. 1148: SUMMARY: AddressSanitizer: global-buffer-overflow (/usr/lib64/clang/14.0.6/lib/linux/libclang_rt.asan-x86_64.so+0x101aa9) (BuildId: e896d268897cea67bde300bc334ab7b2bfb702db) in __asan_memcpy. 1148: Shadow bytes around the buggy address:. 1148: 0x0fefe1c23cf0: 00 00 03 f9 f9 f9 f9 f9 00 06 f9 f9 00 00 03 f9. 1148: 0x0fefe1c23d00: f9 f9 f9 f9 00 f9 f9 f9 07 f9 f9 f9 00 f9 f9 f9. 1148: 0x0fefe1c23d10: 00 00 01 f9 f9 f9 f9 f9 00 00 00 00 06 f9 f9 f9. 1148: 0x0fefe1c23d20: f9 f9 f9 f9 00 00 00 00 00 00 07 f9 f9 f9 f9 f9. 1148: 0x0fefe1c23d30: 00 00 00 00 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9. 1148: =>0x0fefe1c23d40: 00 00 f9 f9 00 00 00 00 f9 f9 f9 f9[05]f9 f9 f9. 1148: 0x0fefe1c23d50: 06 f9 f9 f9 00 04 f9 f9 00 04 f9 f9 00 04 f9 f9. 1148: 0x0fefe1c23d60: 00 00 00 00 07 f9 f9 f9 f9 f9 f9 f9 00 00 00 00. 1148: 0x0fefe1c23d70: 03 f9 f9 f9 f9 f9 f9 f9 00 00 00 03 f9 f9 f9 f9. 1148: 0x0fefe1c23d80: 00 00 00 00 00 04 f9 f9 f9 f9 f9 f9 03 f9 f9 f9. 1148: 0x0fefe1c23d90: 02 f9 f9 f9 00 00 00 03 f9 f9 f9 f9 00 00 00 00. 1148: Shadow byte legend (one shadow byte represents 8 application bytes):. 1148: Addressable: 00. 1148: Partially addressable: 01 02 03 04 05 06 07. 1148: Heap left redzone: fa. 1148: Freed heap region: fd. 1148: Stack left redzone: f1. 1148: Stack mid redzone: f2. 1148: Stack right redzone: f3. 1148: Stack after return: f5. 1148: Stack use after scope: f8. 1148: Global redzone: f9. 1148: Global init order: f6. 1148: Poisoned by user: f7. 1148: Container overflow: fc. 1148: Array cookie: ac. 1148: Intra object redzone: bb. 1148: ASan internal: fe. 1148: Left alloca redzone: ca. 1148: Right alloca redzone: cb. 1148: ==4075620==ABORTING. ```. Note: There may be other problems in the test after this issue is fixed. Please check locally with an instrumented build that the test passes afterwards!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11629
https://github.com/root-project/root/pull/11631:0,energy efficiency,Reduc,Reduce,0,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:208,energy efficiency,Load,LoadPlugin,208,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1583,energy efficiency,CPU,CPU,1583,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1622,energy efficiency,clock,clock,1622,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1691,energy efficiency,CPU,CPU,1691,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1730,energy efficiency,clock,clock,1730,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:532,integrability,event,event,532,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1240,integrability,event,event,1240,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:992,interoperability,Format,Format,992,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1829,modifiability,paramet,parameter,1829,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:16,performance,lock,locks,16,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:148,performance,lock,lock,148,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:153,performance,content,contention,153,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:208,performance,Load,LoadPlugin,208,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:335,performance,lock,locks,335,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:378,performance,time,time,378,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:516,performance,lock,lock,516,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1583,performance,CPU,CPU,1583,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1629,performance,time,time,1629,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1691,performance,CPU,CPU,1691,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1737,performance,time,time,1737,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1813,performance,lock,lock,1813,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1818,performance,content,contention,1818,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:466,safety,compl,completely,466,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:663,safety,test,test,663,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:788,safety,test,testwrite,788,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1531,safety,Test,Testing,1531,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:16,security,lock,locks,16,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:136,security,sign,significant,136,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:148,security,lock,lock,148,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:335,security,lock,locks,335,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:466,security,compl,completely,466,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:516,security,lock,lock,516,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1813,security,lock,lock,1813,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:656,testability,simpl,simple,656,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:663,testability,test,test,663,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:788,testability,test,testwrite,788,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1531,testability,Test,Testing,1531,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:314,usability,minim,minimizes,314,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:656,usability,simpl,simple,656,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11631:1211,usability,Close,Close,1211,"Reduce usage of locks by TPluginHandler; When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:. ```cpp. #include ""TFile.h"". #include ""TTree.h"". #include ""TString.h"". #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;. const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {. TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");. TTree *tree = new TTree(""tree"", """");. tree->Branch(""outval"", &outval);. for (unsigned int ientry = 0; ientry < nentries; ++ientry) {. tree->Fill();. }. tree->Write();. fout->Close();. }. }. ```. run the event loop:. ```python. import ROOT. ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""). chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain). res = d.Sum(""outval""). resval = res.GetValue(). print(resval). ```. Testing with 256 threads:. before:. ```. Percent of CPU this job got: 1077%. Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82. ```. after:. ```. Percent of CPU this job got: 5626%. Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89. ```. (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11631
https://github.com/root-project/root/pull/11632:9,deployability,build,build,9,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:199,deployability,automat,automatically,199,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:293,deployability,build,building,293,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:408,deployability,instal,install,408,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:525,deployability,updat,updated,525,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:585,deployability,updat,updated,585,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:119,interoperability,specif,specified,119,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:145,interoperability,platform,platform,145,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:183,modifiability,variab,variable,183,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:500,modifiability,pac,packaging,500,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:525,safety,updat,updated,525,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:555,safety,test,tested,555,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:585,safety,updat,updated,585,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:525,security,updat,updated,525,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:585,security,updat,updated,585,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:199,testability,automat,automatically,199,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:555,testability,test,tested,555,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/pull/11632:636,usability,Close,Closes,636,"Fix MSVC build; # This Pull request:. ## Changes or fixes:. - The `CMAKE_GENERATOR_PLATFORM` is only set when manually specified with `cmake -A <platform>`. The `CMAKE_SIZEOF_VOID_P` variable is set automatically by the `project()` call (and it's used elsewhere in the code). This also breaks building with Ninja for Windows x64. - The `ClingTargets.cmake` where no correctly generated when running `cmake --install` on Cling. It looks like the `CLING_HAS_EXPORTS` was removed at some point, but the packaging code was never updated. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # . Closes https://github.com/root-project/cling/issues/454",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11632
https://github.com/root-project/root/issues/11634:0,modifiability,exten,extend,0,extend the TGaxis so that nice “arrows” could be added on its ends; Extend the [TGaxis](https://root.cern/doc/master/classTGaxis.html) so that nice “arrows” could be added on its ends. As requested [here](https://root-forum.cern.ch/t/how-to-change-the-position-of-axes-of-a-graph/51970/16):,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11634
https://github.com/root-project/root/issues/11634:68,modifiability,Exten,Extend,68,extend the TGaxis so that nice “arrows” could be added on its ends; Extend the [TGaxis](https://root.cern/doc/master/classTGaxis.html) so that nice “arrows” could be added on its ends. As requested [here](https://root-forum.cern.ch/t/how-to-change-the-position-of-axes-of-a-graph/51970/16):,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11634
https://github.com/root-project/root/pull/11635:1842,deployability,build,build,1842,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:1881,deployability,fail,fail,1881,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:544,energy efficiency,alloc,allocator,544,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:691,energy efficiency,alloc,allocator,691,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:1703,energy efficiency,alloc,allocator,1703,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:1881,reliability,fail,fail,1881,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:24,safety,test,tests,24,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:1781,safety,test,tests,1781,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:1801,safety,test,test,1801,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:1806,safety,Test,TestCustonModelsFromONNX,1806,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:1869,safety,test,tests,1869,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:1893,safety,test,tested,1893,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:24,testability,test,tests,24,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:1781,testability,test,tests,1781,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:1801,testability,test,test,1801,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:1806,testability,Test,TestCustonModelsFromONNX,1806,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:1869,testability,test,tests,1869,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/pull/11635:1893,testability,test,tested,1893,"[TMVA][SOFIE] Fix SOFIE tests; # This Pull request:. Fix the following issue in SOFIE:. ```. n file included from /usr/include/c++/12.2.0/vector:70,. from /home/ahmat/cern/root/tmva/sofie/inc/TMVA/RModel.hxx:6,. from /home/ahmat/cern/root/tmva/sofie_parsers/inc/TMVA/RModelParser_ONNX.hxx:4,. from /home/ahmat/cern/root/tmva/sofie_parsers/src/ParseShape.cxx:1:. In member function ‘std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::emplace_back(_Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’,. inlined from ‘void std::vector<_Tp, _Alloc>::push_back(value_type&&) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’ at /usr/include/c++/12.2.0/bits/stl_vector.h:1294:21,. inlined from ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’ at /home/ahmat/cern/root/tmva/sofie/inc/TMVA/ROperator_Shape.hxx:42:23:. /usr/include/c++/12.2.0/bits/vector.tcc:123:28: warning: ‘this’ pointer is null [-Wnonnull]. 123 | _M_realloc_insert(end(), std::forward<_Args>(__args)...);. | ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. /usr/include/c++/12.2.0/bits/vector.tcc: In member function ‘virtual std::vector<std::vector<long unsigned int> > TMVA::Experimental::SOFIE::ROperator_Shape::ShapeInference(std::vector<std::vector<long unsigned int> >)’:. /usr/include/c++/12.2.0/bits/vector.tcc:439:7: note: in a call to non-static member function ‘void std::vector<_Tp, _Alloc>::_M_realloc_insert(iterator, _Args&& ...) [with _Args = {long unsigned int}; _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>]’. 439 | vector<_Tp, _Alloc>::. ... ```. Now the tests in tmva/sofie/test/TestCustonModelsFromONNX.cxx can be build with gcc. The others tests still fail. - [x] tested changes locally.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11635
https://github.com/root-project/root/issues/11636:0,safety,Permiss,Permission,0,Permission denied !!; When I was trying to enable pythia for STARlight simulation. . ![Screenshot 2022-10-26 011826](https://user-images.githubusercontent.com/116489914/197894582-ab551b9e-426a-4677-aac2-505acfba56a2.png). I got this . ![Screenshot 2022-10-26 012032](https://user-images.githubusercontent.com/116489914/197894542-a760c5da-1d28-43a0-9de4-cbf41e236ba5.png). How can I fix that? . Note: this is ubuntu WSL,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11636
https://github.com/root-project/root/issues/11636:71,testability,simul,simulation,71,Permission denied !!; When I was trying to enable pythia for STARlight simulation. . ![Screenshot 2022-10-26 011826](https://user-images.githubusercontent.com/116489914/197894582-ab551b9e-426a-4677-aac2-505acfba56a2.png). I got this . ![Screenshot 2022-10-26 012032](https://user-images.githubusercontent.com/116489914/197894542-a760c5da-1d28-43a0-9de4-cbf41e236ba5.png). How can I fix that? . Note: this is ubuntu WSL,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11636
https://github.com/root-project/root/issues/11636:125,usability,user,user-images,125,Permission denied !!; When I was trying to enable pythia for STARlight simulation. . ![Screenshot 2022-10-26 011826](https://user-images.githubusercontent.com/116489914/197894582-ab551b9e-426a-4677-aac2-505acfba56a2.png). I got this . ![Screenshot 2022-10-26 012032](https://user-images.githubusercontent.com/116489914/197894542-a760c5da-1d28-43a0-9de4-cbf41e236ba5.png). How can I fix that? . Note: this is ubuntu WSL,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11636
https://github.com/root-project/root/issues/11636:275,usability,user,user-images,275,Permission denied !!; When I was trying to enable pythia for STARlight simulation. . ![Screenshot 2022-10-26 011826](https://user-images.githubusercontent.com/116489914/197894582-ab551b9e-426a-4677-aac2-505acfba56a2.png). I got this . ![Screenshot 2022-10-26 012032](https://user-images.githubusercontent.com/116489914/197894542-a760c5da-1d28-43a0-9de4-cbf41e236ba5.png). How can I fix that? . Note: this is ubuntu WSL,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11636
https://github.com/root-project/root/issues/11637:181,availability,slo,slow,181,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:605,availability,slo,slowness,605,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:735,availability,slo,slow,735,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:34,deployability,integr,integrals,34,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:233,deployability,log,logreader,233,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:471,deployability,stack,stacktrace,471,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:34,integrability,integr,integrals,34,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:34,interoperability,integr,integrals,34,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:34,modifiability,integr,integrals,34,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:34,reliability,integr,integrals,34,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:181,reliability,slo,slow,181,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:423,reliability,doe,does,423,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:605,reliability,slo,slowness,605,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:735,reliability,slo,slow,735,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:81,safety,test,testing,81,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:192,safety,test,test,192,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:233,safety,log,logreader,233,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:34,security,integr,integrals,34,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:233,security,log,logreader,233,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:34,testability,integr,integrals,34,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:81,testability,test,testing,81,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:192,testability,test,test,192,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:233,testability,log,logreader,233,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/issues/11637:296,testability,unit,unitTestLogs,296,"[RF] Ranged fits evaluate numeric integrals too often in ROOT master; Hi,. while testing root master ( commit a0d62ca8ad ) in to CMSSW we noticed that `RooAddPdf::fitTo()` now very slow. The [test](https://cmssdt.cern.ch/SDT/cgi-bin/logreader/el8_amd64_gcc10/CMSSW_12_6_ROOT626_X_2022-10-25-2300/unitTestLogs/DQMOffline/Alignment#/) takes 6 mins for root 6.24 and 6.26 but for root master it takes over an hour ( and still does not finish). Running under GDB shows [this stacktrace](https://muzaffar.web.cern.ch/master-RooAddPdf-fitTo.txt) . Any idea what has changed in root master which is causing this slowness? https://github.com/cms-sw/cmssw/blob/master/DQMOffline/Alignment/src/DiMuonMassBiasClient.cc#L189 is call which is very slow now as compare to root 6.24/6.26. Thanks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11637
https://github.com/root-project/root/pull/11638:65,energy efficiency,draw,drawn,65,"The line color for ""COL POL"" can be changed; When a histogram is drawn with the option COL POL, the line color of the polar boxes cannot be changed. This was pointed out by: https://root-forum.cern.ch/t/removing-bin-borders-when-using-pol-draw-option/52098/3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11638
https://github.com/root-project/root/pull/11638:239,energy efficiency,draw,draw-option,239,"The line color for ""COL POL"" can be changed; When a histogram is drawn with the option COL POL, the line color of the polar boxes cannot be changed. This was pointed out by: https://root-forum.cern.ch/t/removing-bin-borders-when-using-pol-draw-option/52098/3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11638
https://github.com/root-project/root/pull/11639:136,availability,operat,operators,136,[TMVA][SOFIE] Use GetBlasRoutines and GetStdLibs; ## This Pull request:. Use the member functions GetBlasRoutines and GetStdLibs in the operators to specify the blas routines and the standard library headers needed to compile and run the generated code. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11639
https://github.com/root-project/root/pull/11639:166,integrability,rout,routines,166,[TMVA][SOFIE] Use GetBlasRoutines and GetStdLibs; ## This Pull request:. Use the member functions GetBlasRoutines and GetStdLibs in the operators to specify the blas routines and the standard library headers needed to compile and run the generated code. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11639
https://github.com/root-project/root/pull/11639:149,interoperability,specif,specify,149,[TMVA][SOFIE] Use GetBlasRoutines and GetStdLibs; ## This Pull request:. Use the member functions GetBlasRoutines and GetStdLibs in the operators to specify the blas routines and the standard library headers needed to compile and run the generated code. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11639
https://github.com/root-project/root/pull/11639:183,interoperability,standard,standard,183,[TMVA][SOFIE] Use GetBlasRoutines and GetStdLibs; ## This Pull request:. Use the member functions GetBlasRoutines and GetStdLibs in the operators to specify the blas routines and the standard library headers needed to compile and run the generated code. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11639
https://github.com/root-project/root/pull/11639:260,safety,test,tested,260,[TMVA][SOFIE] Use GetBlasRoutines and GetStdLibs; ## This Pull request:. Use the member functions GetBlasRoutines and GetStdLibs in the operators to specify the blas routines and the standard library headers needed to compile and run the generated code. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11639
https://github.com/root-project/root/pull/11639:260,testability,test,tested,260,[TMVA][SOFIE] Use GetBlasRoutines and GetStdLibs; ## This Pull request:. Use the member functions GetBlasRoutines and GetStdLibs in the operators to specify the blas routines and the standard library headers needed to compile and run the generated code. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11639
https://github.com/root-project/root/pull/11641:24,availability,operat,operators,24,[TMVA ][SOFIE] Register operators in the constructor of RModelParser_ONNX; ## This Pull request:. Register operators in the constructor of RModelParser_ONNX so that they can be updated when RegisterOperator is called with the name of an existing operator. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11641
https://github.com/root-project/root/pull/11641:107,availability,operat,operators,107,[TMVA ][SOFIE] Register operators in the constructor of RModelParser_ONNX; ## This Pull request:. Register operators in the constructor of RModelParser_ONNX so that they can be updated when RegisterOperator is called with the name of an existing operator. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11641
https://github.com/root-project/root/pull/11641:246,availability,operat,operator,246,[TMVA ][SOFIE] Register operators in the constructor of RModelParser_ONNX; ## This Pull request:. Register operators in the constructor of RModelParser_ONNX so that they can be updated when RegisterOperator is called with the name of an existing operator. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11641
https://github.com/root-project/root/pull/11641:177,deployability,updat,updated,177,[TMVA ][SOFIE] Register operators in the constructor of RModelParser_ONNX; ## This Pull request:. Register operators in the constructor of RModelParser_ONNX so that they can be updated when RegisterOperator is called with the name of an existing operator. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11641
https://github.com/root-project/root/pull/11641:177,safety,updat,updated,177,[TMVA ][SOFIE] Register operators in the constructor of RModelParser_ONNX; ## This Pull request:. Register operators in the constructor of RModelParser_ONNX so that they can be updated when RegisterOperator is called with the name of an existing operator. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11641
https://github.com/root-project/root/pull/11641:277,safety,test,tested,277,[TMVA ][SOFIE] Register operators in the constructor of RModelParser_ONNX; ## This Pull request:. Register operators in the constructor of RModelParser_ONNX so that they can be updated when RegisterOperator is called with the name of an existing operator. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11641
https://github.com/root-project/root/pull/11641:177,security,updat,updated,177,[TMVA ][SOFIE] Register operators in the constructor of RModelParser_ONNX; ## This Pull request:. Register operators in the constructor of RModelParser_ONNX so that they can be updated when RegisterOperator is called with the name of an existing operator. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11641
https://github.com/root-project/root/pull/11641:277,testability,test,tested,277,[TMVA ][SOFIE] Register operators in the constructor of RModelParser_ONNX; ## This Pull request:. Register operators in the constructor of RModelParser_ONNX so that they can be updated when RegisterOperator is called with the name of an existing operator. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11641
https://github.com/root-project/root/pull/11642:14,energy efficiency,Optim,Optimize,14,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:250,energy efficiency,model,models,250,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:298,energy efficiency,model,models,298,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:38,integrability,batch,batch,38,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:197,integrability,batch,batch,197,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:268,integrability,batch,batch,268,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:339,integrability,batch,batch,339,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:405,integrability,event,event,405,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:14,performance,Optimiz,Optimize,14,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:38,performance,batch,batch,38,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:197,performance,batch,batch,197,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:268,performance,batch,batch,268,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:339,performance,batch,batch,339,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:373,performance,perform,performance,373,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:354,reliability,doe,doesn,354,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:316,safety,input,input,316,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:428,safety,test,tested,428,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:250,security,model,models,250,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:298,security,model,models,298,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:428,testability,test,tested,428,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:316,usability,input,input,316,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11642:373,usability,perform,performance,373,[TMVA][SOFIE] Optimize Conv for large batch size; ## This Pull request:. Broadcast the bias of Conv to ouput channels x output depth x output height x output width and add it to the output of each batch inside the loop. This makes it faster for Conv models with large batch size and especially for models with large input images and large batch size. It doesn't affect the performance of SOFIE for single event inference. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11642
https://github.com/root-project/root/pull/11643:181,availability,error,error,181,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:504,availability,error,error,504,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:189,deployability,build,builddir,189,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:198,deployability,build,build,198,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:204,deployability,BUILD,BUILD,204,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:236,deployability,build,build,236,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:367,deployability,build,builddir,367,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:376,deployability,build,build,376,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:382,deployability,BUILD,BUILD,382,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:414,deployability,build,build,414,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:125,performance,parallel,parallel,125,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:181,performance,error,error,181,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:504,performance,error,error,504,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:0,safety,Avoid,Avoid,0,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:181,safety,error,error,181,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:504,safety,error,error,504,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:181,usability,error,error,181,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:504,usability,error,error,504,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11643:530,usability,statu,status,530,Avoid race condition between tutorial/roofit/rf512_wsfactory_oper.C and tutorial/roofit/rf512_wsfactory_oper.py; When run in parallel they delete eachother's files:. cc1plus: fatal error: /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.cxx: No such file or directory compilation terminated. /usr/bin/ld: cannot find /builddir/build/BUILD/root-6.26.08/redhat-linux-build/runtutorials/RooCFAuto000Pdf_cxx_ACLiC_dict.o: No such file or directory. collect2: error: ld returned 1 exit status.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11643
https://github.com/root-project/root/pull/11644:1642,availability,sli,slightly,1642,"mer version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:285,deployability,patch,patch,285,"Redirect TFile::Open() calls to XRootD protocol if possible; In a meeting in IT I saw that ~200PB/year are being read from the `eoshome` instance via fuse, and I thought that maybe ROOT at least could try to do something smart and just redirect fuse traffic to XRootD if possible. The patch in this pull request does just that. When I talked to Axel about making this work, we wanted the redirection to not happen when using `file://file.root`, but it created some inconsistencies when using `TFile::Open` vs using `TChain` so the final implementation always attempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:650,deployability,version,version,650,"Redirect TFile::Open() calls to XRootD protocol if possible; In a meeting in IT I saw that ~200PB/year are being read from the `eoshome` instance via fuse, and I thought that maybe ROOT at least could try to do something smart and just redirect fuse traffic to XRootD if possible. The patch in this pull request does just that. When I talked to Axel about making this work, we wanted the redirection to not happen when using `file://file.root`, but it created some inconsistencies when using `TFile::Open` vs using `TChain` so the final implementation always attempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:666,deployability,patch,patch,666,"Redirect TFile::Open() calls to XRootD protocol if possible; In a meeting in IT I saw that ~200PB/year are being read from the `eoshome` instance via fuse, and I thought that maybe ROOT at least could try to do something smart and just redirect fuse traffic to XRootD if possible. The patch in this pull request does just that. When I talked to Axel about making this work, we wanted the redirection to not happen when using `file://file.root`, but it created some inconsistencies when using `TFile::Open` vs using `TChain` so the final implementation always attempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2776,deployability,version,version,2776,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2791,deployability,patch,patch,2791,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2946,deployability,configurat,configuration,2946,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2338,energy efficiency,charg,charge,2338,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2663,energy efficiency,charg,charge,2663,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:39,integrability,protocol,protocol,39,"Redirect TFile::Open() calls to XRootD protocol if possible; In a meeting in IT I saw that ~200PB/year are being read from the `eoshome` instance via fuse, and I thought that maybe ROOT at least could try to do something smart and just redirect fuse traffic to XRootD if possible. The patch in this pull request does just that. When I talked to Axel about making this work, we wanted the redirection to not happen when using `file://file.root`, but it created some inconsistencies when using `TFile::Open` vs using `TChain` so the final implementation always attempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:650,integrability,version,version,650,"Redirect TFile::Open() calls to XRootD protocol if possible; In a meeting in IT I saw that ~200PB/year are being read from the `eoshome` instance via fuse, and I thought that maybe ROOT at least could try to do something smart and just redirect fuse traffic to XRootD if possible. The patch in this pull request does just that. When I talked to Axel about making this work, we wanted the redirection to not happen when using `file://file.root`, but it created some inconsistencies when using `TFile::Open` vs using `TChain` so the final implementation always attempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:1968,integrability,Event,Events,1968,"xx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in ord",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2004,integrability,Event,Events,2004,". | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checke",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2221,integrability,Event,Events,2221,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2546,integrability,Event,Events,2546,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2776,integrability,version,version,2776,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2946,integrability,configur,configuration,2946,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:39,interoperability,protocol,protocol,39,"Redirect TFile::Open() calls to XRootD protocol if possible; In a meeting in IT I saw that ~200PB/year are being read from the `eoshome` instance via fuse, and I thought that maybe ROOT at least could try to do something smart and just redirect fuse traffic to XRootD if possible. The patch in this pull request does just that. When I talked to Axel about making this work, we wanted the redirection to not happen when using `file://file.root`, but it created some inconsistencies when using `TFile::Open` vs using `TChain` so the final implementation always attempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:650,modifiability,version,version,650,"Redirect TFile::Open() calls to XRootD protocol if possible; In a meeting in IT I saw that ~200PB/year are being read from the `eoshome` instance via fuse, and I thought that maybe ROOT at least could try to do something smart and just redirect fuse traffic to XRootD if possible. The patch in this pull request does just that. When I talked to Axel about making this work, we wanted the redirection to not happen when using `file://file.root`, but it created some inconsistencies when using `TFile::Open` vs using `TChain` so the final implementation always attempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2776,modifiability,version,version,2776,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2946,modifiability,configur,configuration,2946,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:1797,performance,multi-thread,multi-threading,1797,"-------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2089,performance,time,time,2089,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2421,performance,time,time,2421,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:312,reliability,doe,does,312,"Redirect TFile::Open() calls to XRootD protocol if possible; In a meeting in IT I saw that ~200PB/year are being read from the `eoshome` instance via fuse, and I thought that maybe ROOT at least could try to do something smart and just redirect fuse traffic to XRootD if possible. The patch in this pull request does just that. When I talked to Axel about making this work, we wanted the redirection to not happen when using `file://file.root`, but it created some inconsistencies when using `TFile::Open` vs using `TChain` so the final implementation always attempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:1642,reliability,sli,slightly,1642,"mer version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2836,reliability,doe,does,2836,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:285,safety,patch,patch,285,"Redirect TFile::Open() calls to XRootD protocol if possible; In a meeting in IT I saw that ~200PB/year are being read from the `eoshome` instance via fuse, and I thought that maybe ROOT at least could try to do something smart and just redirect fuse traffic to XRootD if possible. The patch in this pull request does just that. When I talked to Axel about making this work, we wanted the redirection to not happen when using `file://file.root`, but it created some inconsistencies when using `TFile::Open` vs using `TChain` so the final implementation always attempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:666,safety,patch,patch,666,"Redirect TFile::Open() calls to XRootD protocol if possible; In a meeting in IT I saw that ~200PB/year are being read from the `eoshome` instance via fuse, and I thought that maybe ROOT at least could try to do something smart and just redirect fuse traffic to XRootD if possible. The patch in this pull request does just that. When I talked to Axel about making this work, we wanted the redirection to not happen when using `file://file.root`, but it created some inconsistencies when using `TFile::Open` vs using `TChain` so the final implementation always attempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:1702,safety,avoid,avoid,1702,"o. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2791,safety,patch,patch,2791,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:285,security,patch,patch,285,"Redirect TFile::Open() calls to XRootD protocol if possible; In a meeting in IT I saw that ~200PB/year are being read from the `eoshome` instance via fuse, and I thought that maybe ROOT at least could try to do something smart and just redirect fuse traffic to XRootD if possible. The patch in this pull request does just that. When I talked to Axel about making this work, we wanted the redirection to not happen when using `file://file.root`, but it created some inconsistencies when using `TFile::Open` vs using `TChain` so the final implementation always attempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:597,security,session,session,597,"Redirect TFile::Open() calls to XRootD protocol if possible; In a meeting in IT I saw that ~200PB/year are being read from the `eoshome` instance via fuse, and I thought that maybe ROOT at least could try to do something smart and just redirect fuse traffic to XRootD if possible. The patch in this pull request does just that. When I talked to Axel about making this work, we wanted the redirection to not happen when using `file://file.root`, but it created some inconsistencies when using `TFile::Open` vs using `TChain` so the final implementation always attempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:666,security,patch,patch,666,"Redirect TFile::Open() calls to XRootD protocol if possible; In a meeting in IT I saw that ~200PB/year are being read from the `eoshome` instance via fuse, and I thought that maybe ROOT at least could try to do something smart and just redirect fuse traffic to XRootD if possible. The patch in this pull request does just that. When I talked to Axel about making this work, we wanted the redirection to not happen when using `file://file.root`, but it created some inconsistencies when using `TFile::Open` vs using `TChain` so the final implementation always attempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:911,security,Team,Team,911,"Redirect TFile::Open() calls to XRootD protocol if possible; In a meeting in IT I saw that ~200PB/year are being read from the `eoshome` instance via fuse, and I thought that maybe ROOT at least could try to do something smart and just redirect fuse traffic to XRootD if possible. The patch in this pull request does just that. When I talked to Axel about making this work, we wanted the redirection to not happen when using `file://file.root`, but it created some inconsistencies when using `TFile::Open` vs using `TChain` so the final implementation always attempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:1651,security,modif,modified,1651,"on of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with o",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2791,security,patch,patch,2791,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:2946,security,configur,configuration,2946,"direct-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 8.81. $. ```. **Note:** With the final version of the patch, instead of using `file://`, which now does not disable the redirection anymore, one should add `TFile.CrossProtocolRedirects: no` to their `rootrc` configuration file in order to disable this feature (I checked that it works).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:1130,usability,help,help,1130,"ome` instance via fuse, and I thought that maybe ROOT at least could try to do something smart and just redirect fuse traffic to XRootD if possible. The patch in this pull request does just that. When I talked to Axel about making this work, we wanted the redirection to not happen when using `file://file.root`, but it created some inconsistencies when using `TFile::Open` vs using `TChain` so the final implementation always attempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuPark",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11644:1558,usability,user,user,1558,"ttempts to redirect. Below is a demo session of ROOT opening a file on EOS with (a former version of) the patch:. ```sh. $ pwd. /eos/home-a/amadio. $ ls *.root. Run2012BC_DoubleMuParked_Muons.root. $ root.exe. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Oct 28 2022, 09:49:15 |. | From heads/redirect-xrootd@v6-09-01-24773-gd85df4c5e9 |. | With c++ (GCC) 8.5.0 20210514 (Red Hat 8.5.0-15) |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. root [0] auto f1 = TFile::Open(""file://Run2012BC_DoubleMuParked_Muons.root"");. root [1] auto f2 = TFile::Open(""Run2012BC_DoubleMuParked_Muons.root"");. root [2] f1->GetName(). (const char *) ""Run2012BC_DoubleMuParked_Muons.root"". root [3] f2->GetName(). (const char *) ""root://eoshome-a.cern.ch//eos/user/a/amadio/Run2012BC_DoubleMuParked_Muons.root"". root [4] .q. $. ```. and with a slightly modified `df102_NanoAODDimuonAnalysis` tutorial to avoid `TChain`:. ```diff. void df102_NanoAODDimuonAnalysis(const char* filename). {. // Enable multi-threading. ROOT::EnableImplicitMT();. . - // std::cout << ""Using filename: "" << filename << std::endl;. + auto f = TFile::Open(filename);. + auto t = f->Get<TTree>(""Events"");. . - ROOT::RDataFrame df(""Events"", filename);. + ROOT::RDataFrame df(*t);. ```. I got the following:. ```sh. $ time ./dimuon file://Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %. Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %. 13.34. $ time ./dimuon Run2012BC_DoubleMuParked_Muons.root . Info in <TCanvas::Print>: pdf file dimuon_spectrum.pdf has been created. Events with ex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11644
https://github.com/root-project/root/pull/11646:568,availability,error,errors,568,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:105,deployability,fail,fail,105,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:21,interoperability,XML,XML,21,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:25,interoperability,format,format,25,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:70,interoperability,XML,XML,70,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:110,interoperability,XML,XML,110,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:162,interoperability,XML,XML,162,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:312,interoperability,xml,xml,312,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:348,interoperability,share,share,348,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:373,interoperability,xml,xml,373,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:409,interoperability,XML,XML,409,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:582,interoperability,XML,XML,582,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:492,performance,content,content,492,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:568,performance,error,errors,568,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:105,reliability,fail,fail,105,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:114,reliability,diagno,diagnostic,114,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:125,safety,test,tests,125,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:132,safety,Test,Test,132,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:258,safety,Test,Test,258,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:538,safety,Reme,Remedy,538,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:568,safety,error,errors,568,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:453,security,Authoriz,Authorization,453,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:114,testability,diagno,diagnostic,114,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:125,testability,test,tests,125,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:132,testability,Test,Test,132,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:258,testability,Test,Test,258,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:332,testability,VERIF,VERIFY,332,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:377,usability,person,person,377,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:518,usability,document,document,518,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:568,usability,error,errors,568,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/pull/11646:586,usability,document,document,586,DTD files are not in XML format and should not claim to be; The bogus XML designation causes the file to fail XML diagnostic tests. Test description:. Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:. ----. Result: VERIFY. 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:. Extra content at the end of the document. Suggested Remedy:. Correct the reported errors in the XML document.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11646
https://github.com/root-project/root/issues/11647:42,reliability,doe,doesn,42,"std::any in pyROOT with c++17; `std::any` doesn't seem to be included in pyROOT built from source with c++17. I tried the following with root6.26.08. ```Python. import ROOT. a = ROOT.std.any(). ```. ```. Traceback (most recent call last):. File “”, line 1, in. AttributeError: <namespace cppyy.gbl.std at 0x558f5c6b83a0> has no attribute ‘any’. Full details:. type object ‘std’ has no attribute ‘any’. ‘std::any’ is not a known C++ class. ‘any’ is not a known C++ template. ‘any’ is not a known C++ enum. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11647
https://github.com/root-project/root/issues/11647:204,testability,Trace,Traceback,204,"std::any in pyROOT with c++17; `std::any` doesn't seem to be included in pyROOT built from source with c++17. I tried the following with root6.26.08. ```Python. import ROOT. a = ROOT.std.any(). ```. ```. Traceback (most recent call last):. File “”, line 1, in. AttributeError: <namespace cppyy.gbl.std at 0x558f5c6b83a0> has no attribute ‘any’. Full details:. type object ‘std’ has no attribute ‘any’. ‘std::any’ is not a known C++ class. ‘any’ is not a known C++ template. ‘any’ is not a known C++ enum. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11647
https://github.com/root-project/root/pull/11648:75,usability,clear,clear,75,[skip-ci] clarify which methods are not implemented in TH2Poly; It was not clear in Doxygen which methods are not implemented in TH2Poly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11648
https://github.com/root-project/root/pull/11649:126,availability,avail,available,126,[v6.24][backport] Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11649
https://github.com/root-project/root/pull/11649:83,deployability,build,builder,83,[v6.24][backport] Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11649
https://github.com/root-project/root/pull/11649:126,reliability,availab,available,126,[v6.24][backport] Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11649
https://github.com/root-project/root/pull/11649:43,safety,test,test,43,[v6.24][backport] Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11649
https://github.com/root-project/root/pull/11649:75,safety,test,testing,75,[v6.24][backport] Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11649
https://github.com/root-project/root/pull/11649:126,safety,avail,available,126,[v6.24][backport] Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11649
https://github.com/root-project/root/pull/11649:126,security,availab,available,126,[v6.24][backport] Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11649
https://github.com/root-project/root/pull/11649:43,testability,test,test,43,[v6.24][backport] Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11649
https://github.com/root-project/root/pull/11649:75,testability,test,testing,75,[v6.24][backport] Fix datasource_arrow.cxx test; Explicitly include `arrow/testing/builder.h` to make sure ArrayFromVector is available. Probably it was being included implicitly before.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11649
https://github.com/root-project/root/pull/11650:534,deployability,updat,updated,534,"[RF] Added disclaimer on offsetting with new teststatistics; # This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11650
https://github.com/root-project/root/pull/11650:292,energy efficiency,current,currently,292,"[RF] Added disclaimer on offsetting with new teststatistics; # This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11650
https://github.com/root-project/root/pull/11650:408,energy efficiency,current,currently,408,"[RF] Added disclaimer on offsetting with new teststatistics; # This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11650
https://github.com/root-project/root/pull/11650:394,reliability,doe,does,394,"[RF] Added disclaimer on offsetting with new teststatistics; # This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11650
https://github.com/root-project/root/pull/11650:45,safety,test,teststatistics,45,"[RF] Added disclaimer on offsetting with new teststatistics; # This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11650
https://github.com/root-project/root/pull/11650:179,safety,test,teststatistics,179,"[RF] Added disclaimer on offsetting with new teststatistics; # This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11650
https://github.com/root-project/root/pull/11650:504,safety,test,tested,504,"[RF] Added disclaimer on offsetting with new teststatistics; # This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11650
https://github.com/root-project/root/pull/11650:534,safety,updat,updated,534,"[RF] Added disclaimer on offsetting with new teststatistics; # This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11650
https://github.com/root-project/root/pull/11650:534,security,updat,updated,534,"[RF] Added disclaimer on offsetting with new teststatistics; # This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11650
https://github.com/root-project/root/pull/11650:45,testability,test,teststatistics,45,"[RF] Added disclaimer on offsetting with new teststatistics; # This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11650
https://github.com/root-project/root/pull/11650:179,testability,test,teststatistics,179,"[RF] Added disclaimer on offsetting with new teststatistics; # This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11650
https://github.com/root-project/root/pull/11650:504,testability,test,tested,504,"[RF] Added disclaimer on offsetting with new teststatistics; # This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11650
https://github.com/root-project/root/pull/11650:148,usability,user,user,148,"[RF] Added disclaimer on offsetting with new teststatistics; # This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11650
https://github.com/root-project/root/pull/11650:227,usability,minim,minimise,227,"[RF] Added disclaimer on offsetting with new teststatistics; # This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11650
https://github.com/root-project/root/pull/11650:310,usability,support,supported,310,"[RF] Added disclaimer on offsetting with new teststatistics; # This Pull request:. ## Changes or fixes:. Adds some info on the special case where a user tries to make a new-style teststatistics based likelihood and requests to minimise it in serial mode with offsetting enabled. This case is currently not yet supported. The added comment in `RooMinimizer.cxx` explains in more detail why this does not work currently, and gives a suggestion for how to make this work in the future. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11650
https://github.com/root-project/root/issues/11651:7,availability,error,error,7,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:225,availability,error,error,225,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:446,availability,recov,recovers,446,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:741,availability,error,error,741,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:891,availability,error,error,891,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:955,availability,error,error,955,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1360,availability,recov,recovers,1360,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1563,availability,error,error,1563,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1627,availability,error,error,1627,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1870,availability,Operat,Operating,1870,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:68,deployability,unload,unloading,68,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:179,deployability,contain,containing,179,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:352,deployability,unload,unloading,352,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:446,deployability,recov,recovers,446,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1240,deployability,unload,unloading,1240,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1264,deployability,fail,failed,1264,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1360,deployability,recov,recovers,1360,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1849,deployability,version,version,1849,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1960,deployability,manag,manager,1960,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1960,energy efficiency,manag,manager,1960,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1849,integrability,version,version,1849,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1849,modifiability,version,version,1849,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1952,modifiability,pac,package,1952,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:7,performance,error,error,7,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:225,performance,error,error,225,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:243,performance,time,time,243,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:741,performance,error,error,741,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:891,performance,error,error,891,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:955,performance,error,error,955,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1563,performance,error,error,1563,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1627,performance,error,error,1627,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1744,performance,memor,memory,1744,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1777,performance,disk,disk,1777,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:446,reliability,recov,recovers,446,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1264,reliability,fail,failed,1264,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1360,reliability,recov,recovers,1360,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:7,safety,error,error,7,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:225,safety,error,error,225,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:446,safety,recov,recovers,446,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:741,safety,error,error,741,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:891,safety,error,error,891,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:955,safety,error,error,955,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1360,safety,recov,recovers,1360,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1563,safety,error,error,1563,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1627,safety,error,error,1627,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1960,safety,manag,manager,1960,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:306,security,access,access,306,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:446,security,recov,recovers,446,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1360,security,recov,recovers,1360,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1791,security,access,accessed,1791,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:34,testability,assert,assert,34,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:375,testability,assert,assert,375,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1191,testability,Assert,Assertion,1191,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:7,usability,error,error,7,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:225,usability,error,error,225,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:424,usability,behavi,behavior,424,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:653,usability,Close,Close,653,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:741,usability,error,error,741,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:891,usability,error,error,891,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:955,usability,error,error,955,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1329,usability,command,command,1329,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1563,usability,error,error,1563,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1627,usability,error,error,1627,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/issues/11651:1744,usability,memor,memory,1744,"Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object; - [x] Checked for duplicates. ### Describe the bug. Opening a file containing a `TTree` and then typing a syntax error at the same time as reading the tree (i.e. using the name of the `TKey` to access it) triggers the `Must not nest within unloading transaction` assert and terminates `root.exe`. . ### Expected behavior. Interpreter recovers. . ### To Reproduce. #### Prepare a file. ```. $ root -l. root [0] TFile *file = new TFile(""foo.root"", ""RECREATE"");. root [1] TTree *foo = new TTree(""t"",""t"");. root [2] foo->Write(). root [3] file->Close(). root [4] .q. ```. Open the file and read the tree in conjunction with a syntax error:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(=). ROOT_prompt_1:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_1:1:11: error: expected expression. t->Print(=). ^. root.exe: /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/interpreter/cling/lib/Interpreter/Transaction.cpp:98: void cling::Transaction::addNestedTransaction(cling::Transaction*): Assertion `!m_Unloading && ""Must not nest within unloading transaction""' failed. ```. ROOT terminates. . Note that when issuing a correct command first, the interpreter recovers fine:. ```. $ root -l foo.root . root [0] . Attaching file foo.root as _file0... (TFile *) 0x55f9f7a3e860. root [1] t->Print(). .... correct output ... root [2] t->Print(=). ROOT_prompt_2:1:10: error: expected expression. t->Print(=). ^. ROOT_prompt_2:1:11: error: expected expression. t->Print(=). ^. root [3]. ```. So the issue seems to happen when an object is not yet in memory, but implicitly read from disk by being accessed via the name of the `TKey`. . ### Setup. 1. ROOT version: 6.26/08. 2. Operating system: Gentoo Linux. 3. How you obtained ROOT: `emerge root` (i.e. via package manager). .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11651
https://github.com/root-project/root/pull/11652:331,availability,state,state,331,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:877,deployability,log,loglevel,877,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:34,integrability,messag,messages,34,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:301,integrability,messag,messages,301,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:331,integrability,state,state,331,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:906,integrability,discover,discovery,906,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:34,interoperability,messag,messages,34,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:301,interoperability,messag,messages,301,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:906,interoperability,discover,discovery,906,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:674,reliability,doe,does,674,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:432,safety,valid,valid,432,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:877,safety,log,loglevel,877,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:540,security,sign,significant,540,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:877,security,log,loglevel,877,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:624,testability,understand,understand,624,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:877,testability,log,loglevel,877,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:104,usability,user,users,104,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:532,usability,hint,hint,532,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:566,usability,minim,minimized,566,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:599,usability,user,user,599,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:812,usability,minim,minimized,812,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:906,usability,discov,discovery,906,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:1257,usability,user,user-images,1257,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/pull/11652:1423,usability,document,documentation,1423,"Minuit2: Explained delgam warning messages in info; This Pull Request adds more speaking information to users to make warnings of the type. `delgam < 0 : first derivatives increasing along search line`. useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable! The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11652
https://github.com/root-project/root/issues/11653:706,availability,replic,replicas,706,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:1216,deployability,version,version,1216,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:1216,integrability,version,version,1216,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:6,interoperability,plug,plugins,6,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:1175,interoperability,xml,xml,1175,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:1212,interoperability,xml,xml,1212,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:1260,interoperability,xml,xmlns,1260,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:1283,interoperability,xml,xml,1283,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:28,modifiability,extens,extension,28,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:1216,modifiability,version,version,1216,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:757,performance,concurren,concurrent,757,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:1086,performance,content,content,1086,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:492,reliability,doe,does,492,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:768,security,access,access,768,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:855,security,sign,signature,855,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:985,security,access,access,985,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:1072,security,ident,identified,1072,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:1188,security,sign,signature,1188,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:569,testability,context,context,569,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:1484,testability,simpl,simple,1484,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:1442,usability,help,help,1442,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/issues/11653:1484,usability,simpl,simple,1484,"TFile plugins :: pass meta4 extension files to TNetXNGFile and process it; ### Is your feature request related to a problem? Please describe. Not a problem but a usage of XRootD feature that is not used by TFile::Open. ### Describe the solution you'd like. It would be useful that .meta4 files in `TFile::Open(""whatever_name.meta4"")`. to be passed for processing to TNetXNGFile (XRootD). ### Describe alternatives you've considered. There are no alternatives, TFile::Open (TNetXNGFile::Open) does not know to pass. to XrdCl the meta file for processing. ### Additional context. XRootD (XrdCl) know to use a meta file (`.meta4`) which is a virtual redirector. This allows not only fallback through a list a replicas to the same file but (at least for xrdcp) concurrent access (with `-y | --sources <n> `). There would be 2 problems to be solved:. 1. Add a signature to TNetXNGFile to allow to process a call like `TNetXNGFile::Open(""whatever_name.meta4"")`. 2. Tell TFile to redirect an access to a `.meta4` file to TNetXNGFile. For reference, just in case the file type is identified by content (but from what i seen in TFile::GetType this is not the case) a meta4 file is an xml with the signature like:. ```. <?xml version=""1.0"" encoding=""UTF-8""?>. <metalink xmlns=""urn:ietf:params:xml:ns:metalink"">. ... </metalink>. ```. I tried something on my own but i got entangled on my lack of knowledge of TFile mechanics, so i though to ask expert help here, maybe the solution is fast and simple (in expert eyes). Adding here @simonmichal in case there are questions on XrdCl feature. Thanks a lot!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11653
https://github.com/root-project/root/pull/11654:222,deployability,Automat,Automatically,222,"Provide cling globals list in special RBrowser widget; . ![Screenshot_cling](https://user-images.githubusercontent.com/4936580/199507709-0d15f971-6f64-4fe1-8cd8-24c4ed5d23ba.png). Parse and provide output of `.g` command. Automatically create such widget when `.g` typed in `RBrowser` command prompt. Use `TreeTable` element for more structured output. Using idea of @ferdymercury from #11295,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11654
https://github.com/root-project/root/pull/11654:222,testability,Automat,Automatically,222,"Provide cling globals list in special RBrowser widget; . ![Screenshot_cling](https://user-images.githubusercontent.com/4936580/199507709-0d15f971-6f64-4fe1-8cd8-24c4ed5d23ba.png). Parse and provide output of `.g` command. Automatically create such widget when `.g` typed in `RBrowser` command prompt. Use `TreeTable` element for more structured output. Using idea of @ferdymercury from #11295,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11654
https://github.com/root-project/root/pull/11654:47,usability,widget,widget,47,"Provide cling globals list in special RBrowser widget; . ![Screenshot_cling](https://user-images.githubusercontent.com/4936580/199507709-0d15f971-6f64-4fe1-8cd8-24c4ed5d23ba.png). Parse and provide output of `.g` command. Automatically create such widget when `.g` typed in `RBrowser` command prompt. Use `TreeTable` element for more structured output. Using idea of @ferdymercury from #11295,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11654
https://github.com/root-project/root/pull/11654:85,usability,user,user-images,85,"Provide cling globals list in special RBrowser widget; . ![Screenshot_cling](https://user-images.githubusercontent.com/4936580/199507709-0d15f971-6f64-4fe1-8cd8-24c4ed5d23ba.png). Parse and provide output of `.g` command. Automatically create such widget when `.g` typed in `RBrowser` command prompt. Use `TreeTable` element for more structured output. Using idea of @ferdymercury from #11295,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11654
https://github.com/root-project/root/pull/11654:213,usability,command,command,213,"Provide cling globals list in special RBrowser widget; . ![Screenshot_cling](https://user-images.githubusercontent.com/4936580/199507709-0d15f971-6f64-4fe1-8cd8-24c4ed5d23ba.png). Parse and provide output of `.g` command. Automatically create such widget when `.g` typed in `RBrowser` command prompt. Use `TreeTable` element for more structured output. Using idea of @ferdymercury from #11295,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11654
https://github.com/root-project/root/pull/11654:248,usability,widget,widget,248,"Provide cling globals list in special RBrowser widget; . ![Screenshot_cling](https://user-images.githubusercontent.com/4936580/199507709-0d15f971-6f64-4fe1-8cd8-24c4ed5d23ba.png). Parse and provide output of `.g` command. Automatically create such widget when `.g` typed in `RBrowser` command prompt. Use `TreeTable` element for more structured output. Using idea of @ferdymercury from #11295,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11654
https://github.com/root-project/root/pull/11654:285,usability,command,command,285,"Provide cling globals list in special RBrowser widget; . ![Screenshot_cling](https://user-images.githubusercontent.com/4936580/199507709-0d15f971-6f64-4fe1-8cd8-24c4ed5d23ba.png). Parse and provide output of `.g` command. Automatically create such widget when `.g` typed in `RBrowser` command prompt. Use `TreeTable` element for more structured output. Using idea of @ferdymercury from #11295,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11654
https://github.com/root-project/root/pull/11655:97,availability,error,errors,97,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:447,availability,error,errors,447,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:84,deployability,fail,failing,84,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:459,deployability,observ,observed,459,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:528,deployability,version,versions,528,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:528,integrability,version,versions,528,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:177,interoperability,bind,bindings,177,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:177,modifiability,bind,bindings,177,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:528,modifiability,version,versions,528,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:97,performance,error,errors,97,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:447,performance,error,errors,447,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:84,reliability,fail,failing,84,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:73,safety,test,tests,73,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:97,safety,error,errors,97,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:208,safety,test,test,208,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:447,safety,error,errors,447,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:30,testability,assert,assertEquals,30,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:48,testability,assert,assertEqual,48,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:73,testability,test,tests,73,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:130,testability,Trace,Traceback,130,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:208,testability,test,test,208,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:273,testability,assert,assertEquals,273,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:392,testability,assert,assertEquals,392,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:422,testability,assert,assertEqual,422,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:459,testability,observ,observed,459,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:97,usability,error,errors,97,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/pull/11655:447,usability,error,errors,447,"[PyROOT] Replace non-existent assertEquals with assertEqual; The changed tests were failing with errors like the one below:. ```. Traceback (most recent call last):. File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",. line 22, in test_dynamiccast. self.assertEquals(type(o_upcast), TObject). ^^^^^^^^^^^^^^^^^. AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'. Did you mean: 'assertEqual'? ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11655
https://github.com/root-project/root/issues/11657:468,availability,error,error,468,"ROOT does not compile with link-time optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:1030,availability,error,error,1030,"ime optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:1705,availability,error,error,1705,"ndes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:2426,availability,error,error,2426," ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:2967,availability,error,error,2967,"oid cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3151,availability,error,error,3151,"‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3672,availability,error,error,3672," 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/port",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3891,availability,error,error,3891,"ge/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/port",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5686,availability,error,errors,5686,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5713,availability,error,error,5713,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5882,availability,error,error,5882,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5919,availability,error,error,5919,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:142,deployability,build,build,142,"ROOT does not compile with link-time optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:148,deployability,log,log,148,"ROOT does not compile with link-time optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5901,deployability,fail,failed,5901,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:37,energy efficiency,optim,optimizations,37,"ROOT does not compile with link-time optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:2682,integrability,SUB,SUBROUTINE,2682,"kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3382,integrability,SUB,SUBROUTINE,3382,"6.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5698,integrability,wrap,wrapper,5698,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5893,integrability,wrap,wrapper,5893,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:508,interoperability,mismatch,mismatch,508,"ROOT does not compile with link-time optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:1070,interoperability,mismatch,mismatch,1070," report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:1237,interoperability,mismatch,mismatch,1237,".08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/roo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:1745,interoperability,mismatch,mismatch,1745,", char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:1938,interoperability,mismatch,mismatch,1938,"/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/ma",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:2466,interoperability,mismatch,mismatch,2466,"r/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3007,interoperability,mismatch,mismatch,3007," *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3191,interoperability,mismatch,mismatch,3191,"/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3712,interoperability,mismatch,mismatch,3712,"ar/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3931,interoperability,mismatch,mismatch,3931,"6.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5698,interoperability,wrapper,wrapper,5698,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5893,interoperability,wrapper,wrapper,5893,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:1249,modifiability,paramet,parameter,1249,"-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/mis",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:1950,modifiability,paramet,parameter,1950,"physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:32,performance,time,time,32,"ROOT does not compile with link-time optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:37,performance,optimiz,optimizations,37,"ROOT does not compile with link-time optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:468,performance,error,error,468,"ROOT does not compile with link-time optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:1030,performance,error,error,1030,"ime optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:1705,performance,error,error,1705,"ndes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:2426,performance,error,error,2426," ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:2967,performance,error,error,2967,"oid cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3151,performance,error,error,3151,"‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3672,performance,error,error,3672," 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/port",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3891,performance,error,error,3891,"ge/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/port",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:4737,performance,parallel,parallelcoord,4737,"/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:4865,performance,parallel,parallelcoord,4865,"rc/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:4962,performance,parallel,parallelcoord,4962,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5069,performance,parallel,parallelcoordtrans,5069,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5202,performance,parallel,parallelcoordtrans,5202,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5304,performance,parallel,parallelcoordtrans,5304,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5686,performance,error,errors,5686,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5713,performance,error,error,5713,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5882,performance,error,error,5882,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5919,performance,error,error,5919,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5,reliability,doe,does,5,"ROOT does not compile with link-time optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5901,reliability,fail,failed,5901,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:148,safety,log,log,148,"ROOT does not compile with link-time optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:468,safety,error,error,468,"ROOT does not compile with link-time optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:1030,safety,error,error,1030,"ime optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:1705,safety,error,error,1705,"ndes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:2426,safety,error,error,2426," ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:2967,safety,error,error,2967,"oid cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3151,safety,error,error,3151,"‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3672,safety,error,error,3672," 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/port",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3891,safety,error,error,3891,"ge/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/port",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5686,safety,error,errors,5686,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5713,safety,error,error,5713,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5882,safety,error,error,5882,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5919,safety,error,error,5919,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:148,security,log,log,148,"ROOT does not compile with link-time optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:148,testability,log,log,148,"ROOT does not compile with link-time optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:468,usability,error,error,468,"ROOT does not compile with link-time optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:1030,usability,error,error,1030,"ime optimizations (LTO) enabled; Full bug report is at https://bugs.gentoo.org/879323. Important part of the build log is below. ```. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/jets.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/jets.C. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:767:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 767 | + ISTAT). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: ‘cfget_’ was previously declared here. 107 | void cfget_(int *lundes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:1705,usability,error,error,1705,"ndes, int *medium, int *nwrec, int *nwtak, char *mbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:107:6: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:398:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 398 | CFSTAT = CFSTATI (NAME, INFO, LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type mismatch in parameter 4. 171 | int cfstati_(char *fname, int *info, int *lgname). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:2426,usability,error,error,2426," ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:171:5: note: ‘cfstati_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:386:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 386 | CALL CFOPEI (LUNDES,MEDIUM,NWREC,NVMODE,NBUF,NAME,ISTAT,LGN). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type mismatch in parameter 9. 225 | void cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:2967,usability,error,error,2967,"oid cfopei_(int *lundes, int *medium, int *nwrec, int *mode, int *nbuf,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: type ‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3151,usability,error,error,3151,"‘void’ should match type ‘long int’. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/cernlib.c:225:6: note: ‘cfopei_’ was previously declared here. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:542:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 542 | CALL UCOPY2(IQ(LCID+ITAG1),IQ(LCID+32),NW). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: ‘ucopy2’ was previously declared here. 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3672,usability,error,error,3672," 403 | SUBROUTINE UCOPY2 (A,B,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:403:23: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/port",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:3891,usability,error,error,3891,"ge/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:1581:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1581 | CALL VZERO(JNAMES,20). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:2184:72: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 2184 | CALL VZERO(I1,37). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: ‘vzero’ was previously declared here. 105 | SUBROUTINE VZERO (A,N). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/kernlib.f:105:22: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/hbook.f:1959:18: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 1959 | COMMON/PAWC/NWPAW,IXPAWC,IHDIV,IXHIGZ,IXKU,FENC(5),LMAIN,. | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/misc/minicern/src/zebra.f:205:19: error: type of <E2><80>-Werror=lto-type-mismatch][]]. 205 | COMMON /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/port",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5686,usability,error,errors,5686,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5713,usability,error,error,5713,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5774,usability,statu,status,5774,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5882,usability,error,error,5882,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5919,usability,error,error,5919,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/issues/11657:5945,usability,statu,status,5945,"N /PAWC/ NWPAW,IXPAWC,IHBOOK,IXHIGZ,IXKU,IFENCE(5). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: ‘pawc’ was previously declared here. 278 | common/pawc/paw(nwpaw). | ^. /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/main/src/g2root.f:278:18: note: code may be misoptimized unless ‘-fno-strict-aliasing’ is used. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/ntuple1.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/ntuple1.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoord.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoord.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/parallelcoordtrans.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/parallelcoordtrans.C. [ 56%] Copying /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C. /usr/bin/cmake -E copy_if_different /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08/tutorials/tree/printSizes.C /var/tmp/portage/sci-physics/root-6.26.08/work/root-6.26.08_build/tutorials/tree/printSizes.C. lto1: some warnings being treated as errors. lto-wrapper: fatal error: /usr/bin/x86_64-pc-linux-gnu-gfortran returned 1 exit status. compilation terminated. /usr/lib/gcc/x86_64-pc-linux-gnu/12/../../../../x86_64-pc-linux-gnu/bin/ld: error: lto-wrapper failed. collect2: error: ld returned 1 exit status. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11657
https://github.com/root-project/root/pull/11659:1,availability,sli,slip-ci,1,[slip-ci] Improve the graph figures (add titles); requested here: https://root-forum.cern.ch/t/tgraph-synchronization/52211/4.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11659
https://github.com/root-project/root/pull/11659:102,performance,synch,synchronization,102,[slip-ci] Improve the graph figures (add titles); requested here: https://root-forum.cern.ch/t/tgraph-synchronization/52211/4.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11659
https://github.com/root-project/root/pull/11659:1,reliability,sli,slip-ci,1,[slip-ci] Improve the graph figures (add titles); requested here: https://root-forum.cern.ch/t/tgraph-synchronization/52211/4.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11659
https://github.com/root-project/root/issues/11660:132,availability,error,errors-when-using-roofit-asymptoticerror,132,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:190,availability,error,errors,190,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:418,availability,error,error,418,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:699,availability,error,errors,699,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:293,modifiability,exten,extended,293,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:397,modifiability,exten,extended,397,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:439,modifiability,exten,extended,439,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:132,performance,error,errors-when-using-roofit-asymptoticerror,132,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:190,performance,error,errors,190,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:418,performance,error,error,418,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:699,performance,error,errors,699,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:132,safety,error,errors-when-using-roofit-asymptoticerror,132,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:190,safety,error,errors,190,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:418,safety,error,error,418,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:699,safety,error,errors,699,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:132,usability,error,errors-when-using-roofit-asymptoticerror,132,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:190,usability,error,errors,190,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:418,usability,error,error,418,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/issues/11660:699,usability,error,errors,699,"[RF] Issues when using RooFit::AsymptoticError for weighted likelihood fits; As reported in https://root-forum.cern.ch/t/very-large-errors-when-using-roofit-asymptoticerror/52003 some large errors are obtained when using `RooFit::AsymptoticError`. Other problems have been reported when using extended fits, see [ROOT-10827](https://sft.its.cern.ch/jira/browse/ROOT-10827) Missing contribution of extended term in the error Correction for extended weighted likelihood fits. Or when computing the derivatives needed for the asymptotic correction, see [ROOT-10866](https://sft.its.cern.ch/jira/browse/ROOT-10866) Numerical instabilities when calculating the derivatives for the asymptotically correct errors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11660
https://github.com/root-project/root/pull/11662:755,availability,slo,slow,755,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:61,deployability,integr,integrals,61,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:238,deployability,integr,integrals,238,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:405,deployability,integr,integration,405,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:435,deployability,integr,integral,435,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:617,deployability,integr,integration,617,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:689,deployability,integr,integral,689,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:773,deployability,integr,integral,773,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:61,integrability,integr,integrals,61,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:238,integrability,integr,integrals,238,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:405,integrability,integr,integration,405,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:435,integrability,integr,integral,435,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:617,integrability,integr,integration,617,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:689,integrability,integr,integral,689,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:773,integrability,integr,integral,773,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:808,integrability,event,event,808,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:53,interoperability,specif,specify,53,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:61,interoperability,integr,integrals,61,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:238,interoperability,integr,integrals,238,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:405,interoperability,integr,integration,405,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:435,interoperability,integr,integral,435,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:617,interoperability,integr,integration,617,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:689,interoperability,integr,integral,689,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:773,interoperability,integr,integral,773,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:23,modifiability,variab,variable,23,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:61,modifiability,integr,integrals,61,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:238,modifiability,integr,integrals,238,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:405,modifiability,integr,integration,405,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:417,modifiability,variab,variables,417,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:435,modifiability,integr,integral,435,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:617,modifiability,integr,integration,617,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:629,modifiability,variab,variable,629,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:689,modifiability,integr,integral,689,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:773,modifiability,integr,integral,773,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:61,reliability,integr,integrals,61,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:238,reliability,integr,integrals,238,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:405,reliability,integr,integration,405,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:435,reliability,integr,integral,435,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:617,reliability,integr,integration,617,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:689,reliability,integr,integral,689,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:755,reliability,slo,slow,755,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:773,reliability,integr,integral,773,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:508,safety,test,test,508,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:61,security,integr,integrals,61,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:238,security,integr,integrals,238,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:405,security,integr,integration,405,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:435,security,integr,integral,435,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:617,security,integr,integration,617,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:689,security,integr,integral,689,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:773,security,integr,integral,773,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:61,testability,integr,integrals,61,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:238,testability,integr,integrals,238,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:405,testability,integr,integration,405,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:435,testability,integr,integral,435,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:503,testability,unit,unit,503,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:508,testability,test,test,508,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:617,testability,integr,integration,617,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:689,testability,integr,integral,689,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:773,testability,integr,integral,773,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/pull/11662:528,usability,Close,Closes,528,"[RF] Ensure that using variable clones also works to specify integrals; Recently, in commit https://github.com/root-project/root/commit/47c250898f3d3a1bb1718c73b84014a70809ffdf, the algorithm to figure out the value. and shape servers of integrals was rewritten. However, the new. implementation analyzed the computation graph by pointer, which caused a. wrong list of servers if one passed clones of the integration variables. to the integral constructor. This commit fixes that, and also implements a unit test for this case. Closes https://github.com/root-project/root/issues/11637, as the issue was caused by the integration variable. wrongly being registered as a value server of the integral. This made. the reproducer code in the issue thread very slow, because the integral. was reevaluated for each event.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11662
https://github.com/root-project/root/issues/11663:489,availability,error,errors,489,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:569,availability,failur,failure,569,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:123,deployability,contain,contains,123,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:569,deployability,fail,failure,569,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:395,integrability,encapsulat,encapsulation,395,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:395,modifiability,encapsul,encapsulation,395,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:489,performance,error,errors,489,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:525,performance,time,time,525,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:569,performance,failur,failure,569,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:50,reliability,fTa,fTasks,50,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:111,reliability,fTa,fTasks,111,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:569,reliability,fail,failure,569,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:7,safety,unsaf,unsafe,7,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:229,safety,unsaf,unsafe,229,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:286,safety,avoid,avoid,286,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:371,safety,avoid,avoided,371,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:489,safety,error,errors,489,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:42,security,expos,exposes,42,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:302,usability,behavi,behavior,302,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11663:489,usability,error,errors,489,"TTask: unsafe cast in ExecuteTasks; TTask exposes fTasks through (non-const) GetListOfTasks, so the invariant ""fTasks only contains pointers to TTask"" can not be enforced. . This makes . ``` while((task=(TTask*)next())) {```. an unsafe type cast. dynamic_cast should be used instead to avoid undefined behavior. . Generally, any C-style casts (or static_casts) should be avoided unless there is encapsulation to enforce an adequate invariant. . C++ is a strongly typed language where type errors have to be caught at compile time because they will not lead to graceful failure at runtime.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11663
https://github.com/root-project/root/issues/11665:120,usability,user,user-images,120,Run STARlight ; How to run starlight in ubuntu after editing and saving a file? ![Screenshot 2022-11-06 105219](https://user-images.githubusercontent.com/116489914/200164679-946fb159-67ba-422c-b492-9ab0e6fe23ab.png). ![Screenshot 2022-11-06 105310](https://user-images.githubusercontent.com/116489914/200164687-f623ca0a-df68-4707-b1ba-664f3ca45b15.png). ![Screenshot 2022-11-06 110312](https://user-images.githubusercontent.com/116489914/200164692-434f9ae1-2653-4e68-86fe-249e20d200cd.png). Please help me. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11665
https://github.com/root-project/root/issues/11665:257,usability,user,user-images,257,Run STARlight ; How to run starlight in ubuntu after editing and saving a file? ![Screenshot 2022-11-06 105219](https://user-images.githubusercontent.com/116489914/200164679-946fb159-67ba-422c-b492-9ab0e6fe23ab.png). ![Screenshot 2022-11-06 105310](https://user-images.githubusercontent.com/116489914/200164687-f623ca0a-df68-4707-b1ba-664f3ca45b15.png). ![Screenshot 2022-11-06 110312](https://user-images.githubusercontent.com/116489914/200164692-434f9ae1-2653-4e68-86fe-249e20d200cd.png). Please help me. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11665
https://github.com/root-project/root/issues/11665:394,usability,user,user-images,394,Run STARlight ; How to run starlight in ubuntu after editing and saving a file? ![Screenshot 2022-11-06 105219](https://user-images.githubusercontent.com/116489914/200164679-946fb159-67ba-422c-b492-9ab0e6fe23ab.png). ![Screenshot 2022-11-06 105310](https://user-images.githubusercontent.com/116489914/200164687-f623ca0a-df68-4707-b1ba-664f3ca45b15.png). ![Screenshot 2022-11-06 110312](https://user-images.githubusercontent.com/116489914/200164692-434f9ae1-2653-4e68-86fe-249e20d200cd.png). Please help me. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11665
https://github.com/root-project/root/issues/11665:498,usability,help,help,498,Run STARlight ; How to run starlight in ubuntu after editing and saving a file? ![Screenshot 2022-11-06 105219](https://user-images.githubusercontent.com/116489914/200164679-946fb159-67ba-422c-b492-9ab0e6fe23ab.png). ![Screenshot 2022-11-06 105310](https://user-images.githubusercontent.com/116489914/200164687-f623ca0a-df68-4707-b1ba-664f3ca45b15.png). ![Screenshot 2022-11-06 110312](https://user-images.githubusercontent.com/116489914/200164692-434f9ae1-2653-4e68-86fe-249e20d200cd.png). Please help me. .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11665
https://github.com/root-project/root/pull/11666:218,deployability,fail,fail,218,"[ACLiC] For macOS, make sure the syslib exists (v6.26); macOS 13 again moves many libraries into the binary blob: these files do not exist anymore on disk, but the linker ""knows what to do"". Linking against them would fail (""file not found""), so rely on the non-system libraries to pull them in. An exception are /usr/lib/system/libsystem_... which *do* exist on disk but must not be linked against. (cherry picked from commit 00232a0ca4fdfea2b813158f2406a33ef3e2512b) (cherry picked from commit 43016f031b870f7ea1f30a245b8072017af485bb). v6.26 backport of https://github.com/root-project/root/pull/11527.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11666
https://github.com/root-project/root/pull/11666:150,performance,disk,disk,150,"[ACLiC] For macOS, make sure the syslib exists (v6.26); macOS 13 again moves many libraries into the binary blob: these files do not exist anymore on disk, but the linker ""knows what to do"". Linking against them would fail (""file not found""), so rely on the non-system libraries to pull them in. An exception are /usr/lib/system/libsystem_... which *do* exist on disk but must not be linked against. (cherry picked from commit 00232a0ca4fdfea2b813158f2406a33ef3e2512b) (cherry picked from commit 43016f031b870f7ea1f30a245b8072017af485bb). v6.26 backport of https://github.com/root-project/root/pull/11527.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11666
https://github.com/root-project/root/pull/11666:363,performance,disk,disk,363,"[ACLiC] For macOS, make sure the syslib exists (v6.26); macOS 13 again moves many libraries into the binary blob: these files do not exist anymore on disk, but the linker ""knows what to do"". Linking against them would fail (""file not found""), so rely on the non-system libraries to pull them in. An exception are /usr/lib/system/libsystem_... which *do* exist on disk but must not be linked against. (cherry picked from commit 00232a0ca4fdfea2b813158f2406a33ef3e2512b) (cherry picked from commit 43016f031b870f7ea1f30a245b8072017af485bb). v6.26 backport of https://github.com/root-project/root/pull/11527.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11666
https://github.com/root-project/root/pull/11666:218,reliability,fail,fail,218,"[ACLiC] For macOS, make sure the syslib exists (v6.26); macOS 13 again moves many libraries into the binary blob: these files do not exist anymore on disk, but the linker ""knows what to do"". Linking against them would fail (""file not found""), so rely on the non-system libraries to pull them in. An exception are /usr/lib/system/libsystem_... which *do* exist on disk but must not be linked against. (cherry picked from commit 00232a0ca4fdfea2b813158f2406a33ef3e2512b) (cherry picked from commit 43016f031b870f7ea1f30a245b8072017af485bb). v6.26 backport of https://github.com/root-project/root/pull/11527.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11666
https://github.com/root-project/root/pull/11666:299,safety,except,exception,299,"[ACLiC] For macOS, make sure the syslib exists (v6.26); macOS 13 again moves many libraries into the binary blob: these files do not exist anymore on disk, but the linker ""knows what to do"". Linking against them would fail (""file not found""), so rely on the non-system libraries to pull them in. An exception are /usr/lib/system/libsystem_... which *do* exist on disk but must not be linked against. (cherry picked from commit 00232a0ca4fdfea2b813158f2406a33ef3e2512b) (cherry picked from commit 43016f031b870f7ea1f30a245b8072017af485bb). v6.26 backport of https://github.com/root-project/root/pull/11527.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11666
https://github.com/root-project/root/issues/11667:391,availability,consist,consistently,391,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:1244,availability,servic,services,1244,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:27,deployability,fail,fails,27,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:404,deployability,fail,fails,404,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:1207,deployability,fail,failing,1207,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:1244,deployability,servic,services,1244,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:1244,integrability,servic,services,1244,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:1244,modifiability,servic,services,1244,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:27,reliability,fail,fails,27,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:404,reliability,fail,fails,404,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:1207,reliability,fail,failing,1207,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:851,security,Team,Team,851,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:1355,security,modif,modifyClassWebpage,1355,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:1181,testability,context,context,1181,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:391,usability,consist,consistently,391,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:587,usability,behavi,behavior,587,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/issues/11667:1037,usability,help,help,1037,"[cling] GetClassSharedLibs fails to find several classes; - [x] Checked for duplicates. ### Describe the bug. When linking external applications against ROOT classes, one needs to find in which library the used classes are defined. To know this info, it is useful to call e.g.:. ```. gInterpreter->GetClassSharedLibs(""TTreePlayer""). (const char *) ""libTreePlayer.so"". ```. But this function consistently fails with some classes:. ```. gInterpreter->GetClassSharedLibs(""TUrl""). (const char *) nullptr. gInterpreter->GetClassSharedLibs(""TArray""). (const char *) nullptr. ```. ### Expected behavior. It works with all classes. ### To Reproduce. ```. gInterpreter->GetClassSharedLibs(""TUrl""). ```. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.26/06 https://root.cern |. | (c) 1995-2021, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Jul 28 2022, 18:08:51 |. | From tags/v6-26-06@v6-26-06 |. | With c++ (Ubuntu 11.2.0-19ubuntu1) 11.2.0 |. | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. See full list of failing classes here: https://lcgapp-services.cern.ch/root-jenkins/view/ROOT/job/root-makedoc-master/lastBuild/consoleText. and search for ""WARNING modifyClassWebpage.sh"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11667
https://github.com/root-project/root/pull/11668:51,integrability,Batch,BatchMode,51,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:286,integrability,Batch,BatchMode,286,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:599,integrability,Batch,BatchMode,599,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:680,integrability,wrap,wrapper,680,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:680,interoperability,wrapper,wrapper,680,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:51,performance,Batch,BatchMode,51,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:286,performance,Batch,BatchMode,286,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:599,performance,Batch,BatchMode,599,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:70,safety,test,test,70,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:527,safety,test,test,527,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:988,safety,test,test,988,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:1060,safety,avoid,avoiding,1060,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:1086,safety,test,tests,1086,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:70,testability,test,test,70,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:202,testability,hook,hook,202,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:527,testability,test,test,527,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:988,testability,test,test,988,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:1086,testability,test,tests,1086,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:15,usability,support,support,15,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11668:98,usability,support,supported,98,"[RF] Correctly support `enableOffsetting()` in new BatchMode; The old test statistic classes also supported enabling the offset. feature after their construction via the `RooAbsReal::enableOffsetting`. hook. This function is now also correctly overloaded in the. `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is. now moved to the base class `RooAbsReal`. This implementation was only. recursively calling `enableOffsetting` for the servers, which did the. job for the old test statistics, which were only combined with. `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,. but on top of them sits another wrapper class, the. `RooFitDriverWrapper`. It should also forward the `enableOffsetting`. calls correctly. The most general solution to this problem is probably. to forward the `enableOffsetting` call for all `RooAbsReal`-derived. classed, up to the point where the recursion ends either at an old or a. new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11668
https://github.com/root-project/root/pull/11669:322,availability,failur,failures,322,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:172,deployability,observ,observables,172,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:285,deployability,integr,integral,285,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:316,deployability,build,build,316,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:322,deployability,fail,failures,322,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:241,energy efficiency,model,model,241,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:352,energy efficiency,measur,measurement,352,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:285,integrability,integr,integral,285,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:285,interoperability,integr,integral,285,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:285,modifiability,integr,integral,285,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:294,performance,cach,caches,294,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:322,performance,failur,failures,322,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:398,performance,overhead,overhead,398,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:444,performance,cach,caching,444,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:506,performance,memor,memory-safe,506,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:285,reliability,integr,integral,285,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:322,reliability,fail,failures,322,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:211,safety,safe,safer,211,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:305,safety,avoid,avoid,305,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:513,safety,safe,safe,513,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:241,security,model,model,241,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:285,security,integr,integral,285,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:172,testability,observ,observables,172,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:285,testability,integr,integral,285,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11669:506,usability,memor,memory-safe,506,"[RF] Always clone constraint term in `createNLL`; Even though cloning the constraint term is technically only required when the computation graph is changed because global observables are taken from data, it is safer to clone the constraint model in general to reset the normalization integral caches and avoid ASAN build failures (the PDF of the main measurement is cloned too anyway, so not much overhead). This can be reconsidered after the caching of normalization sets by pointer is changed to a more memory-safe solution.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11669
https://github.com/root-project/root/pull/11670:16,modifiability,variab,variable,16,"[skip-ci] wrong variable was tested in Makefile; For some reason, `UNAME` was tested instead of `OS`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11670
https://github.com/root-project/root/pull/11670:29,safety,test,tested,29,"[skip-ci] wrong variable was tested in Makefile; For some reason, `UNAME` was tested instead of `OS`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11670
https://github.com/root-project/root/pull/11670:78,safety,test,tested,78,"[skip-ci] wrong variable was tested in Makefile; For some reason, `UNAME` was tested instead of `OS`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11670
https://github.com/root-project/root/pull/11670:29,testability,test,tested,29,"[skip-ci] wrong variable was tested in Makefile; For some reason, `UNAME` was tested instead of `OS`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11670
https://github.com/root-project/root/pull/11670:78,testability,test,tested,78,"[skip-ci] wrong variable was tested in Makefile; For some reason, `UNAME` was tested instead of `OS`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11670
https://github.com/root-project/root/issues/11671:17,energy efficiency,optim,optimizations,17,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:261,energy efficiency,optim,optimizations,261,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:365,energy efficiency,optim,optimizations,365,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:875,energy efficiency,optim,optimize,875,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:84,interoperability,prox,proxy,84,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:222,interoperability,prox,proxy,222,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:317,interoperability,share,share,317,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:629,modifiability,Reu,Reuse,629,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:17,performance,optimiz,optimizations,17,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:261,performance,optimiz,optimizations,261,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:365,performance,optimiz,optimizations,365,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:875,performance,optimiz,optimize,875,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:953,performance,memor,memory,953,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:236,testability,plan,planned,236,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:154,usability,support,support,154,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:166,usability,user,user-defined,166,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11671:953,usability,memor,memory,953,"[ntuple] Pending optimizations for storage of classes with an associated collection proxy; After pull-request #11525 is merged (which introduces `RField` support for user-defined classes that have an associated collection proxy), it is planned to apply further optimizations to the base implementation. ### Optional: share how it could be improved. Three different optimizations can be applied, in order:. - [x] Iteration over collection elements: suggestion by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997334570) is to use iterators instead of relying in `TVirtualCollectionProxy::At()`. - [x] Reuse vs. destruct/reallocate for collection items: suggested by @pcanal [here](https://github.com/root-project/root/pull/11525#discussion_r997337292) and [here](https://github.com/root-project/root/pull/11525#discussion_r997343681). - [ ] Maybe optimize the case of a `kSTLvector` collection, as elements are contiguous in memory (see [here](https://github.com/root-project/root/pull/11525#discussion_r997335574)). [marked as `TODO` in the source code]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11671
https://github.com/root-project/root/issues/11672:235,usability,minim,minimally,235,"[ntuple] Make `RNTupleWriter::Fill()` return the number of bytes written; Make `RNTupleWriter::Fill(REntry &entry)` and `RNTupleWriter::Fill()` return the number of bytes written, as per suggestion by @mnowakgit . The change should be minimally invasive as `RFieldBase::Append()` already provides that information.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11672
https://github.com/root-project/root/issues/11673:312,energy efficiency,current,current,312,"[ntuple] Consider making `REntry::AddValue()` publicly accessible; As per a request from @Nowakus, making `REntry::AddValue()` publicly accessible would be useful in some specific cases. @Nowakus could you please comment in this issue why (I cannot recall now). Also, it would be helpful if you also attach your current workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11673
https://github.com/root-project/root/issues/11673:46,integrability,pub,publicly,46,"[ntuple] Consider making `REntry::AddValue()` publicly accessible; As per a request from @Nowakus, making `REntry::AddValue()` publicly accessible would be useful in some specific cases. @Nowakus could you please comment in this issue why (I cannot recall now). Also, it would be helpful if you also attach your current workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11673
https://github.com/root-project/root/issues/11673:127,integrability,pub,publicly,127,"[ntuple] Consider making `REntry::AddValue()` publicly accessible; As per a request from @Nowakus, making `REntry::AddValue()` publicly accessible would be useful in some specific cases. @Nowakus could you please comment in this issue why (I cannot recall now). Also, it would be helpful if you also attach your current workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11673
https://github.com/root-project/root/issues/11673:171,interoperability,specif,specific,171,"[ntuple] Consider making `REntry::AddValue()` publicly accessible; As per a request from @Nowakus, making `REntry::AddValue()` publicly accessible would be useful in some specific cases. @Nowakus could you please comment in this issue why (I cannot recall now). Also, it would be helpful if you also attach your current workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11673
https://github.com/root-project/root/issues/11673:55,security,access,accessible,55,"[ntuple] Consider making `REntry::AddValue()` publicly accessible; As per a request from @Nowakus, making `REntry::AddValue()` publicly accessible would be useful in some specific cases. @Nowakus could you please comment in this issue why (I cannot recall now). Also, it would be helpful if you also attach your current workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11673
https://github.com/root-project/root/issues/11673:136,security,access,accessible,136,"[ntuple] Consider making `REntry::AddValue()` publicly accessible; As per a request from @Nowakus, making `REntry::AddValue()` publicly accessible would be useful in some specific cases. @Nowakus could you please comment in this issue why (I cannot recall now). Also, it would be helpful if you also attach your current workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11673
https://github.com/root-project/root/issues/11673:280,usability,help,helpful,280,"[ntuple] Consider making `REntry::AddValue()` publicly accessible; As per a request from @Nowakus, making `REntry::AddValue()` publicly accessible would be useful in some specific cases. @Nowakus could you please comment in this issue why (I cannot recall now). Also, it would be helpful if you also attach your current workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11673
https://github.com/root-project/root/pull/11674:419,deployability,updat,updated,419,"[ntuple] Make `RNTupleWriter::Fill()` return the number of uncompressed bytes written; As per a request by @mnowakgit, it would be useful if `RNTupleWriter::Fill()` returns the number of (uncompressed) bytes written - IIRC, TTree does a similar thing. As `RFieldBase::Append()` already provides the count of written bytes, the changes included in this PR are minimal. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11672.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11674
https://github.com/root-project/root/pull/11674:230,reliability,doe,does,230,"[ntuple] Make `RNTupleWriter::Fill()` return the number of uncompressed bytes written; As per a request by @mnowakgit, it would be useful if `RNTupleWriter::Fill()` returns the number of (uncompressed) bytes written - IIRC, TTree does a similar thing. As `RFieldBase::Append()` already provides the count of written bytes, the changes included in this PR are minimal. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11672.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11674
https://github.com/root-project/root/pull/11674:389,safety,test,tested,389,"[ntuple] Make `RNTupleWriter::Fill()` return the number of uncompressed bytes written; As per a request by @mnowakgit, it would be useful if `RNTupleWriter::Fill()` returns the number of (uncompressed) bytes written - IIRC, TTree does a similar thing. As `RFieldBase::Append()` already provides the count of written bytes, the changes included in this PR are minimal. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11672.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11674
https://github.com/root-project/root/pull/11674:419,safety,updat,updated,419,"[ntuple] Make `RNTupleWriter::Fill()` return the number of uncompressed bytes written; As per a request by @mnowakgit, it would be useful if `RNTupleWriter::Fill()` returns the number of (uncompressed) bytes written - IIRC, TTree does a similar thing. As `RFieldBase::Append()` already provides the count of written bytes, the changes included in this PR are minimal. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11672.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11674
https://github.com/root-project/root/pull/11674:419,security,updat,updated,419,"[ntuple] Make `RNTupleWriter::Fill()` return the number of uncompressed bytes written; As per a request by @mnowakgit, it would be useful if `RNTupleWriter::Fill()` returns the number of (uncompressed) bytes written - IIRC, TTree does a similar thing. As `RFieldBase::Append()` already provides the count of written bytes, the changes included in this PR are minimal. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11672.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11674
https://github.com/root-project/root/pull/11674:389,testability,test,tested,389,"[ntuple] Make `RNTupleWriter::Fill()` return the number of uncompressed bytes written; As per a request by @mnowakgit, it would be useful if `RNTupleWriter::Fill()` returns the number of (uncompressed) bytes written - IIRC, TTree does a similar thing. As `RFieldBase::Append()` already provides the count of written bytes, the changes included in this PR are minimal. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11672.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11674
https://github.com/root-project/root/pull/11674:359,usability,minim,minimal,359,"[ntuple] Make `RNTupleWriter::Fill()` return the number of uncompressed bytes written; As per a request by @mnowakgit, it would be useful if `RNTupleWriter::Fill()` returns the number of (uncompressed) bytes written - IIRC, TTree does a similar thing. As `RFieldBase::Append()` already provides the count of written bytes, the changes included in this PR are minimal. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11672.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11674
https://github.com/root-project/root/issues/11675:25,availability,error,errors,25,`rootls` should not show errors when seeing a branch of class without dictionary; See https://root-forum.cern.ch/t/open-a-file-to-read-data/52234/7. `rootls -t yourfile.root:*` will spit out overload errors if it encounters a branch of an unknown class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11675
https://github.com/root-project/root/issues/11675:200,availability,error,errors,200,`rootls` should not show errors when seeing a branch of class without dictionary; See https://root-forum.cern.ch/t/open-a-file-to-read-data/52234/7. `rootls -t yourfile.root:*` will spit out overload errors if it encounters a branch of an unknown class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11675
https://github.com/root-project/root/issues/11675:25,performance,error,errors,25,`rootls` should not show errors when seeing a branch of class without dictionary; See https://root-forum.cern.ch/t/open-a-file-to-read-data/52234/7. `rootls -t yourfile.root:*` will spit out overload errors if it encounters a branch of an unknown class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11675
https://github.com/root-project/root/issues/11675:200,performance,error,errors,200,`rootls` should not show errors when seeing a branch of class without dictionary; See https://root-forum.cern.ch/t/open-a-file-to-read-data/52234/7. `rootls -t yourfile.root:*` will spit out overload errors if it encounters a branch of an unknown class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11675
https://github.com/root-project/root/issues/11675:25,safety,error,errors,25,`rootls` should not show errors when seeing a branch of class without dictionary; See https://root-forum.cern.ch/t/open-a-file-to-read-data/52234/7. `rootls -t yourfile.root:*` will spit out overload errors if it encounters a branch of an unknown class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11675
https://github.com/root-project/root/issues/11675:200,safety,error,errors,200,`rootls` should not show errors when seeing a branch of class without dictionary; See https://root-forum.cern.ch/t/open-a-file-to-read-data/52234/7. `rootls -t yourfile.root:*` will spit out overload errors if it encounters a branch of an unknown class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11675
https://github.com/root-project/root/issues/11675:25,usability,error,errors,25,`rootls` should not show errors when seeing a branch of class without dictionary; See https://root-forum.cern.ch/t/open-a-file-to-read-data/52234/7. `rootls -t yourfile.root:*` will spit out overload errors if it encounters a branch of an unknown class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11675
https://github.com/root-project/root/issues/11675:200,usability,error,errors,200,`rootls` should not show errors when seeing a branch of class without dictionary; See https://root-forum.cern.ch/t/open-a-file-to-read-data/52234/7. `rootls -t yourfile.root:*` will spit out overload errors if it encounters a branch of an unknown class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11675
https://github.com/root-project/root/pull/11677:0,deployability,Updat,Update,0,"Update GitHub Actions; The previous versions use Node.js 12, which is deprecated for GitHub Actions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11677
https://github.com/root-project/root/pull/11677:36,deployability,version,versions,36,"Update GitHub Actions; The previous versions use Node.js 12, which is deprecated for GitHub Actions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11677
https://github.com/root-project/root/pull/11677:36,integrability,version,versions,36,"Update GitHub Actions; The previous versions use Node.js 12, which is deprecated for GitHub Actions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11677
https://github.com/root-project/root/pull/11677:36,modifiability,version,versions,36,"Update GitHub Actions; The previous versions use Node.js 12, which is deprecated for GitHub Actions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11677
https://github.com/root-project/root/pull/11677:0,safety,Updat,Update,0,"Update GitHub Actions; The previous versions use Node.js 12, which is deprecated for GitHub Actions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11677
https://github.com/root-project/root/pull/11677:0,security,Updat,Update,0,"Update GitHub Actions; The previous versions use Node.js 12, which is deprecated for GitHub Actions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11677
https://github.com/root-project/root/pull/11678:24,deployability,Build,BuildPrimitives,24,"[hist] provide THStack::BuildPrimitives() method; It generates all stack primitives - axis histogram and legend as Paint. method does, but does not perform Paint. . Will be used in TWebCanvas. Replace NULL by nullptr in hist tutorials",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11678
https://github.com/root-project/root/pull/11678:67,deployability,stack,stack,67,"[hist] provide THStack::BuildPrimitives() method; It generates all stack primitives - axis histogram and legend as Paint. method does, but does not perform Paint. . Will be used in TWebCanvas. Replace NULL by nullptr in hist tutorials",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11678
https://github.com/root-project/root/pull/11678:148,performance,perform,perform,148,"[hist] provide THStack::BuildPrimitives() method; It generates all stack primitives - axis histogram and legend as Paint. method does, but does not perform Paint. . Will be used in TWebCanvas. Replace NULL by nullptr in hist tutorials",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11678
https://github.com/root-project/root/pull/11678:129,reliability,doe,does,129,"[hist] provide THStack::BuildPrimitives() method; It generates all stack primitives - axis histogram and legend as Paint. method does, but does not perform Paint. . Will be used in TWebCanvas. Replace NULL by nullptr in hist tutorials",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11678
https://github.com/root-project/root/pull/11678:139,reliability,doe,does,139,"[hist] provide THStack::BuildPrimitives() method; It generates all stack primitives - axis histogram and legend as Paint. method does, but does not perform Paint. . Will be used in TWebCanvas. Replace NULL by nullptr in hist tutorials",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11678
https://github.com/root-project/root/pull/11678:148,usability,perform,perform,148,"[hist] provide THStack::BuildPrimitives() method; It generates all stack primitives - axis histogram and legend as Paint. method does, but does not perform Paint. . Will be used in TWebCanvas. Replace NULL by nullptr in hist tutorials",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11678
https://github.com/root-project/root/pull/11679:95,integrability,event,event-,95,[skip-ci] Make TTask and TThread legacy; fix https://github.com/root-project/root/issues/11663#event-7775318665.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11679
https://github.com/root-project/root/pull/11680:32,modifiability,variab,variables,32,thisroot: Clean JUPYTER related variables possibly set by ROOT 6.; Thanks to Wile E Coyote,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11680
https://github.com/root-project/root/pull/11681:10,availability,error,error,10,Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11681
https://github.com/root-project/root/pull/11681:32,deployability,version,version,32,Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11681
https://github.com/root-project/root/pull/11681:61,deployability,version,version,61,Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11681
https://github.com/root-project/root/pull/11681:32,integrability,version,version,32,Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11681
https://github.com/root-project/root/pull/11681:61,integrability,version,version,61,Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11681
https://github.com/root-project/root/pull/11681:32,modifiability,version,version,32,Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11681
https://github.com/root-project/root/pull/11681:61,modifiability,version,version,61,Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11681
https://github.com/root-project/root/pull/11681:10,performance,error,error,10,Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11681
https://github.com/root-project/root/pull/11681:10,safety,error,error,10,Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11681
https://github.com/root-project/root/pull/11681:123,safety,detect,detection,123,Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11681
https://github.com/root-project/root/pull/11681:123,security,detect,detection,123,Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11681
https://github.com/root-project/root/pull/11681:10,usability,error,error,10,Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11681
https://github.com/root-project/root/pull/11683:363,deployability,updat,updated,363,"[ntuple,daos] Add missing attribute to IOD structure mock definition; This pull request adds the attribute `uint64_t iod_flags`, introduced in DAOS v2.0, to the definition of `daos_iod_t` in our mock implementation of libdaos for development. See: https://docs.daos.io/v2.0/doxygen/html/structdaos__iod__t.html. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11683
https://github.com/root-project/root/pull/11683:333,safety,test,tested,333,"[ntuple,daos] Add missing attribute to IOD structure mock definition; This pull request adds the attribute `uint64_t iod_flags`, introduced in DAOS v2.0, to the definition of `daos_iod_t` in our mock implementation of libdaos for development. See: https://docs.daos.io/v2.0/doxygen/html/structdaos__iod__t.html. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11683
https://github.com/root-project/root/pull/11683:363,safety,updat,updated,363,"[ntuple,daos] Add missing attribute to IOD structure mock definition; This pull request adds the attribute `uint64_t iod_flags`, introduced in DAOS v2.0, to the definition of `daos_iod_t` in our mock implementation of libdaos for development. See: https://docs.daos.io/v2.0/doxygen/html/structdaos__iod__t.html. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11683
https://github.com/root-project/root/pull/11683:363,security,updat,updated,363,"[ntuple,daos] Add missing attribute to IOD structure mock definition; This pull request adds the attribute `uint64_t iod_flags`, introduced in DAOS v2.0, to the definition of `daos_iod_t` in our mock implementation of libdaos for development. See: https://docs.daos.io/v2.0/doxygen/html/structdaos__iod__t.html. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11683
https://github.com/root-project/root/pull/11683:53,testability,mock,mock,53,"[ntuple,daos] Add missing attribute to IOD structure mock definition; This pull request adds the attribute `uint64_t iod_flags`, introduced in DAOS v2.0, to the definition of `daos_iod_t` in our mock implementation of libdaos for development. See: https://docs.daos.io/v2.0/doxygen/html/structdaos__iod__t.html. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11683
https://github.com/root-project/root/pull/11683:195,testability,mock,mock,195,"[ntuple,daos] Add missing attribute to IOD structure mock definition; This pull request adds the attribute `uint64_t iod_flags`, introduced in DAOS v2.0, to the definition of `daos_iod_t` in our mock implementation of libdaos for development. See: https://docs.daos.io/v2.0/doxygen/html/structdaos__iod__t.html. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11683
https://github.com/root-project/root/pull/11683:333,testability,test,tested,333,"[ntuple,daos] Add missing attribute to IOD structure mock definition; This pull request adds the attribute `uint64_t iod_flags`, introduced in DAOS v2.0, to the definition of `daos_iod_t` in our mock implementation of libdaos for development. See: https://docs.daos.io/v2.0/doxygen/html/structdaos__iod__t.html. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11683
https://github.com/root-project/root/pull/11684:18,availability,error,error,18,[v6-26] Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11684
https://github.com/root-project/root/pull/11684:40,deployability,version,version,40,[v6-26] Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11684
https://github.com/root-project/root/pull/11684:69,deployability,version,version,69,[v6-26] Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11684
https://github.com/root-project/root/pull/11684:40,integrability,version,version,40,[v6-26] Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11684
https://github.com/root-project/root/pull/11684:69,integrability,version,version,69,[v6-26] Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11684
https://github.com/root-project/root/pull/11684:40,modifiability,version,version,40,[v6-26] Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11684
https://github.com/root-project/root/pull/11684:69,modifiability,version,version,69,[v6-26] Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11684
https://github.com/root-project/root/pull/11684:18,performance,error,error,18,[v6-26] Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11684
https://github.com/root-project/root/pull/11684:18,safety,error,error,18,[v6-26] Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11684
https://github.com/root-project/root/pull/11684:131,safety,detect,detection,131,[v6-26] Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11684
https://github.com/root-project/root/pull/11684:131,security,detect,detection,131,[v6-26] Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11684
https://github.com/root-project/root/pull/11684:18,usability,error,error,18,[v6-26] Fix CMake error with the latest version of Arrow; The latest version of Apache Arrow requires C++17. This commit fixes the detection of Arrow and disable the arrow option if `CMAKE_CXX_STANDARD` is less than 17.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11684
https://github.com/root-project/root/pull/11685:43,availability,state,statement,43,"[PyROOT] Enclose tuple unpacking in return statement with parenthesis; As returning an unpacked tuple without parenthesis is only supported since Python 3.8. This patch fixes the following:. ```. python3.7 -m py_compile _rdf_pyz.py. File ""_rdf_pyz.py"", line 253. return v, *args[1:]. ^. SyntaxError: invalid syntax. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11685
https://github.com/root-project/root/pull/11685:163,deployability,patch,patch,163,"[PyROOT] Enclose tuple unpacking in return statement with parenthesis; As returning an unpacked tuple without parenthesis is only supported since Python 3.8. This patch fixes the following:. ```. python3.7 -m py_compile _rdf_pyz.py. File ""_rdf_pyz.py"", line 253. return v, *args[1:]. ^. SyntaxError: invalid syntax. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11685
https://github.com/root-project/root/pull/11685:43,integrability,state,statement,43,"[PyROOT] Enclose tuple unpacking in return statement with parenthesis; As returning an unpacked tuple without parenthesis is only supported since Python 3.8. This patch fixes the following:. ```. python3.7 -m py_compile _rdf_pyz.py. File ""_rdf_pyz.py"", line 253. return v, *args[1:]. ^. SyntaxError: invalid syntax. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11685
https://github.com/root-project/root/pull/11685:163,safety,patch,patch,163,"[PyROOT] Enclose tuple unpacking in return statement with parenthesis; As returning an unpacked tuple without parenthesis is only supported since Python 3.8. This patch fixes the following:. ```. python3.7 -m py_compile _rdf_pyz.py. File ""_rdf_pyz.py"", line 253. return v, *args[1:]. ^. SyntaxError: invalid syntax. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11685
https://github.com/root-project/root/pull/11685:163,security,patch,patch,163,"[PyROOT] Enclose tuple unpacking in return statement with parenthesis; As returning an unpacked tuple without parenthesis is only supported since Python 3.8. This patch fixes the following:. ```. python3.7 -m py_compile _rdf_pyz.py. File ""_rdf_pyz.py"", line 253. return v, *args[1:]. ^. SyntaxError: invalid syntax. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11685
https://github.com/root-project/root/pull/11685:130,usability,support,supported,130,"[PyROOT] Enclose tuple unpacking in return statement with parenthesis; As returning an unpacked tuple without parenthesis is only supported since Python 3.8. This patch fixes the following:. ```. python3.7 -m py_compile _rdf_pyz.py. File ""_rdf_pyz.py"", line 253. return v, *args[1:]. ^. SyntaxError: invalid syntax. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11685
https://github.com/root-project/root/issues/11686:102,availability,error,error-rint-pcm-is-out-of-date-cannot-read-module-signature,102,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:297,availability,error,error,297,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:564,availability,Error,Error,564,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:609,availability,Error,Error,609,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:616,availability,Error,Error,616,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:768,availability,Error,Error,768,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:13,deployability,depend,dependency,13,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:84,deployability,build,build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature,84,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:188,deployability,depend,dependency,188,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:304,deployability,modul,module,304,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:341,deployability,build,build,341,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:416,deployability,modul,module,416,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:493,deployability,modul,module,493,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:539,deployability,build,build,539,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:571,deployability,Modul,Module,571,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:593,deployability,fail,failed,593,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:721,deployability,build,build,721,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:1225,deployability,build,build,1225,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:603,energy efficiency,load,load,603,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:622,energy efficiency,load,loading,622,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:13,integrability,depend,dependency,13,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:188,integrability,depend,dependency,188,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:1309,interoperability,platform,platform,1309,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:13,modifiability,depend,dependency,13,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:144,modifiability,modul,module-signature,144,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:188,modifiability,depend,dependency,188,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:304,modifiability,modul,module,304,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:416,modifiability,modul,module,416,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:493,modifiability,modul,module,493,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:571,modifiability,Modul,Module,571,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:102,performance,error,error-rint-pcm-is-out-of-date-cannot-read-module-signature,102,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:297,performance,error,error,297,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:564,performance,Error,Error,564,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:603,performance,load,load,603,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:609,performance,Error,Error,609,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:616,performance,Error,Error,616,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:622,performance,load,loading,622,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:768,performance,Error,Error,768,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:593,reliability,fail,failed,593,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:13,safety,depend,dependency,13,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:102,safety,error,error-rint-pcm-is-out-of-date-cannot-read-module-signature,102,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:188,safety,depend,dependency,188,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:297,safety,error,error,297,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:304,safety,modul,module,304,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:416,safety,modul,module,416,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:493,safety,modul,module,493,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:564,safety,Error,Error,564,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:571,safety,Modul,Module,571,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:609,safety,Error,Error,609,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:616,safety,Error,Error,616,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:768,safety,Error,Error,768,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:151,security,sign,signature,151,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:423,security,sign,signature,423,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:13,testability,depend,dependency,13,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:188,testability,depend,dependency,188,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:102,usability,error,error-rint-pcm-is-out-of-date-cannot-read-module-signature,102,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:260,usability,interact,interactive,260,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:297,usability,error,error,297,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:444,usability,interact,interactive,444,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:564,usability,Error,Error,564,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:609,usability,Error,Error,609,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:616,usability,Error,Error,616,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/issues/11686:768,usability,Error,Error,768,"Missing Rint dependency for rootcling ; As seen in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/38, there is missing dependency on Rint that leads to out of order creation:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. while indeed. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. This out of order build is seen when using `CMake` with `gnu make` on Ubuntu 22 (on WSL). On the same platform, using `Ninja` leads to the creation in the right order.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11686
https://github.com/root-project/root/pull/11687:979,availability,error,error,979,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1047,availability,error,error,1047,"`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1314,availability,Error,Error,1314,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1359,availability,Error,Error,1359,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1366,availability,Error,Error,1366,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1518,availability,Error,Error,1518,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1616,availability,error,error-rint-pcm-is-out-of-date-cannot-read-module-signature,1616,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:14,deployability,depend,dependency,14,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:100,deployability,modul,modules,100,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:358,deployability,depend,dependencies,358,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:461,deployability,depend,depends-on,461,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1054,deployability,modul,module,1054,"gisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1091,deployability,build,build,1091,"veral modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1166,deployability,modul,module,1166,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1243,deployability,modul,module,1243,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1289,deployability,build,build,1289,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1321,deployability,Modul,Module,1321,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1343,deployability,fail,failed,1343,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1471,deployability,build,build,1471,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1598,deployability,build,build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature,1598,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1689,deployability,stack,stack,1689,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:75,energy efficiency,load,loads,75,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:119,energy efficiency,Core,Core,119,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1353,energy efficiency,load,load,1353,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1372,energy efficiency,load,loading,1372,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:2090,energy efficiency,core,core,2090,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:14,integrability,depend,dependency,14,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:358,integrability,depend,dependencies,358,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:461,integrability,depend,depends-on,461,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:985,integrability,messag,message,985,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:985,interoperability,messag,message,985,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:14,modifiability,depend,dependency,14,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:100,modifiability,modul,modules,100,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:358,modifiability,depend,dependencies,358,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:461,modifiability,depend,depends-on,461,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1054,modifiability,modul,module,1054,"gisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1166,modifiability,modul,module,1166,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1243,modifiability,modul,module,1243,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1321,modifiability,Modul,Module,1321,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1658,modifiability,modul,module-signature,1658,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:75,performance,load,loads,75,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:491,performance,time,time,491,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:979,performance,error,error,979,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1047,performance,error,error,1047,"`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1314,performance,Error,Error,1314,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1353,performance,load,load,1353,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1359,performance,Error,Error,1359,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1366,performance,Error,Error,1366,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1372,performance,load,loading,1372,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1518,performance,Error,Error,1518,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1616,performance,error,error-rint-pcm-is-out-of-date-cannot-read-module-signature,1616,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1343,reliability,fail,failed,1343,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:14,safety,depend,dependency,14,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:100,safety,modul,modules,100,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:358,safety,depend,dependencies,358,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:461,safety,depend,depends-on,461,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:979,safety,error,error,979,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1047,safety,error,error,1047,"`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1054,safety,modul,module,1054,"gisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1166,safety,modul,module,1166,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1243,safety,modul,module,1243,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1314,safety,Error,Error,1314,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1321,safety,Modul,Module,1321,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1359,safety,Error,Error,1359,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1366,safety,Error,Error,1366,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1518,safety,Error,Error,1518,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1616,safety,error,error-rint-pcm-is-out-of-date-cannot-read-module-signature,1616,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1173,security,sign,signature,1173,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1665,security,sign,signature,1665,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:14,testability,depend,dependency,14,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:358,testability,depend,dependencies,358,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:461,testability,depend,depends-on,461,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1695,testability,trace,trace,1695,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:979,usability,error,error,979,"Add Rint as a dependency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1010,usability,interact,interactive,1010,"pendency of rootcling; `TCling.cxx`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1047,usability,error,error,1047,"`’s `RegisterCxxModules` loads explicitly several modules including `Core`, `Rint` and `RIO`. When executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1194,usability,interact,interactive,1194,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1314,usability,Error,Error,1314,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1359,usability,Error,Error,1359,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1366,usability,Error,Error,1366,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1518,usability,Error,Error,1518,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1616,usability,error,error-rint-pcm-is-out-of-date-cannot-read-module-signature,1616,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11687:1816,usability,tool,tools,1816,"n executing rootcling (for example for G__Net.cxx) *before* `G__Rint.cxx` was created and thus before `lib/Rint.pcm` was properly created, a default `lib/Rint.pcm` is auto-generated and registered as one of the dependencies. Later the real `lib/Rint.pcm` is created is creation date is later than other `pcm` than depends-on/uses it’s creation time. For example:. ```. $ ls -lart lib/Net.pcm lib/MultiProc.pcm lib/Imt.pcm lib/MathCore.pcm lib/Rint.pcm. -rw-r--r-- 1 pcanal pcanal 1158548 Nov 10 20:26 lib/Net.pcm. -rw-r--r-- 1 pcanal pcanal 1278392 Nov 10 20:27 lib/MultiProc.pcm. -rw-r--r-- 1 pcanal pcanal 2032752 Nov 10 20:27 lib/Imt.pcm. -rw-r--r-- 1 pcanal pcanal 12911448 Nov 10 20:27 lib/MathCore.pcm. -rw-r--r-- 1 pcanal pcanal 444724 Nov 10 20:35 lib/Rint.pcm. ```. then later uses of those `pcm` leads to the (mis-worded) error message:. ```. <<< cling interactive line includer >>>: fatal error: module file '/home/neel/Desktop/Root/build/lib/Rint.pcm' is out of date and needs to be rebuilt: could not read module signature. <<< cling interactive line includer >>>: note: imported by module 'MathCore' in '/home/neel/Desktop/Root/build/lib/MathCore.pcm'. Error: Module 'MathCore.pcm' failed to load. Error: Error loading the default rootcling header files. make[2]: *** [math/mathmore/CMakeFiles/G__MathMore.dir/build.make:130: math/mathmore/G__MathMore.cxx] Error 1. ```. See the related circumstances in https://root-forum.cern.ch/t/wsl-build-from-source-error-rint-pcm-is-out-of-date-cannot-read-module-signature/47564/39. The stack trace that was triggers the auto-generation of `Rint.pcm`. at /home/pcanal/root_working/code/master/interpreter/llvm/src/tools/clang/lib/Sema/SemaModule.cpp:325. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:908. at /home/pcanal/root_working/code/master/interpreter/cling/lib/Interpreter/Interpreter.cpp:872. at /home/pcanal/root_working/code/master/core/metacling/src/TCling.cxx:1590. This PR fixes #11686.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11687
https://github.com/root-project/root/pull/11688:182,deployability,log,log,182,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:186,deployability,scale,scale,186,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:442,deployability,Updat,Update,442,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:186,energy efficiency,scale,scale,186,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:330,integrability,sub,subfolder,330,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:186,modifiability,scal,scale,186,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:186,performance,scale,scale,186,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:182,safety,log,log,182,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:287,safety,Test,Testing,287,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:442,safety,Updat,Update,442,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:182,security,log,log,182,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:442,security,Updat,Update,442,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:182,testability,log,log,182,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:287,testability,Test,Testing,287,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:16,usability,interact,interactive,16,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:147,usability,interact,interactive,147,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:214,usability,tool,tooltip,214,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/pull/11688:383,usability,interact,interactive,383,"[webgui] enable interactive features of TWebCanvas; IMPORTANT! It is not yet enabling web canvas as default. 1. By default enable all `TWebCanvas` interactive features. Now zooming, log scale change, pad clicking, tooltip is reflected on C++ back. See `hlHisto[1/2/3/4].C` tutorials. 2. Testing all tutorials in `tutorials/hist/` subfolder. Basic display works for all of them, some interactive features (especially with `TExec`) not yet. 3. Update JSROOT with correspondent changes plus many other improvements,",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11688
https://github.com/root-project/root/issues/11689:1,deployability,patch,patch,1,.patch; https://github.com/gitkraken/vscode-gitlens/blob/main/CHANGELOG.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11689
https://github.com/root-project/root/issues/11689:1,safety,patch,patch,1,.patch; https://github.com/gitkraken/vscode-gitlens/blob/main/CHANGELOG.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11689
https://github.com/root-project/root/issues/11689:1,security,patch,patch,1,.patch; https://github.com/gitkraken/vscode-gitlens/blob/main/CHANGELOG.md,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11689
https://github.com/root-project/root/pull/11690:239,deployability,version,version,239,"[cmake] Current Xcode issues a warning on -undefined dynamic_lookup:; ld: warning: -undefined dynamic_lookup may not work with chained fixups. Rely on explicit linking, and only specify -undefined dynamic_lookup where really needed. v6-26 version of #11432 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11690
https://github.com/root-project/root/pull/11690:8,energy efficiency,Current,Current,8,"[cmake] Current Xcode issues a warning on -undefined dynamic_lookup:; ld: warning: -undefined dynamic_lookup may not work with chained fixups. Rely on explicit linking, and only specify -undefined dynamic_lookup where really needed. v6-26 version of #11432 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11690
https://github.com/root-project/root/pull/11690:239,integrability,version,version,239,"[cmake] Current Xcode issues a warning on -undefined dynamic_lookup:; ld: warning: -undefined dynamic_lookup may not work with chained fixups. Rely on explicit linking, and only specify -undefined dynamic_lookup where really needed. v6-26 version of #11432 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11690
https://github.com/root-project/root/pull/11690:178,interoperability,specif,specify,178,"[cmake] Current Xcode issues a warning on -undefined dynamic_lookup:; ld: warning: -undefined dynamic_lookup may not work with chained fixups. Rely on explicit linking, and only specify -undefined dynamic_lookup where really needed. v6-26 version of #11432 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11690
https://github.com/root-project/root/pull/11690:239,modifiability,version,version,239,"[cmake] Current Xcode issues a warning on -undefined dynamic_lookup:; ld: warning: -undefined dynamic_lookup may not work with chained fixups. Rely on explicit linking, and only specify -undefined dynamic_lookup where really needed. v6-26 version of #11432 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11690
https://github.com/root-project/root/pull/11692:115,testability,hook,hook,115,Adjust TStyle::SavePrimitve; Always use type of argument of setter method - do not mix int and bool. . Add special hook to store boolean argument.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11692
https://github.com/root-project/root/pull/11693:241,deployability,version,version,241,"[v626][cmake] Xcode 14 warns about `-undefined dynamic_lookup`; simply suppress:; ""suppress"" ignores any unresolved symbol. This requires flat_namespace, see man ld. (cherry picked from commit a05d4beded1481a86a65e450826352eb528b03e7). v626 version of #11690 . # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11693
https://github.com/root-project/root/pull/11693:356,deployability,updat,updated,356,"[v626][cmake] Xcode 14 warns about `-undefined dynamic_lookup`; simply suppress:; ""suppress"" ignores any unresolved symbol. This requires flat_namespace, see man ld. (cherry picked from commit a05d4beded1481a86a65e450826352eb528b03e7). v626 version of #11690 . # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11693
https://github.com/root-project/root/pull/11693:241,integrability,version,version,241,"[v626][cmake] Xcode 14 warns about `-undefined dynamic_lookup`; simply suppress:; ""suppress"" ignores any unresolved symbol. This requires flat_namespace, see man ld. (cherry picked from commit a05d4beded1481a86a65e450826352eb528b03e7). v626 version of #11690 . # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11693
https://github.com/root-project/root/pull/11693:241,modifiability,version,version,241,"[v626][cmake] Xcode 14 warns about `-undefined dynamic_lookup`; simply suppress:; ""suppress"" ignores any unresolved symbol. This requires flat_namespace, see man ld. (cherry picked from commit a05d4beded1481a86a65e450826352eb528b03e7). v626 version of #11690 . # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11693
https://github.com/root-project/root/pull/11693:326,safety,test,tested,326,"[v626][cmake] Xcode 14 warns about `-undefined dynamic_lookup`; simply suppress:; ""suppress"" ignores any unresolved symbol. This requires flat_namespace, see man ld. (cherry picked from commit a05d4beded1481a86a65e450826352eb528b03e7). v626 version of #11690 . # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11693
https://github.com/root-project/root/pull/11693:356,safety,updat,updated,356,"[v626][cmake] Xcode 14 warns about `-undefined dynamic_lookup`; simply suppress:; ""suppress"" ignores any unresolved symbol. This requires flat_namespace, see man ld. (cherry picked from commit a05d4beded1481a86a65e450826352eb528b03e7). v626 version of #11690 . # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11693
https://github.com/root-project/root/pull/11693:356,security,updat,updated,356,"[v626][cmake] Xcode 14 warns about `-undefined dynamic_lookup`; simply suppress:; ""suppress"" ignores any unresolved symbol. This requires flat_namespace, see man ld. (cherry picked from commit a05d4beded1481a86a65e450826352eb528b03e7). v626 version of #11690 . # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11693
https://github.com/root-project/root/pull/11693:64,testability,simpl,simply,64,"[v626][cmake] Xcode 14 warns about `-undefined dynamic_lookup`; simply suppress:; ""suppress"" ignores any unresolved symbol. This requires flat_namespace, see man ld. (cherry picked from commit a05d4beded1481a86a65e450826352eb528b03e7). v626 version of #11690 . # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11693
https://github.com/root-project/root/pull/11693:326,testability,test,tested,326,"[v626][cmake] Xcode 14 warns about `-undefined dynamic_lookup`; simply suppress:; ""suppress"" ignores any unresolved symbol. This requires flat_namespace, see man ld. (cherry picked from commit a05d4beded1481a86a65e450826352eb528b03e7). v626 version of #11690 . # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11693
https://github.com/root-project/root/pull/11693:64,usability,simpl,simply,64,"[v626][cmake] Xcode 14 warns about `-undefined dynamic_lookup`; simply suppress:; ""suppress"" ignores any unresolved symbol. This requires flat_namespace, see man ld. (cherry picked from commit a05d4beded1481a86a65e450826352eb528b03e7). v626 version of #11690 . # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11693
https://github.com/root-project/root/issues/11694:68,availability,error,error,68,"STARlight simulation; https://starlight.hepforge.org/ . I found the error which run make but I can't fix that. . ![Screenshot 2022-11-12 141541](https://user-images.githubusercontent.com/116489914/201471628-4dc9d225-537d-40da-a2da-e8d6d4922a79.png). ![Screenshot 2022-11-12 141807](https://user-images.githubusercontent.com/116489914/201471631-aca47583-d887-475b-a267-5f21d44ee3d9.png). ![Screenshot 2022-11-12 141825](https://user-images.githubusercontent.com/116489914/201471634-b3fc3b8d-aa65-4afa-983c-5d1ad9fc7909.png). Please, I need help. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11694
https://github.com/root-project/root/issues/11694:68,performance,error,error,68,"STARlight simulation; https://starlight.hepforge.org/ . I found the error which run make but I can't fix that. . ![Screenshot 2022-11-12 141541](https://user-images.githubusercontent.com/116489914/201471628-4dc9d225-537d-40da-a2da-e8d6d4922a79.png). ![Screenshot 2022-11-12 141807](https://user-images.githubusercontent.com/116489914/201471631-aca47583-d887-475b-a267-5f21d44ee3d9.png). ![Screenshot 2022-11-12 141825](https://user-images.githubusercontent.com/116489914/201471634-b3fc3b8d-aa65-4afa-983c-5d1ad9fc7909.png). Please, I need help. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11694
https://github.com/root-project/root/issues/11694:68,safety,error,error,68,"STARlight simulation; https://starlight.hepforge.org/ . I found the error which run make but I can't fix that. . ![Screenshot 2022-11-12 141541](https://user-images.githubusercontent.com/116489914/201471628-4dc9d225-537d-40da-a2da-e8d6d4922a79.png). ![Screenshot 2022-11-12 141807](https://user-images.githubusercontent.com/116489914/201471631-aca47583-d887-475b-a267-5f21d44ee3d9.png). ![Screenshot 2022-11-12 141825](https://user-images.githubusercontent.com/116489914/201471634-b3fc3b8d-aa65-4afa-983c-5d1ad9fc7909.png). Please, I need help. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11694
https://github.com/root-project/root/issues/11694:10,testability,simul,simulation,10,"STARlight simulation; https://starlight.hepforge.org/ . I found the error which run make but I can't fix that. . ![Screenshot 2022-11-12 141541](https://user-images.githubusercontent.com/116489914/201471628-4dc9d225-537d-40da-a2da-e8d6d4922a79.png). ![Screenshot 2022-11-12 141807](https://user-images.githubusercontent.com/116489914/201471631-aca47583-d887-475b-a267-5f21d44ee3d9.png). ![Screenshot 2022-11-12 141825](https://user-images.githubusercontent.com/116489914/201471634-b3fc3b8d-aa65-4afa-983c-5d1ad9fc7909.png). Please, I need help. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11694
https://github.com/root-project/root/issues/11694:68,usability,error,error,68,"STARlight simulation; https://starlight.hepforge.org/ . I found the error which run make but I can't fix that. . ![Screenshot 2022-11-12 141541](https://user-images.githubusercontent.com/116489914/201471628-4dc9d225-537d-40da-a2da-e8d6d4922a79.png). ![Screenshot 2022-11-12 141807](https://user-images.githubusercontent.com/116489914/201471631-aca47583-d887-475b-a267-5f21d44ee3d9.png). ![Screenshot 2022-11-12 141825](https://user-images.githubusercontent.com/116489914/201471634-b3fc3b8d-aa65-4afa-983c-5d1ad9fc7909.png). Please, I need help. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11694
https://github.com/root-project/root/issues/11694:153,usability,user,user-images,153,"STARlight simulation; https://starlight.hepforge.org/ . I found the error which run make but I can't fix that. . ![Screenshot 2022-11-12 141541](https://user-images.githubusercontent.com/116489914/201471628-4dc9d225-537d-40da-a2da-e8d6d4922a79.png). ![Screenshot 2022-11-12 141807](https://user-images.githubusercontent.com/116489914/201471631-aca47583-d887-475b-a267-5f21d44ee3d9.png). ![Screenshot 2022-11-12 141825](https://user-images.githubusercontent.com/116489914/201471634-b3fc3b8d-aa65-4afa-983c-5d1ad9fc7909.png). Please, I need help. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11694
https://github.com/root-project/root/issues/11694:290,usability,user,user-images,290,"STARlight simulation; https://starlight.hepforge.org/ . I found the error which run make but I can't fix that. . ![Screenshot 2022-11-12 141541](https://user-images.githubusercontent.com/116489914/201471628-4dc9d225-537d-40da-a2da-e8d6d4922a79.png). ![Screenshot 2022-11-12 141807](https://user-images.githubusercontent.com/116489914/201471631-aca47583-d887-475b-a267-5f21d44ee3d9.png). ![Screenshot 2022-11-12 141825](https://user-images.githubusercontent.com/116489914/201471634-b3fc3b8d-aa65-4afa-983c-5d1ad9fc7909.png). Please, I need help. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11694
https://github.com/root-project/root/issues/11694:427,usability,user,user-images,427,"STARlight simulation; https://starlight.hepforge.org/ . I found the error which run make but I can't fix that. . ![Screenshot 2022-11-12 141541](https://user-images.githubusercontent.com/116489914/201471628-4dc9d225-537d-40da-a2da-e8d6d4922a79.png). ![Screenshot 2022-11-12 141807](https://user-images.githubusercontent.com/116489914/201471631-aca47583-d887-475b-a267-5f21d44ee3d9.png). ![Screenshot 2022-11-12 141825](https://user-images.githubusercontent.com/116489914/201471634-b3fc3b8d-aa65-4afa-983c-5d1ad9fc7909.png). Please, I need help. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11694
https://github.com/root-project/root/issues/11694:539,usability,help,help,539,"STARlight simulation; https://starlight.hepforge.org/ . I found the error which run make but I can't fix that. . ![Screenshot 2022-11-12 141541](https://user-images.githubusercontent.com/116489914/201471628-4dc9d225-537d-40da-a2da-e8d6d4922a79.png). ![Screenshot 2022-11-12 141807](https://user-images.githubusercontent.com/116489914/201471631-aca47583-d887-475b-a267-5f21d44ee3d9.png). ![Screenshot 2022-11-12 141825](https://user-images.githubusercontent.com/116489914/201471634-b3fc3b8d-aa65-4afa-983c-5d1ad9fc7909.png). Please, I need help. .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11694
https://github.com/root-project/root/pull/11695:12,availability,redund,redundant,12,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:126,availability,redund,redundancies,126,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:12,deployability,redundan,redundant,12,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:22,deployability,configurat,configuration,22,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:126,deployability,redundan,redundancies,126,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:673,deployability,configurat,configuration,673,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:698,deployability,configurat,configuration,698,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:22,integrability,configur,configuration,22,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:673,integrability,configur,configuration,673,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:698,integrability,configur,configuration,698,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:778,interoperability,format,formats,778,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:22,modifiability,configur,configuration,22,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:673,modifiability,configur,configuration,673,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:698,modifiability,configur,configuration,698,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:289,performance,Synch,Synchronize,289,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:12,reliability,redundan,redundant,12,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:126,reliability,redundan,redundancies,126,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:717,reliability,doe,does,717,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:12,safety,redund,redundant,12,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:126,safety,redund,redundancies,126,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:204,safety,avoid,avoid,204,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:22,security,configur,configuration,22,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:255,security,sign,signature,255,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:646,security,access,access,646,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:673,security,configur,configuration,673,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11695:698,security,configur,configuration,698,"[RF] Remove redundant configuration members of `RooAbsMinimizerFcn`; In https://github.com/root-project/root/pull/11604, many redundancies in the RooMinimizer design became apparent,. and this PR aims to avoid them. The following changes are made:. * The signature of `RooAbsMinimizerFcn::Synchronize()` is changed to not. take a `bool optConst` argument anymore. Ths is because the value of. the argument that was passed by the RooMinimizer instance was always a. member of the `RooAbsMinimizerFcn` anyway. * Change type of `RooMinimizer::Config::verbose` to `bool`, because. `setVerbose()` also takes a `bool` flag. * Give `RooAbsMinimizerFcn` access to the RooMinimizer configuration. such that configuration data does not need to be duplicated. A separate commit in this PR formats the code of the `RooMinimizerFcn`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11695
https://github.com/root-project/root/pull/11696:234,deployability,integr,integrated,234,"[RF] Use of proxy norm sets in RooRealIntegral and RooGenProdProj; In the RooRealIntegral and RooGenProdProj classes, the normalization sets were so far not forwarded to the servers, which resulted in undefined normalization sets for integrated PDFs as reported in #11476. A unit test that covers #11476 and the related JIRA issue ROOT-9436 is also implemented. Closes #11476.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11696
https://github.com/root-project/root/pull/11696:234,integrability,integr,integrated,234,"[RF] Use of proxy norm sets in RooRealIntegral and RooGenProdProj; In the RooRealIntegral and RooGenProdProj classes, the normalization sets were so far not forwarded to the servers, which resulted in undefined normalization sets for integrated PDFs as reported in #11476. A unit test that covers #11476 and the related JIRA issue ROOT-9436 is also implemented. Closes #11476.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11696
https://github.com/root-project/root/pull/11696:12,interoperability,prox,proxy,12,"[RF] Use of proxy norm sets in RooRealIntegral and RooGenProdProj; In the RooRealIntegral and RooGenProdProj classes, the normalization sets were so far not forwarded to the servers, which resulted in undefined normalization sets for integrated PDFs as reported in #11476. A unit test that covers #11476 and the related JIRA issue ROOT-9436 is also implemented. Closes #11476.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11696
https://github.com/root-project/root/pull/11696:234,interoperability,integr,integrated,234,"[RF] Use of proxy norm sets in RooRealIntegral and RooGenProdProj; In the RooRealIntegral and RooGenProdProj classes, the normalization sets were so far not forwarded to the servers, which resulted in undefined normalization sets for integrated PDFs as reported in #11476. A unit test that covers #11476 and the related JIRA issue ROOT-9436 is also implemented. Closes #11476.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11696
https://github.com/root-project/root/pull/11696:234,modifiability,integr,integrated,234,"[RF] Use of proxy norm sets in RooRealIntegral and RooGenProdProj; In the RooRealIntegral and RooGenProdProj classes, the normalization sets were so far not forwarded to the servers, which resulted in undefined normalization sets for integrated PDFs as reported in #11476. A unit test that covers #11476 and the related JIRA issue ROOT-9436 is also implemented. Closes #11476.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11696
https://github.com/root-project/root/pull/11696:234,reliability,integr,integrated,234,"[RF] Use of proxy norm sets in RooRealIntegral and RooGenProdProj; In the RooRealIntegral and RooGenProdProj classes, the normalization sets were so far not forwarded to the servers, which resulted in undefined normalization sets for integrated PDFs as reported in #11476. A unit test that covers #11476 and the related JIRA issue ROOT-9436 is also implemented. Closes #11476.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11696
https://github.com/root-project/root/pull/11696:280,safety,test,test,280,"[RF] Use of proxy norm sets in RooRealIntegral and RooGenProdProj; In the RooRealIntegral and RooGenProdProj classes, the normalization sets were so far not forwarded to the servers, which resulted in undefined normalization sets for integrated PDFs as reported in #11476. A unit test that covers #11476 and the related JIRA issue ROOT-9436 is also implemented. Closes #11476.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11696
https://github.com/root-project/root/pull/11696:234,security,integr,integrated,234,"[RF] Use of proxy norm sets in RooRealIntegral and RooGenProdProj; In the RooRealIntegral and RooGenProdProj classes, the normalization sets were so far not forwarded to the servers, which resulted in undefined normalization sets for integrated PDFs as reported in #11476. A unit test that covers #11476 and the related JIRA issue ROOT-9436 is also implemented. Closes #11476.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11696
https://github.com/root-project/root/pull/11696:234,testability,integr,integrated,234,"[RF] Use of proxy norm sets in RooRealIntegral and RooGenProdProj; In the RooRealIntegral and RooGenProdProj classes, the normalization sets were so far not forwarded to the servers, which resulted in undefined normalization sets for integrated PDFs as reported in #11476. A unit test that covers #11476 and the related JIRA issue ROOT-9436 is also implemented. Closes #11476.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11696
https://github.com/root-project/root/pull/11696:275,testability,unit,unit,275,"[RF] Use of proxy norm sets in RooRealIntegral and RooGenProdProj; In the RooRealIntegral and RooGenProdProj classes, the normalization sets were so far not forwarded to the servers, which resulted in undefined normalization sets for integrated PDFs as reported in #11476. A unit test that covers #11476 and the related JIRA issue ROOT-9436 is also implemented. Closes #11476.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11696
https://github.com/root-project/root/pull/11696:280,testability,test,test,280,"[RF] Use of proxy norm sets in RooRealIntegral and RooGenProdProj; In the RooRealIntegral and RooGenProdProj classes, the normalization sets were so far not forwarded to the servers, which resulted in undefined normalization sets for integrated PDFs as reported in #11476. A unit test that covers #11476 and the related JIRA issue ROOT-9436 is also implemented. Closes #11476.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11696
https://github.com/root-project/root/pull/11696:362,usability,Close,Closes,362,"[RF] Use of proxy norm sets in RooRealIntegral and RooGenProdProj; In the RooRealIntegral and RooGenProdProj classes, the normalization sets were so far not forwarded to the servers, which resulted in undefined normalization sets for integrated PDFs as reported in #11476. A unit test that covers #11476 and the related JIRA issue ROOT-9436 is also implemented. Closes #11476.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11696
https://github.com/root-project/root/pull/11697:24,deployability,integr,integral,24,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:36,deployability,integr,integrated,36,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:89,deployability,integr,integration,89,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:24,integrability,integr,integral,24,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:36,integrability,integr,integrated,36,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:89,integrability,integr,integration,89,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:24,interoperability,integr,integral,24,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:36,interoperability,integr,integrated,36,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:89,interoperability,integr,integration,89,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:24,modifiability,integr,integral,24,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:36,modifiability,integr,integrated,36,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:89,modifiability,integr,integration,89,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:24,reliability,integr,integral,24,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:36,reliability,integr,integrated,36,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:89,reliability,integr,integration,89,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:24,security,integr,integral,24,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:36,security,integr,integrated,36,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:89,security,integr,integration,89,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:113,security,hardcod,hardcoded,113,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:24,testability,integr,integral,24,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:36,testability,integr,integrated,36,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:89,testability,integr,integration,89,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11697:249,usability,Close,Closes,249,"[RF] Correct RooPoisson integral if integrated from a > 0 to infinity; In the RooPoisson integration code, it is hardcoded to return 1.0 if the upper boundary is infinite. But this should only be done if the lower boundary is not greater than zero. Closes #10868.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11697
https://github.com/root-project/root/pull/11698:299,availability,failur,failure,299,"[RF] Account for mutation of client list within `sterilizeClientCaches`; When iterating over the `clients()` to clear the clients caches, the list of clients itself might also be changed during the iteration. We therefore can't do a range-based loop. This fixes the last remaining RooFit ASAN build failure in `testRooAddPdf`. This is a followup to efd468b4947.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11698
https://github.com/root-project/root/pull/11698:293,deployability,build,build,293,"[RF] Account for mutation of client list within `sterilizeClientCaches`; When iterating over the `clients()` to clear the clients caches, the list of clients itself might also be changed during the iteration. We therefore can't do a range-based loop. This fixes the last remaining RooFit ASAN build failure in `testRooAddPdf`. This is a followup to efd468b4947.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11698
https://github.com/root-project/root/pull/11698:299,deployability,fail,failure,299,"[RF] Account for mutation of client list within `sterilizeClientCaches`; When iterating over the `clients()` to clear the clients caches, the list of clients itself might also be changed during the iteration. We therefore can't do a range-based loop. This fixes the last remaining RooFit ASAN build failure in `testRooAddPdf`. This is a followup to efd468b4947.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11698
https://github.com/root-project/root/pull/11698:130,performance,cach,caches,130,"[RF] Account for mutation of client list within `sterilizeClientCaches`; When iterating over the `clients()` to clear the clients caches, the list of clients itself might also be changed during the iteration. We therefore can't do a range-based loop. This fixes the last remaining RooFit ASAN build failure in `testRooAddPdf`. This is a followup to efd468b4947.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11698
https://github.com/root-project/root/pull/11698:299,performance,failur,failure,299,"[RF] Account for mutation of client list within `sterilizeClientCaches`; When iterating over the `clients()` to clear the clients caches, the list of clients itself might also be changed during the iteration. We therefore can't do a range-based loop. This fixes the last remaining RooFit ASAN build failure in `testRooAddPdf`. This is a followup to efd468b4947.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11698
https://github.com/root-project/root/pull/11698:299,reliability,fail,failure,299,"[RF] Account for mutation of client list within `sterilizeClientCaches`; When iterating over the `clients()` to clear the clients caches, the list of clients itself might also be changed during the iteration. We therefore can't do a range-based loop. This fixes the last remaining RooFit ASAN build failure in `testRooAddPdf`. This is a followup to efd468b4947.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11698
https://github.com/root-project/root/pull/11698:311,safety,test,testRooAddPdf,311,"[RF] Account for mutation of client list within `sterilizeClientCaches`; When iterating over the `clients()` to clear the clients caches, the list of clients itself might also be changed during the iteration. We therefore can't do a range-based loop. This fixes the last remaining RooFit ASAN build failure in `testRooAddPdf`. This is a followup to efd468b4947.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11698
https://github.com/root-project/root/pull/11698:311,testability,test,testRooAddPdf,311,"[RF] Account for mutation of client list within `sterilizeClientCaches`; When iterating over the `clients()` to clear the clients caches, the list of clients itself might also be changed during the iteration. We therefore can't do a range-based loop. This fixes the last remaining RooFit ASAN build failure in `testRooAddPdf`. This is a followup to efd468b4947.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11698
https://github.com/root-project/root/pull/11698:112,usability,clear,clear,112,"[RF] Account for mutation of client list within `sterilizeClientCaches`; When iterating over the `clients()` to clear the clients caches, the list of clients itself might also be changed during the iteration. We therefore can't do a range-based loop. This fixes the last remaining RooFit ASAN build failure in `testRooAddPdf`. This is a followup to efd468b4947.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11698
https://github.com/root-project/root/issues/11699:276,deployability,infrastructur,infrastructure,276,Consider enabling LLVM_ENABLE_THREADS; As per https://github.com/root-project/root/blob/a05d4beded1481a86a65e450826352eb528b03e7/interpreter/CMakeLists.txt#L51 we explicitly disable the llvm threading support. That leaves us on a quite untested code especially with the ORCV2 infrastructure which makes use of asynchronous compilation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11699
https://github.com/root-project/root/issues/11699:310,integrability,asynchron,asynchronous,310,Consider enabling LLVM_ENABLE_THREADS; As per https://github.com/root-project/root/blob/a05d4beded1481a86a65e450826352eb528b03e7/interpreter/CMakeLists.txt#L51 we explicitly disable the llvm threading support. That leaves us on a quite untested code especially with the ORCV2 infrastructure which makes use of asynchronous compilation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11699
https://github.com/root-project/root/issues/11699:310,performance,asynch,asynchronous,310,Consider enabling LLVM_ENABLE_THREADS; As per https://github.com/root-project/root/blob/a05d4beded1481a86a65e450826352eb528b03e7/interpreter/CMakeLists.txt#L51 we explicitly disable the llvm threading support. That leaves us on a quite untested code especially with the ORCV2 infrastructure which makes use of asynchronous compilation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11699
https://github.com/root-project/root/issues/11699:201,usability,support,support,201,Consider enabling LLVM_ENABLE_THREADS; As per https://github.com/root-project/root/blob/a05d4beded1481a86a65e450826352eb528b03e7/interpreter/CMakeLists.txt#L51 we explicitly disable the llvm threading support. That leaves us on a quite untested code especially with the ORCV2 infrastructure which makes use of asynchronous compilation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11699
https://github.com/root-project/root/pull/11700:141,modifiability,variab,variable,141,[cmake] Suppress all warnings compiling builtin-zstd:; This fixes a warning seen on macOS:. ```. zstd_compress_superblock.c:412:12: warning: variable 'litLengthSum' set but not used. ```. As we won't fix those there's no need to emit them. (cherry picked from commit 660ef262c064fbb7eaedc560f0466b7d6eb24fd1).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11700
https://github.com/root-project/root/pull/11701:882,availability,redund,redundancy,882,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:321,deployability,compos,composite,321,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:736,deployability,updat,updated,736,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:882,deployability,redundan,redundancy,882,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:305,integrability,compon,components,305,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:305,interoperability,compon,components,305,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:177,modifiability,variab,variable,177,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:305,modifiability,compon,components,305,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:321,modifiability,compos,composite,321,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:882,reliability,redundan,redundancy,882,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:736,safety,updat,updated,736,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:870,safety,avoid,avoids,870,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:882,safety,redund,redundancy,882,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:736,security,updat,updated,736,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:262,usability,hint,hints,262,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:462,usability,hint,hint,462,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11701:984,usability,Close,Closes,984,"[RF] Improve `plotSamplingHint` for the RooHistPdf and the RooHistFunc; In the implementation of `RooHistPdf::plotSamplingHint`, some of the. returned values can be outside the variable definition range. This might. lead to invalid evaluations when the sampling hints are also used to. evaluate other PDF components of a composite PDF, as reported in https://github.com/root-project/root/issues/11482. This commit suggests an improved algorithm for the sampling hint:. consider only bin boundaries that are strictly between the plot limits. within some epsilon, and for the limits just sample two additional. points left and light that are some epsilon aways from the plot limits. The `stressRooFit_ref.root` reference file needs to be updated with this. change, because the sampling changes the RooPlots that are used as. reference objects. The final commit in this PR avoids code redundancy by calling the implementation of `RooHistPdf::plotSamplingHint` also in the `RooHistFunc`. Closes https://github.com/root-project/root/issues/11482.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11701
https://github.com/root-project/root/pull/11702:62,availability,error,error,62,"[tmvagui] Fix snprintf warning:; ```. rulevisCorr.cxx:173:43: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ^. rulevisCorr.cxx:173:21: note: ‘snprintf’ output between 11 and 21 bytes into a destination of size 20. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11702
https://github.com/root-project/root/pull/11702:541,deployability,updat,updated,541,"[tmvagui] Fix snprintf warning:; ```. rulevisCorr.cxx:173:43: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ^. rulevisCorr.cxx:173:21: note: ‘snprintf’ output between 11 and 21 bytes into a destination of size 20. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11702
https://github.com/root-project/root/pull/11702:120,interoperability,format,format,120,"[tmvagui] Fix snprintf warning:; ```. rulevisCorr.cxx:173:43: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ^. rulevisCorr.cxx:173:21: note: ‘snprintf’ output between 11 and 21 bytes into a destination of size 20. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11702
https://github.com/root-project/root/pull/11702:146,interoperability,format,format-truncation,146,"[tmvagui] Fix snprintf warning:; ```. rulevisCorr.cxx:173:43: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ^. rulevisCorr.cxx:173:21: note: ‘snprintf’ output between 11 and 21 bytes into a destination of size 20. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11702
https://github.com/root-project/root/pull/11702:62,performance,error,error,62,"[tmvagui] Fix snprintf warning:; ```. rulevisCorr.cxx:173:43: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ^. rulevisCorr.cxx:173:21: note: ‘snprintf’ output between 11 and 21 bytes into a destination of size 20. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11702
https://github.com/root-project/root/pull/11702:62,safety,error,error,62,"[tmvagui] Fix snprintf warning:; ```. rulevisCorr.cxx:173:43: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ^. rulevisCorr.cxx:173:21: note: ‘snprintf’ output between 11 and 21 bytes into a destination of size 20. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11702
https://github.com/root-project/root/pull/11702:511,safety,test,tested,511,"[tmvagui] Fix snprintf warning:; ```. rulevisCorr.cxx:173:43: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ^. rulevisCorr.cxx:173:21: note: ‘snprintf’ output between 11 and 21 bytes into a destination of size 20. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11702
https://github.com/root-project/root/pull/11702:541,safety,updat,updated,541,"[tmvagui] Fix snprintf warning:; ```. rulevisCorr.cxx:173:43: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ^. rulevisCorr.cxx:173:21: note: ‘snprintf’ output between 11 and 21 bytes into a destination of size 20. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11702
https://github.com/root-project/root/pull/11702:541,security,updat,updated,541,"[tmvagui] Fix snprintf warning:; ```. rulevisCorr.cxx:173:43: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ^. rulevisCorr.cxx:173:21: note: ‘snprintf’ output between 11 and 21 bytes into a destination of size 20. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11702
https://github.com/root-project/root/pull/11702:511,testability,test,tested,511,"[tmvagui] Fix snprintf warning:; ```. rulevisCorr.cxx:173:43: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ^. rulevisCorr.cxx:173:21: note: ‘snprintf’ output between 11 and 21 bytes into a destination of size 20. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11702
https://github.com/root-project/root/pull/11702:62,usability,error,error,62,"[tmvagui] Fix snprintf warning:; ```. rulevisCorr.cxx:173:43: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ^. rulevisCorr.cxx:173:21: note: ‘snprintf’ output between 11 and 21 bytes into a destination of size 20. 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );. | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11702
https://github.com/root-project/root/pull/11703:183,energy efficiency,load,loaded,183,"Do not register LLVMSupport as a library when it should be a component; LLVM component must be registered as LLVM_LINK_COMPONENTS to be compatible with LLVM Dylib. Otherwise they are loaded twice in the final binary, once through LLVM Dylmib and once through individual component, and this results in some options being registered twice. Fix root-project/cling#440.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11703
https://github.com/root-project/root/pull/11703:61,integrability,compon,component,61,"Do not register LLVMSupport as a library when it should be a component; LLVM component must be registered as LLVM_LINK_COMPONENTS to be compatible with LLVM Dylib. Otherwise they are loaded twice in the final binary, once through LLVM Dylmib and once through individual component, and this results in some options being registered twice. Fix root-project/cling#440.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11703
https://github.com/root-project/root/pull/11703:77,integrability,compon,component,77,"Do not register LLVMSupport as a library when it should be a component; LLVM component must be registered as LLVM_LINK_COMPONENTS to be compatible with LLVM Dylib. Otherwise they are loaded twice in the final binary, once through LLVM Dylmib and once through individual component, and this results in some options being registered twice. Fix root-project/cling#440.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11703
https://github.com/root-project/root/pull/11703:270,integrability,compon,component,270,"Do not register LLVMSupport as a library when it should be a component; LLVM component must be registered as LLVM_LINK_COMPONENTS to be compatible with LLVM Dylib. Otherwise they are loaded twice in the final binary, once through LLVM Dylmib and once through individual component, and this results in some options being registered twice. Fix root-project/cling#440.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11703
https://github.com/root-project/root/pull/11703:61,interoperability,compon,component,61,"Do not register LLVMSupport as a library when it should be a component; LLVM component must be registered as LLVM_LINK_COMPONENTS to be compatible with LLVM Dylib. Otherwise they are loaded twice in the final binary, once through LLVM Dylmib and once through individual component, and this results in some options being registered twice. Fix root-project/cling#440.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11703
https://github.com/root-project/root/pull/11703:77,interoperability,compon,component,77,"Do not register LLVMSupport as a library when it should be a component; LLVM component must be registered as LLVM_LINK_COMPONENTS to be compatible with LLVM Dylib. Otherwise they are loaded twice in the final binary, once through LLVM Dylmib and once through individual component, and this results in some options being registered twice. Fix root-project/cling#440.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11703
https://github.com/root-project/root/pull/11703:136,interoperability,compatib,compatible,136,"Do not register LLVMSupport as a library when it should be a component; LLVM component must be registered as LLVM_LINK_COMPONENTS to be compatible with LLVM Dylib. Otherwise they are loaded twice in the final binary, once through LLVM Dylmib and once through individual component, and this results in some options being registered twice. Fix root-project/cling#440.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11703
https://github.com/root-project/root/pull/11703:270,interoperability,compon,component,270,"Do not register LLVMSupport as a library when it should be a component; LLVM component must be registered as LLVM_LINK_COMPONENTS to be compatible with LLVM Dylib. Otherwise they are loaded twice in the final binary, once through LLVM Dylmib and once through individual component, and this results in some options being registered twice. Fix root-project/cling#440.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11703
https://github.com/root-project/root/pull/11703:61,modifiability,compon,component,61,"Do not register LLVMSupport as a library when it should be a component; LLVM component must be registered as LLVM_LINK_COMPONENTS to be compatible with LLVM Dylib. Otherwise they are loaded twice in the final binary, once through LLVM Dylmib and once through individual component, and this results in some options being registered twice. Fix root-project/cling#440.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11703
https://github.com/root-project/root/pull/11703:77,modifiability,compon,component,77,"Do not register LLVMSupport as a library when it should be a component; LLVM component must be registered as LLVM_LINK_COMPONENTS to be compatible with LLVM Dylib. Otherwise they are loaded twice in the final binary, once through LLVM Dylmib and once through individual component, and this results in some options being registered twice. Fix root-project/cling#440.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11703
https://github.com/root-project/root/pull/11703:270,modifiability,compon,component,270,"Do not register LLVMSupport as a library when it should be a component; LLVM component must be registered as LLVM_LINK_COMPONENTS to be compatible with LLVM Dylib. Otherwise they are loaded twice in the final binary, once through LLVM Dylmib and once through individual component, and this results in some options being registered twice. Fix root-project/cling#440.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11703
https://github.com/root-project/root/pull/11703:183,performance,load,loaded,183,"Do not register LLVMSupport as a library when it should be a component; LLVM component must be registered as LLVM_LINK_COMPONENTS to be compatible with LLVM Dylib. Otherwise they are loaded twice in the final binary, once through LLVM Dylmib and once through individual component, and this results in some options being registered twice. Fix root-project/cling#440.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11703
https://github.com/root-project/root/pull/11704:87,availability,failur,failure,87,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:508,availability,operat,operator,508,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:838,availability,Error,Error,838,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:1009,availability,Error,Error,1009,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:81,deployability,build,build,81,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:87,deployability,fail,failure,87,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:201,deployability,build,build,201,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:363,deployability,build,build,363,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:700,deployability,fail,failed,700,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:798,deployability,build,build,798,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:898,deployability,build,build,898,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:1121,deployability,updat,updated,1121,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:575,energy efficiency,alloc,allocator,575,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:708,integrability,Sub,Subprocess,708,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:87,performance,failur,failure,87,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:838,performance,Error,Error,838,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:1009,performance,Error,Error,1009,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:87,reliability,fail,failure,87,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:700,reliability,fail,failed,700,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:0,safety,Avoid,Avoid,0,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:218,safety,test,test,218,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:302,safety,test,test,302,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:380,safety,test,test,380,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:754,safety,test,test,754,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:838,safety,Error,Error,838,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:960,safety,test,test,960,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:1009,safety,Error,Error,1009,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:1091,safety,test,tested,1091,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:1121,safety,updat,updated,1121,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:35,security,access,access,35,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:131,security,access,access,131,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:1121,security,updat,updated,1121,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:218,testability,test,test,218,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:302,testability,test,test,302,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:380,testability,test,test,380,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:669,testability,Assert,Assertion,669,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:754,testability,test,test,754,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:960,testability,test,test,960,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:1091,testability,test,tested,1091,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:838,usability,Error,Error,838,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11704:1009,usability,Error,Error,1009,"Avoid out-of-bounds vector element access; # This Pull request:. This PR fixes a build failure due to out-of-bounds vector element access in SOFIE. ## Changes or fixes:. ~~~~. cd <SRCDIR>/redhat-linux-build/tmva/sofie/test && /usr/bin/cmake -E env ROOTIGNOREPREFIX=1 ./emitFromONNX <SRCDIR>/tmva/sofie/test/input_models/ConvTranspose1d.onnx <SRCDIR>/redhat-linux-build/tmva/sofie/test/ConvTranspose1d. /usr/include/c++/12/bits/stl_vector.h:1123: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = long unsigned int; _Alloc = std::allocator<long unsigned int>; reference = long unsigned int&; size_type = long unsigned int]: Assertion '__n < this->size()' failed. Subprocess aborted. gmake[2]: *** [tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/build.make:84: SofieCompileModels_ONNX] Error 1. gmake[2]: Leaving directory '<SRCDIR>/redhat-linux-build'. gmake[1]: *** [CMakeFiles/Makefile2:50024: tmva/sofie/test/CMakeFiles/SofieCompileModels_ONNX.dir/all] Error 2. gmake[1]: *** Waiting for unfinished jobs.... ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11704
https://github.com/root-project/root/pull/11705:299,deployability,updat,update,299,"[webcanvas] better support of macros from `tutorials/graphics/` folder; 1. Y-axis range with histogram without content. 2. Do not create title when not required (especially for TGraph). 3. Provide ""Clear canvas"", ""Clear pad"" and ""Interrupt"" menu items. 4. Editing line attributes in GED - correctly update on ROOT side. 5. Handling of complex TLatex like `{a}_{b}^{e}^{2}`. 6. Adjust several tutorials. 7. Update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11705
https://github.com/root-project/root/pull/11705:406,deployability,Updat,Update,406,"[webcanvas] better support of macros from `tutorials/graphics/` folder; 1. Y-axis range with histogram without content. 2. Do not create title when not required (especially for TGraph). 3. Provide ""Clear canvas"", ""Clear pad"" and ""Interrupt"" menu items. 4. Editing line attributes in GED - correctly update on ROOT side. 5. Handling of complex TLatex like `{a}_{b}^{e}^{2}`. 6. Adjust several tutorials. 7. Update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11705
https://github.com/root-project/root/pull/11705:111,performance,content,content,111,"[webcanvas] better support of macros from `tutorials/graphics/` folder; 1. Y-axis range with histogram without content. 2. Do not create title when not required (especially for TGraph). 3. Provide ""Clear canvas"", ""Clear pad"" and ""Interrupt"" menu items. 4. Editing line attributes in GED - correctly update on ROOT side. 5. Handling of complex TLatex like `{a}_{b}^{e}^{2}`. 6. Adjust several tutorials. 7. Update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11705
https://github.com/root-project/root/pull/11705:299,safety,updat,update,299,"[webcanvas] better support of macros from `tutorials/graphics/` folder; 1. Y-axis range with histogram without content. 2. Do not create title when not required (especially for TGraph). 3. Provide ""Clear canvas"", ""Clear pad"" and ""Interrupt"" menu items. 4. Editing line attributes in GED - correctly update on ROOT side. 5. Handling of complex TLatex like `{a}_{b}^{e}^{2}`. 6. Adjust several tutorials. 7. Update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11705
https://github.com/root-project/root/pull/11705:335,safety,compl,complex,335,"[webcanvas] better support of macros from `tutorials/graphics/` folder; 1. Y-axis range with histogram without content. 2. Do not create title when not required (especially for TGraph). 3. Provide ""Clear canvas"", ""Clear pad"" and ""Interrupt"" menu items. 4. Editing line attributes in GED - correctly update on ROOT side. 5. Handling of complex TLatex like `{a}_{b}^{e}^{2}`. 6. Adjust several tutorials. 7. Update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11705
https://github.com/root-project/root/pull/11705:406,safety,Updat,Update,406,"[webcanvas] better support of macros from `tutorials/graphics/` folder; 1. Y-axis range with histogram without content. 2. Do not create title when not required (especially for TGraph). 3. Provide ""Clear canvas"", ""Clear pad"" and ""Interrupt"" menu items. 4. Editing line attributes in GED - correctly update on ROOT side. 5. Handling of complex TLatex like `{a}_{b}^{e}^{2}`. 6. Adjust several tutorials. 7. Update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11705
https://github.com/root-project/root/pull/11705:299,security,updat,update,299,"[webcanvas] better support of macros from `tutorials/graphics/` folder; 1. Y-axis range with histogram without content. 2. Do not create title when not required (especially for TGraph). 3. Provide ""Clear canvas"", ""Clear pad"" and ""Interrupt"" menu items. 4. Editing line attributes in GED - correctly update on ROOT side. 5. Handling of complex TLatex like `{a}_{b}^{e}^{2}`. 6. Adjust several tutorials. 7. Update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11705
https://github.com/root-project/root/pull/11705:335,security,compl,complex,335,"[webcanvas] better support of macros from `tutorials/graphics/` folder; 1. Y-axis range with histogram without content. 2. Do not create title when not required (especially for TGraph). 3. Provide ""Clear canvas"", ""Clear pad"" and ""Interrupt"" menu items. 4. Editing line attributes in GED - correctly update on ROOT side. 5. Handling of complex TLatex like `{a}_{b}^{e}^{2}`. 6. Adjust several tutorials. 7. Update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11705
https://github.com/root-project/root/pull/11705:406,security,Updat,Update,406,"[webcanvas] better support of macros from `tutorials/graphics/` folder; 1. Y-axis range with histogram without content. 2. Do not create title when not required (especially for TGraph). 3. Provide ""Clear canvas"", ""Clear pad"" and ""Interrupt"" menu items. 4. Editing line attributes in GED - correctly update on ROOT side. 5. Handling of complex TLatex like `{a}_{b}^{e}^{2}`. 6. Adjust several tutorials. 7. Update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11705
https://github.com/root-project/root/pull/11705:19,usability,support,support,19,"[webcanvas] better support of macros from `tutorials/graphics/` folder; 1. Y-axis range with histogram without content. 2. Do not create title when not required (especially for TGraph). 3. Provide ""Clear canvas"", ""Clear pad"" and ""Interrupt"" menu items. 4. Editing line attributes in GED - correctly update on ROOT side. 5. Handling of complex TLatex like `{a}_{b}^{e}^{2}`. 6. Adjust several tutorials. 7. Update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11705
https://github.com/root-project/root/pull/11705:198,usability,Clear,Clear,198,"[webcanvas] better support of macros from `tutorials/graphics/` folder; 1. Y-axis range with histogram without content. 2. Do not create title when not required (especially for TGraph). 3. Provide ""Clear canvas"", ""Clear pad"" and ""Interrupt"" menu items. 4. Editing line attributes in GED - correctly update on ROOT side. 5. Handling of complex TLatex like `{a}_{b}^{e}^{2}`. 6. Adjust several tutorials. 7. Update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11705
https://github.com/root-project/root/pull/11705:214,usability,Clear,Clear,214,"[webcanvas] better support of macros from `tutorials/graphics/` folder; 1. Y-axis range with histogram without content. 2. Do not create title when not required (especially for TGraph). 3. Provide ""Clear canvas"", ""Clear pad"" and ""Interrupt"" menu items. 4. Editing line attributes in GED - correctly update on ROOT side. 5. Handling of complex TLatex like `{a}_{b}^{e}^{2}`. 6. Adjust several tutorials. 7. Update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11705
https://github.com/root-project/root/pull/11705:241,usability,menu,menu,241,"[webcanvas] better support of macros from `tutorials/graphics/` folder; 1. Y-axis range with histogram without content. 2. Do not create title when not required (especially for TGraph). 3. Provide ""Clear canvas"", ""Clear pad"" and ""Interrupt"" menu items. 4. Editing line attributes in GED - correctly update on ROOT side. 5. Handling of complex TLatex like `{a}_{b}^{e}^{2}`. 6. Adjust several tutorials. 7. Update JSROOT",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11705
https://github.com/root-project/root/pull/11706:110,availability,Error,Error,110,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:140,availability,Error,Error,140,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:43,deployability,fail,fails,43,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:64,deployability,instal,installed,64,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:155,deployability,modul,modules,155,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:288,deployability,Stack,Stack,288,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:327,deployability,modul,modules,327,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:391,deployability,modul,modules,391,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:116,integrability,messag,message,116,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:116,interoperability,messag,message,116,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:272,interoperability,specif,specified,272,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:155,modifiability,modul,modules,155,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:327,modifiability,modul,modules,327,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:391,modifiability,modul,modules,391,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:110,performance,Error,Error,110,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:140,performance,Error,Error,140,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:43,reliability,fail,fails,43,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:110,safety,Error,Error,110,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:140,safety,Error,Error,140,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:155,safety,modul,modules,155,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:327,safety,modul,modules,327,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:391,safety,modul,modules,391,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:110,usability,Error,Error,110,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/pull/11706:140,usability,Error,Error,140,"[cmake] refine find arrow condition; cmake fails if `arrow` not installed while ARROW_VERSION is not defined. Error message is:. ```. CMake Error at cmake/modules/FindArrow.cmake:40 (if):. if given arguments:. ""0"" ""AND"" ""VERSION_GREATER_EQUAL"" ""10.0.0"". Unknown arguments specified. Call Stack (most recent call first):. cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package). cmake/modules/SearchInstalledSoftware.cmake:1062 (find_package). CMakeLists.txt:249 (include). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11706
https://github.com/root-project/root/issues/11707:3251,availability,error,error,3251,"argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3397,availability,Error,Error,3397,"below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3546,availability,error,error,3546," is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3578,availability,error,error,3578,"bmit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-mac",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3724,availability,error,error,3724,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3839,availability,error,error,3839,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:402,deployability,stack,stack,402,"Crash when macro is named main.cpp; ### Describe the bug. - Some users may name their macro main.cpp or main.c, with content `int main() { return 0;}`, but this leads to a crash. ```. root -l main.cpp . root [0] . Processing main.cpp... *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f349a49845a in __GI___wait4 (pid=57745, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f349a49841b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:1150,deployability,Stack,StackTrace,1150," this leads to a crash. ```. root -l main.cpp . root [0] . Processing main.cpp... *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f349a49845a in __GI___wait4 (pid=57745, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f349a49841b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=777",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:2645,deployability,stack,stack,2645,"::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:4498,deployability,stack,stackoverflow,4498,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:4543,deployability,fail,failed-to-call-main-to-execute-the-macro,4543,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:721,energy efficiency,optim,optimized,721,"Crash when macro is named main.cpp; ### Describe the bug. - Some users may name their macro main.cpp or main.c, with content `int main() { return 0;}`, but this leads to a crash. ```. root -l main.cpp . root [0] . Processing main.cpp... *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f349a49845a in __GI___wait4 (pid=57745, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f349a49841b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:871,energy efficiency,optim,optimized,871,"Crash when macro is named main.cpp; ### Describe the bug. - Some users may name their macro main.cpp or main.c, with content `int main() { return 0;}`, but this leads to a crash. ```. root -l main.cpp . root [0] . Processing main.cpp... *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f349a49845a in __GI___wait4 (pid=57745, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f349a49841b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:1076,energy efficiency,core,core,1076,"e their macro main.cpp or main.c, with content `int main() { return 0;}`, but this leads to a crash. ```. root -l main.cpp . root [0] . Processing main.cpp... *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f349a49845a in __GI___wait4 (pid=57745, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f349a49841b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:1200,energy efficiency,core,core,1200," root [0] . Processing main.cpp... *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f349a49845a in __GI___wait4 (pid=57745, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f349a49841b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/mai",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:1360,energy efficiency,core,core,1360,"mentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f349a49845a in __GI___wait4 (pid=57745, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f349a49841b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. =================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:1481,energy efficiency,core,core,1481,"=======. #0 0x00007f349a49845a in __GI___wait4 (pid=57745, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f349a49841b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:1578,energy efficiency,core,core,1578,"8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f349a49841b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:1775,energy efficiency,core,core,1775," options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. =======================",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:1941,energy efficiency,core,core,1941,"in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=77",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3820,energy efficiency,current,current,3820,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:2579,integrability,sub,submit,2579,"/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: erro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3845,integrability,messag,messages,3845,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3357,interoperability,share,shared,3357,"============================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.licen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3845,interoperability,messag,messages,3845,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:117,performance,content,content,117,"Crash when macro is named main.cpp; ### Describe the bug. - Some users may name their macro main.cpp or main.c, with content `int main() { return 0;}`, but this leads to a crash. ```. root -l main.cpp . root [0] . Processing main.cpp... *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f349a49845a in __GI___wait4 (pid=57745, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f349a49841b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:721,performance,optimiz,optimized,721,"Crash when macro is named main.cpp; ### Describe the bug. - Some users may name their macro main.cpp or main.c, with content `int main() { return 0;}`, but this leads to a crash. ```. root -l main.cpp . root [0] . Processing main.cpp... *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f349a49845a in __GI___wait4 (pid=57745, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f349a49841b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:871,performance,optimiz,optimized,871,"Crash when macro is named main.cpp; ### Describe the bug. - Some users may name their macro main.cpp or main.c, with content `int main() { return 0;}`, but this leads to a crash. ```. root -l main.cpp . root [0] . Processing main.cpp... *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f349a49845a in __GI___wait4 (pid=57745, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f349a49841b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3251,performance,error,error,3251,"argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3397,performance,Error,Error,3397,"below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3546,performance,error,error,3546," is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3578,performance,error,error,3578,"bmit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-mac",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3724,performance,error,error,3724,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3839,performance,error,error,3839,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3915,performance,content,content,3915,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:4543,reliability,fail,failed-to-call-main-to-execute-the-macro,4543,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3251,safety,error,error,3251,"argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3397,safety,Error,Error,3397,"below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3546,safety,error,error,3546," is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3578,safety,error,error,3578,"bmit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-mac",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3724,safety,error,error,3724,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3839,safety,error,error,3839,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:1747,security,sign,signum,1747,"_loc. entry=0x7ffe007656d8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this iss",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:1913,security,sign,signum,1913,"171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in hand",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:2002,security,sign,signal,2002,"aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:4127,security,Team,Team,4127,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:408,testability,trace,trace,408,"Crash when macro is named main.cpp; ### Describe the bug. - Some users may name their macro main.cpp or main.c, with content `int main() { return 0;}`, but this leads to a crash. ```. root -l main.cpp . root [0] . Processing main.cpp... *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f349a49845a in __GI___wait4 (pid=57745, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f349a49841b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:2651,testability,trace,trace,2651,"inalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:4481,testability,context,context,4481,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:65,usability,user,users,65,"Crash when macro is named main.cpp; ### Describe the bug. - Some users may name their macro main.cpp or main.c, with content `int main() { return 0;}`, but this leads to a crash. ```. root -l main.cpp . root [0] . Processing main.cpp... *** Break *** segmentation violation. ===========================================================. There was a crash (kSigSegmentationViolation). This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f349a49845a in __GI___wait4 (pid=57745, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0, usage=usage. entry=0x0) at ../sysdeps/unix/sysv/linux/wait4.c:30. #1 0x00007f349a49841b in __GI___waitpid (pid=<optimized out>, stat_loc=stat_loc. entry=0x7ffe007656d8, options=options. entry=0) at ./posix/waitpid.c:38. #2 0x00007f349a3febcb in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:171. #3 0x00007f349ac5bc22 in TUnixSystem::Exec (this=0x5620a717b800, shellcmd=0x5620a837aa50 ""/opt/root_bld/etc/gdb-backtrace.sh 57715 1>&2"") at /opt/root_src/core/unix/src/TUnixSystem.cxx:2104. #4 0x00007f349ac5c4d3 in TUnixSystem::StackTrace (this=0x5620a717b800) at /opt/root_src/core/unix/src/TUnixSystem.cxx:2395. #5 0x00007f349ac60174 in TUnixSystem::DispatchSignals (this=0x5620a717b800, sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3615. #6 0x00007f349ac5790e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:2412,usability,hint,hint,2412,"90e in SigHandler (sig=kSigSegmentationViolation) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:2456,usability,help,help,2456,"tion) at /opt/root_src/core/unix/src/TUnixSystem.cxx:395. #7 0x00007f349ac60081 in sighandler (sig=11) at /opt/root_src/core/unix/src/TUnixSystem.cxx:3586. #8 0x00007f349ac509d0 in textinput::TerminalConfigUnix::HandleSignal (this=0x7f349b144ae0 <textinput::TerminalConfigUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:2727,usability,help,help,2727,"gUnix::Get()::s>, signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:99. #9 0x00007f349ac506ec in (anonymous namespace)::TerminalConfigUnix__handleSignal (signum=11) at /opt/root_src/core/textinput/src/textinput/TerminalConfigUnix.cpp:36. #10 <signal handler called>. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3251,usability,error,error,3251,"argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. The lines below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3397,usability,Error,Error,3397,"below might hint at the cause of the crash. You may get help by asking at the ROOT forum https://root.cern/forum. Only if you are really convinced it is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. -------",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3546,usability,error,error,3546," is a bug in ROOT then please submit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3578,usability,error,error,3578,"bmit a. report at https://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-mac",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3711,usability,behavi,behavior,3711,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3724,usability,error,error,3724,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3755,usability,user,user,3755,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:3839,usability,error,error,3839,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/issues/11707:4332,usability,help,help,4332,"tps://root.cern/bugs Please post the ENTIRE stack trace. from above as an attachment in addition to anything else. that might help us fixing this issue. ===========================================================. #11 __strcmp_avx2 () at ../sysdeps/x86_64/multiarch/strcmp-avx2.S:115. #12 0x00005620a5400eba in handle_notebook_option (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:39. #13 0x00005620a540109c in main (argc=7777040, argv=0x5620a7f7f780) at /opt/root_src/main/src/rmain.cxx:78. ===========================================================. Root > .q. ```. - If compiled, there is no crash, but you get a cryptic error:. ```. root -l main.cpp+. root [0] . Processing main.cpp+... Info in <TUnixSystem::ACLiC>: creating shared library /tmp//tmp/./main_cpp.so. Error in <TApplication::TApplication>: only one instance of TApplication allowed. ```. - If one uses `void main` instead of `int main`, you get this error:. ```. /tmp/main.cpp:2:1: error: 'main' must return 'int'. void main(). ^~~~. int. ```. - If one uses an unnamed macro, the problem is not there. ### Expected behavior. An error should be printed if the user tries to execute such kind of named macros, rather than the current crashes or error messages. ### To Reproduce. - Write a file called `main.cpp` with the content `int main() { return 0;}`. - root -l main.cpp. ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 30 2022, 13:52:01 |. | From heads/master@v6-25-01-4921-gdfd0f52391 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. https://stackoverflow.com/questions/74247557/warning-failed-to-call-main-to-execute-the-macro/74445395#74445395",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11707
https://github.com/root-project/root/pull/11708:50,deployability,fail,fails,50,[cmake] refine find arrow condition [6.26]; cmake fails if `arrow` not installed while ARROW_VERSION is not defined.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11708
https://github.com/root-project/root/pull/11708:71,deployability,instal,installed,71,[cmake] refine find arrow condition [6.26]; cmake fails if `arrow` not installed while ARROW_VERSION is not defined.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11708
https://github.com/root-project/root/pull/11708:50,reliability,fail,fails,50,[cmake] refine find arrow condition [6.26]; cmake fails if `arrow` not installed while ARROW_VERSION is not defined.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11708
https://github.com/root-project/root/pull/11710:25,availability,error,errors,25,"[VecOps] Fix compilation errors in case of RVec of move-only types; Before this commit, calling `RVec<T> v(n)` where `T` is a move-only type would fail to compile because, internally, the operation was implemented in terms of a std::uninitalized_fill of the first `n` elements in the buffer, and std::uninitalized_fill needs the type to be copy-assignable. With this patch we use (a backport of) C++17's. std::uninitialized_value_construct instead for that case, which is works for move-only types as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11710
https://github.com/root-project/root/pull/11710:188,availability,operat,operation,188,"[VecOps] Fix compilation errors in case of RVec of move-only types; Before this commit, calling `RVec<T> v(n)` where `T` is a move-only type would fail to compile because, internally, the operation was implemented in terms of a std::uninitalized_fill of the first `n` elements in the buffer, and std::uninitalized_fill needs the type to be copy-assignable. With this patch we use (a backport of) C++17's. std::uninitialized_value_construct instead for that case, which is works for move-only types as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11710
https://github.com/root-project/root/pull/11710:147,deployability,fail,fail,147,"[VecOps] Fix compilation errors in case of RVec of move-only types; Before this commit, calling `RVec<T> v(n)` where `T` is a move-only type would fail to compile because, internally, the operation was implemented in terms of a std::uninitalized_fill of the first `n` elements in the buffer, and std::uninitalized_fill needs the type to be copy-assignable. With this patch we use (a backport of) C++17's. std::uninitialized_value_construct instead for that case, which is works for move-only types as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11710
https://github.com/root-project/root/pull/11710:367,deployability,patch,patch,367,"[VecOps] Fix compilation errors in case of RVec of move-only types; Before this commit, calling `RVec<T> v(n)` where `T` is a move-only type would fail to compile because, internally, the operation was implemented in terms of a std::uninitalized_fill of the first `n` elements in the buffer, and std::uninitalized_fill needs the type to be copy-assignable. With this patch we use (a backport of) C++17's. std::uninitialized_value_construct instead for that case, which is works for move-only types as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11710
https://github.com/root-project/root/pull/11710:284,integrability,buffer,buffer,284,"[VecOps] Fix compilation errors in case of RVec of move-only types; Before this commit, calling `RVec<T> v(n)` where `T` is a move-only type would fail to compile because, internally, the operation was implemented in terms of a std::uninitalized_fill of the first `n` elements in the buffer, and std::uninitalized_fill needs the type to be copy-assignable. With this patch we use (a backport of) C++17's. std::uninitialized_value_construct instead for that case, which is works for move-only types as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11710
https://github.com/root-project/root/pull/11710:25,performance,error,errors,25,"[VecOps] Fix compilation errors in case of RVec of move-only types; Before this commit, calling `RVec<T> v(n)` where `T` is a move-only type would fail to compile because, internally, the operation was implemented in terms of a std::uninitalized_fill of the first `n` elements in the buffer, and std::uninitalized_fill needs the type to be copy-assignable. With this patch we use (a backport of) C++17's. std::uninitialized_value_construct instead for that case, which is works for move-only types as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11710
https://github.com/root-project/root/pull/11710:147,reliability,fail,fail,147,"[VecOps] Fix compilation errors in case of RVec of move-only types; Before this commit, calling `RVec<T> v(n)` where `T` is a move-only type would fail to compile because, internally, the operation was implemented in terms of a std::uninitalized_fill of the first `n` elements in the buffer, and std::uninitalized_fill needs the type to be copy-assignable. With this patch we use (a backport of) C++17's. std::uninitialized_value_construct instead for that case, which is works for move-only types as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11710
https://github.com/root-project/root/pull/11710:25,safety,error,errors,25,"[VecOps] Fix compilation errors in case of RVec of move-only types; Before this commit, calling `RVec<T> v(n)` where `T` is a move-only type would fail to compile because, internally, the operation was implemented in terms of a std::uninitalized_fill of the first `n` elements in the buffer, and std::uninitalized_fill needs the type to be copy-assignable. With this patch we use (a backport of) C++17's. std::uninitialized_value_construct instead for that case, which is works for move-only types as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11710
https://github.com/root-project/root/pull/11710:367,safety,patch,patch,367,"[VecOps] Fix compilation errors in case of RVec of move-only types; Before this commit, calling `RVec<T> v(n)` where `T` is a move-only type would fail to compile because, internally, the operation was implemented in terms of a std::uninitalized_fill of the first `n` elements in the buffer, and std::uninitalized_fill needs the type to be copy-assignable. With this patch we use (a backport of) C++17's. std::uninitialized_value_construct instead for that case, which is works for move-only types as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11710
https://github.com/root-project/root/pull/11710:367,security,patch,patch,367,"[VecOps] Fix compilation errors in case of RVec of move-only types; Before this commit, calling `RVec<T> v(n)` where `T` is a move-only type would fail to compile because, internally, the operation was implemented in terms of a std::uninitalized_fill of the first `n` elements in the buffer, and std::uninitalized_fill needs the type to be copy-assignable. With this patch we use (a backport of) C++17's. std::uninitialized_value_construct instead for that case, which is works for move-only types as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11710
https://github.com/root-project/root/pull/11710:25,usability,error,errors,25,"[VecOps] Fix compilation errors in case of RVec of move-only types; Before this commit, calling `RVec<T> v(n)` where `T` is a move-only type would fail to compile because, internally, the operation was implemented in terms of a std::uninitalized_fill of the first `n` elements in the buffer, and std::uninitalized_fill needs the type to be copy-assignable. With this patch we use (a backport of) C++17's. std::uninitialized_value_construct instead for that case, which is works for move-only types as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11710
https://github.com/root-project/root/issues/11712:658,availability,operat,operations-with-array-indices,658,"1-1 not the same as (1-1) in TTree arrays indices; ### Describe the bug. When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```. root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""). ************************************************. * Row * energy[1- * energy[(1 * energy[0] *. ************************************************. * 0 * 275.16714 * 326.72375 * 326.72375 *. * 1 * 213.84567 * 261.90139 * 261.90139 *. * 2 * 413.62146 * 415.01107 * 415.01107 *. ```. The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior. `1-1` should be the same as `(1-1)`. ### To Reproduce. Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup. Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11712
https://github.com/root-project/root/issues/11712:861,deployability,version,version,861,"1-1 not the same as (1-1) in TTree arrays indices; ### Describe the bug. When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```. root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""). ************************************************. * Row * energy[1- * energy[(1 * energy[0] *. ************************************************. * 0 * 275.16714 * 326.72375 * 326.72375 *. * 1 * 213.84567 * 261.90139 * 261.90139 *. * 2 * 413.62146 * 415.01107 * 415.01107 *. ```. The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior. `1-1` should be the same as `(1-1)`. ### To Reproduce. Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup. Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11712
https://github.com/root-project/root/issues/11712:116,energy efficiency,Draw,Draw,116,"1-1 not the same as (1-1) in TTree arrays indices; ### Describe the bug. When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```. root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""). ************************************************. * Row * energy[1- * energy[(1 * energy[0] *. ************************************************. * 0 * 275.16714 * 326.72375 * 326.72375 *. * 1 * 213.84567 * 261.90139 * 261.90139 *. * 2 * 413.62146 * 415.01107 * 415.01107 *. ```. The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior. `1-1` should be the same as `(1-1)`. ### To Reproduce. Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup. Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11712
https://github.com/root-project/root/issues/11712:265,energy efficiency,energ,energy,265,"1-1 not the same as (1-1) in TTree arrays indices; ### Describe the bug. When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```. root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""). ************************************************. * Row * energy[1- * energy[(1 * energy[0] *. ************************************************. * 0 * 275.16714 * 326.72375 * 326.72375 *. * 1 * 213.84567 * 261.90139 * 261.90139 *. * 2 * 413.62146 * 415.01107 * 415.01107 *. ```. The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior. `1-1` should be the same as `(1-1)`. ### To Reproduce. Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup. Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11712
https://github.com/root-project/root/issues/11712:277,energy efficiency,energ,energy,277,"1-1 not the same as (1-1) in TTree arrays indices; ### Describe the bug. When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```. root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""). ************************************************. * Row * energy[1- * energy[(1 * energy[0] *. ************************************************. * 0 * 275.16714 * 326.72375 * 326.72375 *. * 1 * 213.84567 * 261.90139 * 261.90139 *. * 2 * 413.62146 * 415.01107 * 415.01107 *. ```. The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior. `1-1` should be the same as `(1-1)`. ### To Reproduce. Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup. Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11712
https://github.com/root-project/root/issues/11712:291,energy efficiency,energ,energy,291,"1-1 not the same as (1-1) in TTree arrays indices; ### Describe the bug. When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```. root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""). ************************************************. * Row * energy[1- * energy[(1 * energy[0] *. ************************************************. * 0 * 275.16714 * 326.72375 * 326.72375 *. * 1 * 213.84567 * 261.90139 * 261.90139 *. * 2 * 413.62146 * 415.01107 * 415.01107 *. ```. The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior. `1-1` should be the same as `(1-1)`. ### To Reproduce. Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup. Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11712
https://github.com/root-project/root/issues/11712:362,energy efficiency,energ,energy,362,"1-1 not the same as (1-1) in TTree arrays indices; ### Describe the bug. When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```. root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""). ************************************************. * Row * energy[1- * energy[(1 * energy[0] *. ************************************************. * 0 * 275.16714 * 326.72375 * 326.72375 *. * 1 * 213.84567 * 261.90139 * 261.90139 *. * 2 * 413.62146 * 415.01107 * 415.01107 *. ```. The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior. `1-1` should be the same as `(1-1)`. ### To Reproduce. Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup. Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11712
https://github.com/root-project/root/issues/11712:374,energy efficiency,energ,energy,374,"1-1 not the same as (1-1) in TTree arrays indices; ### Describe the bug. When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```. root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""). ************************************************. * Row * energy[1- * energy[(1 * energy[0] *. ************************************************. * 0 * 275.16714 * 326.72375 * 326.72375 *. * 1 * 213.84567 * 261.90139 * 261.90139 *. * 2 * 413.62146 * 415.01107 * 415.01107 *. ```. The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior. `1-1` should be the same as `(1-1)`. ### To Reproduce. Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup. Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11712
https://github.com/root-project/root/issues/11712:386,energy efficiency,energ,energy,386,"1-1 not the same as (1-1) in TTree arrays indices; ### Describe the bug. When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```. root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""). ************************************************. * Row * energy[1- * energy[(1 * energy[0] *. ************************************************. * 0 * 275.16714 * 326.72375 * 326.72375 *. * 1 * 213.84567 * 261.90139 * 261.90139 *. * 2 * 413.62146 * 415.01107 * 415.01107 *. ```. The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior. `1-1` should be the same as `(1-1)`. ### To Reproduce. Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup. Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11712
https://github.com/root-project/root/issues/11712:861,integrability,version,version,861,"1-1 not the same as (1-1) in TTree arrays indices; ### Describe the bug. When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```. root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""). ************************************************. * Row * energy[1- * energy[(1 * energy[0] *. ************************************************. * 0 * 275.16714 * 326.72375 * 326.72375 *. * 1 * 213.84567 * 261.90139 * 261.90139 *. * 2 * 413.62146 * 415.01107 * 415.01107 *. ```. The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior. `1-1` should be the same as `(1-1)`. ### To Reproduce. Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup. Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11712
https://github.com/root-project/root/issues/11712:861,modifiability,version,version,861,"1-1 not the same as (1-1) in TTree arrays indices; ### Describe the bug. When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```. root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""). ************************************************. * Row * energy[1- * energy[(1 * energy[0] *. ************************************************. * 0 * 275.16714 * 326.72375 * 326.72375 *. * 1 * 213.84567 * 261.90139 * 261.90139 *. * 2 * 413.62146 * 415.01107 * 415.01107 *. ```. The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior. `1-1` should be the same as `(1-1)`. ### To Reproduce. Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup. Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11712
https://github.com/root-project/root/issues/11712:208,reliability,doe,does,208,"1-1 not the same as (1-1) in TTree arrays indices; ### Describe the bug. When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```. root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""). ************************************************. * Row * energy[1- * energy[(1 * energy[0] *. ************************************************. * 0 * 275.16714 * 326.72375 * 326.72375 *. * 1 * 213.84567 * 261.90139 * 261.90139 *. * 2 * 413.62146 * 415.01107 * 415.01107 *. ```. The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior. `1-1` should be the same as `(1-1)`. ### To Reproduce. Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup. Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11712
https://github.com/root-project/root/issues/11712:78,security,access,accessing,78,"1-1 not the same as (1-1) in TTree arrays indices; ### Describe the bug. When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```. root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""). ************************************************. * Row * energy[1- * energy[(1 * energy[0] *. ************************************************. * 0 * 275.16714 * 326.72375 * 326.72375 *. * 1 * 213.84567 * 261.90139 * 261.90139 *. * 2 * 413.62146 * 415.01107 * 415.01107 *. ```. The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior. `1-1` should be the same as `(1-1)`. ### To Reproduce. Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup. Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11712
https://github.com/root-project/root/issues/11712:809,security,access,access,809,"1-1 not the same as (1-1) in TTree arrays indices; ### Describe the bug. When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```. root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""). ************************************************. * Row * energy[1- * energy[(1 * energy[0] *. ************************************************. * 0 * 275.16714 * 326.72375 * 326.72375 *. * 1 * 213.84567 * 261.90139 * 261.90139 *. * 2 * 413.62146 * 415.01107 * 415.01107 *. ```. The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior. `1-1` should be the same as `(1-1)`. ### To Reproduce. Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup. Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11712
https://github.com/root-project/root/issues/11712:709,usability,behavi,behavior,709,"1-1 not the same as (1-1) in TTree arrays indices; ### Describe the bug. When accessing arrays in TTree::Scan() (or Draw()) if the array index is a formula like 1-1 it should be enclosed by ""()"" otherwise it does not work as expected. See:. ```. root [3] t1->Scan(""energy[1-1]:energy[(1-1)]:energy[0]""). ************************************************. * Row * energy[1- * energy[(1 * energy[0] *. ************************************************. * 0 * 275.16714 * 326.72375 * 326.72375 *. * 1 * 213.84567 * 261.90139 * 261.90139 *. * 2 * 413.62146 * 415.01107 * 415.01107 *. ```. The problem was [posted on the forum](https://root-forum.cern.ch/t/strange-operations-with-array-indices/52384). ### Expected behavior. `1-1` should be the same as `(1-1)`. ### To Reproduce. Use any tree with an array `x` and access` x[1-1]` and `x[(1-1)]`. ### Setup. Any ROOT version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11712
https://github.com/root-project/root/issues/11713:255,availability,error,error,255,Add support for Python 3.11; According to the list of changes in Python 3.11:. . https://docs.python.org/3.11/whatsnew/3.11.html. . types defined with the Py_TPFLAGS_HAVE_GC flag set but with no. traverse function (PyTypeObject.tp_traverse) will cause an error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11713
https://github.com/root-project/root/issues/11713:255,performance,error,error,255,Add support for Python 3.11; According to the list of changes in Python 3.11:. . https://docs.python.org/3.11/whatsnew/3.11.html. . types defined with the Py_TPFLAGS_HAVE_GC flag set but with no. traverse function (PyTypeObject.tp_traverse) will cause an error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11713
https://github.com/root-project/root/issues/11713:255,safety,error,error,255,Add support for Python 3.11; According to the list of changes in Python 3.11:. . https://docs.python.org/3.11/whatsnew/3.11.html. . types defined with the Py_TPFLAGS_HAVE_GC flag set but with no. traverse function (PyTypeObject.tp_traverse) will cause an error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11713
https://github.com/root-project/root/issues/11713:4,usability,support,support,4,Add support for Python 3.11; According to the list of changes in Python 3.11:. . https://docs.python.org/3.11/whatsnew/3.11.html. . types defined with the Py_TPFLAGS_HAVE_GC flag set but with no. traverse function (PyTypeObject.tp_traverse) will cause an error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11713
https://github.com/root-project/root/issues/11713:255,usability,error,error,255,Add support for Python 3.11; According to the list of changes in Python 3.11:. . https://docs.python.org/3.11/whatsnew/3.11.html. . types defined with the Py_TPFLAGS_HAVE_GC flag set but with no. traverse function (PyTypeObject.tp_traverse) will cause an error.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11713
https://github.com/root-project/root/issues/11714:93,performance,disk,disk,93,ACLiC broken on macOS 13 Ventura; ACLiC tries to link against libraries that do not exist on disk. And we get warnings:. ```. ld: warning: -undefined dynamic_lookup may not work with chained fixups. ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11714
https://github.com/root-project/root/pull/11715:260,availability,down,download,260,"Cling's Read The Docs webpage; # This Pull request: . I created a Read The Docs (RTD) webpage for Cling. This project derives from a discussion I had in August 2022 with @vgvassilev, @davidlange6 , and @Axel-Naumann. . The RTD webpage DOES NOT include Cling's download link, how to build, last release, or other developer-related info. These info will stay on a dedicated Cling's Github page (Axel, David, Vassil, you should discuss whether the Cling's GitHub webpage will stay in within ROOT, or it will be a separate one). . Cling's RTD webpage includes, instead, a broader description of the Cling project, history of development, insights about the concepts of interpreter, JIT compilation, REPL, a short description of all Cling-based-projects, and a list of existing literature. . ## Checklist:. - [ ] Cling RTD webpage should include a link to Cling's Github webpage. We should discuss whether the GitHub webpage will be this: https://github.com/root-project/cling or another one (if we want to separate Cling from ROOT). - [ ] (https://root.cern/cling/) should be deleted. - [ ] (https://rawgit.com/root-project/cling/master/www/index.html) should be deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11715
https://github.com/root-project/root/pull/11715:282,deployability,build,build,282,"Cling's Read The Docs webpage; # This Pull request: . I created a Read The Docs (RTD) webpage for Cling. This project derives from a discussion I had in August 2022 with @vgvassilev, @davidlange6 , and @Axel-Naumann. . The RTD webpage DOES NOT include Cling's download link, how to build, last release, or other developer-related info. These info will stay on a dedicated Cling's Github page (Axel, David, Vassil, you should discuss whether the Cling's GitHub webpage will stay in within ROOT, or it will be a separate one). . Cling's RTD webpage includes, instead, a broader description of the Cling project, history of development, insights about the concepts of interpreter, JIT compilation, REPL, a short description of all Cling-based-projects, and a list of existing literature. . ## Checklist:. - [ ] Cling RTD webpage should include a link to Cling's Github webpage. We should discuss whether the GitHub webpage will be this: https://github.com/root-project/cling or another one (if we want to separate Cling from ROOT). - [ ] (https://root.cern/cling/) should be deleted. - [ ] (https://rawgit.com/root-project/cling/master/www/index.html) should be deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11715
https://github.com/root-project/root/pull/11715:294,deployability,releas,release,294,"Cling's Read The Docs webpage; # This Pull request: . I created a Read The Docs (RTD) webpage for Cling. This project derives from a discussion I had in August 2022 with @vgvassilev, @davidlange6 , and @Axel-Naumann. . The RTD webpage DOES NOT include Cling's download link, how to build, last release, or other developer-related info. These info will stay on a dedicated Cling's Github page (Axel, David, Vassil, you should discuss whether the Cling's GitHub webpage will stay in within ROOT, or it will be a separate one). . Cling's RTD webpage includes, instead, a broader description of the Cling project, history of development, insights about the concepts of interpreter, JIT compilation, REPL, a short description of all Cling-based-projects, and a list of existing literature. . ## Checklist:. - [ ] Cling RTD webpage should include a link to Cling's Github webpage. We should discuss whether the GitHub webpage will be this: https://github.com/root-project/cling or another one (if we want to separate Cling from ROOT). - [ ] (https://root.cern/cling/) should be deleted. - [ ] (https://rawgit.com/root-project/cling/master/www/index.html) should be deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11715
https://github.com/root-project/root/pull/11715:235,reliability,DOE,DOES,235,"Cling's Read The Docs webpage; # This Pull request: . I created a Read The Docs (RTD) webpage for Cling. This project derives from a discussion I had in August 2022 with @vgvassilev, @davidlange6 , and @Axel-Naumann. . The RTD webpage DOES NOT include Cling's download link, how to build, last release, or other developer-related info. These info will stay on a dedicated Cling's Github page (Axel, David, Vassil, you should discuss whether the Cling's GitHub webpage will stay in within ROOT, or it will be a separate one). . Cling's RTD webpage includes, instead, a broader description of the Cling project, history of development, insights about the concepts of interpreter, JIT compilation, REPL, a short description of all Cling-based-projects, and a list of existing literature. . ## Checklist:. - [ ] Cling RTD webpage should include a link to Cling's Github webpage. We should discuss whether the GitHub webpage will be this: https://github.com/root-project/cling or another one (if we want to separate Cling from ROOT). - [ ] (https://root.cern/cling/) should be deleted. - [ ] (https://rawgit.com/root-project/cling/master/www/index.html) should be deleted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11715
https://github.com/root-project/root/pull/11716:58,deployability,configurat,configuration,58,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:727,deployability,configurat,configuration,727,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:826,deployability,updat,updated,826,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:58,integrability,configur,configuration,58,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:272,integrability,sub,submit,272,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:727,integrability,configur,configuration,727,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:58,modifiability,configur,configuration,58,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:727,modifiability,configur,configuration,727,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:113,reliability,doe,does,113,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:196,safety,test,test,196,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:717,safety,test,test,717,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:744,safety,test,testLikelihoodGradientJob,744,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:796,safety,test,tested,796,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:826,safety,updat,updated,826,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:58,security,configur,configuration,58,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:727,security,configur,configuration,727,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:826,security,updat,updated,826,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:36,testability,simpl,simplify,36,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:196,testability,test,test,196,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:482,testability,plan,plan,482,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:618,testability,simpl,simplifies,618,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:702,testability,simpl,simplifies,702,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:717,testability,test,test,717,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:744,testability,test,testLikelihoodGradientJob,744,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:796,testability,test,tested,796,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:36,usability,simpl,simplify,36,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:618,usability,simpl,simplifies,618,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11716:702,usability,simpl,simplifies,702,"[RF] remove RooGradMinimizerFcn and simplify RooMinimizer configuration; # This Pull request:. Note that this PR does not need to be merged, although it could be, I'm mainly putting it up here to test it on CI. I needed it to rebase another branch on top of, which I will submit for a PR soon too. I leave it up to you whether you want to consider these two things separately. ## Changes or fixes:. The `RooGradMinimizerFcn` was not necessary anymore, so it has been removed. We do plan to repurpose its code later on for a ""`LikelihoodGradientSerial`"" implementation of `LikelihoodGradientWrapper`. This removal also simplifies construction of `RooMinimizer`, which no longer needs it. That, in turn, simplifies the test case configuration in testLikelihoodGradientJob.cpp. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11716
https://github.com/root-project/root/pull/11717:797,deployability,updat,updated,797,"[RF] Fixes for using MultiProcess LikelihoodJob; # This Pull request:. Note that this PR includes the commit of #11716. ## Changes or fixes:. Apart from the stuff in #11716, this PR fixes the additions previously made in #10966. The implementation there had some bugs, most importantly:. 1. Creation went wrong when using MultiProcess-mode for the gradient, but serial mode for the likelihood. This led to larger differences from full-serial mode than expected. We can now tighten expectations in tests again due to this fix. 2. Double-MultiProcess-mode (both gradient and likelihood) did not work when using offsetting, because setOffsetting would not propagate to worker processes correctly for all involved objects. This is now fixed as well. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11717
https://github.com/root-project/root/pull/11717:497,safety,test,tests,497,"[RF] Fixes for using MultiProcess LikelihoodJob; # This Pull request:. Note that this PR includes the commit of #11716. ## Changes or fixes:. Apart from the stuff in #11716, this PR fixes the additions previously made in #10966. The implementation there had some bugs, most importantly:. 1. Creation went wrong when using MultiProcess-mode for the gradient, but serial mode for the likelihood. This led to larger differences from full-serial mode than expected. We can now tighten expectations in tests again due to this fix. 2. Double-MultiProcess-mode (both gradient and likelihood) did not work when using offsetting, because setOffsetting would not propagate to worker processes correctly for all involved objects. This is now fixed as well. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11717
https://github.com/root-project/root/pull/11717:767,safety,test,tested,767,"[RF] Fixes for using MultiProcess LikelihoodJob; # This Pull request:. Note that this PR includes the commit of #11716. ## Changes or fixes:. Apart from the stuff in #11716, this PR fixes the additions previously made in #10966. The implementation there had some bugs, most importantly:. 1. Creation went wrong when using MultiProcess-mode for the gradient, but serial mode for the likelihood. This led to larger differences from full-serial mode than expected. We can now tighten expectations in tests again due to this fix. 2. Double-MultiProcess-mode (both gradient and likelihood) did not work when using offsetting, because setOffsetting would not propagate to worker processes correctly for all involved objects. This is now fixed as well. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11717
https://github.com/root-project/root/pull/11717:797,safety,updat,updated,797,"[RF] Fixes for using MultiProcess LikelihoodJob; # This Pull request:. Note that this PR includes the commit of #11716. ## Changes or fixes:. Apart from the stuff in #11716, this PR fixes the additions previously made in #10966. The implementation there had some bugs, most importantly:. 1. Creation went wrong when using MultiProcess-mode for the gradient, but serial mode for the likelihood. This led to larger differences from full-serial mode than expected. We can now tighten expectations in tests again due to this fix. 2. Double-MultiProcess-mode (both gradient and likelihood) did not work when using offsetting, because setOffsetting would not propagate to worker processes correctly for all involved objects. This is now fixed as well. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11717
https://github.com/root-project/root/pull/11717:797,security,updat,updated,797,"[RF] Fixes for using MultiProcess LikelihoodJob; # This Pull request:. Note that this PR includes the commit of #11716. ## Changes or fixes:. Apart from the stuff in #11716, this PR fixes the additions previously made in #10966. The implementation there had some bugs, most importantly:. 1. Creation went wrong when using MultiProcess-mode for the gradient, but serial mode for the likelihood. This led to larger differences from full-serial mode than expected. We can now tighten expectations in tests again due to this fix. 2. Double-MultiProcess-mode (both gradient and likelihood) did not work when using offsetting, because setOffsetting would not propagate to worker processes correctly for all involved objects. This is now fixed as well. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11717
https://github.com/root-project/root/pull/11717:497,testability,test,tests,497,"[RF] Fixes for using MultiProcess LikelihoodJob; # This Pull request:. Note that this PR includes the commit of #11716. ## Changes or fixes:. Apart from the stuff in #11716, this PR fixes the additions previously made in #10966. The implementation there had some bugs, most importantly:. 1. Creation went wrong when using MultiProcess-mode for the gradient, but serial mode for the likelihood. This led to larger differences from full-serial mode than expected. We can now tighten expectations in tests again due to this fix. 2. Double-MultiProcess-mode (both gradient and likelihood) did not work when using offsetting, because setOffsetting would not propagate to worker processes correctly for all involved objects. This is now fixed as well. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11717
https://github.com/root-project/root/pull/11717:767,testability,test,tested,767,"[RF] Fixes for using MultiProcess LikelihoodJob; # This Pull request:. Note that this PR includes the commit of #11716. ## Changes or fixes:. Apart from the stuff in #11716, this PR fixes the additions previously made in #10966. The implementation there had some bugs, most importantly:. 1. Creation went wrong when using MultiProcess-mode for the gradient, but serial mode for the likelihood. This led to larger differences from full-serial mode than expected. We can now tighten expectations in tests again due to this fix. 2. Double-MultiProcess-mode (both gradient and likelihood) did not work when using offsetting, because setOffsetting would not propagate to worker processes correctly for all involved objects. This is now fixed as well. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11717
https://github.com/root-project/root/pull/11718:125,deployability,automat,automatically,125,Use Canvas.UseScreenFactor on high resolution screens; Allow to use the `Canvas.UseScreenFactor` entry in `system.rootrc` to automatically resize the `TCanvas` and `TBrowser` on high resolution displays,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11718
https://github.com/root-project/root/pull/11718:125,testability,automat,automatically,125,Use Canvas.UseScreenFactor on high resolution screens; Allow to use the `Canvas.UseScreenFactor` entry in `system.rootrc` to automatically resize the `TCanvas` and `TBrowser` on high resolution displays,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11718
https://github.com/root-project/root/pull/11719:13,availability,error,error,13,"[IO] Improve error message when no TFile::Open for remote files ; In order to mark the file as zombie when this happens, I had to change a `goto zombie` into calls to a dedicated helper lambda (done in a separate commit). Otherwise I would have had to move around a few lines just so that the compiler would let me jump from the sanity check to the zombie label (compilers don't allow jumps across variable initializations). This fixes https://github.com/root-project/root/issues/10039.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11719
https://github.com/root-project/root/pull/11719:19,integrability,messag,message,19,"[IO] Improve error message when no TFile::Open for remote files ; In order to mark the file as zombie when this happens, I had to change a `goto zombie` into calls to a dedicated helper lambda (done in a separate commit). Otherwise I would have had to move around a few lines just so that the compiler would let me jump from the sanity check to the zombie label (compilers don't allow jumps across variable initializations). This fixes https://github.com/root-project/root/issues/10039.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11719
https://github.com/root-project/root/pull/11719:19,interoperability,messag,message,19,"[IO] Improve error message when no TFile::Open for remote files ; In order to mark the file as zombie when this happens, I had to change a `goto zombie` into calls to a dedicated helper lambda (done in a separate commit). Otherwise I would have had to move around a few lines just so that the compiler would let me jump from the sanity check to the zombie label (compilers don't allow jumps across variable initializations). This fixes https://github.com/root-project/root/issues/10039.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11719
https://github.com/root-project/root/pull/11719:398,modifiability,variab,variable,398,"[IO] Improve error message when no TFile::Open for remote files ; In order to mark the file as zombie when this happens, I had to change a `goto zombie` into calls to a dedicated helper lambda (done in a separate commit). Otherwise I would have had to move around a few lines just so that the compiler would let me jump from the sanity check to the zombie label (compilers don't allow jumps across variable initializations). This fixes https://github.com/root-project/root/issues/10039.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11719
https://github.com/root-project/root/pull/11719:13,performance,error,error,13,"[IO] Improve error message when no TFile::Open for remote files ; In order to mark the file as zombie when this happens, I had to change a `goto zombie` into calls to a dedicated helper lambda (done in a separate commit). Otherwise I would have had to move around a few lines just so that the compiler would let me jump from the sanity check to the zombie label (compilers don't allow jumps across variable initializations). This fixes https://github.com/root-project/root/issues/10039.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11719
https://github.com/root-project/root/pull/11719:13,safety,error,error,13,"[IO] Improve error message when no TFile::Open for remote files ; In order to mark the file as zombie when this happens, I had to change a `goto zombie` into calls to a dedicated helper lambda (done in a separate commit). Otherwise I would have had to move around a few lines just so that the compiler would let me jump from the sanity check to the zombie label (compilers don't allow jumps across variable initializations). This fixes https://github.com/root-project/root/issues/10039.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11719
https://github.com/root-project/root/pull/11719:329,safety,sanit,sanity,329,"[IO] Improve error message when no TFile::Open for remote files ; In order to mark the file as zombie when this happens, I had to change a `goto zombie` into calls to a dedicated helper lambda (done in a separate commit). Otherwise I would have had to move around a few lines just so that the compiler would let me jump from the sanity check to the zombie label (compilers don't allow jumps across variable initializations). This fixes https://github.com/root-project/root/issues/10039.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11719
https://github.com/root-project/root/pull/11719:329,security,sanit,sanity,329,"[IO] Improve error message when no TFile::Open for remote files ; In order to mark the file as zombie when this happens, I had to change a `goto zombie` into calls to a dedicated helper lambda (done in a separate commit). Otherwise I would have had to move around a few lines just so that the compiler would let me jump from the sanity check to the zombie label (compilers don't allow jumps across variable initializations). This fixes https://github.com/root-project/root/issues/10039.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11719
https://github.com/root-project/root/pull/11719:13,usability,error,error,13,"[IO] Improve error message when no TFile::Open for remote files ; In order to mark the file as zombie when this happens, I had to change a `goto zombie` into calls to a dedicated helper lambda (done in a separate commit). Otherwise I would have had to move around a few lines just so that the compiler would let me jump from the sanity check to the zombie label (compilers don't allow jumps across variable initializations). This fixes https://github.com/root-project/root/issues/10039.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11719
https://github.com/root-project/root/pull/11719:179,usability,help,helper,179,"[IO] Improve error message when no TFile::Open for remote files ; In order to mark the file as zombie when this happens, I had to change a `goto zombie` into calls to a dedicated helper lambda (done in a separate commit). Otherwise I would have had to move around a few lines just so that the compiler would let me jump from the sanity check to the zombie label (compilers don't allow jumps across variable initializations). This fixes https://github.com/root-project/root/issues/10039.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11719
https://github.com/root-project/root/pull/11721:149,energy efficiency,cpu,cpu,149,[tmva][sofie] Exclude SOFIE test when blas is not found; This Pull request exclude running of SOFIE tests when Blas is not found (this is when `tmva-cpu=Off`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11721
https://github.com/root-project/root/pull/11721:149,performance,cpu,cpu,149,[tmva][sofie] Exclude SOFIE test when blas is not found; This Pull request exclude running of SOFIE tests when Blas is not found (this is when `tmva-cpu=Off`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11721
https://github.com/root-project/root/pull/11721:28,safety,test,test,28,[tmva][sofie] Exclude SOFIE test when blas is not found; This Pull request exclude running of SOFIE tests when Blas is not found (this is when `tmva-cpu=Off`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11721
https://github.com/root-project/root/pull/11721:100,safety,test,tests,100,[tmva][sofie] Exclude SOFIE test when blas is not found; This Pull request exclude running of SOFIE tests when Blas is not found (this is when `tmva-cpu=Off`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11721
https://github.com/root-project/root/pull/11721:28,testability,test,test,28,[tmva][sofie] Exclude SOFIE test when blas is not found; This Pull request exclude running of SOFIE tests when Blas is not found (this is when `tmva-cpu=Off`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11721
https://github.com/root-project/root/pull/11721:100,testability,test,tests,100,[tmva][sofie] Exclude SOFIE test when blas is not found; This Pull request exclude running of SOFIE tests when Blas is not found (this is when `tmva-cpu=Off`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11721
https://github.com/root-project/root/issues/11722:166,availability,error,errors,166,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:805,availability,recov,recover,805,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:1367,availability,down,download,1367,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:805,deployability,recov,recover,805,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:1186,deployability,version,version,1186,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:1229,deployability,build,build,1229,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:1333,deployability,depend,dependencies,1333,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:30,energy efficiency,load,loading,30,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:506,energy efficiency,load,loading,506,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:712,energy efficiency,load,loading,712,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:770,energy efficiency,load,loading,770,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:1042,energy efficiency,Load,Loading,1042,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:1114,energy efficiency,load,loadFinderBinning,1114,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:1186,integrability,version,version,1186,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:1333,integrability,depend,dependencies,1333,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:1186,modifiability,version,version,1186,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:1333,modifiability,depend,dependencies,1333,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:30,performance,load,loading,30,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:166,performance,error,errors,166,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:506,performance,load,loading,506,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:712,performance,load,loading,712,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:770,performance,load,loading,770,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:1042,performance,Load,Loading,1042,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:1114,performance,load,loadFinderBinning,1114,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:805,reliability,recov,recover,805,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:166,safety,error,errors,166,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:805,safety,recov,recover,805,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:1333,safety,depend,dependencies,1333,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:805,security,recov,recover,805,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:1333,testability,depend,dependencies,1333,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:166,usability,error,errors,166,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11722:740,usability,behavi,behavior,740,"Elements with zero size after loading a std::array<std::array<std::vector<std::vector<Int_t>>; ### Existing issues. On the forums we didn't find any existing issues, errors, bug or Jira ticket related to this. @rpezzi . ### Describe the bug. We are creating an object of the type: e.g. `std::array<std::array<std::vector<std::vector<Int_t>>, 4>, 4>`. Then, we fill it in a loop and ensure all elements of a size different than 0 and we write it in a root file using `WriteObjectAny`. However, later we are loading this object using functionalities from ROOT `GetObjectChecked`, and we are getting elements with size 0. We use exactly the same function to print the zero elements if existing, at the creation and loading level. ### Expected behavior. We expect that when loading later this object we fully recover it without empty elements (without size 0). ### To Reproduce. 1. Open root in a terminal, compile the macro: `.L example.C`. 2. Create the object, fill it, and print the elements with size zero if exisiting: `finderBinner()`. 3. Loading the object and print the elements with size zero if exisiting: `loadFinderBinning()`. ### Setup. 1. ROOT 6.26/04 . 2. macOSx64 Monterey version 12.6. 3. ROOT built from `aliBuild build O2 --defaults o2`, on Nov 09 2022, alibuild software used for the ALICE experiment @CERN with all dependencies . ### Code . You can download the code `example.C` which reproduce the bug here at this cernbox link:. https://cernbox.cern.ch/s/fbiqsIdjVUqYISe.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11722
https://github.com/root-project/root/issues/11723:12,energy efficiency,Draw,DrawMap,12,[IO] TFile::DrawMap plots can be improved; This is what I get calling `DrawMap` on `hsimple.root` with current master:. ![image](https://user-images.githubusercontent.com/10999034/202241538-7a33c2c6-aad8-4208-abb7-18076271374a.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11723
https://github.com/root-project/root/issues/11723:71,energy efficiency,Draw,DrawMap,71,[IO] TFile::DrawMap plots can be improved; This is what I get calling `DrawMap` on `hsimple.root` with current master:. ![image](https://user-images.githubusercontent.com/10999034/202241538-7a33c2c6-aad8-4208-abb7-18076271374a.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11723
https://github.com/root-project/root/issues/11723:103,energy efficiency,current,current,103,[IO] TFile::DrawMap plots can be improved; This is what I get calling `DrawMap` on `hsimple.root` with current master:. ![image](https://user-images.githubusercontent.com/10999034/202241538-7a33c2c6-aad8-4208-abb7-18076271374a.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11723
https://github.com/root-project/root/issues/11723:137,usability,user,user-images,137,[IO] TFile::DrawMap plots can be improved; This is what I get calling `DrawMap` on `hsimple.root` with current master:. ![image](https://user-images.githubusercontent.com/10999034/202241538-7a33c2c6-aad8-4208-abb7-18076271374a.png).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11723
https://github.com/root-project/root/pull/11724:103,reliability,doe,does,103,Correct wrong filename; # This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:. ~~~~. $ ls tree/dataframe/test/*.py. tree/dataframe/test/dataframe_cache.py. tree/dataframe/test/dataframe_datasetspec.py. tree/dataframe/test/dataframe_histograms.py. tree/dataframe/test/dataframe_merge_results.py. tree/dataframe/test/dataframe_misc.py. ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11724
https://github.com/root-project/root/pull/11724:136,safety,test,test,136,Correct wrong filename; # This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:. ~~~~. $ ls tree/dataframe/test/*.py. tree/dataframe/test/dataframe_cache.py. tree/dataframe/test/dataframe_datasetspec.py. tree/dataframe/test/dataframe_histograms.py. tree/dataframe/test/dataframe_merge_results.py. tree/dataframe/test/dataframe_misc.py. ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11724
https://github.com/root-project/root/pull/11724:169,safety,test,test,169,Correct wrong filename; # This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:. ~~~~. $ ls tree/dataframe/test/*.py. tree/dataframe/test/dataframe_cache.py. tree/dataframe/test/dataframe_datasetspec.py. tree/dataframe/test/dataframe_histograms.py. tree/dataframe/test/dataframe_merge_results.py. tree/dataframe/test/dataframe_misc.py. ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11724
https://github.com/root-project/root/pull/11724:195,safety,test,test,195,Correct wrong filename; # This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:. ~~~~. $ ls tree/dataframe/test/*.py. tree/dataframe/test/dataframe_cache.py. tree/dataframe/test/dataframe_datasetspec.py. tree/dataframe/test/dataframe_histograms.py. tree/dataframe/test/dataframe_merge_results.py. tree/dataframe/test/dataframe_misc.py. ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11724
https://github.com/root-project/root/pull/11724:235,safety,test,test,235,Correct wrong filename; # This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:. ~~~~. $ ls tree/dataframe/test/*.py. tree/dataframe/test/dataframe_cache.py. tree/dataframe/test/dataframe_datasetspec.py. tree/dataframe/test/dataframe_histograms.py. tree/dataframe/test/dataframe_merge_results.py. tree/dataframe/test/dataframe_misc.py. ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11724
https://github.com/root-project/root/pull/11724:281,safety,test,test,281,Correct wrong filename; # This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:. ~~~~. $ ls tree/dataframe/test/*.py. tree/dataframe/test/dataframe_cache.py. tree/dataframe/test/dataframe_datasetspec.py. tree/dataframe/test/dataframe_histograms.py. tree/dataframe/test/dataframe_merge_results.py. tree/dataframe/test/dataframe_misc.py. ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11724
https://github.com/root-project/root/pull/11724:326,safety,test,test,326,Correct wrong filename; # This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:. ~~~~. $ ls tree/dataframe/test/*.py. tree/dataframe/test/dataframe_cache.py. tree/dataframe/test/dataframe_datasetspec.py. tree/dataframe/test/dataframe_histograms.py. tree/dataframe/test/dataframe_merge_results.py. tree/dataframe/test/dataframe_misc.py. ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11724
https://github.com/root-project/root/pull/11724:374,safety,test,test,374,Correct wrong filename; # This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:. ~~~~. $ ls tree/dataframe/test/*.py. tree/dataframe/test/dataframe_cache.py. tree/dataframe/test/dataframe_datasetspec.py. tree/dataframe/test/dataframe_histograms.py. tree/dataframe/test/dataframe_merge_results.py. tree/dataframe/test/dataframe_misc.py. ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11724
https://github.com/root-project/root/pull/11724:136,testability,test,test,136,Correct wrong filename; # This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:. ~~~~. $ ls tree/dataframe/test/*.py. tree/dataframe/test/dataframe_cache.py. tree/dataframe/test/dataframe_datasetspec.py. tree/dataframe/test/dataframe_histograms.py. tree/dataframe/test/dataframe_merge_results.py. tree/dataframe/test/dataframe_misc.py. ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11724
https://github.com/root-project/root/pull/11724:169,testability,test,test,169,Correct wrong filename; # This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:. ~~~~. $ ls tree/dataframe/test/*.py. tree/dataframe/test/dataframe_cache.py. tree/dataframe/test/dataframe_datasetspec.py. tree/dataframe/test/dataframe_histograms.py. tree/dataframe/test/dataframe_merge_results.py. tree/dataframe/test/dataframe_misc.py. ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11724
https://github.com/root-project/root/pull/11724:195,testability,test,test,195,Correct wrong filename; # This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:. ~~~~. $ ls tree/dataframe/test/*.py. tree/dataframe/test/dataframe_cache.py. tree/dataframe/test/dataframe_datasetspec.py. tree/dataframe/test/dataframe_histograms.py. tree/dataframe/test/dataframe_merge_results.py. tree/dataframe/test/dataframe_misc.py. ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11724
https://github.com/root-project/root/pull/11724:235,testability,test,test,235,Correct wrong filename; # This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:. ~~~~. $ ls tree/dataframe/test/*.py. tree/dataframe/test/dataframe_cache.py. tree/dataframe/test/dataframe_datasetspec.py. tree/dataframe/test/dataframe_histograms.py. tree/dataframe/test/dataframe_merge_results.py. tree/dataframe/test/dataframe_misc.py. ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11724
https://github.com/root-project/root/pull/11724:281,testability,test,test,281,Correct wrong filename; # This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:. ~~~~. $ ls tree/dataframe/test/*.py. tree/dataframe/test/dataframe_cache.py. tree/dataframe/test/dataframe_datasetspec.py. tree/dataframe/test/dataframe_histograms.py. tree/dataframe/test/dataframe_merge_results.py. tree/dataframe/test/dataframe_misc.py. ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11724
https://github.com/root-project/root/pull/11724:326,testability,test,test,326,Correct wrong filename; # This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:. ~~~~. $ ls tree/dataframe/test/*.py. tree/dataframe/test/dataframe_cache.py. tree/dataframe/test/dataframe_datasetspec.py. tree/dataframe/test/dataframe_histograms.py. tree/dataframe/test/dataframe_merge_results.py. tree/dataframe/test/dataframe_misc.py. ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11724
https://github.com/root-project/root/pull/11724:374,testability,test,test,374,Correct wrong filename; # This Pull request:. ## Changes or fixes:. The file dataframe_rdatasetspec.py does not exist in tree/dataframe/test:. ~~~~. $ ls tree/dataframe/test/*.py. tree/dataframe/test/dataframe_cache.py. tree/dataframe/test/dataframe_datasetspec.py. tree/dataframe/test/dataframe_histograms.py. tree/dataframe/test/dataframe_merge_results.py. tree/dataframe/test/dataframe_misc.py. ~~~~. This PR changes to the existing dataframe_datasetspec.py.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11724
https://github.com/root-project/root/pull/11725:545,availability,Error,Error,545,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:594,availability,Error,Error,594,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:1023,availability,Error,Error,1023,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:538,deployability,Fail,Failed,538,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:628,deployability,build,builddir,628,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:637,deployability,build,build,637,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:643,deployability,BUILD,BUILD,643,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:1162,deployability,updat,updated,1162,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:777,energy efficiency,Current,Current,777,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:847,energy efficiency,Current,Current,847,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:917,energy efficiency,Current,Current,917,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:545,performance,Error,Error,545,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:594,performance,Error,Error,594,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:1023,performance,Error,Error,1023,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:538,reliability,Fail,Failed,538,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:55,safety,avoid,avoid,55,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:168,safety,Test,Test,168,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:309,safety,Test,Test,309,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:455,safety,Test,Test,455,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:545,safety,Error,Error,545,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:594,safety,Error,Error,594,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:1023,safety,Error,Error,1023,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:1132,safety,test,tested,1132,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:1162,safety,updat,updated,1162,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:1162,security,updat,updated,1162,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:168,testability,Test,Test,168,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:309,testability,Test,Test,309,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:455,testability,Test,Test,455,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:1132,testability,test,tested,1132,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:545,usability,Error,Error,545,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:594,usability,Error,Error,594,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:1015,usability,close,closed,1015,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11725:1023,usability,Error,Error,1023,Use different filename in loopdir.C and loopdir11.C to avoid race condition; # This Pull request:. ## Changes or fixes:. ~~~~. Start 672: tutorial-io-loopdir. 690/1156 Test #666: tutorial-io-double32 ................................................ Passed 2.42 sec. Start 673: tutorial-io-loopdir11. 691/1156 Test #673: tutorial-io-loopdir11 ............................................... Passed 0.76 sec. Start 674: tutorial-io-mergeSelective. 692/1156 Test #672: tutorial-io-loopdir .................................................***Failed Error regular expression found in output. Regex=[Error in <] 1.23 sec. Processing /builddir/build/BUILD/root-6.26.10/tutorials/io/loopdir.C... Info in <TCanvas::Print>: ps file hsimple.ps has been created. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: Current canvas added to ps file hsimple.ps. Info in <TCanvas::Print>: ps file hsimple.ps has been closed. Error in <TPostScript::Text>: Cannot open temporary file: hsimple.ps_tmp_2089748. ~~~~. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11725
https://github.com/root-project/root/pull/11727:668,availability,slo,slow,668,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:36,deployability,updat,update,36,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:853,deployability,Updat,Update,853,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:328,energy efficiency,draw,drawing,328,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:645,energy efficiency,current,currently,645,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:679,energy efficiency,Optim,Optimize,679,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:27,integrability,sub,sub-pads,27,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:100,integrability,event,event,100,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:146,integrability,event,events,146,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:173,integrability,configur,configured,173,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:436,integrability,sub,sub-pads,436,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:536,integrability,sub,sub-pads,536,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:781,integrability,messag,message,781,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:781,interoperability,messag,message,781,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:173,modifiability,configur,configured,173,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:494,performance,Improve perform,Improve performance,494,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:679,performance,Optimiz,Optimize,679,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:668,reliability,slo,slow,668,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:36,safety,updat,update,36,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:853,safety,Updat,Update,853,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:36,security,updat,update,36,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:173,security,configur,configured,173,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:420,security,modif,modification,420,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:460,security,modif,modified,460,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:571,security,modif,modified,571,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:734,security,modif,modified,734,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:846,security,Modif,Modify,846,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:853,security,Updat,Update,853,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:18,usability,support,support,18,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:89,usability,mous,mouse,89,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:319,usability,confirm,confirms,319,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/pull/11727:502,usability,perform,performance,502,"[webcanvas] TExec support, sub-pads update; 1. Process active pad `TExec` when pad click/mouse move event is produced. JSROOT client deliver such events only when execs are configured. Good example is `hist/DynamicSlice.C` tutorial. 2. Process `TExec` from histogram list of functions. Here execs processed when client confirms drawing and returns applied ranges. Working example is `hist/htproj.C` tutorial. 3. Analyze modification of sub-pads, only data for modified pads send to the client. Improve performance when canvas with many sub-pads, but only few of them are modified. Good example is `hist/tprofile2polyRealistic.C` tutorial, which currently working very slow. . 4. Optimize server/client communication. If canvas marked modified without real change of data, no extra message will be send to client. Also allows break self-triggered Modify/Update loops with `TExec` . 5. Adjust several `TExec` tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11727
https://github.com/root-project/root/issues/11728:20,deployability,fail,fails,20,6.26.10 compilation fails with Python 3.11; Compilation fails with Python 3.11 and 6.26.10 as https://github.com/root-project/root/pull/10734 was never backported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11728
https://github.com/root-project/root/issues/11728:56,deployability,fail,fails,56,6.26.10 compilation fails with Python 3.11; Compilation fails with Python 3.11 and 6.26.10 as https://github.com/root-project/root/pull/10734 was never backported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11728
https://github.com/root-project/root/issues/11728:20,reliability,fail,fails,20,6.26.10 compilation fails with Python 3.11; Compilation fails with Python 3.11 and 6.26.10 as https://github.com/root-project/root/pull/10734 was never backported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11728
https://github.com/root-project/root/issues/11728:56,reliability,fail,fails,56,6.26.10 compilation fails with Python 3.11; Compilation fails with Python 3.11 and 6.26.10 as https://github.com/root-project/root/pull/10734 was never backported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11728
https://github.com/root-project/root/issues/11730:402,integrability,schema,schema,402,"[ntuple] Allow users to specify a per-field read callback function; As per a conversation with @jblomer on 16/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), it would be useful to provide a way for users to set a per-field callback function to be invoked after reading a value object. As an alternative to the (yet to be supported) manual schema evolution rules, this can be used as a simple way to inspect/modify the value object after reading. ### Describe the solution you'd like. Something similar to `RFieldBase::SetReadCallback(void (*)(RFieldValue&))` might be part of the `RFieldBase` public interface in order to allow users to set such callback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11730
https://github.com/root-project/root/issues/11730:656,integrability,pub,public,656,"[ntuple] Allow users to specify a per-field read callback function; As per a conversation with @jblomer on 16/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), it would be useful to provide a way for users to set a per-field callback function to be invoked after reading a value object. As an alternative to the (yet to be supported) manual schema evolution rules, this can be used as a simple way to inspect/modify the value object after reading. ### Describe the solution you'd like. Something similar to `RFieldBase::SetReadCallback(void (*)(RFieldValue&))` might be part of the `RFieldBase` public interface in order to allow users to set such callback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11730
https://github.com/root-project/root/issues/11730:663,integrability,interfac,interface,663,"[ntuple] Allow users to specify a per-field read callback function; As per a conversation with @jblomer on 16/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), it would be useful to provide a way for users to set a per-field callback function to be invoked after reading a value object. As an alternative to the (yet to be supported) manual schema evolution rules, this can be used as a simple way to inspect/modify the value object after reading. ### Describe the solution you'd like. Something similar to `RFieldBase::SetReadCallback(void (*)(RFieldValue&))` might be part of the `RFieldBase` public interface in order to allow users to set such callback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11730
https://github.com/root-project/root/issues/11730:24,interoperability,specif,specify,24,"[ntuple] Allow users to specify a per-field read callback function; As per a conversation with @jblomer on 16/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), it would be useful to provide a way for users to set a per-field callback function to be invoked after reading a value object. As an alternative to the (yet to be supported) manual schema evolution rules, this can be used as a simple way to inspect/modify the value object after reading. ### Describe the solution you'd like. Something similar to `RFieldBase::SetReadCallback(void (*)(RFieldValue&))` might be part of the `RFieldBase` public interface in order to allow users to set such callback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11730
https://github.com/root-project/root/issues/11730:77,interoperability,convers,conversation,77,"[ntuple] Allow users to specify a per-field read callback function; As per a conversation with @jblomer on 16/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), it would be useful to provide a way for users to set a per-field callback function to be invoked after reading a value object. As an alternative to the (yet to be supported) manual schema evolution rules, this can be used as a simple way to inspect/modify the value object after reading. ### Describe the solution you'd like. Something similar to `RFieldBase::SetReadCallback(void (*)(RFieldValue&))` might be part of the `RFieldBase` public interface in order to allow users to set such callback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11730
https://github.com/root-project/root/issues/11730:663,interoperability,interfac,interface,663,"[ntuple] Allow users to specify a per-field read callback function; As per a conversation with @jblomer on 16/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), it would be useful to provide a way for users to set a per-field callback function to be invoked after reading a value object. As an alternative to the (yet to be supported) manual schema evolution rules, this can be used as a simple way to inspect/modify the value object after reading. ### Describe the solution you'd like. Something similar to `RFieldBase::SetReadCallback(void (*)(RFieldValue&))` might be part of the `RFieldBase` public interface in order to allow users to set such callback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11730
https://github.com/root-project/root/issues/11730:663,modifiability,interfac,interface,663,"[ntuple] Allow users to specify a per-field read callback function; As per a conversation with @jblomer on 16/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), it would be useful to provide a way for users to set a per-field callback function to be invoked after reading a value object. As an alternative to the (yet to be supported) manual schema evolution rules, this can be used as a simple way to inspect/modify the value object after reading. ### Describe the solution you'd like. Something similar to `RFieldBase::SetReadCallback(void (*)(RFieldValue&))` might be part of the `RFieldBase` public interface in order to allow users to set such callback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11730
https://github.com/root-project/root/issues/11730:470,security,modif,modify,470,"[ntuple] Allow users to specify a per-field read callback function; As per a conversation with @jblomer on 16/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), it would be useful to provide a way for users to set a per-field callback function to be invoked after reading a value object. As an alternative to the (yet to be supported) manual schema evolution rules, this can be used as a simple way to inspect/modify the value object after reading. ### Describe the solution you'd like. Something similar to `RFieldBase::SetReadCallback(void (*)(RFieldValue&))` might be part of the `RFieldBase` public interface in order to allow users to set such callback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11730
https://github.com/root-project/root/issues/11730:448,testability,simpl,simple,448,"[ntuple] Allow users to specify a per-field read callback function; As per a conversation with @jblomer on 16/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), it would be useful to provide a way for users to set a per-field callback function to be invoked after reading a value object. As an alternative to the (yet to be supported) manual schema evolution rules, this can be used as a simple way to inspect/modify the value object after reading. ### Describe the solution you'd like. Something similar to `RFieldBase::SetReadCallback(void (*)(RFieldValue&))` might be part of the `RFieldBase` public interface in order to allow users to set such callback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11730
https://github.com/root-project/root/issues/11730:15,usability,user,users,15,"[ntuple] Allow users to specify a per-field read callback function; As per a conversation with @jblomer on 16/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), it would be useful to provide a way for users to set a per-field callback function to be invoked after reading a value object. As an alternative to the (yet to be supported) manual schema evolution rules, this can be used as a simple way to inspect/modify the value object after reading. ### Describe the solution you'd like. Something similar to `RFieldBase::SetReadCallback(void (*)(RFieldValue&))` might be part of the `RFieldBase` public interface in order to allow users to set such callback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11730
https://github.com/root-project/root/issues/11730:261,usability,user,users,261,"[ntuple] Allow users to specify a per-field read callback function; As per a conversation with @jblomer on 16/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), it would be useful to provide a way for users to set a per-field callback function to be invoked after reading a value object. As an alternative to the (yet to be supported) manual schema evolution rules, this can be used as a simple way to inspect/modify the value object after reading. ### Describe the solution you'd like. Something similar to `RFieldBase::SetReadCallback(void (*)(RFieldValue&))` might be part of the `RFieldBase` public interface in order to allow users to set such callback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11730
https://github.com/root-project/root/issues/11730:384,usability,support,supported,384,"[ntuple] Allow users to specify a per-field read callback function; As per a conversation with @jblomer on 16/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), it would be useful to provide a way for users to set a per-field callback function to be invoked after reading a value object. As an alternative to the (yet to be supported) manual schema evolution rules, this can be used as a simple way to inspect/modify the value object after reading. ### Describe the solution you'd like. Something similar to `RFieldBase::SetReadCallback(void (*)(RFieldValue&))` might be part of the `RFieldBase` public interface in order to allow users to set such callback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11730
https://github.com/root-project/root/issues/11730:448,usability,simpl,simple,448,"[ntuple] Allow users to specify a per-field read callback function; As per a conversation with @jblomer on 16/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), it would be useful to provide a way for users to set a per-field callback function to be invoked after reading a value object. As an alternative to the (yet to be supported) manual schema evolution rules, this can be used as a simple way to inspect/modify the value object after reading. ### Describe the solution you'd like. Something similar to `RFieldBase::SetReadCallback(void (*)(RFieldValue&))` might be part of the `RFieldBase` public interface in order to allow users to set such callback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11730
https://github.com/root-project/root/issues/11730:691,usability,user,users,691,"[ntuple] Allow users to specify a per-field read callback function; As per a conversation with @jblomer on 16/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), it would be useful to provide a way for users to set a per-field callback function to be invoked after reading a value object. As an alternative to the (yet to be supported) manual schema evolution rules, this can be used as a simple way to inspect/modify the value object after reading. ### Describe the solution you'd like. Something similar to `RFieldBase::SetReadCallback(void (*)(RFieldValue&))` might be part of the `RFieldBase` public interface in order to allow users to set such callback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11730
https://github.com/root-project/root/pull/11731:2180,availability,state,state,2180," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:1256,deployability,manag,managed,1256,"3), this pull request adds support for per field post-read callback functions to be invoked after reading a value object. Such callbacks can be used to inspect/modify the value object after reading, e.g. to initialize transient members. The conclusion of a previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:1952,deployability,contain,containing,1952," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:2209,deployability,patch,patch,2209," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:2462,deployability,updat,updated,2462," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:1256,energy efficiency,manag,managed,1256,"3), this pull request adds support for per field post-read callback functions to be invoked after reading a value object. Such callbacks can be used to inspect/modify the value object after reading, e.g. to initialize transient members. The conclusion of a previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:1750,energy efficiency,measur,measurements,1750," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:1807,energy efficiency,measur,measured,1807," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:2126,energy efficiency,measur,measured,2126," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:1846,integrability,schema,schema,1846," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:2180,integrability,state,state,2180," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:84,interoperability,convers,conversation,84,"[ntuple] RField: add support for (per field) post-read callback functions; As per a conversation with @jblomer on 16/11/2022, and ROOT I/O meeting on 25/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), this pull request adds support for per field post-read callback functions to be invoked after reading a value object. Such callbacks can be used to inspect/modify the value object after reading, e.g. to initialize transient members. The conclusion of a previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:135,performance,I/O,I/O,135,"[ntuple] RField: add support for (per field) post-read callback functions; As per a conversation with @jblomer on 16/11/2022, and ROOT I/O meeting on 25/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), this pull request adds support for per field post-read callback functions to be invoked after reading a value object. Such callbacks can be used to inspect/modify the value object after reading, e.g. to initialize transient members. The conclusion of a previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:1573,performance,perform,performance,1573," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:1768,performance,overhead,overhead,1768," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:2108,performance,overhead,overhead,2108," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:2306,performance,time,time,2306," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:2405,performance,time,time,2405," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:1256,safety,manag,managed,1256,"3), this pull request adds support for per field post-read callback functions to be invoked after reading a value object. Such callbacks can be used to inspect/modify the value object after reading, e.g. to initialize transient members. The conclusion of a previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:1831,safety,test,test,1831," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:2025,safety,test,test,2025," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:2209,safety,patch,patch,2209," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:2432,safety,test,tested,2432," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:2462,safety,updat,updated,2462," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:420,security,modif,modify,420,"[ntuple] RField: add support for (per field) post-read callback functions; As per a conversation with @jblomer on 16/11/2022, and ROOT I/O meeting on 25/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), this pull request adds support for per field post-read callback functions to be invoked after reading a value object. Such callbacks can be used to inspect/modify the value object after reading, e.g. to initialize transient members. The conclusion of a previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:637,security,sign,signature,637,"[ntuple] RField: add support for (per field) post-read callback functions; As per a conversation with @jblomer on 16/11/2022, and ROOT I/O meeting on 25/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), this pull request adds support for per field post-read callback functions to be invoked after reading a value object. Such callbacks can be used to inspect/modify the value object after reading, e.g. to initialize transient members. The conclusion of a previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:2209,security,patch,patch,2209," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:2462,security,updat,updated,2462," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:811,testability,simpl,simple,811,"[ntuple] RField: add support for (per field) post-read callback functions; As per a conversation with @jblomer on 16/11/2022, and ROOT I/O meeting on 25/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), this pull request adds support for per field post-read callback functions to be invoked after reading a value object. Such callbacks can be used to inspect/modify the value object after reading, e.g. to initialize transient members. The conclusion of a previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:1152,testability,simpl,simple,1152,"/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), this pull request adds support for per field post-read callback functions to be invoked after reading a value object. Such callbacks can be used to inspect/modify the value object after reading, e.g. to initialize transient members. The conclusion of a previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbac",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:1831,testability,test,test,1831," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:2025,testability,test,test,2025," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:2432,testability,test,tested,2432," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:21,usability,support,support,21,"[ntuple] RField: add support for (per field) post-read callback functions; As per a conversation with @jblomer on 16/11/2022, and ROOT I/O meeting on 25/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), this pull request adds support for per field post-read callback functions to be invoked after reading a value object. Such callbacks can be used to inspect/modify the value object after reading, e.g. to initialize transient members. The conclusion of a previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:287,usability,support,support,287,"[ntuple] RField: add support for (per field) post-read callback functions; As per a conversation with @jblomer on 16/11/2022, and ROOT I/O meeting on 25/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), this pull request adds support for per field post-read callback functions to be invoked after reading a value object. Such callbacks can be used to inspect/modify the value object after reading, e.g. to initialize transient members. The conclusion of a previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:811,usability,simpl,simple,811,"[ntuple] RField: add support for (per field) post-read callback functions; As per a conversation with @jblomer on 16/11/2022, and ROOT I/O meeting on 25/11/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), this pull request adds support for per field post-read callback functions to be invoked after reading a value object. Such callbacks can be used to inspect/modify the value object after reading, e.g. to initialize transient members. The conclusion of a previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:1152,usability,simpl,simple,1152,"/2022 (and probably also related to https://github.com/root-project/root/pull/11628#discussion_r1023123773), this pull request adds support for per field post-read callback functions to be invoked after reading a value object. Such callbacks can be used to inspect/modify the value object after reading, e.g. to initialize transient members. The conclusion of a previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbac",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:1573,usability,perform,performance,1573," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/pull/11731:1928,usability,user,user-defined,1928," previous discussion is that we should not allow views on fields with a mappable type and that have a read callback. The signature of a read callback function is. ```c++. void callback_func(RFieldValue &);. ```. ## Changes of fixes:. - Fields with a mappable type need to be distinguished from ""simple"" fields (i.e. those that have no additional actions after reading). Thus, the `kTraitMappable` trait is introduced in this PR; it is set for fields of fundamental types that can be directly mapped via `RField<T>::Map()`. These fields also map as-is to a single column. The `fIsSimple` member now takes a different meaning: a field is simple if it is both mappable (i.e. kTraitMappable) and has no post-read callback. - Read callbacks are managed via the _protected_ member functions `RFieldBase::{Add,Remove}ReadCallback()`. - `RFieldBase::Read()` calls the read callbacks as appropriate. The fast path still only calls `fPrincipalColumn->Read()`. Callbacks should be relatively rare; thus, the branch is marked as `R__unlikely()`, as it provides a small performance increase for non-mappable types that have no read callback. - As discussed, views are disallowed on fields with a mappable type and a read callback. ## Experimental measurements. The overhead of the changes in this PR was measured in a synthetic test case. The schema is comprised of 4 fields of fundamental data types + 2 fields referring to user-defined `struct`s (containing 4 and 8 members of fundamental data types, respectively). The test program reads all fields across 10000k entries. The file lies in a tmpfs. The overhead has been measured to be:. - No callbacks: **~0.5%** w.r.t. the state of RNTuple before this patch set. - 1 _nop_ callback function for one of the `struct` fields: **~2.7%** w.r.t. the base time. - 2 _nop_ callback functions, one for each of the `struct` fields: **~3.4%** w.r.t. the base time. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #11730.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11731
https://github.com/root-project/root/issues/11732:574,energy efficiency,current,currently,574,"[ntuple] C-style array members of a user-defined class are stored/retrieved as a scalar; ### Describe the bug. Reported by @Nowakus via e-mail: user-defined classes having members whose type is a C-style array of type `T` are stored/retrieved as a scalar. Thus, only the first element of the array is read/written. Specifically, for the following member definition:. ```c++. unsigned char m_8pack[8];. ```. the corresponding attached field is:. ```. Field 1.3.3 : m_8pack (std::uint8_t). ```. ### Expected behavior. In principle we should be throwing, as C-style arrays are currently not supported in RNTuple - i.e. we are missing [here](https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RField.cxx#L830) a. ```c++. if (dataMember->Property() & kIsArray). throw /*...*/;. ```. However, not supporting C-style arrays might be a problem - please, comment here on it @Nowakus. Also, in principle, it should be fairly straightforward to add support for single dimension C-style arrays, so we probably should go this way in the fix for this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11732
https://github.com/root-project/root/issues/11732:315,interoperability,Specif,Specifically,315,"[ntuple] C-style array members of a user-defined class are stored/retrieved as a scalar; ### Describe the bug. Reported by @Nowakus via e-mail: user-defined classes having members whose type is a C-style array of type `T` are stored/retrieved as a scalar. Thus, only the first element of the array is read/written. Specifically, for the following member definition:. ```c++. unsigned char m_8pack[8];. ```. the corresponding attached field is:. ```. Field 1.3.3 : m_8pack (std::uint8_t). ```. ### Expected behavior. In principle we should be throwing, as C-style arrays are currently not supported in RNTuple - i.e. we are missing [here](https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RField.cxx#L830) a. ```c++. if (dataMember->Property() & kIsArray). throw /*...*/;. ```. However, not supporting C-style arrays might be a problem - please, comment here on it @Nowakus. Also, in principle, it should be fairly straightforward to add support for single dimension C-style arrays, so we probably should go this way in the fix for this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11732
https://github.com/root-project/root/issues/11732:81,modifiability,scal,scalar,81,"[ntuple] C-style array members of a user-defined class are stored/retrieved as a scalar; ### Describe the bug. Reported by @Nowakus via e-mail: user-defined classes having members whose type is a C-style array of type `T` are stored/retrieved as a scalar. Thus, only the first element of the array is read/written. Specifically, for the following member definition:. ```c++. unsigned char m_8pack[8];. ```. the corresponding attached field is:. ```. Field 1.3.3 : m_8pack (std::uint8_t). ```. ### Expected behavior. In principle we should be throwing, as C-style arrays are currently not supported in RNTuple - i.e. we are missing [here](https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RField.cxx#L830) a. ```c++. if (dataMember->Property() & kIsArray). throw /*...*/;. ```. However, not supporting C-style arrays might be a problem - please, comment here on it @Nowakus. Also, in principle, it should be fairly straightforward to add support for single dimension C-style arrays, so we probably should go this way in the fix for this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11732
https://github.com/root-project/root/issues/11732:248,modifiability,scal,scalar,248,"[ntuple] C-style array members of a user-defined class are stored/retrieved as a scalar; ### Describe the bug. Reported by @Nowakus via e-mail: user-defined classes having members whose type is a C-style array of type `T` are stored/retrieved as a scalar. Thus, only the first element of the array is read/written. Specifically, for the following member definition:. ```c++. unsigned char m_8pack[8];. ```. the corresponding attached field is:. ```. Field 1.3.3 : m_8pack (std::uint8_t). ```. ### Expected behavior. In principle we should be throwing, as C-style arrays are currently not supported in RNTuple - i.e. we are missing [here](https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RField.cxx#L830) a. ```c++. if (dataMember->Property() & kIsArray). throw /*...*/;. ```. However, not supporting C-style arrays might be a problem - please, comment here on it @Nowakus. Also, in principle, it should be fairly straightforward to add support for single dimension C-style arrays, so we probably should go this way in the fix for this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11732
https://github.com/root-project/root/issues/11732:36,usability,user,user-defined,36,"[ntuple] C-style array members of a user-defined class are stored/retrieved as a scalar; ### Describe the bug. Reported by @Nowakus via e-mail: user-defined classes having members whose type is a C-style array of type `T` are stored/retrieved as a scalar. Thus, only the first element of the array is read/written. Specifically, for the following member definition:. ```c++. unsigned char m_8pack[8];. ```. the corresponding attached field is:. ```. Field 1.3.3 : m_8pack (std::uint8_t). ```. ### Expected behavior. In principle we should be throwing, as C-style arrays are currently not supported in RNTuple - i.e. we are missing [here](https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RField.cxx#L830) a. ```c++. if (dataMember->Property() & kIsArray). throw /*...*/;. ```. However, not supporting C-style arrays might be a problem - please, comment here on it @Nowakus. Also, in principle, it should be fairly straightforward to add support for single dimension C-style arrays, so we probably should go this way in the fix for this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11732
https://github.com/root-project/root/issues/11732:144,usability,user,user-defined,144,"[ntuple] C-style array members of a user-defined class are stored/retrieved as a scalar; ### Describe the bug. Reported by @Nowakus via e-mail: user-defined classes having members whose type is a C-style array of type `T` are stored/retrieved as a scalar. Thus, only the first element of the array is read/written. Specifically, for the following member definition:. ```c++. unsigned char m_8pack[8];. ```. the corresponding attached field is:. ```. Field 1.3.3 : m_8pack (std::uint8_t). ```. ### Expected behavior. In principle we should be throwing, as C-style arrays are currently not supported in RNTuple - i.e. we are missing [here](https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RField.cxx#L830) a. ```c++. if (dataMember->Property() & kIsArray). throw /*...*/;. ```. However, not supporting C-style arrays might be a problem - please, comment here on it @Nowakus. Also, in principle, it should be fairly straightforward to add support for single dimension C-style arrays, so we probably should go this way in the fix for this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11732
https://github.com/root-project/root/issues/11732:506,usability,behavi,behavior,506,"[ntuple] C-style array members of a user-defined class are stored/retrieved as a scalar; ### Describe the bug. Reported by @Nowakus via e-mail: user-defined classes having members whose type is a C-style array of type `T` are stored/retrieved as a scalar. Thus, only the first element of the array is read/written. Specifically, for the following member definition:. ```c++. unsigned char m_8pack[8];. ```. the corresponding attached field is:. ```. Field 1.3.3 : m_8pack (std::uint8_t). ```. ### Expected behavior. In principle we should be throwing, as C-style arrays are currently not supported in RNTuple - i.e. we are missing [here](https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RField.cxx#L830) a. ```c++. if (dataMember->Property() & kIsArray). throw /*...*/;. ```. However, not supporting C-style arrays might be a problem - please, comment here on it @Nowakus. Also, in principle, it should be fairly straightforward to add support for single dimension C-style arrays, so we probably should go this way in the fix for this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11732
https://github.com/root-project/root/issues/11732:588,usability,support,supported,588,"[ntuple] C-style array members of a user-defined class are stored/retrieved as a scalar; ### Describe the bug. Reported by @Nowakus via e-mail: user-defined classes having members whose type is a C-style array of type `T` are stored/retrieved as a scalar. Thus, only the first element of the array is read/written. Specifically, for the following member definition:. ```c++. unsigned char m_8pack[8];. ```. the corresponding attached field is:. ```. Field 1.3.3 : m_8pack (std::uint8_t). ```. ### Expected behavior. In principle we should be throwing, as C-style arrays are currently not supported in RNTuple - i.e. we are missing [here](https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RField.cxx#L830) a. ```c++. if (dataMember->Property() & kIsArray). throw /*...*/;. ```. However, not supporting C-style arrays might be a problem - please, comment here on it @Nowakus. Also, in principle, it should be fairly straightforward to add support for single dimension C-style arrays, so we probably should go this way in the fix for this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11732
https://github.com/root-project/root/issues/11732:808,usability,support,supporting,808,"[ntuple] C-style array members of a user-defined class are stored/retrieved as a scalar; ### Describe the bug. Reported by @Nowakus via e-mail: user-defined classes having members whose type is a C-style array of type `T` are stored/retrieved as a scalar. Thus, only the first element of the array is read/written. Specifically, for the following member definition:. ```c++. unsigned char m_8pack[8];. ```. the corresponding attached field is:. ```. Field 1.3.3 : m_8pack (std::uint8_t). ```. ### Expected behavior. In principle we should be throwing, as C-style arrays are currently not supported in RNTuple - i.e. we are missing [here](https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RField.cxx#L830) a. ```c++. if (dataMember->Property() & kIsArray). throw /*...*/;. ```. However, not supporting C-style arrays might be a problem - please, comment here on it @Nowakus. Also, in principle, it should be fairly straightforward to add support for single dimension C-style arrays, so we probably should go this way in the fix for this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11732
https://github.com/root-project/root/issues/11732:955,usability,support,support,955,"[ntuple] C-style array members of a user-defined class are stored/retrieved as a scalar; ### Describe the bug. Reported by @Nowakus via e-mail: user-defined classes having members whose type is a C-style array of type `T` are stored/retrieved as a scalar. Thus, only the first element of the array is read/written. Specifically, for the following member definition:. ```c++. unsigned char m_8pack[8];. ```. the corresponding attached field is:. ```. Field 1.3.3 : m_8pack (std::uint8_t). ```. ### Expected behavior. In principle we should be throwing, as C-style arrays are currently not supported in RNTuple - i.e. we are missing [here](https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RField.cxx#L830) a. ```c++. if (dataMember->Property() & kIsArray). throw /*...*/;. ```. However, not supporting C-style arrays might be a problem - please, comment here on it @Nowakus. Also, in principle, it should be fairly straightforward to add support for single dimension C-style arrays, so we probably should go this way in the fix for this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11732
https://github.com/root-project/root/pull/11734:15,energy efficiency,Draw,DrawMap,15,"Improve TFile::DrawMap; As described [here](https://github.com/root-project/root/issues/11723), `TFile::DrawMap` produced a weird plot, mostly black. With this PR the plot is improved. ```. auto f = new TFile(""hsimple.root"");. f->DrawMap();. ```. Gives:. <img width=""650"" alt=""Screenshot 2022-11-17 at 16 13 04"" src=""https://user-images.githubusercontent.com/4697738/202487187-9c83c2ab-578a-4550-9c7b-feea0ddbb543.png"">. ### Changes:. - Use the current color map to paint the various branches of trees,. - Paint the axis label and titles,. - Improve the help,. - fix typos",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11734
https://github.com/root-project/root/pull/11734:104,energy efficiency,Draw,DrawMap,104,"Improve TFile::DrawMap; As described [here](https://github.com/root-project/root/issues/11723), `TFile::DrawMap` produced a weird plot, mostly black. With this PR the plot is improved. ```. auto f = new TFile(""hsimple.root"");. f->DrawMap();. ```. Gives:. <img width=""650"" alt=""Screenshot 2022-11-17 at 16 13 04"" src=""https://user-images.githubusercontent.com/4697738/202487187-9c83c2ab-578a-4550-9c7b-feea0ddbb543.png"">. ### Changes:. - Use the current color map to paint the various branches of trees,. - Paint the axis label and titles,. - Improve the help,. - fix typos",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11734
https://github.com/root-project/root/pull/11734:230,energy efficiency,Draw,DrawMap,230,"Improve TFile::DrawMap; As described [here](https://github.com/root-project/root/issues/11723), `TFile::DrawMap` produced a weird plot, mostly black. With this PR the plot is improved. ```. auto f = new TFile(""hsimple.root"");. f->DrawMap();. ```. Gives:. <img width=""650"" alt=""Screenshot 2022-11-17 at 16 13 04"" src=""https://user-images.githubusercontent.com/4697738/202487187-9c83c2ab-578a-4550-9c7b-feea0ddbb543.png"">. ### Changes:. - Use the current color map to paint the various branches of trees,. - Paint the axis label and titles,. - Improve the help,. - fix typos",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11734
https://github.com/root-project/root/pull/11734:445,energy efficiency,current,current,445,"Improve TFile::DrawMap; As described [here](https://github.com/root-project/root/issues/11723), `TFile::DrawMap` produced a weird plot, mostly black. With this PR the plot is improved. ```. auto f = new TFile(""hsimple.root"");. f->DrawMap();. ```. Gives:. <img width=""650"" alt=""Screenshot 2022-11-17 at 16 13 04"" src=""https://user-images.githubusercontent.com/4697738/202487187-9c83c2ab-578a-4550-9c7b-feea0ddbb543.png"">. ### Changes:. - Use the current color map to paint the various branches of trees,. - Paint the axis label and titles,. - Improve the help,. - fix typos",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11734
https://github.com/root-project/root/pull/11734:325,usability,user,user-images,325,"Improve TFile::DrawMap; As described [here](https://github.com/root-project/root/issues/11723), `TFile::DrawMap` produced a weird plot, mostly black. With this PR the plot is improved. ```. auto f = new TFile(""hsimple.root"");. f->DrawMap();. ```. Gives:. <img width=""650"" alt=""Screenshot 2022-11-17 at 16 13 04"" src=""https://user-images.githubusercontent.com/4697738/202487187-9c83c2ab-578a-4550-9c7b-feea0ddbb543.png"">. ### Changes:. - Use the current color map to paint the various branches of trees,. - Paint the axis label and titles,. - Improve the help,. - fix typos",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11734
https://github.com/root-project/root/pull/11734:554,usability,help,help,554,"Improve TFile::DrawMap; As described [here](https://github.com/root-project/root/issues/11723), `TFile::DrawMap` produced a weird plot, mostly black. With this PR the plot is improved. ```. auto f = new TFile(""hsimple.root"");. f->DrawMap();. ```. Gives:. <img width=""650"" alt=""Screenshot 2022-11-17 at 16 13 04"" src=""https://user-images.githubusercontent.com/4697738/202487187-9c83c2ab-578a-4550-9c7b-feea0ddbb543.png"">. ### Changes:. - Use the current color map to paint the various branches of trees,. - Paint the axis label and titles,. - Improve the help,. - fix typos",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11734
https://github.com/root-project/root/pull/11735:107,energy efficiency,model,model,107,"[tmva][sofie] Add RSofieReader class in TMVA; Add a new class in TMVA , RSofieReader which giving an input model in ONNX, Keras or PyTorch format, compiles with the interpreter and provides a member function `Compute` to evaluate the model.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11735
https://github.com/root-project/root/pull/11735:234,energy efficiency,model,model,234,"[tmva][sofie] Add RSofieReader class in TMVA; Add a new class in TMVA , RSofieReader which giving an input model in ONNX, Keras or PyTorch format, compiles with the interpreter and provides a member function `Compute` to evaluate the model.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11735
https://github.com/root-project/root/pull/11735:139,interoperability,format,format,139,"[tmva][sofie] Add RSofieReader class in TMVA; Add a new class in TMVA , RSofieReader which giving an input model in ONNX, Keras or PyTorch format, compiles with the interpreter and provides a member function `Compute` to evaluate the model.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11735
https://github.com/root-project/root/pull/11735:101,safety,input,input,101,"[tmva][sofie] Add RSofieReader class in TMVA; Add a new class in TMVA , RSofieReader which giving an input model in ONNX, Keras or PyTorch format, compiles with the interpreter and provides a member function `Compute` to evaluate the model.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11735
https://github.com/root-project/root/pull/11735:107,security,model,model,107,"[tmva][sofie] Add RSofieReader class in TMVA; Add a new class in TMVA , RSofieReader which giving an input model in ONNX, Keras or PyTorch format, compiles with the interpreter and provides a member function `Compute` to evaluate the model.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11735
https://github.com/root-project/root/pull/11735:234,security,model,model,234,"[tmva][sofie] Add RSofieReader class in TMVA; Add a new class in TMVA , RSofieReader which giving an input model in ONNX, Keras or PyTorch format, compiles with the interpreter and provides a member function `Compute` to evaluate the model.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11735
https://github.com/root-project/root/pull/11735:101,usability,input,input,101,"[tmva][sofie] Add RSofieReader class in TMVA; Add a new class in TMVA , RSofieReader which giving an input model in ONNX, Keras or PyTorch format, compiles with the interpreter and provides a member function `Compute` to evaluate the model.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11735
https://github.com/root-project/root/pull/11736:587,deployability,updat,updated,587,"[RF] add RooDataHist::get_wgt; # This Pull request:. ## Changes or fixes:. Commit 23d861273f56c28a6bad45028115f80228816b6f removed `get_wgt`, but this is used in RooFitExtensions, which in turn is used for Higgs combination fits. This commit adds `get_wgt` back in. It also adds it in places where it was missing before; some new additions since `get_wgt` was added (about 6 years ago) did not use `get_wgt`, but rather directly accessed the `_wgt` array, which again breaks the usecase within RooFitExtensions (`RooExpandedDataHist`). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11736
https://github.com/root-project/root/pull/11736:557,safety,test,tested,557,"[RF] add RooDataHist::get_wgt; # This Pull request:. ## Changes or fixes:. Commit 23d861273f56c28a6bad45028115f80228816b6f removed `get_wgt`, but this is used in RooFitExtensions, which in turn is used for Higgs combination fits. This commit adds `get_wgt` back in. It also adds it in places where it was missing before; some new additions since `get_wgt` was added (about 6 years ago) did not use `get_wgt`, but rather directly accessed the `_wgt` array, which again breaks the usecase within RooFitExtensions (`RooExpandedDataHist`). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11736
https://github.com/root-project/root/pull/11736:587,safety,updat,updated,587,"[RF] add RooDataHist::get_wgt; # This Pull request:. ## Changes or fixes:. Commit 23d861273f56c28a6bad45028115f80228816b6f removed `get_wgt`, but this is used in RooFitExtensions, which in turn is used for Higgs combination fits. This commit adds `get_wgt` back in. It also adds it in places where it was missing before; some new additions since `get_wgt` was added (about 6 years ago) did not use `get_wgt`, but rather directly accessed the `_wgt` array, which again breaks the usecase within RooFitExtensions (`RooExpandedDataHist`). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11736
https://github.com/root-project/root/pull/11736:429,security,access,accessed,429,"[RF] add RooDataHist::get_wgt; # This Pull request:. ## Changes or fixes:. Commit 23d861273f56c28a6bad45028115f80228816b6f removed `get_wgt`, but this is used in RooFitExtensions, which in turn is used for Higgs combination fits. This commit adds `get_wgt` back in. It also adds it in places where it was missing before; some new additions since `get_wgt` was added (about 6 years ago) did not use `get_wgt`, but rather directly accessed the `_wgt` array, which again breaks the usecase within RooFitExtensions (`RooExpandedDataHist`). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11736
https://github.com/root-project/root/pull/11736:587,security,updat,updated,587,"[RF] add RooDataHist::get_wgt; # This Pull request:. ## Changes or fixes:. Commit 23d861273f56c28a6bad45028115f80228816b6f removed `get_wgt`, but this is used in RooFitExtensions, which in turn is used for Higgs combination fits. This commit adds `get_wgt` back in. It also adds it in places where it was missing before; some new additions since `get_wgt` was added (about 6 years ago) did not use `get_wgt`, but rather directly accessed the `_wgt` array, which again breaks the usecase within RooFitExtensions (`RooExpandedDataHist`). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11736
https://github.com/root-project/root/pull/11736:557,testability,test,tested,557,"[RF] add RooDataHist::get_wgt; # This Pull request:. ## Changes or fixes:. Commit 23d861273f56c28a6bad45028115f80228816b6f removed `get_wgt`, but this is used in RooFitExtensions, which in turn is used for Higgs combination fits. This commit adds `get_wgt` back in. It also adds it in places where it was missing before; some new additions since `get_wgt` was added (about 6 years ago) did not use `get_wgt`, but rather directly accessed the `_wgt` array, which again breaks the usecase within RooFitExtensions (`RooExpandedDataHist`). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11736
https://github.com/root-project/root/pull/11737:201,deployability,modul,modules,201,"[webgui] test with `tutorials/graphics`, several minor fixes; 1. Adjust several tutorials from `graphics` folder to work with TWebCanvas. 2. Optimize openui5-based code - avoid direct import of JSROOT modules. 3. Fix zooming update problem on lego plots. 4. Fix GED visibility update problem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11737
https://github.com/root-project/root/pull/11737:225,deployability,updat,update,225,"[webgui] test with `tutorials/graphics`, several minor fixes; 1. Adjust several tutorials from `graphics` folder to work with TWebCanvas. 2. Optimize openui5-based code - avoid direct import of JSROOT modules. 3. Fix zooming update problem on lego plots. 4. Fix GED visibility update problem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11737
https://github.com/root-project/root/pull/11737:277,deployability,updat,update,277,"[webgui] test with `tutorials/graphics`, several minor fixes; 1. Adjust several tutorials from `graphics` folder to work with TWebCanvas. 2. Optimize openui5-based code - avoid direct import of JSROOT modules. 3. Fix zooming update problem on lego plots. 4. Fix GED visibility update problem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11737
https://github.com/root-project/root/pull/11737:141,energy efficiency,Optim,Optimize,141,"[webgui] test with `tutorials/graphics`, several minor fixes; 1. Adjust several tutorials from `graphics` folder to work with TWebCanvas. 2. Optimize openui5-based code - avoid direct import of JSROOT modules. 3. Fix zooming update problem on lego plots. 4. Fix GED visibility update problem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11737
https://github.com/root-project/root/pull/11737:201,modifiability,modul,modules,201,"[webgui] test with `tutorials/graphics`, several minor fixes; 1. Adjust several tutorials from `graphics` folder to work with TWebCanvas. 2. Optimize openui5-based code - avoid direct import of JSROOT modules. 3. Fix zooming update problem on lego plots. 4. Fix GED visibility update problem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11737
https://github.com/root-project/root/pull/11737:141,performance,Optimiz,Optimize,141,"[webgui] test with `tutorials/graphics`, several minor fixes; 1. Adjust several tutorials from `graphics` folder to work with TWebCanvas. 2. Optimize openui5-based code - avoid direct import of JSROOT modules. 3. Fix zooming update problem on lego plots. 4. Fix GED visibility update problem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11737
https://github.com/root-project/root/pull/11737:9,safety,test,test,9,"[webgui] test with `tutorials/graphics`, several minor fixes; 1. Adjust several tutorials from `graphics` folder to work with TWebCanvas. 2. Optimize openui5-based code - avoid direct import of JSROOT modules. 3. Fix zooming update problem on lego plots. 4. Fix GED visibility update problem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11737
https://github.com/root-project/root/pull/11737:171,safety,avoid,avoid,171,"[webgui] test with `tutorials/graphics`, several minor fixes; 1. Adjust several tutorials from `graphics` folder to work with TWebCanvas. 2. Optimize openui5-based code - avoid direct import of JSROOT modules. 3. Fix zooming update problem on lego plots. 4. Fix GED visibility update problem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11737
https://github.com/root-project/root/pull/11737:201,safety,modul,modules,201,"[webgui] test with `tutorials/graphics`, several minor fixes; 1. Adjust several tutorials from `graphics` folder to work with TWebCanvas. 2. Optimize openui5-based code - avoid direct import of JSROOT modules. 3. Fix zooming update problem on lego plots. 4. Fix GED visibility update problem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11737
https://github.com/root-project/root/pull/11737:225,safety,updat,update,225,"[webgui] test with `tutorials/graphics`, several minor fixes; 1. Adjust several tutorials from `graphics` folder to work with TWebCanvas. 2. Optimize openui5-based code - avoid direct import of JSROOT modules. 3. Fix zooming update problem on lego plots. 4. Fix GED visibility update problem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11737
https://github.com/root-project/root/pull/11737:277,safety,updat,update,277,"[webgui] test with `tutorials/graphics`, several minor fixes; 1. Adjust several tutorials from `graphics` folder to work with TWebCanvas. 2. Optimize openui5-based code - avoid direct import of JSROOT modules. 3. Fix zooming update problem on lego plots. 4. Fix GED visibility update problem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11737
https://github.com/root-project/root/pull/11737:225,security,updat,update,225,"[webgui] test with `tutorials/graphics`, several minor fixes; 1. Adjust several tutorials from `graphics` folder to work with TWebCanvas. 2. Optimize openui5-based code - avoid direct import of JSROOT modules. 3. Fix zooming update problem on lego plots. 4. Fix GED visibility update problem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11737
https://github.com/root-project/root/pull/11737:277,security,updat,update,277,"[webgui] test with `tutorials/graphics`, several minor fixes; 1. Adjust several tutorials from `graphics` folder to work with TWebCanvas. 2. Optimize openui5-based code - avoid direct import of JSROOT modules. 3. Fix zooming update problem on lego plots. 4. Fix GED visibility update problem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11737
https://github.com/root-project/root/pull/11737:9,testability,test,test,9,"[webgui] test with `tutorials/graphics`, several minor fixes; 1. Adjust several tutorials from `graphics` folder to work with TWebCanvas. 2. Optimize openui5-based code - avoid direct import of JSROOT modules. 3. Fix zooming update problem on lego plots. 4. Fix GED visibility update problem",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11737
https://github.com/root-project/root/issues/11738:471,deployability,version,version,471,"[RF] ROOT v6.26/08 plots wrong pull distribution with RooPlot::pullHist; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. With the recent version of ROOT (v6.26/08), I found out that when plotting the pull distribution after a fit with pullHist, the wrong distribution is shown with respect to the one produced with ROOT v6.26/06, for example. ### Expected behavior. When the fit converges, a gaussian-like pull distribution is expected, while with ROOT v6.26/08 the histogram bars are unreasonably high. ### To Reproduce. You can find the needed code and data to reproduce the bug at the following link:. https://cernbox.cern.ch/s/hnMmXVjUtbwlZJN. Simply run `bug_reproducer.py` with ROOT v6.26/06 and v6.26/08 and see the difference in the plot produced. ### Setup. Tested with ROOT setup from `lb-conda`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11738
https://github.com/root-project/root/issues/11738:471,integrability,version,version,471,"[RF] ROOT v6.26/08 plots wrong pull distribution with RooPlot::pullHist; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. With the recent version of ROOT (v6.26/08), I found out that when plotting the pull distribution after a fit with pullHist, the wrong distribution is shown with respect to the one produced with ROOT v6.26/06, for example. ### Expected behavior. When the fit converges, a gaussian-like pull distribution is expected, while with ROOT v6.26/08 the histogram bars are unreasonably high. ### To Reproduce. You can find the needed code and data to reproduce the bug at the following link:. https://cernbox.cern.ch/s/hnMmXVjUtbwlZJN. Simply run `bug_reproducer.py` with ROOT v6.26/06 and v6.26/08 and see the difference in the plot produced. ### Setup. Tested with ROOT setup from `lb-conda`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11738
https://github.com/root-project/root/issues/11738:36,interoperability,distribut,distribution,36,"[RF] ROOT v6.26/08 plots wrong pull distribution with RooPlot::pullHist; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. With the recent version of ROOT (v6.26/08), I found out that when plotting the pull distribution after a fit with pullHist, the wrong distribution is shown with respect to the one produced with ROOT v6.26/06, for example. ### Expected behavior. When the fit converges, a gaussian-like pull distribution is expected, while with ROOT v6.26/08 the histogram bars are unreasonably high. ### To Reproduce. You can find the needed code and data to reproduce the bug at the following link:. https://cernbox.cern.ch/s/hnMmXVjUtbwlZJN. Simply run `bug_reproducer.py` with ROOT v6.26/06 and v6.26/08 and see the difference in the plot produced. ### Setup. Tested with ROOT setup from `lb-conda`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11738
https://github.com/root-project/root/issues/11738:539,interoperability,distribut,distribution,539,"[RF] ROOT v6.26/08 plots wrong pull distribution with RooPlot::pullHist; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. With the recent version of ROOT (v6.26/08), I found out that when plotting the pull distribution after a fit with pullHist, the wrong distribution is shown with respect to the one produced with ROOT v6.26/06, for example. ### Expected behavior. When the fit converges, a gaussian-like pull distribution is expected, while with ROOT v6.26/08 the histogram bars are unreasonably high. ### To Reproduce. You can find the needed code and data to reproduce the bug at the following link:. https://cernbox.cern.ch/s/hnMmXVjUtbwlZJN. Simply run `bug_reproducer.py` with ROOT v6.26/06 and v6.26/08 and see the difference in the plot produced. ### Setup. Tested with ROOT setup from `lb-conda`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11738
https://github.com/root-project/root/issues/11738:589,interoperability,distribut,distribution,589,"[RF] ROOT v6.26/08 plots wrong pull distribution with RooPlot::pullHist; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. With the recent version of ROOT (v6.26/08), I found out that when plotting the pull distribution after a fit with pullHist, the wrong distribution is shown with respect to the one produced with ROOT v6.26/06, for example. ### Expected behavior. When the fit converges, a gaussian-like pull distribution is expected, while with ROOT v6.26/08 the histogram bars are unreasonably high. ### To Reproduce. You can find the needed code and data to reproduce the bug at the following link:. https://cernbox.cern.ch/s/hnMmXVjUtbwlZJN. Simply run `bug_reproducer.py` with ROOT v6.26/06 and v6.26/08 and see the difference in the plot produced. ### Setup. Tested with ROOT setup from `lb-conda`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11738
https://github.com/root-project/root/issues/11738:745,interoperability,distribut,distribution,745,"[RF] ROOT v6.26/08 plots wrong pull distribution with RooPlot::pullHist; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. With the recent version of ROOT (v6.26/08), I found out that when plotting the pull distribution after a fit with pullHist, the wrong distribution is shown with respect to the one produced with ROOT v6.26/06, for example. ### Expected behavior. When the fit converges, a gaussian-like pull distribution is expected, while with ROOT v6.26/08 the histogram bars are unreasonably high. ### To Reproduce. You can find the needed code and data to reproduce the bug at the following link:. https://cernbox.cern.ch/s/hnMmXVjUtbwlZJN. Simply run `bug_reproducer.py` with ROOT v6.26/06 and v6.26/08 and see the difference in the plot produced. ### Setup. Tested with ROOT setup from `lb-conda`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11738
https://github.com/root-project/root/issues/11738:471,modifiability,version,version,471,"[RF] ROOT v6.26/08 plots wrong pull distribution with RooPlot::pullHist; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. With the recent version of ROOT (v6.26/08), I found out that when plotting the pull distribution after a fit with pullHist, the wrong distribution is shown with respect to the one produced with ROOT v6.26/06, for example. ### Expected behavior. When the fit converges, a gaussian-like pull distribution is expected, while with ROOT v6.26/08 the histogram bars are unreasonably high. ### To Reproduce. You can find the needed code and data to reproduce the bug at the following link:. https://cernbox.cern.ch/s/hnMmXVjUtbwlZJN. Simply run `bug_reproducer.py` with ROOT v6.26/06 and v6.26/08 and see the difference in the plot produced. ### Setup. Tested with ROOT setup from `lb-conda`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11738
https://github.com/root-project/root/issues/11738:1101,safety,Test,Tested,1101,"[RF] ROOT v6.26/08 plots wrong pull distribution with RooPlot::pullHist; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. With the recent version of ROOT (v6.26/08), I found out that when plotting the pull distribution after a fit with pullHist, the wrong distribution is shown with respect to the one produced with ROOT v6.26/06, for example. ### Expected behavior. When the fit converges, a gaussian-like pull distribution is expected, while with ROOT v6.26/08 the histogram bars are unreasonably high. ### To Reproduce. You can find the needed code and data to reproduce the bug at the following link:. https://cernbox.cern.ch/s/hnMmXVjUtbwlZJN. Simply run `bug_reproducer.py` with ROOT v6.26/06 and v6.26/08 and see the difference in the plot produced. ### Setup. Tested with ROOT setup from `lb-conda`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11738
https://github.com/root-project/root/issues/11738:982,testability,Simpl,Simply,982,"[RF] ROOT v6.26/08 plots wrong pull distribution with RooPlot::pullHist; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. With the recent version of ROOT (v6.26/08), I found out that when plotting the pull distribution after a fit with pullHist, the wrong distribution is shown with respect to the one produced with ROOT v6.26/06, for example. ### Expected behavior. When the fit converges, a gaussian-like pull distribution is expected, while with ROOT v6.26/08 the histogram bars are unreasonably high. ### To Reproduce. You can find the needed code and data to reproduce the bug at the following link:. https://cernbox.cern.ch/s/hnMmXVjUtbwlZJN. Simply run `bug_reproducer.py` with ROOT v6.26/06 and v6.26/08 and see the difference in the plot produced. ### Setup. Tested with ROOT setup from `lb-conda`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11738
https://github.com/root-project/root/issues/11738:1101,testability,Test,Tested,1101,"[RF] ROOT v6.26/08 plots wrong pull distribution with RooPlot::pullHist; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. With the recent version of ROOT (v6.26/08), I found out that when plotting the pull distribution after a fit with pullHist, the wrong distribution is shown with respect to the one produced with ROOT v6.26/06, for example. ### Expected behavior. When the fit converges, a gaussian-like pull distribution is expected, while with ROOT v6.26/08 the histogram bars are unreasonably high. ### To Reproduce. You can find the needed code and data to reproduce the bug at the following link:. https://cernbox.cern.ch/s/hnMmXVjUtbwlZJN. Simply run `bug_reproducer.py` with ROOT v6.26/06 and v6.26/08 and see the difference in the plot produced. ### Setup. Tested with ROOT setup from `lb-conda`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11738
https://github.com/root-project/root/issues/11738:690,usability,behavi,behavior,690,"[RF] ROOT v6.26/08 plots wrong pull distribution with RooPlot::pullHist; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. With the recent version of ROOT (v6.26/08), I found out that when plotting the pull distribution after a fit with pullHist, the wrong distribution is shown with respect to the one produced with ROOT v6.26/06, for example. ### Expected behavior. When the fit converges, a gaussian-like pull distribution is expected, while with ROOT v6.26/08 the histogram bars are unreasonably high. ### To Reproduce. You can find the needed code and data to reproduce the bug at the following link:. https://cernbox.cern.ch/s/hnMmXVjUtbwlZJN. Simply run `bug_reproducer.py` with ROOT v6.26/06 and v6.26/08 and see the difference in the plot produced. ### Setup. Tested with ROOT setup from `lb-conda`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11738
https://github.com/root-project/root/issues/11738:982,usability,Simpl,Simply,982,"[RF] ROOT v6.26/08 plots wrong pull distribution with RooPlot::pullHist; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. With the recent version of ROOT (v6.26/08), I found out that when plotting the pull distribution after a fit with pullHist, the wrong distribution is shown with respect to the one produced with ROOT v6.26/06, for example. ### Expected behavior. When the fit converges, a gaussian-like pull distribution is expected, while with ROOT v6.26/08 the histogram bars are unreasonably high. ### To Reproduce. You can find the needed code and data to reproduce the bug at the following link:. https://cernbox.cern.ch/s/hnMmXVjUtbwlZJN. Simply run `bug_reproducer.py` with ROOT v6.26/06 and v6.26/08 and see the difference in the plot produced. ### Setup. Tested with ROOT setup from `lb-conda`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11738
https://github.com/root-project/root/pull/11739:136,integrability,configur,configured,136,Provide plugin for RTreeViewer; There is fictional `TVirtualTreeViewer` class and `RTreeViewer` plugin is activated when web display is configured. Allows to use web-based canvas and tree viewer together like in `tutorials/tree/tree0.C` example.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11739
https://github.com/root-project/root/pull/11739:8,interoperability,plug,plugin,8,Provide plugin for RTreeViewer; There is fictional `TVirtualTreeViewer` class and `RTreeViewer` plugin is activated when web display is configured. Allows to use web-based canvas and tree viewer together like in `tutorials/tree/tree0.C` example.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11739
https://github.com/root-project/root/pull/11739:96,interoperability,plug,plugin,96,Provide plugin for RTreeViewer; There is fictional `TVirtualTreeViewer` class and `RTreeViewer` plugin is activated when web display is configured. Allows to use web-based canvas and tree viewer together like in `tutorials/tree/tree0.C` example.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11739
https://github.com/root-project/root/pull/11739:136,modifiability,configur,configured,136,Provide plugin for RTreeViewer; There is fictional `TVirtualTreeViewer` class and `RTreeViewer` plugin is activated when web display is configured. Allows to use web-based canvas and tree viewer together like in `tutorials/tree/tree0.C` example.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11739
https://github.com/root-project/root/pull/11739:136,security,configur,configured,136,Provide plugin for RTreeViewer; There is fictional `TVirtualTreeViewer` class and `RTreeViewer` plugin is activated when web display is configured. Allows to use web-based canvas and tree viewer together like in `tutorials/tree/tree0.C` example.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11739
https://github.com/root-project/root/pull/11740:96,deployability,version,version,96,[base] Make ClassDef `Class_Version()` constexpr:; allows to switch behavior based on the class version with `if constexpr`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11740
https://github.com/root-project/root/pull/11740:96,integrability,version,version,96,[base] Make ClassDef `Class_Version()` constexpr:; allows to switch behavior based on the class version with `if constexpr`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11740
https://github.com/root-project/root/pull/11740:96,modifiability,version,version,96,[base] Make ClassDef `Class_Version()` constexpr:; allows to switch behavior based on the class version with `if constexpr`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11740
https://github.com/root-project/root/pull/11740:68,usability,behavi,behavior,68,[base] Make ClassDef `Class_Version()` constexpr:; allows to switch behavior based on the class version with `if constexpr`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11740
https://github.com/root-project/root/pull/11741:164,interoperability,Format,Format,164,[gpad] Declare TWebCanvas as friend class for TPad/TCanvas; 1. Let assign private members directly - without workaround with GetClassMemberOffset. 2. Use `TString::Format()` instead of `Form()` in TPad.cxx. 3. Provide function to generate unique canvas name - used 3 times in TCanvas.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11741
https://github.com/root-project/root/pull/11741:267,performance,time,times,267,[gpad] Declare TWebCanvas as friend class for TPad/TCanvas; 1. Let assign private members directly - without workaround with GetClassMemberOffset. 2. Use `TString::Format()` instead of `Form()` in TPad.cxx. 3. Provide function to generate unique canvas name - used 3 times in TCanvas.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11741
https://github.com/root-project/root/pull/11742:336,deployability,depend,dependencies,336,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:277,integrability,configur,configure,277,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:317,integrability,configur,configure,317,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:336,integrability,depend,dependencies,336,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:385,integrability,configur,configure,385,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:413,integrability,configur,configure,413,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:530,integrability,configur,configure,530,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:277,modifiability,configur,configure,277,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:317,modifiability,configur,configure,317,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:336,modifiability,depend,dependencies,336,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:385,modifiability,configur,configure,385,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:413,modifiability,configur,configure,413,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:530,modifiability,configur,configure,530,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:40,performance,time,timestamps,40,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:81,performance,time,timestamps,81,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:128,performance,time,timestamp,128,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:552,performance,time,timestamp,552,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:336,safety,depend,dependencies,336,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:206,security,polic,policy,206,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:226,security,polic,policy,226,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:277,security,configur,configure,277,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:317,security,configur,configure,317,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:385,security,configur,configure,385,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:413,security,configur,configure,413,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:530,security,configur,configure,530,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:336,testability,depend,dependencies,336,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/pull/11742:194,usability,help,help,194,"[cmake] Tell CMake >= 3.24 to use tared timestamps:; Newer CMake uses extraction timestamps for extracted files, instead of the timestamp as stored in the tar file, see. https://cmake.org/cmake/help/latest/policy/CMP0135.html#policy:CMP0135 This causes (massive) problems with configure/Makefile tar files, where the configure/Makefile dependencies (e.g. autoconf) might be newer than configure/Makefile, causing configure/Makefile to wanting to regenerate themselves because they are supposedly out of date. For anything with ""./configure"", force the timestamp as stored in the tar file. Fixes https://github.com/root-project/root/issues/11743.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11742
https://github.com/root-project/root/issues/11743:793,availability,Error,Error,793,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:14,deployability,fail,fails,14,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:23,deployability,build,build,23,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:185,deployability,build,build-Release,185,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:228,deployability,fail,failed,228,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:293,deployability,build,build,293,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:301,deployability,log,log,301,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:209,integrability,messag,message,209,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:438,integrability,configur,configure,438,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:477,integrability,configur,configure,477,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:209,interoperability,messag,message,209,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:438,modifiability,configur,configure,438,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:477,modifiability,configur,configure,477,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:542,modifiability,pac,package,542,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:793,performance,Error,Error,793,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:14,reliability,fail,fails,14,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:228,reliability,fail,failed,228,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:301,safety,log,log,301,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:793,safety,Error,Error,793,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:301,security,log,log,301,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:409,security,modif,modified,409,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:438,security,configur,configure,438,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:477,security,configur,configure,477,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:301,testability,log,log,301,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:220,usability,Command,Command,220,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/issues/11743:793,usability,Error,Error,793,"CMake >= 3.24 fails to build LZMA: WARNING: 'aclocal-1.15' is missing on your system.; - [X] Checked for duplicates. With CMake >= 3.24 we get. ```. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-Release.cmake:49 (message):. Command failed: 2. 'make'. See also. .../LZMA-prefix/src/LZMA-stamp/LZMA-build-*.log. ```. which has. ```. WARNING: 'aclocal-1.15' is missing on your system. You should only need it if you modified 'acinclude.m4' or. 'configure.ac' or m4 files included by 'configure.ac'. The 'aclocal' program is part of the GNU Automake package:. <http://www.gnu.org/software/automake>. It also requires GNU Autoconf, GNU m4 and Perl in order to run:. <http://www.gnu.org/software/autoconf>. <http://www.gnu.org/software/m4/>. <http://www.perl.org/>. make: *** [Makefile:514: aclocal.m4] Error 127. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11743
https://github.com/root-project/root/pull/11744:44,energy efficiency,core,core,44,"Use `TString::Format()` instead `Form()` in core classes; Reduce usage of unsafe `Form()` function, especially in Thread.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11744
https://github.com/root-project/root/pull/11744:58,energy efficiency,Reduc,Reduce,58,"Use `TString::Format()` instead `Form()` in core classes; Reduce usage of unsafe `Form()` function, especially in Thread.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11744
https://github.com/root-project/root/pull/11744:14,interoperability,Format,Format,14,"Use `TString::Format()` instead `Form()` in core classes; Reduce usage of unsafe `Form()` function, especially in Thread.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11744
https://github.com/root-project/root/pull/11744:74,safety,unsaf,unsafe,74,"Use `TString::Format()` instead `Form()` in core classes; Reduce usage of unsafe `Form()` function, especially in Thread.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11744
https://github.com/root-project/root/issues/11746:68,deployability,updat,update,68,"TH2::Fill(const char *namex, const char *namey, Double_t w) doesn't update fTsumwxy; This line:. https://github.com/root-project/root/blob/7aab9a2be02967dc75342b4fb3c01c98f2a5a2c9/hist/hist/src/TH2.cxx#L485. Should be `fTsumwxy += z * x * y;` instead, as in the other versions `TH2::Fill`. This was changed by 4465976d5da9b6c18adff75c430958112e79bf94, previously `fTsumwxy` was updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11746
https://github.com/root-project/root/issues/11746:268,deployability,version,versions,268,"TH2::Fill(const char *namex, const char *namey, Double_t w) doesn't update fTsumwxy; This line:. https://github.com/root-project/root/blob/7aab9a2be02967dc75342b4fb3c01c98f2a5a2c9/hist/hist/src/TH2.cxx#L485. Should be `fTsumwxy += z * x * y;` instead, as in the other versions `TH2::Fill`. This was changed by 4465976d5da9b6c18adff75c430958112e79bf94, previously `fTsumwxy` was updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11746
https://github.com/root-project/root/issues/11746:378,deployability,updat,updated,378,"TH2::Fill(const char *namex, const char *namey, Double_t w) doesn't update fTsumwxy; This line:. https://github.com/root-project/root/blob/7aab9a2be02967dc75342b4fb3c01c98f2a5a2c9/hist/hist/src/TH2.cxx#L485. Should be `fTsumwxy += z * x * y;` instead, as in the other versions `TH2::Fill`. This was changed by 4465976d5da9b6c18adff75c430958112e79bf94, previously `fTsumwxy` was updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11746
https://github.com/root-project/root/issues/11746:268,integrability,version,versions,268,"TH2::Fill(const char *namex, const char *namey, Double_t w) doesn't update fTsumwxy; This line:. https://github.com/root-project/root/blob/7aab9a2be02967dc75342b4fb3c01c98f2a5a2c9/hist/hist/src/TH2.cxx#L485. Should be `fTsumwxy += z * x * y;` instead, as in the other versions `TH2::Fill`. This was changed by 4465976d5da9b6c18adff75c430958112e79bf94, previously `fTsumwxy` was updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11746
https://github.com/root-project/root/issues/11746:268,modifiability,version,versions,268,"TH2::Fill(const char *namex, const char *namey, Double_t w) doesn't update fTsumwxy; This line:. https://github.com/root-project/root/blob/7aab9a2be02967dc75342b4fb3c01c98f2a5a2c9/hist/hist/src/TH2.cxx#L485. Should be `fTsumwxy += z * x * y;` instead, as in the other versions `TH2::Fill`. This was changed by 4465976d5da9b6c18adff75c430958112e79bf94, previously `fTsumwxy` was updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11746
https://github.com/root-project/root/issues/11746:60,reliability,doe,doesn,60,"TH2::Fill(const char *namex, const char *namey, Double_t w) doesn't update fTsumwxy; This line:. https://github.com/root-project/root/blob/7aab9a2be02967dc75342b4fb3c01c98f2a5a2c9/hist/hist/src/TH2.cxx#L485. Should be `fTsumwxy += z * x * y;` instead, as in the other versions `TH2::Fill`. This was changed by 4465976d5da9b6c18adff75c430958112e79bf94, previously `fTsumwxy` was updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11746
https://github.com/root-project/root/issues/11746:68,safety,updat,update,68,"TH2::Fill(const char *namex, const char *namey, Double_t w) doesn't update fTsumwxy; This line:. https://github.com/root-project/root/blob/7aab9a2be02967dc75342b4fb3c01c98f2a5a2c9/hist/hist/src/TH2.cxx#L485. Should be `fTsumwxy += z * x * y;` instead, as in the other versions `TH2::Fill`. This was changed by 4465976d5da9b6c18adff75c430958112e79bf94, previously `fTsumwxy` was updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11746
https://github.com/root-project/root/issues/11746:378,safety,updat,updated,378,"TH2::Fill(const char *namex, const char *namey, Double_t w) doesn't update fTsumwxy; This line:. https://github.com/root-project/root/blob/7aab9a2be02967dc75342b4fb3c01c98f2a5a2c9/hist/hist/src/TH2.cxx#L485. Should be `fTsumwxy += z * x * y;` instead, as in the other versions `TH2::Fill`. This was changed by 4465976d5da9b6c18adff75c430958112e79bf94, previously `fTsumwxy` was updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11746
https://github.com/root-project/root/issues/11746:68,security,updat,update,68,"TH2::Fill(const char *namex, const char *namey, Double_t w) doesn't update fTsumwxy; This line:. https://github.com/root-project/root/blob/7aab9a2be02967dc75342b4fb3c01c98f2a5a2c9/hist/hist/src/TH2.cxx#L485. Should be `fTsumwxy += z * x * y;` instead, as in the other versions `TH2::Fill`. This was changed by 4465976d5da9b6c18adff75c430958112e79bf94, previously `fTsumwxy` was updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11746
https://github.com/root-project/root/issues/11746:378,security,updat,updated,378,"TH2::Fill(const char *namex, const char *namey, Double_t w) doesn't update fTsumwxy; This line:. https://github.com/root-project/root/blob/7aab9a2be02967dc75342b4fb3c01c98f2a5a2c9/hist/hist/src/TH2.cxx#L485. Should be `fTsumwxy += z * x * y;` instead, as in the other versions `TH2::Fill`. This was changed by 4465976d5da9b6c18adff75c430958112e79bf94, previously `fTsumwxy` was updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11746
https://github.com/root-project/root/issues/11747:376,deployability,fail,failing,376,"Frame of a TPad can sometimes be deleted 'twice'; As seen in https://github.com/cms-sw/cmssw/issues/40091 the code in `TPad::Close`:. ```. if (fPrimitives). fPrimitives->Clear();. if (fView) {. if (!ROOT::Detail::HasBeenDeleted(fView)) delete fView;. fView = nullptr;. }. if (fFrame) {. if (!ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;. fFrame = nullptr;. }. ```. is failing in the case of reading a pad from a file in at least some circumstances. `TPad::Streamer` explicit set the bit `kCanDelete` on all objects in the list of primitives, thus including the frame which have their `kCanDelete` bit explicitly reset elsewhere (in the code run during the initial creation of the frame and view). This means that avoiding the a double deletion (the first is now during the `fPrimitives->Clear()`) relies on the heuristic of `HasBeenDeleted` to work properly, at least in the case seen in cmssw above) it does not and lead to crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11747
https://github.com/root-project/root/issues/11747:376,reliability,fail,failing,376,"Frame of a TPad can sometimes be deleted 'twice'; As seen in https://github.com/cms-sw/cmssw/issues/40091 the code in `TPad::Close`:. ```. if (fPrimitives). fPrimitives->Clear();. if (fView) {. if (!ROOT::Detail::HasBeenDeleted(fView)) delete fView;. fView = nullptr;. }. if (fFrame) {. if (!ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;. fFrame = nullptr;. }. ```. is failing in the case of reading a pad from a file in at least some circumstances. `TPad::Streamer` explicit set the bit `kCanDelete` on all objects in the list of primitives, thus including the frame which have their `kCanDelete` bit explicitly reset elsewhere (in the code run during the initial creation of the frame and view). This means that avoiding the a double deletion (the first is now during the `fPrimitives->Clear()`) relies on the heuristic of `HasBeenDeleted` to work properly, at least in the case seen in cmssw above) it does not and lead to crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11747
https://github.com/root-project/root/issues/11747:912,reliability,doe,does,912,"Frame of a TPad can sometimes be deleted 'twice'; As seen in https://github.com/cms-sw/cmssw/issues/40091 the code in `TPad::Close`:. ```. if (fPrimitives). fPrimitives->Clear();. if (fView) {. if (!ROOT::Detail::HasBeenDeleted(fView)) delete fView;. fView = nullptr;. }. if (fFrame) {. if (!ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;. fFrame = nullptr;. }. ```. is failing in the case of reading a pad from a file in at least some circumstances. `TPad::Streamer` explicit set the bit `kCanDelete` on all objects in the list of primitives, thus including the frame which have their `kCanDelete` bit explicitly reset elsewhere (in the code run during the initial creation of the frame and view). This means that avoiding the a double deletion (the first is now during the `fPrimitives->Clear()`) relies on the heuristic of `HasBeenDeleted` to work properly, at least in the case seen in cmssw above) it does not and lead to crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11747
https://github.com/root-project/root/issues/11747:721,safety,avoid,avoiding,721,"Frame of a TPad can sometimes be deleted 'twice'; As seen in https://github.com/cms-sw/cmssw/issues/40091 the code in `TPad::Close`:. ```. if (fPrimitives). fPrimitives->Clear();. if (fView) {. if (!ROOT::Detail::HasBeenDeleted(fView)) delete fView;. fView = nullptr;. }. if (fFrame) {. if (!ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;. fFrame = nullptr;. }. ```. is failing in the case of reading a pad from a file in at least some circumstances. `TPad::Streamer` explicit set the bit `kCanDelete` on all objects in the list of primitives, thus including the frame which have their `kCanDelete` bit explicitly reset elsewhere (in the code run during the initial creation of the frame and view). This means that avoiding the a double deletion (the first is now during the `fPrimitives->Clear()`) relies on the heuristic of `HasBeenDeleted` to work properly, at least in the case seen in cmssw above) it does not and lead to crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11747
https://github.com/root-project/root/issues/11747:125,usability,Close,Close,125,"Frame of a TPad can sometimes be deleted 'twice'; As seen in https://github.com/cms-sw/cmssw/issues/40091 the code in `TPad::Close`:. ```. if (fPrimitives). fPrimitives->Clear();. if (fView) {. if (!ROOT::Detail::HasBeenDeleted(fView)) delete fView;. fView = nullptr;. }. if (fFrame) {. if (!ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;. fFrame = nullptr;. }. ```. is failing in the case of reading a pad from a file in at least some circumstances. `TPad::Streamer` explicit set the bit `kCanDelete` on all objects in the list of primitives, thus including the frame which have their `kCanDelete` bit explicitly reset elsewhere (in the code run during the initial creation of the frame and view). This means that avoiding the a double deletion (the first is now during the `fPrimitives->Clear()`) relies on the heuristic of `HasBeenDeleted` to work properly, at least in the case seen in cmssw above) it does not and lead to crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11747
https://github.com/root-project/root/issues/11747:170,usability,Clear,Clear,170,"Frame of a TPad can sometimes be deleted 'twice'; As seen in https://github.com/cms-sw/cmssw/issues/40091 the code in `TPad::Close`:. ```. if (fPrimitives). fPrimitives->Clear();. if (fView) {. if (!ROOT::Detail::HasBeenDeleted(fView)) delete fView;. fView = nullptr;. }. if (fFrame) {. if (!ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;. fFrame = nullptr;. }. ```. is failing in the case of reading a pad from a file in at least some circumstances. `TPad::Streamer` explicit set the bit `kCanDelete` on all objects in the list of primitives, thus including the frame which have their `kCanDelete` bit explicitly reset elsewhere (in the code run during the initial creation of the frame and view). This means that avoiding the a double deletion (the first is now during the `fPrimitives->Clear()`) relies on the heuristic of `HasBeenDeleted` to work properly, at least in the case seen in cmssw above) it does not and lead to crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11747
https://github.com/root-project/root/issues/11747:795,usability,Clear,Clear,795,"Frame of a TPad can sometimes be deleted 'twice'; As seen in https://github.com/cms-sw/cmssw/issues/40091 the code in `TPad::Close`:. ```. if (fPrimitives). fPrimitives->Clear();. if (fView) {. if (!ROOT::Detail::HasBeenDeleted(fView)) delete fView;. fView = nullptr;. }. if (fFrame) {. if (!ROOT::Detail::HasBeenDeleted(fFrame)) delete fFrame;. fFrame = nullptr;. }. ```. is failing in the case of reading a pad from a file in at least some circumstances. `TPad::Streamer` explicit set the bit `kCanDelete` on all objects in the list of primitives, thus including the frame which have their `kCanDelete` bit explicitly reset elsewhere (in the code run during the initial creation of the frame and view). This means that avoiding the a double deletion (the first is now during the `fPrimitives->Clear()`) relies on the heuristic of `HasBeenDeleted` to work properly, at least in the case seen in cmssw above) it does not and lead to crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11747
https://github.com/root-project/root/pull/11748:48,deployability,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 24; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to master to v6-26-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11566. 2. https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. Related to https://github.com/root-project/root/issues/11534.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11748
https://github.com/root-project/root/pull/11748:172,deployability,patch,patches,172,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 24; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to master to v6-26-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11566. 2. https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. Related to https://github.com/root-project/root/issues/11534.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11748
https://github.com/root-project/root/pull/11748:48,safety,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 24; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to master to v6-26-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11566. 2. https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. Related to https://github.com/root-project/root/issues/11534.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11748
https://github.com/root-project/root/pull/11748:172,safety,patch,patches,172,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 24; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to master to v6-26-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11566. 2. https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. Related to https://github.com/root-project/root/issues/11534.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11748
https://github.com/root-project/root/pull/11748:48,security,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 24; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to master to v6-26-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11566. 2. https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. Related to https://github.com/root-project/root/issues/11534.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11748
https://github.com/root-project/root/pull/11748:172,security,patch,patches,172,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 24; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to master to v6-26-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11566. 2. https://github.com/root-project/root/pull/11584. Only the first commit that is not code modernization. Related to https://github.com/root-project/root/issues/11534.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11748
https://github.com/root-project/root/issues/11749:121,availability,sla,slackbuild,121,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:141,availability,sla,slackbuilds,141,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:680,availability,Sla,Slackware,680,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:794,availability,sla,slackbuild,794,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:854,availability,Operat,Operating,854,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:872,availability,Sla,Slackware,872,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:257,deployability,version,versions,257,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:667,deployability,Instal,Install,667,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:699,deployability,Instal,Install,699,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:712,deployability,depend,dependencies,712,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:729,deployability,Build,Build,729,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:833,deployability,version,version,833,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:157,integrability,repositor,repository,157,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:257,integrability,version,versions,257,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:712,integrability,depend,dependencies,712,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:833,integrability,version,version,833,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:35,interoperability,distribut,distribution,35,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:157,interoperability,repositor,repository,157,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:416,interoperability,share,share,416,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:490,interoperability,distribut,distributed,490,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:257,modifiability,version,versions,257,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:304,modifiability,pac,package,304,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:712,modifiability,depend,dependencies,712,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:740,modifiability,pac,package,740,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:833,modifiability,version,version,833,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:513,performance,synch,synchronize,513,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:121,reliability,sla,slackbuild,121,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:141,reliability,sla,slackbuilds,141,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:680,reliability,Sla,Slackware,680,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:794,reliability,sla,slackbuild,794,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:872,reliability,Sla,Slackware,872,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:712,safety,depend,dependencies,712,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:712,testability,depend,dependencies,712,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11749:653,usability,behavi,behavior,653,"Remove empty files from the source distribution tarball; ### Explain what you would like to see improved. While running [slackbuild](https://slackbuilds.org/repository/15.0/academic/root/) for the latest stable ROOT (v6.26/10), as well as for some previous versions, I receive the following warning from package utils:. ```. WARNING: zero length file opt/ROOT-6.26.10/tutorials/doc/v602/index.md. ```. ### Optional: share how it could be improved. You could delete the empty files from the distributed tarball or synchronize with the git repo: https://github.com/root-project/root/blob/master/doc/v602/index.md. ### To Reproduce. Steps to reproduce the behavior:. 1. Install full Slackware 15.0. 2. Install ROOT dependencies. 3. Build ROOT package. The warnings will be shown at the end of the slackbuild output . ### Setup. 1. ROOT version: 6.26/10. 2. Operating system: Slackware 15.0. 3. ROOT built from the official source tarball.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11749
https://github.com/root-project/root/issues/11750:65,deployability,version,version,65,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:216,deployability,modul,modules,216,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:315,deployability,version,versions,315,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:392,deployability,build,build,392,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:414,deployability,version,version,414,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:471,deployability,build,building,471,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:525,deployability,instal,installed,525,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:633,deployability,version,version,633,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:789,deployability,build,build,789,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:826,deployability,instal,install,826,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:902,deployability,build,build,902,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:939,deployability,instal,install,939,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:1038,deployability,build,build,1038,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:1075,deployability,instal,install,1075,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:1184,deployability,build,build,1184,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:1221,deployability,instal,install,1221,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:1386,deployability,patch,patch,1386,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:1476,deployability,version,version,1476,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:65,integrability,version,version,65,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:315,integrability,version,versions,315,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:414,integrability,version,version,414,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:600,integrability,configur,configure,600,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:633,integrability,version,version,633,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:734,integrability,wrap,wrapper,734,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:1476,integrability,version,version,1476,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:734,interoperability,wrapper,wrapper,734,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:65,modifiability,version,version,65,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:216,modifiability,modul,modules,216,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:315,modifiability,version,versions,315,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:414,modifiability,version,version,414,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:562,modifiability,pac,packages,562,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:600,modifiability,configur,configure,600,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:633,modifiability,version,version,633,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:1476,modifiability,version,version,1476,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:216,safety,modul,modules,216,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:1386,safety,patch,patch,1386,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:550,security,control,control,550,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:600,security,configur,configure,600,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:1386,security,patch,patch,1386,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/issues/11750:550,testability,control,control,550,"FindXROOTD adds libraries to link against irrespective of xrootd version used; Dear ROOT devs,. These lines in the FindXROOTD. https://github.com/root-project/root/blob/323c21416cea9a64080698c23a7e2f6f6d1808bf/cmake/modules/FindXROOTD.cmake#L137-L149. make some root libraries, e.g., libNetxNG.so, link against old versions of xrootd if they are found on the system, even though one wants to build against the new version of xrootd. We for SPI run into this problem when building on a machine which just happens to have this installed, and we cannot control the packages. e.g. this is printed during configure:. ```. -- Found Xrootd version num: 5.3.1 (setting -DROOTXRDVERS=500030001). --. -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- include_dirs: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/include/xrootd/private. -- libraries: /data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdUtils.so;/usr/lib64/libXrdClient.so;/data/sftnight/build/workspace/lcg_release_pipeline/install/xrootd/5.3.1/aarch64-centos7-gcc8-opt/lib64/libXrdCl.so. ```. This then causes problem when our ROOT is used on some other machine. So at the moment we just patch these lines out. If you could consider dropping them, or some check based on xrootd version? Thanks,. Andre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/11750
https://github.com/root-project/root/pull/11751:92,deployability,updat,updated,92,"[hist] Fix computation of statistics in TH2::Fill(nameX, nameY); The Sum in x and y was not updated when the X and Y axis are not extendable or are not alphanumerics. . This PR fixes ROOT #11746.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11751
https://github.com/root-project/root/pull/11751:130,modifiability,exten,extendable,130,"[hist] Fix computation of statistics in TH2::Fill(nameX, nameY); The Sum in x and y was not updated when the X and Y axis are not extendable or are not alphanumerics. . This PR fixes ROOT #11746.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/11751
