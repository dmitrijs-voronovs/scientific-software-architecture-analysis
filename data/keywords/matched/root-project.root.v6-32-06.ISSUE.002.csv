id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/453:1378,usability,clear,clearly,1378,"Fix Transform3D * Plane3D multiplication operator; This PR fixes a regression introduced in a recent update to extend the templation in GenVector (PR #394). It turns out that this update broke the multiplication of a Transform3D by a Plane3D. This regression was spotted in the LHCb nightly build which tests against the master of ROOT. e.g. https://lhcb-nightlies.cern.ch/logs/build/nightly/lhcb-lcg-dev3/105/x86_64-centos7-gcc62-opt/LHCb/#show_error1538. The error is. ```. /build/jenkins-build-new/workspace/nightly-builds/build/build/LHCB/LHCB_HEAD/Det/RichDet/src/Lib/DeRichHPDPanel.cpp:673:52: error: no match for 'operator*' (operand types are 'const Transform3D {aka const ROOT::Math::Impl::Transform3D<double>}' and 'Gaudi::Plane3D {aka ROOT::Math::Impl::Plane3D<double>}'). 	 m_localPlane = geometry()->toLocalMatrix() * m_detectionPlane;. /build/jenkins-build-new/workspace/nightly-builds/build/build/LHCB/LHCB_HEAD/Det/RichDet/src/Lib/DeRichPMTPanel.cpp:407:46: error: no match for 'operator*' (operand types are 'const Transform3D {aka const ROOT::Math::Impl::Transform3D<double>}' and 'Gaudi::Plane3D {aka ROOT::Math::Impl::Plane3D<double>}'). 	 m_localPlane = geometry()->toLocalMatrix() * m_detectionPlane;. ```. This PR fixes this by adding an explicit operator for this. I have also extended the GenVector Vc test to explicitly cover this operation, as it was clearly one not covered in the ROOT tests so far.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/453
https://github.com/root-project/root/pull/454:123,modifiability,Refact,Refactored,123,"ROOT-8517 ROCCurve crash; ROOT/ROOT-8517. Regression: TMVA ROCCurve crash. Fixed possible reason for a crash in the issue. Refactored the code, removing repetitions. ROCCurve and ROCIntegral used to only be computed correctly in cases when the number of background samples is exactly equal to the number of signal samples.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:123,performance,Refactor,Refactored,123,"ROOT-8517 ROCCurve crash; ROOT/ROOT-8517. Regression: TMVA ROCCurve crash. Fixed possible reason for a crash in the issue. Refactored the code, removing repetitions. ROCCurve and ROCIntegral used to only be computed correctly in cases when the number of background samples is exactly equal to the number of signal samples.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:307,security,sign,signal,307,"ROOT-8517 ROCCurve crash; ROOT/ROOT-8517. Regression: TMVA ROCCurve crash. Fixed possible reason for a crash in the issue. Refactored the code, removing repetitions. ROCCurve and ROCIntegral used to only be computed correctly in cases when the number of background samples is exactly equal to the number of signal samples.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/454:42,testability,Regress,Regression,42,"ROOT-8517 ROCCurve crash; ROOT/ROOT-8517. Regression: TMVA ROCCurve crash. Fixed possible reason for a crash in the issue. Refactored the code, removing repetitions. ROCCurve and ROCIntegral used to only be computed correctly in cases when the number of background samples is exactly equal to the number of signal samples.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/454
https://github.com/root-project/root/pull/455:0,deployability,Patch,Patch,0,Patch GetVariableSettings() method to correctly report parameter limits.; Minuit2Minimizer's GetVariableSettings method doesn't correctly report parameter limits. This PR corrects its logic to report them correctly. In the old code then a variable with lower+upper limits only has the lower limit reported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/455
https://github.com/root-project/root/pull/455:184,deployability,log,logic,184,Patch GetVariableSettings() method to correctly report parameter limits.; Minuit2Minimizer's GetVariableSettings method doesn't correctly report parameter limits. This PR corrects its logic to report them correctly. In the old code then a variable with lower+upper limits only has the lower limit reported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/455
https://github.com/root-project/root/pull/455:55,modifiability,paramet,parameter,55,Patch GetVariableSettings() method to correctly report parameter limits.; Minuit2Minimizer's GetVariableSettings method doesn't correctly report parameter limits. This PR corrects its logic to report them correctly. In the old code then a variable with lower+upper limits only has the lower limit reported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/455
https://github.com/root-project/root/pull/455:145,modifiability,paramet,parameter,145,Patch GetVariableSettings() method to correctly report parameter limits.; Minuit2Minimizer's GetVariableSettings method doesn't correctly report parameter limits. This PR corrects its logic to report them correctly. In the old code then a variable with lower+upper limits only has the lower limit reported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/455
https://github.com/root-project/root/pull/455:239,modifiability,variab,variable,239,Patch GetVariableSettings() method to correctly report parameter limits.; Minuit2Minimizer's GetVariableSettings method doesn't correctly report parameter limits. This PR corrects its logic to report them correctly. In the old code then a variable with lower+upper limits only has the lower limit reported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/455
https://github.com/root-project/root/pull/455:120,reliability,doe,doesn,120,Patch GetVariableSettings() method to correctly report parameter limits.; Minuit2Minimizer's GetVariableSettings method doesn't correctly report parameter limits. This PR corrects its logic to report them correctly. In the old code then a variable with lower+upper limits only has the lower limit reported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/455
https://github.com/root-project/root/pull/455:0,safety,Patch,Patch,0,Patch GetVariableSettings() method to correctly report parameter limits.; Minuit2Minimizer's GetVariableSettings method doesn't correctly report parameter limits. This PR corrects its logic to report them correctly. In the old code then a variable with lower+upper limits only has the lower limit reported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/455
https://github.com/root-project/root/pull/455:184,safety,log,logic,184,Patch GetVariableSettings() method to correctly report parameter limits.; Minuit2Minimizer's GetVariableSettings method doesn't correctly report parameter limits. This PR corrects its logic to report them correctly. In the old code then a variable with lower+upper limits only has the lower limit reported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/455
https://github.com/root-project/root/pull/455:0,security,Patch,Patch,0,Patch GetVariableSettings() method to correctly report parameter limits.; Minuit2Minimizer's GetVariableSettings method doesn't correctly report parameter limits. This PR corrects its logic to report them correctly. In the old code then a variable with lower+upper limits only has the lower limit reported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/455
https://github.com/root-project/root/pull/455:184,security,log,logic,184,Patch GetVariableSettings() method to correctly report parameter limits.; Minuit2Minimizer's GetVariableSettings method doesn't correctly report parameter limits. This PR corrects its logic to report them correctly. In the old code then a variable with lower+upper limits only has the lower limit reported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/455
https://github.com/root-project/root/pull/455:184,testability,log,logic,184,Patch GetVariableSettings() method to correctly report parameter limits.; Minuit2Minimizer's GetVariableSettings method doesn't correctly report parameter limits. This PR corrects its logic to report them correctly. In the old code then a variable with lower+upper limits only has the lower limit reported.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/455
https://github.com/root-project/root/pull/456:67,integrability,Sub,Subsequent,67,"[cling] Keep deferred decls; Keep deferred decls in Sema, forever. Subsequent ""TUs"" might need them.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/456
https://github.com/root-project/root/pull/457:258,deployability,build,build,258,Don't search default paths when looking for numpy; cmakes `find_path()` function looks first in system directories and then. in the directories listed by `PATHS`. So if there are numpy includes in. `/usr/include` they will be found first which can break the build. One way to fix this could be to use `HINTS` instead of `PATHS` which will be. searched before the system paths. But in this case we know which. directory we want as we got it from python so let's just skip all other. paths and just look there by adding `NO_DEFAULT_PATH`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/457
https://github.com/root-project/root/pull/457:302,usability,HINT,HINTS,302,Don't search default paths when looking for numpy; cmakes `find_path()` function looks first in system directories and then. in the directories listed by `PATHS`. So if there are numpy includes in. `/usr/include` they will be found first which can break the build. One way to fix this could be to use `HINTS` instead of `PATHS` which will be. searched before the system paths. But in this case we know which. directory we want as we got it from python so let's just skip all other. paths and just look there by adding `NO_DEFAULT_PATH`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/457
https://github.com/root-project/root/pull/458:59,deployability,build,builds,59,Include <cmath> in textual mode.; This should fix the OS X builds that currently fail when clang. confuses the macros from math.h with the functions from cmath.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:81,deployability,fail,fail,81,Include <cmath> in textual mode.; This should fix the OS X builds that currently fail when clang. confuses the macros from math.h with the functions from cmath.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:71,energy efficiency,current,currently,71,Include <cmath> in textual mode.; This should fix the OS X builds that currently fail when clang. confuses the macros from math.h with the functions from cmath.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/458:81,reliability,fail,fail,81,Include <cmath> in textual mode.; This should fix the OS X builds that currently fail when clang. confuses the macros from math.h with the functions from cmath.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/458
https://github.com/root-project/root/pull/459:0,usability,Support,Support,0,Support ROOT::TSeq with step in TThreadExecutor;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/459
https://github.com/root-project/root/pull/460:70,deployability,patch,patch,70,Fix ABI compability when linking against OCCI when using clang.; This patch improves the previous check whether the current compiler. is using an incompatible libstdc++ version or not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/460
https://github.com/root-project/root/pull/460:169,deployability,version,version,169,Fix ABI compability when linking against OCCI when using clang.; This patch improves the previous check whether the current compiler. is using an incompatible libstdc++ version or not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/460
https://github.com/root-project/root/pull/460:116,energy efficiency,current,current,116,Fix ABI compability when linking against OCCI when using clang.; This patch improves the previous check whether the current compiler. is using an incompatible libstdc++ version or not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/460
https://github.com/root-project/root/pull/460:169,integrability,version,version,169,Fix ABI compability when linking against OCCI when using clang.; This patch improves the previous check whether the current compiler. is using an incompatible libstdc++ version or not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/460
https://github.com/root-project/root/pull/460:146,interoperability,incompatib,incompatible,146,Fix ABI compability when linking against OCCI when using clang.; This patch improves the previous check whether the current compiler. is using an incompatible libstdc++ version or not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/460
https://github.com/root-project/root/pull/460:169,modifiability,version,version,169,Fix ABI compability when linking against OCCI when using clang.; This patch improves the previous check whether the current compiler. is using an incompatible libstdc++ version or not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/460
https://github.com/root-project/root/pull/460:70,safety,patch,patch,70,Fix ABI compability when linking against OCCI when using clang.; This patch improves the previous check whether the current compiler. is using an incompatible libstdc++ version or not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/460
https://github.com/root-project/root/pull/460:70,security,patch,patch,70,Fix ABI compability when linking against OCCI when using clang.; This patch improves the previous check whether the current compiler. is using an incompatible libstdc++ version or not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/460
https://github.com/root-project/root/pull/461:16,deployability,updat,update,16,Vmc application update;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/461
https://github.com/root-project/root/pull/461:16,safety,updat,update,16,Vmc application update;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/461
https://github.com/root-project/root/pull/461:16,security,updat,update,16,Vmc application update;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/461
https://github.com/root-project/root/pull/462:96,integrability,sub,substring,96,"Fix input variable parsing for TMVAGUI; TMVA::TMVAGlob::GetInputVariableNames wants to find the substring ""__"". as part of the variable discovery process. However, it used. TString::First(char * character_set) which takes a char set as argument. and finds the first occurence of any character in that set. This is now replaced by TString::Index which _can_ find a substring.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/462
https://github.com/root-project/root/pull/462:136,integrability,discover,discovery,136,"Fix input variable parsing for TMVAGUI; TMVA::TMVAGlob::GetInputVariableNames wants to find the substring ""__"". as part of the variable discovery process. However, it used. TString::First(char * character_set) which takes a char set as argument. and finds the first occurence of any character in that set. This is now replaced by TString::Index which _can_ find a substring.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/462
https://github.com/root-project/root/pull/462:364,integrability,sub,substring,364,"Fix input variable parsing for TMVAGUI; TMVA::TMVAGlob::GetInputVariableNames wants to find the substring ""__"". as part of the variable discovery process. However, it used. TString::First(char * character_set) which takes a char set as argument. and finds the first occurence of any character in that set. This is now replaced by TString::Index which _can_ find a substring.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/462
https://github.com/root-project/root/pull/462:136,interoperability,discover,discovery,136,"Fix input variable parsing for TMVAGUI; TMVA::TMVAGlob::GetInputVariableNames wants to find the substring ""__"". as part of the variable discovery process. However, it used. TString::First(char * character_set) which takes a char set as argument. and finds the first occurence of any character in that set. This is now replaced by TString::Index which _can_ find a substring.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/462
https://github.com/root-project/root/pull/462:10,modifiability,variab,variable,10,"Fix input variable parsing for TMVAGUI; TMVA::TMVAGlob::GetInputVariableNames wants to find the substring ""__"". as part of the variable discovery process. However, it used. TString::First(char * character_set) which takes a char set as argument. and finds the first occurence of any character in that set. This is now replaced by TString::Index which _can_ find a substring.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/462
https://github.com/root-project/root/pull/462:127,modifiability,variab,variable,127,"Fix input variable parsing for TMVAGUI; TMVA::TMVAGlob::GetInputVariableNames wants to find the substring ""__"". as part of the variable discovery process. However, it used. TString::First(char * character_set) which takes a char set as argument. and finds the first occurence of any character in that set. This is now replaced by TString::Index which _can_ find a substring.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/462
https://github.com/root-project/root/pull/462:4,safety,input,input,4,"Fix input variable parsing for TMVAGUI; TMVA::TMVAGlob::GetInputVariableNames wants to find the substring ""__"". as part of the variable discovery process. However, it used. TString::First(char * character_set) which takes a char set as argument. and finds the first occurence of any character in that set. This is now replaced by TString::Index which _can_ find a substring.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/462
https://github.com/root-project/root/pull/462:4,usability,input,input,4,"Fix input variable parsing for TMVAGUI; TMVA::TMVAGlob::GetInputVariableNames wants to find the substring ""__"". as part of the variable discovery process. However, it used. TString::First(char * character_set) which takes a char set as argument. and finds the first occurence of any character in that set. This is now replaced by TString::Index which _can_ find a substring.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/462
https://github.com/root-project/root/pull/462:136,usability,discov,discovery,136,"Fix input variable parsing for TMVAGUI; TMVA::TMVAGlob::GetInputVariableNames wants to find the substring ""__"". as part of the variable discovery process. However, it used. TString::First(char * character_set) which takes a char set as argument. and finds the first occurence of any character in that set. This is now replaced by TString::Index which _can_ find a substring.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/462
https://github.com/root-project/root/pull/463:4001,deployability,updat,updated,4001," help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163. > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334de18451c749550908274a5fd2542/include/typeinfo. > [5] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L20. > [6] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L26. > [7] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.cpp#L147. > [8] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-layout. On 26/03/17 16:54, Berserker Troll wrote:. > I've implemented cast based on direct vtable access [9]. It should work for both libstdc++/libsupc++ and libcxx(abi). > Also I've updated my TDirectory test so they have the same output format [a]. >. > [9] https://gist.github.com/BerserkerTroll/01debd56c2987ab89b0a94b783373e35. > [a] https://gist.github.com/BerserkerTroll/b94c2d3e3a5848be7c7dd53e323e1cdb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:939,integrability,standardiz,standardized,939,"Implement TDirectoryEntry cast to base without TClass; This method is based on GNU libstc++/libsupc++ and LLVM libc++(abi) implementations of exception handler matching algorithm. And on the fact that in AMD64 SysV ABI class methods could be called just like ordinary functions with additional first argument (a.k.a. `this` pointer). I think this method requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1303,integrability,rout,routines,1303,"t (a.k.a. `this` pointer). I think this method requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1343,integrability,interfac,interfaces,1343,"ethod requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:2072,integrability,coupl,couple,2072,"nes. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:2126,integrability,pub,public,2126," classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:2556,integrability,coupl,couple,2556,"info> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163. > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334de18451c749550908274a5fd2542/include/typeinfo. > [5] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L20. > [6] https://github.com/llvm-mirror/libcxxabi/b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:670,interoperability,specif,specifically,670,"Implement TDirectoryEntry cast to base without TClass; This method is based on GNU libstc++/libsupc++ and LLVM libc++(abi) implementations of exception handler matching algorithm. And on the fact that in AMD64 SysV ABI class methods could be called just like ordinary functions with additional first argument (a.k.a. `this` pointer). I think this method requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:939,interoperability,standard,standardized,939,"Implement TDirectoryEntry cast to base without TClass; This method is based on GNU libstc++/libsupc++ and LLVM libc++(abi) implementations of exception handler matching algorithm. And on the fact that in AMD64 SysV ABI class methods could be called just like ordinary functions with additional first argument (a.k.a. `this` pointer). I think this method requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1329,interoperability,specif,specific,1329," I think this method requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1343,interoperability,interfac,interfaces,1343,"ethod requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1365,interoperability,specif,specified,1365,"planation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and no",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1545,interoperability,standard,standard,1545,":32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1739,interoperability,standard,standard,1739,"tdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch(",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:2279,interoperability,standard,standardised,2279,"xception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163. > [",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:2466,interoperability,compatib,compatible,2466,"ching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163. > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334de18451c749550908274a5fd2542/include/typeinfo. > [5] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:4057,interoperability,format,format,4057," help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163. > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334de18451c749550908274a5fd2542/include/typeinfo. > [5] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L20. > [6] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L26. > [7] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.cpp#L147. > [8] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-layout. On 26/03/17 16:54, Berserker Troll wrote:. > I've implemented cast based on direct vtable access [9]. It should work for both libstdc++/libsupc++ and libcxx(abi). > Also I've updated my TDirectory test so they have the same output format [a]. >. > [9] https://gist.github.com/BerserkerTroll/01debd56c2987ab89b0a94b783373e35. > [a] https://gist.github.com/BerserkerTroll/b94c2d3e3a5848be7c7dd53e323e1cdb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:972,modifiability,polymorph,polymorphic,972,"Implement TDirectoryEntry cast to base without TClass; This method is based on GNU libstc++/libsupc++ and LLVM libc++(abi) implementations of exception handler matching algorithm. And on the fact that in AMD64 SysV ABI class methods could be called just like ordinary functions with additional first argument (a.k.a. `this` pointer). I think this method requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1062,modifiability,polymorph,polymorphic,1062,"s based on GNU libstc++/libsupc++ and LLVM libc++(abi) implementations of exception handler matching algorithm. And on the fact that in AMD64 SysV ABI class methods could be called just like ordinary functions with additional first argument (a.k.a. `this` pointer). I think this method requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there ar",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1343,modifiability,interfac,interfaces,1343,"ethod requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:2072,modifiability,coupl,couple,2072,"nes. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:2556,modifiability,coupl,couple,2556,"info> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163. > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334de18451c749550908274a5fd2542/include/typeinfo. > [5] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L20. > [6] https://github.com/llvm-mirror/libcxxabi/b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1718,reliability,doe,doesn,1718,"r/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:2247,reliability,doe,doesn,2247," says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:2606,reliability,doe,does,2606,"[3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163. > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334de18451c749550908274a5fd2542/include/typeinfo. > [5] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L20. > [6] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:142,safety,except,exception,142,"Implement TDirectoryEntry cast to base without TClass; This method is based on GNU libstc++/libsupc++ and LLVM libc++(abi) implementations of exception handler matching algorithm. And on the fact that in AMD64 SysV ABI class methods could be called just like ordinary functions with additional first argument (a.k.a. `this` pointer). I think this method requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1023,safety,except,exception-based,1023,"to base without TClass; This method is based on GNU libstc++/libsupc++ and LLVM libc++(abi) implementations of exception handler matching algorithm. And on the fact that in AMD64 SysV ABI class methods could be called just like ordinary functions with additional first argument (a.k.a. `this` pointer). I think this method requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exceptio",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1194,safety,except,exception,1194,"t in AMD64 SysV ABI class methods could be called just like ordinary functions with additional first argument (a.k.a. `this` pointer). I think this method requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1284,safety,except,exception,1284,"onal first argument (a.k.a. `this` pointer). I think this method requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardis",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1658,safety,compl,complicated,1658,"ng. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:2023,safety,except,exception,2023,"tion-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-ab",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:2272,safety,except,except,2272," related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:3120,safety,except,exception-matching-algorithm,3120,"__do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163. > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334de18451c749550908274a5fd2542/include/typeinfo. > [5] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L20. > [6] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L26. > [7] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.cpp#L147. > [8] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-layout. On 26/03/17 16:54, Berserker Troll wrote:. > I've implemented cast based on direct vtable access [9]. It should work for both libstdc++/libsupc++ and libcxx(abi). > Also I've updated my TDirectory test so they have the same output format [a]. >. > [9] https://gist.github.com/BerserkerTroll/01debd56c2987ab89",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:4001,safety,updat,updated,4001," help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163. > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334de18451c749550908274a5fd2542/include/typeinfo. > [5] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L20. > [6] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L26. > [7] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.cpp#L147. > [8] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-layout. On 26/03/17 16:54, Berserker Troll wrote:. > I've implemented cast based on direct vtable access [9]. It should work for both libstdc++/libsupc++ and libcxx(abi). > Also I've updated my TDirectory test so they have the same output format [a]. >. > [9] https://gist.github.com/BerserkerTroll/01debd56c2987ab89b0a94b783373e35. > [a] https://gist.github.com/BerserkerTroll/b94c2d3e3a5848be7c7dd53e323e1cdb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:4023,safety,test,test,4023," help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163. > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334de18451c749550908274a5fd2542/include/typeinfo. > [5] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L20. > [6] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L26. > [7] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.cpp#L147. > [8] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-layout. On 26/03/17 16:54, Berserker Troll wrote:. > I've implemented cast based on direct vtable access [9]. It should work for both libstdc++/libsupc++ and libcxx(abi). > Also I've updated my TDirectory test so they have the same output format [a]. >. > [9] https://gist.github.com/BerserkerTroll/01debd56c2987ab89b0a94b783373e35. > [a] https://gist.github.com/BerserkerTroll/b94c2d3e3a5848be7c7dd53e323e1cdb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1497,security,access,accessible,1497,"ritten in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info fro",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1658,security,compl,complicated,1658,"ng. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1951,security,access,access,1951,"ut works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:3916,security,access,access,3916," help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163. > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334de18451c749550908274a5fd2542/include/typeinfo. > [5] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L20. > [6] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L26. > [7] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.cpp#L147. > [8] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-layout. On 26/03/17 16:54, Berserker Troll wrote:. > I've implemented cast based on direct vtable access [9]. It should work for both libstdc++/libsupc++ and libcxx(abi). > Also I've updated my TDirectory test so they have the same output format [a]. >. > [9] https://gist.github.com/BerserkerTroll/01debd56c2987ab89b0a94b783373e35. > [a] https://gist.github.com/BerserkerTroll/b94c2d3e3a5848be7c7dd53e323e1cdb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:4001,security,updat,updated,4001," help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163. > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334de18451c749550908274a5fd2542/include/typeinfo. > [5] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L20. > [6] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L26. > [7] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.cpp#L147. > [8] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-layout. On 26/03/17 16:54, Berserker Troll wrote:. > I've implemented cast based on direct vtable access [9]. It should work for both libstdc++/libsupc++ and libcxx(abi). > Also I've updated my TDirectory test so they have the same output format [a]. >. > [9] https://gist.github.com/BerserkerTroll/01debd56c2987ab89b0a94b783373e35. > [a] https://gist.github.com/BerserkerTroll/b94c2d3e3a5848be7c7dd53e323e1cdb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:2072,testability,coupl,couple,2072,"nes. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:2556,testability,coupl,couple,2556,"info> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163. > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334de18451c749550908274a5fd2542/include/typeinfo. > [5] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L20. > [6] https://github.com/llvm-mirror/libcxxabi/b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:4023,testability,test,test,4023," help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163. > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334de18451c749550908274a5fd2542/include/typeinfo. > [5] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L20. > [6] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L26. > [7] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.cpp#L147. > [8] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-layout. On 26/03/17 16:54, Berserker Troll wrote:. > I've implemented cast based on direct vtable access [9]. It should work for both libstdc++/libsupc++ and libcxx(abi). > Also I've updated my TDirectory test so they have the same output format [a]. >. > [9] https://gist.github.com/BerserkerTroll/01debd56c2987ab89b0a94b783373e35. > [a] https://gist.github.com/BerserkerTroll/b94c2d3e3a5848be7c7dd53e323e1cdb",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1317,usability,person,personality,1317," pointer). I think this method requires more explanation. It all started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:1383,usability,document,document,1383," started from my proposal to rely on Itanium C++ ABI to implement cast. I won't post that mail here because it is written in such a broken English. On 24/03/17 22:32, Axel Naumann wrote:. > Hi Berserker,. >. > I'm more and more convinced that this is the way to go... I'm talking. > specifically about. > <https://github.com/gcc-mirror/gcc/blob/master/libstdc%2B%2B-v3/libsupc%2B%2B/cxxabi.h#L591>. > here. >. > Do you think you could give it a shot in the form of a PR? . On 25/03/17 19:06, Berserker Troll wrote:. > Hi Axel,. > . > __dynamic_cast is standardized, but works only for polymorphic classes, while TClass::DynamicCast and exception-based cast also work for non-polymorphic ones. > If you want TDirectory to work for all kinds of classes you should consider not dynamic_cast algorithm [1], but exception handler matching one [2]. > Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual met",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:2229,usability,help,help,2229," Unfortunately, [2] says:. >> Since the RTTI related exception handling routines are ""personality specific"", no interfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/463:2341,usability,close,closer,2341,"nterfaces need to be specified in this document (beyond the layout of the RTTI data). > . > In libstdc++/libsupc++, handler matching algorithm is easily accessible directly through std::type_info from standard <typeinfo> header, using __do_catch() member function [3]. > The situation with libcxxabi is a bit more complicated. std::type_info in libcxx <typeinfo> header [4] doesn't have any non-standard member functions, instead it has additional hidden __shim_type_info class [5] between std::type_info and other Itanium C++ ABI type_info derived types. And this __shim_type_info class, in turn, provides access to the handler matching algorithm [6]. > . > So, if we want this exception hander matching algorithm, there are a couple of options:. > 1) Stick to libsupc++ with its ""public"" __do_catch() member function. > 2) Implement independent handler matching algorithm ([7] might help), I think it doesn't require anything except standardised list of type_info-derived types [8]. > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly. > . > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm. > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm. > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163. > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334d",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/463
https://github.com/root-project/root/pull/464:160,availability,operat,operator,160,"A (fast) ApplyInverse() method for 3D affine transformations ; . * a direct ApplyInverse() function for Points and Vectors. * faster than using the Inverse() + operator() mechanism, because. - avoids intermediate calculation and memory of inverse. - we know the precise form of the inverse transformation a priori. (the inverse of an 3D rotation is is transpose, etc.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:45,integrability,transform,transformations,45,"A (fast) ApplyInverse() method for 3D affine transformations ; . * a direct ApplyInverse() function for Points and Vectors. * faster than using the Inverse() + operator() mechanism, because. - avoids intermediate calculation and memory of inverse. - we know the precise form of the inverse transformation a priori. (the inverse of an 3D rotation is is transpose, etc.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:290,integrability,transform,transformation,290,"A (fast) ApplyInverse() method for 3D affine transformations ; . * a direct ApplyInverse() function for Points and Vectors. * faster than using the Inverse() + operator() mechanism, because. - avoids intermediate calculation and memory of inverse. - we know the precise form of the inverse transformation a priori. (the inverse of an 3D rotation is is transpose, etc.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:45,interoperability,transform,transformations,45,"A (fast) ApplyInverse() method for 3D affine transformations ; . * a direct ApplyInverse() function for Points and Vectors. * faster than using the Inverse() + operator() mechanism, because. - avoids intermediate calculation and memory of inverse. - we know the precise form of the inverse transformation a priori. (the inverse of an 3D rotation is is transpose, etc.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:290,interoperability,transform,transformation,290,"A (fast) ApplyInverse() method for 3D affine transformations ; . * a direct ApplyInverse() function for Points and Vectors. * faster than using the Inverse() + operator() mechanism, because. - avoids intermediate calculation and memory of inverse. - we know the precise form of the inverse transformation a priori. (the inverse of an 3D rotation is is transpose, etc.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:200,modifiability,interm,intermediate,200,"A (fast) ApplyInverse() method for 3D affine transformations ; . * a direct ApplyInverse() function for Points and Vectors. * faster than using the Inverse() + operator() mechanism, because. - avoids intermediate calculation and memory of inverse. - we know the precise form of the inverse transformation a priori. (the inverse of an 3D rotation is is transpose, etc.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:229,performance,memor,memory,229,"A (fast) ApplyInverse() method for 3D affine transformations ; . * a direct ApplyInverse() function for Points and Vectors. * faster than using the Inverse() + operator() mechanism, because. - avoids intermediate calculation and memory of inverse. - we know the precise form of the inverse transformation a priori. (the inverse of an 3D rotation is is transpose, etc.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:193,safety,avoid,avoids,193,"A (fast) ApplyInverse() method for 3D affine transformations ; . * a direct ApplyInverse() function for Points and Vectors. * faster than using the Inverse() + operator() mechanism, because. - avoids intermediate calculation and memory of inverse. - we know the precise form of the inverse transformation a priori. (the inverse of an 3D rotation is is transpose, etc.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:337,security,rotat,rotation,337,"A (fast) ApplyInverse() method for 3D affine transformations ; . * a direct ApplyInverse() function for Points and Vectors. * faster than using the Inverse() + operator() mechanism, because. - avoids intermediate calculation and memory of inverse. - we know the precise form of the inverse transformation a priori. (the inverse of an 3D rotation is is transpose, etc.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/464:229,usability,memor,memory,229,"A (fast) ApplyInverse() method for 3D affine transformations ; . * a direct ApplyInverse() function for Points and Vectors. * faster than using the Inverse() + operator() mechanism, because. - avoids intermediate calculation and memory of inverse. - we know the precise form of the inverse transformation a priori. (the inverse of an 3D rotation is is transpose, etc.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/464
https://github.com/root-project/root/pull/465:15,usability,minim,minimal,15,Cling -O2 with minimal inlining;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/465
https://github.com/root-project/root/pull/466:13,deployability,depend,dependencies,13,Remove TMath dependencies from TTimestamp.cxx; This way when we introduce dependencies in TMath that require linkage (f.e. Vc) it won't suppose a problem for libCore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:74,deployability,depend,dependencies,74,Remove TMath dependencies from TTimestamp.cxx; This way when we introduce dependencies in TMath that require linkage (f.e. Vc) it won't suppose a problem for libCore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:13,integrability,depend,dependencies,13,Remove TMath dependencies from TTimestamp.cxx; This way when we introduce dependencies in TMath that require linkage (f.e. Vc) it won't suppose a problem for libCore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:74,integrability,depend,dependencies,74,Remove TMath dependencies from TTimestamp.cxx; This way when we introduce dependencies in TMath that require linkage (f.e. Vc) it won't suppose a problem for libCore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:13,modifiability,depend,dependencies,13,Remove TMath dependencies from TTimestamp.cxx; This way when we introduce dependencies in TMath that require linkage (f.e. Vc) it won't suppose a problem for libCore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:74,modifiability,depend,dependencies,74,Remove TMath dependencies from TTimestamp.cxx; This way when we introduce dependencies in TMath that require linkage (f.e. Vc) it won't suppose a problem for libCore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:13,safety,depend,dependencies,13,Remove TMath dependencies from TTimestamp.cxx; This way when we introduce dependencies in TMath that require linkage (f.e. Vc) it won't suppose a problem for libCore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:74,safety,depend,dependencies,74,Remove TMath dependencies from TTimestamp.cxx; This way when we introduce dependencies in TMath that require linkage (f.e. Vc) it won't suppose a problem for libCore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:13,testability,depend,dependencies,13,Remove TMath dependencies from TTimestamp.cxx; This way when we introduce dependencies in TMath that require linkage (f.e. Vc) it won't suppose a problem for libCore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/466:74,testability,depend,dependencies,74,Remove TMath dependencies from TTimestamp.cxx; This way when we introduce dependencies in TMath that require linkage (f.e. Vc) it won't suppose a problem for libCore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/466
https://github.com/root-project/root/pull/470:36,deployability,modul,modulemap,36,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:192,deployability,contain,contains,192,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:236,deployability,patch,patch,236,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:326,deployability,contain,contains,326,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:345,deployability,modul,modulemap,345,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:36,modifiability,modul,modulemap,36,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:178,modifiability,variab,variable,178,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:267,modifiability,variab,variable,267,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:308,modifiability,variab,variable,308,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:345,modifiability,modul,modulemap,345,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:216,performance,content,contents,216,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:276,performance,content,contents,276,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:36,safety,modul,modulemap,36,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:236,safety,patch,patch,236,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:345,safety,modul,modulemap,345,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/470:236,security,patch,patch,236,Fix that the generated parts of the modulemap were missing.; This happened when we moved the cxxmodules code before the add_subdirectory. which where responsible for filling the variable that contains the generated. contents. With this patch we wait with writing the variable contents to the. file until the variable actually contains the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/470
https://github.com/root-project/root/pull/471:28,integrability,complian,compliant,28,Make TSeq iterator standard-compliant; Thanks to @bluehood for the help!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/471
https://github.com/root-project/root/pull/471:19,interoperability,standard,standard-compliant,19,Make TSeq iterator standard-compliant; Thanks to @bluehood for the help!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/471
https://github.com/root-project/root/pull/471:28,safety,compl,compliant,28,Make TSeq iterator standard-compliant; Thanks to @bluehood for the help!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/471
https://github.com/root-project/root/pull/471:28,security,compl,compliant,28,Make TSeq iterator standard-compliant; Thanks to @bluehood for the help!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/471
https://github.com/root-project/root/pull/471:67,usability,help,help,67,Make TSeq iterator standard-compliant; Thanks to @bluehood for the help!,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/471
https://github.com/root-project/root/pull/472:97,safety,compl,complains,97,"Keep clang-tidy modernize-use-bool-literals happy; clang-tidy with `modernize-use-bool-literals` complains about the fact that 0 is used in place of false. Given I assume there is no particular reason for using `0` rather than `false`, I suggest to change it to avoid the false positives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:262,safety,avoid,avoid,262,"Keep clang-tidy modernize-use-bool-literals happy; clang-tidy with `modernize-use-bool-literals` complains about the fact that 0 is used in place of false. Given I assume there is no particular reason for using `0` rather than `false`, I suggest to change it to avoid the false positives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/472:97,security,compl,complains,97,"Keep clang-tidy modernize-use-bool-literals happy; clang-tidy with `modernize-use-bool-literals` complains about the fact that 0 is used in place of false. Given I assume there is no particular reason for using `0` rather than `false`, I suggest to change it to avoid the false positives.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/472
https://github.com/root-project/root/pull/473:28,integrability,complian,compliant,28,Make TSeq iterator standard-compliant (II); This time for real.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/473
https://github.com/root-project/root/pull/473:19,interoperability,standard,standard-compliant,19,Make TSeq iterator standard-compliant (II); This time for real.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/473
https://github.com/root-project/root/pull/473:49,performance,time,time,49,Make TSeq iterator standard-compliant (II); This time for real.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/473
https://github.com/root-project/root/pull/473:28,safety,compl,compliant,28,Make TSeq iterator standard-compliant (II); This time for real.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/473
https://github.com/root-project/root/pull/473:28,security,compl,compliant,28,Make TSeq iterator standard-compliant (II); This time for real.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/473
https://github.com/root-project/root/pull/474:0,safety,Test,Test,0,Test coverage compilation flag; Added coverage compilation flag -Dtestcoverage which is by default set to OFF.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/474
https://github.com/root-project/root/pull/474:0,testability,Test,Test,0,Test coverage compilation flag; Added coverage compilation flag -Dtestcoverage which is by default set to OFF.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/474
https://github.com/root-project/root/pull/474:5,testability,coverag,coverage,5,Test coverage compilation flag; Added coverage compilation flag -Dtestcoverage which is by default set to OFF.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/474
https://github.com/root-project/root/pull/474:38,testability,coverag,coverage,38,Test coverage compilation flag; Added coverage compilation flag -Dtestcoverage which is by default set to OFF.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/474
https://github.com/root-project/root/pull/476:39,integrability,interfac,interface,39,"Proper check for destruction of global interface object; ""if (gR) { ... }"" will not work as a check whether the global interface object is freed. gR - the pointer to the TRInterface object - is assigned by new. Only one instance of this class can be created. There is no explicit delete of this global object, but it is destroyed when the program exits. But this destruction of remaining object when the program ends does not reset the gR pointer to NULL, so using ""if (gR) { ... }"" as a test to check whether the object is destroyed or not will not work. I think this PR implements the intended behaviour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/476
https://github.com/root-project/root/pull/476:119,integrability,interfac,interface,119,"Proper check for destruction of global interface object; ""if (gR) { ... }"" will not work as a check whether the global interface object is freed. gR - the pointer to the TRInterface object - is assigned by new. Only one instance of this class can be created. There is no explicit delete of this global object, but it is destroyed when the program exits. But this destruction of remaining object when the program ends does not reset the gR pointer to NULL, so using ""if (gR) { ... }"" as a test to check whether the object is destroyed or not will not work. I think this PR implements the intended behaviour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/476
https://github.com/root-project/root/pull/476:39,interoperability,interfac,interface,39,"Proper check for destruction of global interface object; ""if (gR) { ... }"" will not work as a check whether the global interface object is freed. gR - the pointer to the TRInterface object - is assigned by new. Only one instance of this class can be created. There is no explicit delete of this global object, but it is destroyed when the program exits. But this destruction of remaining object when the program ends does not reset the gR pointer to NULL, so using ""if (gR) { ... }"" as a test to check whether the object is destroyed or not will not work. I think this PR implements the intended behaviour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/476
https://github.com/root-project/root/pull/476:119,interoperability,interfac,interface,119,"Proper check for destruction of global interface object; ""if (gR) { ... }"" will not work as a check whether the global interface object is freed. gR - the pointer to the TRInterface object - is assigned by new. Only one instance of this class can be created. There is no explicit delete of this global object, but it is destroyed when the program exits. But this destruction of remaining object when the program ends does not reset the gR pointer to NULL, so using ""if (gR) { ... }"" as a test to check whether the object is destroyed or not will not work. I think this PR implements the intended behaviour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/476
https://github.com/root-project/root/pull/476:39,modifiability,interfac,interface,39,"Proper check for destruction of global interface object; ""if (gR) { ... }"" will not work as a check whether the global interface object is freed. gR - the pointer to the TRInterface object - is assigned by new. Only one instance of this class can be created. There is no explicit delete of this global object, but it is destroyed when the program exits. But this destruction of remaining object when the program ends does not reset the gR pointer to NULL, so using ""if (gR) { ... }"" as a test to check whether the object is destroyed or not will not work. I think this PR implements the intended behaviour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/476
https://github.com/root-project/root/pull/476:119,modifiability,interfac,interface,119,"Proper check for destruction of global interface object; ""if (gR) { ... }"" will not work as a check whether the global interface object is freed. gR - the pointer to the TRInterface object - is assigned by new. Only one instance of this class can be created. There is no explicit delete of this global object, but it is destroyed when the program exits. But this destruction of remaining object when the program ends does not reset the gR pointer to NULL, so using ""if (gR) { ... }"" as a test to check whether the object is destroyed or not will not work. I think this PR implements the intended behaviour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/476
https://github.com/root-project/root/pull/476:417,reliability,doe,does,417,"Proper check for destruction of global interface object; ""if (gR) { ... }"" will not work as a check whether the global interface object is freed. gR - the pointer to the TRInterface object - is assigned by new. Only one instance of this class can be created. There is no explicit delete of this global object, but it is destroyed when the program exits. But this destruction of remaining object when the program ends does not reset the gR pointer to NULL, so using ""if (gR) { ... }"" as a test to check whether the object is destroyed or not will not work. I think this PR implements the intended behaviour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/476
https://github.com/root-project/root/pull/476:488,safety,test,test,488,"Proper check for destruction of global interface object; ""if (gR) { ... }"" will not work as a check whether the global interface object is freed. gR - the pointer to the TRInterface object - is assigned by new. Only one instance of this class can be created. There is no explicit delete of this global object, but it is destroyed when the program exits. But this destruction of remaining object when the program ends does not reset the gR pointer to NULL, so using ""if (gR) { ... }"" as a test to check whether the object is destroyed or not will not work. I think this PR implements the intended behaviour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/476
https://github.com/root-project/root/pull/476:488,testability,test,test,488,"Proper check for destruction of global interface object; ""if (gR) { ... }"" will not work as a check whether the global interface object is freed. gR - the pointer to the TRInterface object - is assigned by new. Only one instance of this class can be created. There is no explicit delete of this global object, but it is destroyed when the program exits. But this destruction of remaining object when the program ends does not reset the gR pointer to NULL, so using ""if (gR) { ... }"" as a test to check whether the object is destroyed or not will not work. I think this PR implements the intended behaviour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/476
https://github.com/root-project/root/pull/476:596,usability,behavi,behaviour,596,"Proper check for destruction of global interface object; ""if (gR) { ... }"" will not work as a check whether the global interface object is freed. gR - the pointer to the TRInterface object - is assigned by new. Only one instance of this class can be created. There is no explicit delete of this global object, but it is destroyed when the program exits. But this destruction of remaining object when the program ends does not reset the gR pointer to NULL, so using ""if (gR) { ... }"" as a test to check whether the object is destroyed or not will not work. I think this PR implements the intended behaviour.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/476
https://github.com/root-project/root/pull/477:8,deployability,modul,modulemap,8,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:38,deployability,build,builds,38,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:58,deployability,modul,modules,58,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:71,deployability,fail,failing,71,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:117,deployability,modul,module,117,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:217,deployability,fail,fail,217,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:228,deployability,patch,patch,228,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:241,deployability,modul,modulemap,241,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:266,deployability,modul,modules,266,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:317,deployability,modul,modules,317,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:394,deployability,modul,module,394,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:8,modifiability,modul,modulemap,8,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:58,modifiability,modul,modules,58,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:117,modifiability,modul,module,117,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:241,modifiability,modul,modulemap,241,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:266,modifiability,modul,modules,266,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:317,modifiability,modul,modules,317,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:394,modifiability,modul,module,394,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:71,reliability,fail,failing,71,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:217,reliability,fail,fail,217,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:8,safety,modul,modulemap,8,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:58,safety,modul,modules,58,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:117,safety,modul,module,117,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:228,safety,patch,patch,228,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:241,safety,modul,modulemap,241,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:266,safety,modul,modules,266,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:317,safety,modul,modules,317,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:394,safety,modul,module,394,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:228,security,patch,patch,228,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:301,security,modif,modification,301,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/477:416,testability,context,context,416,"Added a modulemap for libc; The Linux builds with enabled modules were failing because stdio.h. wasn't provided by a module but textually included. This seemed to. cause merging issues which caused the compilation to fail. This patch adds a modulemap for a few libc modules that seem to work. without modification as modules inside ROOT. We had to remove a few 'extern ""C""' because importing a module. inside such a context isn't allowed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/477
https://github.com/root-project/root/pull/478:413,deployability,patch,patch,413,"[CLANG] Increase default value for `-ftemplate-depth` to 1024; This is a backport from llvm revision 278983:. ""PR18417: Increase -ftemplate-depth to the value 1024 recommended. by the C++ standard's Annex B"". Motivation: the current template instantiation depth limit (256) makes. it impossible to move-construct std::tuple's of size equal or greater than 17. Thanks @vgvassilev for pointing me to the right llvm patch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/478
https://github.com/root-project/root/pull/478:225,energy efficiency,current,current,225,"[CLANG] Increase default value for `-ftemplate-depth` to 1024; This is a backport from llvm revision 278983:. ""PR18417: Increase -ftemplate-depth to the value 1024 recommended. by the C++ standard's Annex B"". Motivation: the current template instantiation depth limit (256) makes. it impossible to move-construct std::tuple's of size equal or greater than 17. Thanks @vgvassilev for pointing me to the right llvm patch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/478
https://github.com/root-project/root/pull/478:188,interoperability,standard,standard,188,"[CLANG] Increase default value for `-ftemplate-depth` to 1024; This is a backport from llvm revision 278983:. ""PR18417: Increase -ftemplate-depth to the value 1024 recommended. by the C++ standard's Annex B"". Motivation: the current template instantiation depth limit (256) makes. it impossible to move-construct std::tuple's of size equal or greater than 17. Thanks @vgvassilev for pointing me to the right llvm patch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/478
https://github.com/root-project/root/pull/478:413,safety,patch,patch,413,"[CLANG] Increase default value for `-ftemplate-depth` to 1024; This is a backport from llvm revision 278983:. ""PR18417: Increase -ftemplate-depth to the value 1024 recommended. by the C++ standard's Annex B"". Motivation: the current template instantiation depth limit (256) makes. it impossible to move-construct std::tuple's of size equal or greater than 17. Thanks @vgvassilev for pointing me to the right llvm patch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/478
https://github.com/root-project/root/pull/478:413,security,patch,patch,413,"[CLANG] Increase default value for `-ftemplate-depth` to 1024; This is a backport from llvm revision 278983:. ""PR18417: Increase -ftemplate-depth to the value 1024 recommended. by the C++ standard's Annex B"". Motivation: the current template instantiation depth limit (256) makes. it impossible to move-construct std::tuple's of size equal or greater than 17. Thanks @vgvassilev for pointing me to the right llvm patch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/478
https://github.com/root-project/root/pull/479:38,interoperability,format,format,38,"[TDF] Comments and text fixes; `clang-format` will not be happy with the very long lines in the user guide, but on the other hand markdown only accepts table rows on a single line, so I think this case calls for an exception.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/479:215,safety,except,exception,215,"[TDF] Comments and text fixes; `clang-format` will not be happy with the very long lines in the user guide, but on the other hand markdown only accepts table rows on a single line, so I think this case calls for an exception.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/479:96,usability,user,user,96,"[TDF] Comments and text fixes; `clang-format` will not be happy with the very long lines in the user guide, but on the other hand markdown only accepts table rows on a single line, so I think this case calls for an exception.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/479:101,usability,guid,guide,101,"[TDF] Comments and text fixes; `clang-format` will not be happy with the very long lines in the user guide, but on the other hand markdown only accepts table rows on a single line, so I think this case calls for an exception.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/479
https://github.com/root-project/root/pull/481:34,energy efficiency,current,current,34,fix bullets in documentation; The current documentation doesn't have bullets or newlines and is very confusing. https://root.cern.ch/doc/master/classTH3.html#a8da3424208d450620f0797f2ee6ab07c. I think this should fix it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/481
https://github.com/root-project/root/pull/481:56,reliability,doe,doesn,56,fix bullets in documentation; The current documentation doesn't have bullets or newlines and is very confusing. https://root.cern.ch/doc/master/classTH3.html#a8da3424208d450620f0797f2ee6ab07c. I think this should fix it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/481
https://github.com/root-project/root/pull/481:15,usability,document,documentation,15,fix bullets in documentation; The current documentation doesn't have bullets or newlines and is very confusing. https://root.cern.ch/doc/master/classTH3.html#a8da3424208d450620f0797f2ee6ab07c. I think this should fix it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/481
https://github.com/root-project/root/pull/481:42,usability,document,documentation,42,fix bullets in documentation; The current documentation doesn't have bullets or newlines and is very confusing. https://root.cern.ch/doc/master/classTH3.html#a8da3424208d450620f0797f2ee6ab07c. I think this should fix it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/481
https://github.com/root-project/root/pull/482:103,energy efficiency,optim,optimize,103,Faster default/copy construction of TObjects; * This commit allows the compiler to potentially. inline/optimize construction of TObjects. * This is in particular important for data-objects. which are created billions of times and which inherit from. TObject,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:236,modifiability,inherit,inherit,236,Faster default/copy construction of TObjects; * This commit allows the compiler to potentially. inline/optimize construction of TObjects. * This is in particular important for data-objects. which are created billions of times and which inherit from. TObject,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:103,performance,optimiz,optimize,103,Faster default/copy construction of TObjects; * This commit allows the compiler to potentially. inline/optimize construction of TObjects. * This is in particular important for data-objects. which are created billions of times and which inherit from. TObject,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/482:220,performance,time,times,220,Faster default/copy construction of TObjects; * This commit allows the compiler to potentially. inline/optimize construction of TObjects. * This is in particular important for data-objects. which are created billions of times and which inherit from. TObject,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/482
https://github.com/root-project/root/pull/483:43,availability,operat,operations,43,http: provide websocket id for all related operations; One could have many web-sockets connections associated with given URL. websocket id allows to distinguish them,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/483
https://github.com/root-project/root/pull/483:79,interoperability,socket,sockets,79,http: provide websocket id for all related operations; One could have many web-sockets connections associated with given URL. websocket id allows to distinguish them,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/483
https://github.com/root-project/root/pull/483:79,security,soc,sockets,79,http: provide websocket id for all related operations; One could have many web-sockets connections associated with given URL. websocket id allows to distinguish them,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/483
https://github.com/root-project/root/pull/485:21,integrability,interfac,interfaces,21,Improvements and new interfaces in KahanSum;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/485
https://github.com/root-project/root/pull/485:21,interoperability,interfac,interfaces,21,Improvements and new interfaces in KahanSum;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/485
https://github.com/root-project/root/pull/485:21,modifiability,interfac,interfaces,21,Improvements and new interfaces in KahanSum;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/485
https://github.com/root-project/root/pull/486:24,safety,test,test,24,Move the TSeq iterators test to google test; PR coming in roottest to remove it from there,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/486
https://github.com/root-project/root/pull/486:39,safety,test,test,39,Move the TSeq iterators test to google test; PR coming in roottest to remove it from there,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/486
https://github.com/root-project/root/pull/486:24,testability,test,test,24,Move the TSeq iterators test to google test; PR coming in roottest to remove it from there,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/486
https://github.com/root-project/root/pull/486:39,testability,test,test,39,Move the TSeq iterators test to google test; PR coming in roottest to remove it from there,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/486
https://github.com/root-project/root/pull/492:50,modifiability,variab,variable,50,"[TMVA] Fix bug caught by testMinimizationCpu; The variable fDropoutProbability in DNN/Layer is being initialized twice. in the constructor, ignoring the value passed in the initialization. list, which causes a bug that breaks TGradientDescent minimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/492
https://github.com/root-project/root/pull/492:86,modifiability,Layer,Layer,86,"[TMVA] Fix bug caught by testMinimizationCpu; The variable fDropoutProbability in DNN/Layer is being initialized twice. in the constructor, ignoring the value passed in the initialization. list, which causes a bug that breaks TGradientDescent minimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/492
https://github.com/root-project/root/pull/492:25,safety,test,testMinimizationCpu,25,"[TMVA] Fix bug caught by testMinimizationCpu; The variable fDropoutProbability in DNN/Layer is being initialized twice. in the constructor, ignoring the value passed in the initialization. list, which causes a bug that breaks TGradientDescent minimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/492
https://github.com/root-project/root/pull/492:25,testability,test,testMinimizationCpu,25,"[TMVA] Fix bug caught by testMinimizationCpu; The variable fDropoutProbability in DNN/Layer is being initialized twice. in the constructor, ignoring the value passed in the initialization. list, which causes a bug that breaks TGradientDescent minimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/492
https://github.com/root-project/root/pull/492:243,usability,minim,minimizer,243,"[TMVA] Fix bug caught by testMinimizationCpu; The variable fDropoutProbability in DNN/Layer is being initialized twice. in the constructor, ignoring the value passed in the initialization. list, which causes a bug that breaks TGradientDescent minimizer.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/492
https://github.com/root-project/root/pull/493:6,energy efficiency,optim,optimization,6,Cling optimization option;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/493
https://github.com/root-project/root/pull/493:6,performance,optimiz,optimization,6,Cling optimization option;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/493
https://github.com/root-project/root/pull/494:36,integrability,coupl,couple,36,"Small TMVA improvements; This has a couple more fixes from the study of a previous bug, some typo fixes, etc. The commit messages have more details.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:121,integrability,messag,messages,121,"Small TMVA improvements; This has a couple more fixes from the study of a previous bug, some typo fixes, etc. The commit messages have more details.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:121,interoperability,messag,messages,121,"Small TMVA improvements; This has a couple more fixes from the study of a previous bug, some typo fixes, etc. The commit messages have more details.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:36,modifiability,coupl,couple,36,"Small TMVA improvements; This has a couple more fixes from the study of a previous bug, some typo fixes, etc. The commit messages have more details.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/494:36,testability,coupl,couple,36,"Small TMVA improvements; This has a couple more fixes from the study of a previous bug, some typo fixes, etc. The commit messages have more details.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/494
https://github.com/root-project/root/pull/496:49,usability,minim,minimal,49,Adjust all THttpServer source with travis ; Plus minimal change in websocket id - use UInt_t instead of void*,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/496
https://github.com/root-project/root/pull/497:190,deployability,version,version,190,"Add VecCore external; This pull request addresses Pere's comments and adds some more changes like a simple test for VecCore functionality and better support for latest VecCore changes (from version 0.3.2 to 0.4.0). It should be ready for merging, but I'd like to see all tests pass first. I tested on my own machine with several combinations of `vc=ON/OFF`, `builtin_vc=ON/OFF` and `veccore=ON/OFF`, `builtin_veccore=ON/OFF`. It should all work properly. However, since external VecCore cannot find a builtin Vc, requesting `builtin_vc=ON` and `veccore=ON` will trigger `builtin_veccore=ON` automatically. Please feel free to to make more suggestions for extra changes if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:591,deployability,automat,automatically,591,"Add VecCore external; This pull request addresses Pere's comments and adds some more changes like a simple test for VecCore functionality and better support for latest VecCore changes (from version 0.3.2 to 0.4.0). It should be ready for merging, but I'd like to see all tests pass first. I tested on my own machine with several combinations of `vc=ON/OFF`, `builtin_vc=ON/OFF` and `veccore=ON/OFF`, `builtin_veccore=ON/OFF`. It should all work properly. However, since external VecCore cannot find a builtin Vc, requesting `builtin_vc=ON` and `veccore=ON` will trigger `builtin_veccore=ON` automatically. Please feel free to to make more suggestions for extra changes if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:190,integrability,version,version,190,"Add VecCore external; This pull request addresses Pere's comments and adds some more changes like a simple test for VecCore functionality and better support for latest VecCore changes (from version 0.3.2 to 0.4.0). It should be ready for merging, but I'd like to see all tests pass first. I tested on my own machine with several combinations of `vc=ON/OFF`, `builtin_vc=ON/OFF` and `veccore=ON/OFF`, `builtin_veccore=ON/OFF`. It should all work properly. However, since external VecCore cannot find a builtin Vc, requesting `builtin_vc=ON` and `veccore=ON` will trigger `builtin_veccore=ON` automatically. Please feel free to to make more suggestions for extra changes if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:190,modifiability,version,version,190,"Add VecCore external; This pull request addresses Pere's comments and adds some more changes like a simple test for VecCore functionality and better support for latest VecCore changes (from version 0.3.2 to 0.4.0). It should be ready for merging, but I'd like to see all tests pass first. I tested on my own machine with several combinations of `vc=ON/OFF`, `builtin_vc=ON/OFF` and `veccore=ON/OFF`, `builtin_veccore=ON/OFF`. It should all work properly. However, since external VecCore cannot find a builtin Vc, requesting `builtin_vc=ON` and `veccore=ON` will trigger `builtin_veccore=ON` automatically. Please feel free to to make more suggestions for extra changes if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:107,safety,test,test,107,"Add VecCore external; This pull request addresses Pere's comments and adds some more changes like a simple test for VecCore functionality and better support for latest VecCore changes (from version 0.3.2 to 0.4.0). It should be ready for merging, but I'd like to see all tests pass first. I tested on my own machine with several combinations of `vc=ON/OFF`, `builtin_vc=ON/OFF` and `veccore=ON/OFF`, `builtin_veccore=ON/OFF`. It should all work properly. However, since external VecCore cannot find a builtin Vc, requesting `builtin_vc=ON` and `veccore=ON` will trigger `builtin_veccore=ON` automatically. Please feel free to to make more suggestions for extra changes if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:271,safety,test,tests,271,"Add VecCore external; This pull request addresses Pere's comments and adds some more changes like a simple test for VecCore functionality and better support for latest VecCore changes (from version 0.3.2 to 0.4.0). It should be ready for merging, but I'd like to see all tests pass first. I tested on my own machine with several combinations of `vc=ON/OFF`, `builtin_vc=ON/OFF` and `veccore=ON/OFF`, `builtin_veccore=ON/OFF`. It should all work properly. However, since external VecCore cannot find a builtin Vc, requesting `builtin_vc=ON` and `veccore=ON` will trigger `builtin_veccore=ON` automatically. Please feel free to to make more suggestions for extra changes if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:291,safety,test,tested,291,"Add VecCore external; This pull request addresses Pere's comments and adds some more changes like a simple test for VecCore functionality and better support for latest VecCore changes (from version 0.3.2 to 0.4.0). It should be ready for merging, but I'd like to see all tests pass first. I tested on my own machine with several combinations of `vc=ON/OFF`, `builtin_vc=ON/OFF` and `veccore=ON/OFF`, `builtin_veccore=ON/OFF`. It should all work properly. However, since external VecCore cannot find a builtin Vc, requesting `builtin_vc=ON` and `veccore=ON` will trigger `builtin_veccore=ON` automatically. Please feel free to to make more suggestions for extra changes if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:100,testability,simpl,simple,100,"Add VecCore external; This pull request addresses Pere's comments and adds some more changes like a simple test for VecCore functionality and better support for latest VecCore changes (from version 0.3.2 to 0.4.0). It should be ready for merging, but I'd like to see all tests pass first. I tested on my own machine with several combinations of `vc=ON/OFF`, `builtin_vc=ON/OFF` and `veccore=ON/OFF`, `builtin_veccore=ON/OFF`. It should all work properly. However, since external VecCore cannot find a builtin Vc, requesting `builtin_vc=ON` and `veccore=ON` will trigger `builtin_veccore=ON` automatically. Please feel free to to make more suggestions for extra changes if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:107,testability,test,test,107,"Add VecCore external; This pull request addresses Pere's comments and adds some more changes like a simple test for VecCore functionality and better support for latest VecCore changes (from version 0.3.2 to 0.4.0). It should be ready for merging, but I'd like to see all tests pass first. I tested on my own machine with several combinations of `vc=ON/OFF`, `builtin_vc=ON/OFF` and `veccore=ON/OFF`, `builtin_veccore=ON/OFF`. It should all work properly. However, since external VecCore cannot find a builtin Vc, requesting `builtin_vc=ON` and `veccore=ON` will trigger `builtin_veccore=ON` automatically. Please feel free to to make more suggestions for extra changes if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:271,testability,test,tests,271,"Add VecCore external; This pull request addresses Pere's comments and adds some more changes like a simple test for VecCore functionality and better support for latest VecCore changes (from version 0.3.2 to 0.4.0). It should be ready for merging, but I'd like to see all tests pass first. I tested on my own machine with several combinations of `vc=ON/OFF`, `builtin_vc=ON/OFF` and `veccore=ON/OFF`, `builtin_veccore=ON/OFF`. It should all work properly. However, since external VecCore cannot find a builtin Vc, requesting `builtin_vc=ON` and `veccore=ON` will trigger `builtin_veccore=ON` automatically. Please feel free to to make more suggestions for extra changes if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:291,testability,test,tested,291,"Add VecCore external; This pull request addresses Pere's comments and adds some more changes like a simple test for VecCore functionality and better support for latest VecCore changes (from version 0.3.2 to 0.4.0). It should be ready for merging, but I'd like to see all tests pass first. I tested on my own machine with several combinations of `vc=ON/OFF`, `builtin_vc=ON/OFF` and `veccore=ON/OFF`, `builtin_veccore=ON/OFF`. It should all work properly. However, since external VecCore cannot find a builtin Vc, requesting `builtin_vc=ON` and `veccore=ON` will trigger `builtin_veccore=ON` automatically. Please feel free to to make more suggestions for extra changes if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:591,testability,automat,automatically,591,"Add VecCore external; This pull request addresses Pere's comments and adds some more changes like a simple test for VecCore functionality and better support for latest VecCore changes (from version 0.3.2 to 0.4.0). It should be ready for merging, but I'd like to see all tests pass first. I tested on my own machine with several combinations of `vc=ON/OFF`, `builtin_vc=ON/OFF` and `veccore=ON/OFF`, `builtin_veccore=ON/OFF`. It should all work properly. However, since external VecCore cannot find a builtin Vc, requesting `builtin_vc=ON` and `veccore=ON` will trigger `builtin_veccore=ON` automatically. Please feel free to to make more suggestions for extra changes if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:100,usability,simpl,simple,100,"Add VecCore external; This pull request addresses Pere's comments and adds some more changes like a simple test for VecCore functionality and better support for latest VecCore changes (from version 0.3.2 to 0.4.0). It should be ready for merging, but I'd like to see all tests pass first. I tested on my own machine with several combinations of `vc=ON/OFF`, `builtin_vc=ON/OFF` and `veccore=ON/OFF`, `builtin_veccore=ON/OFF`. It should all work properly. However, since external VecCore cannot find a builtin Vc, requesting `builtin_vc=ON` and `veccore=ON` will trigger `builtin_veccore=ON` automatically. Please feel free to to make more suggestions for extra changes if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/497:149,usability,support,support,149,"Add VecCore external; This pull request addresses Pere's comments and adds some more changes like a simple test for VecCore functionality and better support for latest VecCore changes (from version 0.3.2 to 0.4.0). It should be ready for merging, but I'd like to see all tests pass first. I tested on my own machine with several combinations of `vc=ON/OFF`, `builtin_vc=ON/OFF` and `veccore=ON/OFF`, `builtin_veccore=ON/OFF`. It should all work properly. However, since external VecCore cannot find a builtin Vc, requesting `builtin_vc=ON` and `veccore=ON` will trigger `builtin_veccore=ON` automatically. Please feel free to to make more suggestions for extra changes if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/497
https://github.com/root-project/root/pull/498:4,availability,toler,tolerance,4,Use tolerance to compare floating point numbers in testGenVector.cxx; The exact comparison [fails](http://cdash.cern.ch/testDetails.php?test=23864693&build=342450) in some architectures where rounding may occur.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:92,deployability,fail,fails,92,Use tolerance to compare floating point numbers in testGenVector.cxx; The exact comparison [fails](http://cdash.cern.ch/testDetails.php?test=23864693&build=342450) in some architectures where rounding may occur.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:150,deployability,build,build,150,Use tolerance to compare floating point numbers in testGenVector.cxx; The exact comparison [fails](http://cdash.cern.ch/testDetails.php?test=23864693&build=342450) in some architectures where rounding may occur.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:172,interoperability,architectur,architectures,172,Use tolerance to compare floating point numbers in testGenVector.cxx; The exact comparison [fails](http://cdash.cern.ch/testDetails.php?test=23864693&build=342450) in some architectures where rounding may occur.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:4,reliability,toleran,tolerance,4,Use tolerance to compare floating point numbers in testGenVector.cxx; The exact comparison [fails](http://cdash.cern.ch/testDetails.php?test=23864693&build=342450) in some architectures where rounding may occur.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:92,reliability,fail,fails,92,Use tolerance to compare floating point numbers in testGenVector.cxx; The exact comparison [fails](http://cdash.cern.ch/testDetails.php?test=23864693&build=342450) in some architectures where rounding may occur.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:51,safety,test,testGenVector,51,Use tolerance to compare floating point numbers in testGenVector.cxx; The exact comparison [fails](http://cdash.cern.ch/testDetails.php?test=23864693&build=342450) in some architectures where rounding may occur.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:120,safety,test,testDetails,120,Use tolerance to compare floating point numbers in testGenVector.cxx; The exact comparison [fails](http://cdash.cern.ch/testDetails.php?test=23864693&build=342450) in some architectures where rounding may occur.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:136,safety,test,test,136,Use tolerance to compare floating point numbers in testGenVector.cxx; The exact comparison [fails](http://cdash.cern.ch/testDetails.php?test=23864693&build=342450) in some architectures where rounding may occur.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:51,testability,test,testGenVector,51,Use tolerance to compare floating point numbers in testGenVector.cxx; The exact comparison [fails](http://cdash.cern.ch/testDetails.php?test=23864693&build=342450) in some architectures where rounding may occur.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:120,testability,test,testDetails,120,Use tolerance to compare floating point numbers in testGenVector.cxx; The exact comparison [fails](http://cdash.cern.ch/testDetails.php?test=23864693&build=342450) in some architectures where rounding may occur.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/498:136,testability,test,test,136,Use tolerance to compare floating point numbers in testGenVector.cxx; The exact comparison [fails](http://cdash.cern.ch/testDetails.php?test=23864693&build=342450) in some architectures where rounding may occur.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/498
https://github.com/root-project/root/pull/499:109,deployability,build,buildid,109,Avoid double increment to loop variable; This PR fixes [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=342711) problem.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/499
https://github.com/root-project/root/pull/499:31,modifiability,variab,variable,31,Avoid double increment to loop variable; This PR fixes [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=342711) problem.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/499
https://github.com/root-project/root/pull/499:0,safety,Avoid,Avoid,0,Avoid double increment to loop variable; This PR fixes [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=342711) problem.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/499
https://github.com/root-project/root/pull/500:11,deployability,modul,module,11,Only write module.modulemap.extra with enabled modules.; Previously we also had the file in the include directory even with without cxxmodules=On.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/500
https://github.com/root-project/root/pull/500:18,deployability,modul,modulemap,18,Only write module.modulemap.extra with enabled modules.; Previously we also had the file in the include directory even with without cxxmodules=On.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/500
https://github.com/root-project/root/pull/500:47,deployability,modul,modules,47,Only write module.modulemap.extra with enabled modules.; Previously we also had the file in the include directory even with without cxxmodules=On.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/500
https://github.com/root-project/root/pull/500:11,modifiability,modul,module,11,Only write module.modulemap.extra with enabled modules.; Previously we also had the file in the include directory even with without cxxmodules=On.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/500
https://github.com/root-project/root/pull/500:18,modifiability,modul,modulemap,18,Only write module.modulemap.extra with enabled modules.; Previously we also had the file in the include directory even with without cxxmodules=On.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/500
https://github.com/root-project/root/pull/500:47,modifiability,modul,modules,47,Only write module.modulemap.extra with enabled modules.; Previously we also had the file in the include directory even with without cxxmodules=On.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/500
https://github.com/root-project/root/pull/500:11,safety,modul,module,11,Only write module.modulemap.extra with enabled modules.; Previously we also had the file in the include directory even with without cxxmodules=On.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/500
https://github.com/root-project/root/pull/500:18,safety,modul,modulemap,18,Only write module.modulemap.extra with enabled modules.; Previously we also had the file in the include directory even with without cxxmodules=On.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/500
https://github.com/root-project/root/pull/500:47,safety,modul,modules,47,Only write module.modulemap.extra with enabled modules.; Previously we also had the file in the include directory even with without cxxmodules=On.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/500
https://github.com/root-project/root/pull/501:104,deployability,modul,modulemap,104,Do not add the header files as an OPTION to ROOT_GENERATE_DICTIONARY; This fixes a bug uncovered by our modulemap generator where we generated modules for the different STL dictionaries with the same contents.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/501
https://github.com/root-project/root/pull/501:143,deployability,modul,modules,143,Do not add the header files as an OPTION to ROOT_GENERATE_DICTIONARY; This fixes a bug uncovered by our modulemap generator where we generated modules for the different STL dictionaries with the same contents.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/501
https://github.com/root-project/root/pull/501:104,modifiability,modul,modulemap,104,Do not add the header files as an OPTION to ROOT_GENERATE_DICTIONARY; This fixes a bug uncovered by our modulemap generator where we generated modules for the different STL dictionaries with the same contents.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/501
https://github.com/root-project/root/pull/501:143,modifiability,modul,modules,143,Do not add the header files as an OPTION to ROOT_GENERATE_DICTIONARY; This fixes a bug uncovered by our modulemap generator where we generated modules for the different STL dictionaries with the same contents.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/501
https://github.com/root-project/root/pull/501:200,performance,content,contents,200,Do not add the header files as an OPTION to ROOT_GENERATE_DICTIONARY; This fixes a bug uncovered by our modulemap generator where we generated modules for the different STL dictionaries with the same contents.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/501
https://github.com/root-project/root/pull/501:104,safety,modul,modulemap,104,Do not add the header files as an OPTION to ROOT_GENERATE_DICTIONARY; This fixes a bug uncovered by our modulemap generator where we generated modules for the different STL dictionaries with the same contents.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/501
https://github.com/root-project/root/pull/501:143,safety,modul,modules,143,Do not add the header files as an OPTION to ROOT_GENERATE_DICTIONARY; This fixes a bug uncovered by our modulemap generator where we generated modules for the different STL dictionaries with the same contents.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/501
https://github.com/root-project/root/pull/502:66,deployability,fail,failing,66,Backport of some GenVector fixes; These commits fix two GenVector failing [tests](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=342982).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/502
https://github.com/root-project/root/pull/502:127,deployability,build,buildid,127,Backport of some GenVector fixes; These commits fix two GenVector failing [tests](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=342982).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/502
https://github.com/root-project/root/pull/502:66,reliability,fail,failing,66,Backport of some GenVector fixes; These commits fix two GenVector failing [tests](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=342982).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/502
https://github.com/root-project/root/pull/502:75,safety,test,tests,75,Backport of some GenVector fixes; These commits fix two GenVector failing [tests](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=342982).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/502
https://github.com/root-project/root/pull/502:75,testability,test,tests,75,Backport of some GenVector fixes; These commits fix two GenVector failing [tests](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=342982).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/502
https://github.com/root-project/root/pull/503:56,integrability,configur,configure,56,"http: increase websocket timeout to 300 s; One also can configure websocket timeout when creating THttpServer. Required for TWebCanvas prototype,. but also can be used in other applications",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/503
https://github.com/root-project/root/pull/503:56,modifiability,configur,configure,56,"http: increase websocket timeout to 300 s; One also can configure websocket timeout when creating THttpServer. Required for TWebCanvas prototype,. but also can be used in other applications",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/503
https://github.com/root-project/root/pull/503:25,performance,time,timeout,25,"http: increase websocket timeout to 300 s; One also can configure websocket timeout when creating THttpServer. Required for TWebCanvas prototype,. but also can be used in other applications",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/503
https://github.com/root-project/root/pull/503:76,performance,time,timeout,76,"http: increase websocket timeout to 300 s; One also can configure websocket timeout when creating THttpServer. Required for TWebCanvas prototype,. but also can be used in other applications",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/503
https://github.com/root-project/root/pull/503:25,safety,timeout,timeout,25,"http: increase websocket timeout to 300 s; One also can configure websocket timeout when creating THttpServer. Required for TWebCanvas prototype,. but also can be used in other applications",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/503
https://github.com/root-project/root/pull/503:76,safety,timeout,timeout,76,"http: increase websocket timeout to 300 s; One also can configure websocket timeout when creating THttpServer. Required for TWebCanvas prototype,. but also can be used in other applications",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/503
https://github.com/root-project/root/pull/503:56,security,configur,configure,56,"http: increase websocket timeout to 300 s; One also can configure websocket timeout when creating THttpServer. Required for TWebCanvas prototype,. but also can be used in other applications",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/503
https://github.com/root-project/root/pull/503:135,usability,prototyp,prototype,135,"http: increase websocket timeout to 300 s; One also can configure websocket timeout when creating THttpServer. Required for TWebCanvas prototype,. but also can be used in other applications",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/503
https://github.com/root-project/root/pull/504:33,deployability,modul,modulemap,33,PCM generation now uses the ROOT modulemap to build modules.; This patch also untangles the generation code of PCMs and PCHs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:46,deployability,build,build,46,PCM generation now uses the ROOT modulemap to build modules.; This patch also untangles the generation code of PCMs and PCHs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:52,deployability,modul,modules,52,PCM generation now uses the ROOT modulemap to build modules.; This patch also untangles the generation code of PCMs and PCHs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:67,deployability,patch,patch,67,PCM generation now uses the ROOT modulemap to build modules.; This patch also untangles the generation code of PCMs and PCHs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:33,modifiability,modul,modulemap,33,PCM generation now uses the ROOT modulemap to build modules.; This patch also untangles the generation code of PCMs and PCHs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:52,modifiability,modul,modules,52,PCM generation now uses the ROOT modulemap to build modules.; This patch also untangles the generation code of PCMs and PCHs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:33,safety,modul,modulemap,33,PCM generation now uses the ROOT modulemap to build modules.; This patch also untangles the generation code of PCMs and PCHs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:52,safety,modul,modules,52,PCM generation now uses the ROOT modulemap to build modules.; This patch also untangles the generation code of PCMs and PCHs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:67,safety,patch,patch,67,PCM generation now uses the ROOT modulemap to build modules.; This patch also untangles the generation code of PCMs and PCHs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/504:67,security,patch,patch,67,PCM generation now uses the ROOT modulemap to build modules.; This patch also untangles the generation code of PCMs and PCHs.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/504
https://github.com/root-project/root/pull/505:107,availability,toler,tolerance,107,Fix stress histogram test; Replace direct floating point comparison with `AreEqualRel()` comparison with a tolerance.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:107,reliability,toleran,tolerance,107,Fix stress histogram test; Replace direct floating point comparison with `AreEqualRel()` comparison with a tolerance.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:21,safety,test,test,21,Fix stress histogram test; Replace direct floating point comparison with `AreEqualRel()` comparison with a tolerance.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/505:21,testability,test,test,21,Fix stress histogram test; Replace direct floating point comparison with `AreEqualRel()` comparison with a tolerance.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/505
https://github.com/root-project/root/pull/506:67,availability,consist,consistent,67,Change the form of the separation calculation for histograms to be consistent with the form of the separation calculation for PDFs.; This changes the form of the separation calculation for histograms such that it is consistent with the form of the separation calculation for PDFs -- basically moving multiplication by a scalar from inside a loop to outside the loop.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:216,availability,consist,consistent,216,Change the form of the separation calculation for histograms to be consistent with the form of the separation calculation for PDFs.; This changes the form of the separation calculation for histograms such that it is consistent with the form of the separation calculation for PDFs -- basically moving multiplication by a scalar from inside a loop to outside the loop.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:320,modifiability,scal,scalar,320,Change the form of the separation calculation for histograms to be consistent with the form of the separation calculation for PDFs.; This changes the form of the separation calculation for histograms such that it is consistent with the form of the separation calculation for PDFs -- basically moving multiplication by a scalar from inside a loop to outside the loop.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:67,usability,consist,consistent,67,Change the form of the separation calculation for histograms to be consistent with the form of the separation calculation for PDFs.; This changes the form of the separation calculation for histograms such that it is consistent with the form of the separation calculation for PDFs -- basically moving multiplication by a scalar from inside a loop to outside the loop.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/506:216,usability,consist,consistent,216,Change the form of the separation calculation for histograms to be consistent with the form of the separation calculation for PDFs.; This changes the form of the separation calculation for histograms such that it is consistent with the form of the separation calculation for PDFs -- basically moving multiplication by a scalar from inside a loop to outside the loop.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/506
https://github.com/root-project/root/pull/507:1015,availability,error,errors,1015,"r CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1303,availability,error,error,1303,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1495,availability,error,error,1495,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1656,availability,Error,Error,1656,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:0,deployability,Updat,Updated,0,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:67,deployability,updat,update,67,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:261,deployability,build,builds,261,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:332,deployability,build,builds,332,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:536,deployability,build,build,536,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:573,deployability,build,build,573,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:637,deployability,build,build,637,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:752,deployability,build,build,752,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1005,deployability,fail,fail,1005," support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then us",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1180,deployability,build,build,1180," of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more te",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1696,deployability,fail,failed,1696,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1751,deployability,build,build,1751,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1768,deployability,build,build,1768,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1841,deployability,build,build,1841,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1852,deployability,fail,fail,1852,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:272,integrability,wrap,wraps,272,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1122,interoperability,share,shared,1122,"S commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:643,performance,time,time,643,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:873,performance,IOp,IOptions,873,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1015,performance,error,errors,1015,"r CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1303,performance,error,error,1303,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1325,performance,IOp,IOptions,1325,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1374,performance,IOp,IOptions,1374,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1495,performance,error,error,1495,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1576,performance,IOp,IOptions,1576,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1656,performance,Error,Error,1656,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:2188,performance,perform,performance,2188,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1005,reliability,fail,fail,1005," support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then us",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1696,reliability,fail,failed,1696,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1852,reliability,fail,fail,1852,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:0,safety,Updat,Updated,0,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:67,safety,updat,update,67,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:402,safety,test,tests,402,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1015,safety,error,errors,1015,"r CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1303,safety,error,error,1303,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1495,safety,error,error,1495,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1656,safety,Error,Error,1656,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:2034,safety,test,test,2034,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:2181,safety,test,tests,2181,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:0,security,Updat,Updated,0,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:67,security,updat,update,67,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:735,security,hack,hack,735,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:775,security,access,access,775,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:402,testability,test,tests,402,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:2034,testability,test,test,2034,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:2181,testability,test,tests,2181,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:8,usability,support,support,8,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:27,usability,minim,minimizer,27,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:142,usability,tip,tip,142,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:356,usability,support,support,356,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:409,usability,indicat,indicating,409,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:496,usability,help,help,496,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:813,usability,Minim,Minimizer,813,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:902,usability,Minim,MinimizerOptions,902,"Updated support for CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1015,usability,error,errors,1015,"r CMA-ES minimizer based on libcmaes; This is an update to PR #40 that includes:. - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017). - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1303,usability,error,error,1303,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1403,usability,Minim,MinimizerOptions,1403,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1495,usability,error,error,1495,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1519,usability,Minim,MinimizerOptions,1519,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1605,usability,Minim,MinimizerOptions,1605,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1656,usability,Error,Error,1656,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:1709,usability,Help,Help,1709,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/507:2188,usability,perform,performance,2188,"libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**. However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to. ```C++. ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);. opts.SetIntValue(""lambda"",lambda);. ```. Code above now appears to fail with errors such as:. ```. root [0] .L tutorials/fit/cmaesFitBench.C++g. Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so. In file included from input_line_11:9:. ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'. ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);. ~~~~~~~~~~~~^. Error in <ACLiC>: Dictionary generation failed! ```. Help is needed to fix the above. **How to build**. ```. cd build. cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on. make. ```. The build will fail because of the header issue mentioned above, so do:. ```. cd include. ln -s eigen3/Eigen . ln -s eigen3/unsupported . cd .. make. ```. You can then use the newly built ROOT and test that CMA-ES is working:. ```. .L tutorials/fit/cmaesGausFit.C++g. cmaesGausFit(). ```. Please see instructions and links from PR #40 for more tests, performance checks, etc... Once everything is fine, I'll be able to squash all commits into a single one if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/507
https://github.com/root-project/root/pull/509:48,deployability,depend,dependencies,48,Do not add a non-existent target to the list of dependencies.; Cherry-picked from master to fix the builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/509
https://github.com/root-project/root/pull/509:100,deployability,build,builds,100,Do not add a non-existent target to the list of dependencies.; Cherry-picked from master to fix the builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/509
https://github.com/root-project/root/pull/509:48,integrability,depend,dependencies,48,Do not add a non-existent target to the list of dependencies.; Cherry-picked from master to fix the builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/509
https://github.com/root-project/root/pull/509:48,modifiability,depend,dependencies,48,Do not add a non-existent target to the list of dependencies.; Cherry-picked from master to fix the builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/509
https://github.com/root-project/root/pull/509:48,safety,depend,dependencies,48,Do not add a non-existent target to the list of dependencies.; Cherry-picked from master to fix the builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/509
https://github.com/root-project/root/pull/509:48,testability,depend,dependencies,48,Do not add a non-existent target to the list of dependencies.; Cherry-picked from master to fix the builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/509
https://github.com/root-project/root/pull/510:9,usability,support,support,9,Longpoll support in THttpServer;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/510
https://github.com/root-project/root/pull/511:33,availability,toler,tolerances,33,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:8,deployability,fail,failing,8,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:120,deployability,Fail,Failing,120,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:195,deployability,build,build,195,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:8,reliability,fail,failing,8,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:33,reliability,toleran,tolerances,33,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:120,reliability,Fail,Failing,120,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:16,safety,test,test,16,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:72,safety,Test,Test,72,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:97,safety,test,test,97,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:102,safety,test,testSMatrix,102,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:128,safety,test,test,128,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:165,safety,test,testDetails,165,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:181,safety,test,test,181,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:16,testability,test,test,16,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:72,testability,Test,Test,72,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:97,testability,test,test,97,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:102,testability,test,testSMatrix,102,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:128,testability,test,test,128,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:165,testability,test,testDetails,165,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/511:181,testability,test,test,181,Fix for failing test (too strict tolerances for floating point values); Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:. http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/511
https://github.com/root-project/root/pull/512:101,deployability,Fail,Failing,101,Fix for testArithmeticCpu from TMVA; Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/512
https://github.com/root-project/root/pull/512:166,deployability,build,build,166,Fix for testArithmeticCpu from TMVA; Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/512
https://github.com/root-project/root/pull/512:55,integrability,messag,messages,55,Fix for testArithmeticCpu from TMVA; Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/512
https://github.com/root-project/root/pull/512:55,interoperability,messag,messages,55,Fix for testArithmeticCpu from TMVA; Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/512
https://github.com/root-project/root/pull/512:101,reliability,Fail,Failing,101,Fix for testArithmeticCpu from TMVA; Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/512
https://github.com/root-project/root/pull/512:8,safety,test,testArithmeticCpu,8,Fix for testArithmeticCpu from TMVA; Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/512
https://github.com/root-project/root/pull/512:109,safety,test,test,109,Fix for testArithmeticCpu from TMVA; Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/512
https://github.com/root-project/root/pull/512:136,safety,test,testDetails,136,Fix for testArithmeticCpu from TMVA; Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/512
https://github.com/root-project/root/pull/512:152,safety,test,test,152,Fix for testArithmeticCpu from TMVA; Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/512
https://github.com/root-project/root/pull/512:8,testability,test,testArithmeticCpu,8,Fix for testArithmeticCpu from TMVA; Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/512
https://github.com/root-project/root/pull/512:109,testability,test,test,109,Fix for testArithmeticCpu from TMVA; Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/512
https://github.com/root-project/root/pull/512:136,testability,test,testDetails,136,Fix for testArithmeticCpu from TMVA; Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/512
https://github.com/root-project/root/pull/512:152,testability,test,test,152,Fix for testArithmeticCpu from TMVA; Please see commit messages for full explanation of the changes. Failing test: http://cdash.cern.ch/testDetails.php?test=24129853&build=345069,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/512
https://github.com/root-project/root/pull/513:71,security,secur,security,71,"In rootd, do not use a call to popen() to expand path names; Addressed security threat reported by S. Luders. Using the same technology used in TSystem::ExpandFileName .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/513
https://github.com/root-project/root/pull/513:80,security,threat,threat,80,"In rootd, do not use a call to popen() to expand path names; Addressed security threat reported by S. Luders. Using the same technology used in TSystem::ExpandFileName .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/513
https://github.com/root-project/root/pull/515:354,energy efficiency,measur,measured,354,TProfile2Poly; Extending TH2Poly such as to make it behave like TProfile2D with the addition of being able to deal with polygonal bins. TH2. |. |. +-------+------+------+-----+-----+-------------+. | | | | | |. TH2C TH2S TH2I TH2F TH2D TH2Poly. | |. | |. TProfile2D TProfile2Poly. The main goal of TProfile2Poly: Showing averages / standard deviation of measured values per polygonal bins. **[EDIT]**. Proposed tutorial:. https://gist.github.com/imKuehlschrank/1efbbd4426d9bdfa9ceb27e09ae7e958. Similar style as https://root.cern/doc/master/th2polyEurope_8C.html.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:332,interoperability,standard,standard,332,TProfile2Poly; Extending TH2Poly such as to make it behave like TProfile2D with the addition of being able to deal with polygonal bins. TH2. |. |. +-------+------+------+-----+-----+-------------+. | | | | | |. TH2C TH2S TH2I TH2F TH2D TH2Poly. | |. | |. TProfile2D TProfile2Poly. The main goal of TProfile2Poly: Showing averages / standard deviation of measured values per polygonal bins. **[EDIT]**. Proposed tutorial:. https://gist.github.com/imKuehlschrank/1efbbd4426d9bdfa9ceb27e09ae7e958. Similar style as https://root.cern/doc/master/th2polyEurope_8C.html.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/515:15,modifiability,Exten,Extending,15,TProfile2Poly; Extending TH2Poly such as to make it behave like TProfile2D with the addition of being able to deal with polygonal bins. TH2. |. |. +-------+------+------+-----+-----+-------------+. | | | | | |. TH2C TH2S TH2I TH2F TH2D TH2Poly. | |. | |. TProfile2D TProfile2Poly. The main goal of TProfile2Poly: Showing averages / standard deviation of measured values per polygonal bins. **[EDIT]**. Proposed tutorial:. https://gist.github.com/imKuehlschrank/1efbbd4426d9bdfa9ceb27e09ae7e958. Similar style as https://root.cern/doc/master/th2polyEurope_8C.html.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/515
https://github.com/root-project/root/pull/516:111,usability,support,support,111,"Fix for ROOT-8452; . Rewrite of TChain::ParseTreeFilename and mods in TApplication::GetOptions. Adds also full support for wildcards, at least for the backends supporting it,. and for generic paths on the command line, e.g. for. $ root root://host.my.dom//my/dir/file.root?option#anchor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/516
https://github.com/root-project/root/pull/516:160,usability,support,supporting,160,"Fix for ROOT-8452; . Rewrite of TChain::ParseTreeFilename and mods in TApplication::GetOptions. Adds also full support for wildcards, at least for the backends supporting it,. and for generic paths on the command line, e.g. for. $ root root://host.my.dom//my/dir/file.root?option#anchor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/516
https://github.com/root-project/root/pull/516:205,usability,command,command,205,"Fix for ROOT-8452; . Rewrite of TChain::ParseTreeFilename and mods in TApplication::GetOptions. Adds also full support for wildcards, at least for the backends supporting it,. and for generic paths on the command line, e.g. for. $ root root://host.my.dom//my/dir/file.root?option#anchor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/516
https://github.com/root-project/root/pull/518:131,availability,error,errors,131,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:285,availability,error,errors,285,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:310,deployability,fail,fail,310,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:586,energy efficiency,Cpu,Cpu,586,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:29,interoperability,convers,conversions,29,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:131,performance,error,errors,131,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:285,performance,error,errors,285,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:586,performance,Cpu,Cpu,586,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:310,reliability,fail,fail,310,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:7,safety,Prevent,Prevent,7,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:44,safety,Test,TestMatrixArithmetic,44,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:131,safety,error,errors,131,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:285,safety,error,errors,285,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:305,safety,test,test,305,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:535,safety,test,testSummary,535,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:7,security,Preven,Prevent,7,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:44,testability,Test,TestMatrixArithmetic,44,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:305,testability,test,test,305,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:535,testability,test,testSummary,535,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:131,usability,error,errors,131,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/518:285,usability,error,errors,285,"[TMVA] Prevent double->float conversions in TestMatrixArithmetic; Casting the matrices from double to float create small rounding. errors of the order of 1e-06 in the reference matrices themselves,. so when they are multiplied the sum over long rows/columns accumulates. many rounding errors and make the test fail. Using TMatrixT of float. as the reference to begin with eliminates this problem. **Note:** _This is a backport of the same fix to master, but with 3 commits combined into a single one._. Reference: http://cdash.cern.ch/testSummary.php?project=1&name=TMVA-DNN-Arithmetic-Cpu&date=2017-04-21",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/518
https://github.com/root-project/root/pull/519:57,availability,failur,failure,57,Remove sysroot arg when writing modules to fix assertion failure.; The sysroot flag should not be set when writing a module otherwise we. trigger an assertion in ASTWriter.cpp:1245.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/519
https://github.com/root-project/root/pull/519:32,deployability,modul,modules,32,Remove sysroot arg when writing modules to fix assertion failure.; The sysroot flag should not be set when writing a module otherwise we. trigger an assertion in ASTWriter.cpp:1245.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/519
https://github.com/root-project/root/pull/519:57,deployability,fail,failure,57,Remove sysroot arg when writing modules to fix assertion failure.; The sysroot flag should not be set when writing a module otherwise we. trigger an assertion in ASTWriter.cpp:1245.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/519
https://github.com/root-project/root/pull/519:117,deployability,modul,module,117,Remove sysroot arg when writing modules to fix assertion failure.; The sysroot flag should not be set when writing a module otherwise we. trigger an assertion in ASTWriter.cpp:1245.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/519
https://github.com/root-project/root/pull/519:32,modifiability,modul,modules,32,Remove sysroot arg when writing modules to fix assertion failure.; The sysroot flag should not be set when writing a module otherwise we. trigger an assertion in ASTWriter.cpp:1245.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/519
https://github.com/root-project/root/pull/519:117,modifiability,modul,module,117,Remove sysroot arg when writing modules to fix assertion failure.; The sysroot flag should not be set when writing a module otherwise we. trigger an assertion in ASTWriter.cpp:1245.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/519
https://github.com/root-project/root/pull/519:57,performance,failur,failure,57,Remove sysroot arg when writing modules to fix assertion failure.; The sysroot flag should not be set when writing a module otherwise we. trigger an assertion in ASTWriter.cpp:1245.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/519
https://github.com/root-project/root/pull/519:57,reliability,fail,failure,57,Remove sysroot arg when writing modules to fix assertion failure.; The sysroot flag should not be set when writing a module otherwise we. trigger an assertion in ASTWriter.cpp:1245.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/519
https://github.com/root-project/root/pull/519:32,safety,modul,modules,32,Remove sysroot arg when writing modules to fix assertion failure.; The sysroot flag should not be set when writing a module otherwise we. trigger an assertion in ASTWriter.cpp:1245.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/519
https://github.com/root-project/root/pull/519:117,safety,modul,module,117,Remove sysroot arg when writing modules to fix assertion failure.; The sysroot flag should not be set when writing a module otherwise we. trigger an assertion in ASTWriter.cpp:1245.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/519
https://github.com/root-project/root/pull/519:47,testability,assert,assertion,47,Remove sysroot arg when writing modules to fix assertion failure.; The sysroot flag should not be set when writing a module otherwise we. trigger an assertion in ASTWriter.cpp:1245.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/519
https://github.com/root-project/root/pull/519:149,testability,assert,assertion,149,Remove sysroot arg when writing modules to fix assertion failure.; The sysroot flag should not be set when writing a module otherwise we. trigger an assertion in ASTWriter.cpp:1245.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/519
https://github.com/root-project/root/pull/521:12,availability,toler,tolerance,12,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:225,availability,toler,tolerance,225,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:360,deployability,fail,fail,360,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:135,performance,time,times,135,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:330,performance,time,times,330,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:12,reliability,toleran,tolerance,12,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:71,reliability,diagno,diagnostic,71,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:225,reliability,toleran,tolerance,225,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:352,reliability,doe,doesn,352,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:360,reliability,fail,fail,360,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:54,safety,test,tests,54,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:114,safety,Test,Test,114,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:320,safety,test,test,320,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:158,security,ident,identity,158,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:54,testability,test,tests,54,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:71,testability,diagno,diagnostic,71,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:114,testability,Test,Test,114,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/521:320,testability,test,test,320,"[Math] Make tolerance less strict on matrix inversion tests; - Improve diagnostic output of compare() function. - Test inverted matrix times original against identity using. element by element comparison, and use less strict tolerance. to account for innacuracies due to matrix inversion. *Note: I am still running this test many times to make sure it doesn't fail anymore. Please wait to merge until after the runs are finished.*",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/521
https://github.com/root-project/root/pull/522:431,availability,operat,operator,431,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:533,availability,error,errors,533,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:559,availability,operat,operator,559,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:679,availability,operat,operators,679,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:58,deployability,patch,patch,58,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:156,deployability,releas,released,156,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:242,deployability,build,builds,242,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:706,deployability,patch,patch,706,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:420,interoperability,convers,conversion,420,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:668,interoperability,convers,conversion,668,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:533,performance,error,errors,533,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:58,safety,patch,patch,58,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:517,safety,avoid,avoid,517,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:533,safety,error,errors,533,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:706,safety,patch,patch,706,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:58,security,patch,patch,58,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:706,security,patch,patch,706,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:90,usability,support,support,90,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:382,usability,interact,interaction,382,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/522:533,usability,error,errors,533,"C++17 (C++1z) enablement in ROOT, LLVM, Interpreter; This patch set enabled C++17 (C++1z) support in ROOT. This will require at least GCC 7.1.0 (soon to be released, probably in a month). GCC 7 fully implements C++17 language features. CMSSW builds using GCC 6.2.0, GCC 6.3.0 and GCC 7.0.1 are all compiled with C++17. Note that biggest issues came from `TString` and `std::string` interaction due to `std::string_view` conversion operator in `TString`. This makes mixing `TString` and `std::string` painful. Thus to avoid ambiguity errors `std::string_view` operator is now marked as explicit. Otherwise in a lot of places I had to use `static_cast<>` to pick one of conversion operators (which makes the patch bigger).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/522
https://github.com/root-project/root/pull/523:363,availability,avail,available,363,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:34,deployability,patch,patches,34,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:181,deployability,integr,integration,181,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:181,integrability,integr,integration,181,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:260,integrability,interfac,interfaces,260,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:387,integrability,messag,messages,387,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:181,interoperability,integr,integration,181,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:260,interoperability,interfac,interfaces,260,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:387,interoperability,messag,messages,387,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:181,modifiability,integr,integration,181,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:260,modifiability,interfac,interfaces,260,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:181,reliability,integr,integration,181,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:363,reliability,availab,available,363,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:34,safety,patch,patches,34,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:363,safety,avail,available,363,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:34,security,patch,patches,34,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:148,security,crypto,crypto,148,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:162,security,hash,hashing,162,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:181,security,integr,integration,181,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:363,security,availab,available,363,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:181,testability,integr,integration,181,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/523:236,usability,support,support,236,"Zlib cleanup (QAT); These 3 small patches I am using for ROOT + Intel QuickAssist Technology (QAT). QAT provides HW-accelerated (de)compression and crypto (incl. hashing). For easy integration Intel provides zlib-shim and openssl-shim, support the most common interfaces (but not everything). Note, that QAT also has software fallback mechanism. More details are available in the commit messages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/523
https://github.com/root-project/root/pull/524:50,availability,error,error,50,fix 2 bugs reported by coverity; fixed copy/paste error in stressLinear. fixed resource leak in ruleVisHists,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:79,deployability,resourc,resource,79,fix 2 bugs reported by coverity; fixed copy/paste error in stressLinear. fixed resource leak in ruleVisHists,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:79,energy efficiency,resourc,resource,79,fix 2 bugs reported by coverity; fixed copy/paste error in stressLinear. fixed resource leak in ruleVisHists,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:50,performance,error,error,50,fix 2 bugs reported by coverity; fixed copy/paste error in stressLinear. fixed resource leak in ruleVisHists,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:79,performance,resourc,resource,79,fix 2 bugs reported by coverity; fixed copy/paste error in stressLinear. fixed resource leak in ruleVisHists,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:50,safety,error,error,50,fix 2 bugs reported by coverity; fixed copy/paste error in stressLinear. fixed resource leak in ruleVisHists,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:79,safety,resourc,resource,79,fix 2 bugs reported by coverity; fixed copy/paste error in stressLinear. fixed resource leak in ruleVisHists,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:79,testability,resourc,resource,79,fix 2 bugs reported by coverity; fixed copy/paste error in stressLinear. fixed resource leak in ruleVisHists,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/524:50,usability,error,error,50,fix 2 bugs reported by coverity; fixed copy/paste error in stressLinear. fixed resource leak in ruleVisHists,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/524
https://github.com/root-project/root/pull/525:20,deployability,updat,update,20,Roc curve weights + update; - ROC curve and integral now respects event weights. - Includes changes introduced by https://github.com/root-project/root/pull/454. - Fixes bug in GetROCIntegral were you would get a different result if called two times in a row. - Fixes line interpolation in plotting. - Some display fixes like labelling of axes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:44,deployability,integr,integral,44,Roc curve weights + update; - ROC curve and integral now respects event weights. - Includes changes introduced by https://github.com/root-project/root/pull/454. - Fixes bug in GetROCIntegral were you would get a different result if called two times in a row. - Fixes line interpolation in plotting. - Some display fixes like labelling of axes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:44,integrability,integr,integral,44,Roc curve weights + update; - ROC curve and integral now respects event weights. - Includes changes introduced by https://github.com/root-project/root/pull/454. - Fixes bug in GetROCIntegral were you would get a different result if called two times in a row. - Fixes line interpolation in plotting. - Some display fixes like labelling of axes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:66,integrability,event,event,66,Roc curve weights + update; - ROC curve and integral now respects event weights. - Includes changes introduced by https://github.com/root-project/root/pull/454. - Fixes bug in GetROCIntegral were you would get a different result if called two times in a row. - Fixes line interpolation in plotting. - Some display fixes like labelling of axes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:44,interoperability,integr,integral,44,Roc curve weights + update; - ROC curve and integral now respects event weights. - Includes changes introduced by https://github.com/root-project/root/pull/454. - Fixes bug in GetROCIntegral were you would get a different result if called two times in a row. - Fixes line interpolation in plotting. - Some display fixes like labelling of axes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:44,modifiability,integr,integral,44,Roc curve weights + update; - ROC curve and integral now respects event weights. - Includes changes introduced by https://github.com/root-project/root/pull/454. - Fixes bug in GetROCIntegral were you would get a different result if called two times in a row. - Fixes line interpolation in plotting. - Some display fixes like labelling of axes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:243,performance,time,times,243,Roc curve weights + update; - ROC curve and integral now respects event weights. - Includes changes introduced by https://github.com/root-project/root/pull/454. - Fixes bug in GetROCIntegral were you would get a different result if called two times in a row. - Fixes line interpolation in plotting. - Some display fixes like labelling of axes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:44,reliability,integr,integral,44,Roc curve weights + update; - ROC curve and integral now respects event weights. - Includes changes introduced by https://github.com/root-project/root/pull/454. - Fixes bug in GetROCIntegral were you would get a different result if called two times in a row. - Fixes line interpolation in plotting. - Some display fixes like labelling of axes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:20,safety,updat,update,20,Roc curve weights + update; - ROC curve and integral now respects event weights. - Includes changes introduced by https://github.com/root-project/root/pull/454. - Fixes bug in GetROCIntegral were you would get a different result if called two times in a row. - Fixes line interpolation in plotting. - Some display fixes like labelling of axes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:20,security,updat,update,20,Roc curve weights + update; - ROC curve and integral now respects event weights. - Includes changes introduced by https://github.com/root-project/root/pull/454. - Fixes bug in GetROCIntegral were you would get a different result if called two times in a row. - Fixes line interpolation in plotting. - Some display fixes like labelling of axes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:44,security,integr,integral,44,Roc curve weights + update; - ROC curve and integral now respects event weights. - Includes changes introduced by https://github.com/root-project/root/pull/454. - Fixes bug in GetROCIntegral were you would get a different result if called two times in a row. - Fixes line interpolation in plotting. - Some display fixes like labelling of axes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/525:44,testability,integr,integral,44,Roc curve weights + update; - ROC curve and integral now respects event weights. - Includes changes introduced by https://github.com/root-project/root/pull/454. - Fixes bug in GetROCIntegral were you would get a different result if called two times in a row. - Fixes line interpolation in plotting. - Some display fixes like labelling of axes.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/525
https://github.com/root-project/root/pull/527:218,availability,error,error,218,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:51,deployability,modul,modulemap,51,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:131,deployability,modul,modulemap,131,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:189,deployability,patch,patch,189,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:224,integrability,messag,message,224,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:224,interoperability,messag,message,224,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:51,modifiability,modul,modulemap,51,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:131,modifiability,modul,modulemap,131,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:218,performance,error,error,218,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:51,safety,modul,modulemap,51,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:131,safety,modul,modulemap,131,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:189,safety,patch,patch,189,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:218,safety,error,error,218,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:189,security,patch,patch,189,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:89,testability,assert,assertion,89,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:164,usability,user,user-friendly,164,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/527:218,usability,error,error,218,Print a warning when rootcling can't find the ROOT modulemap.; So far we only trigger an assertion in LLVM when we can't find the. modulemap file which is not very user-friendly. With this patch. we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/527
https://github.com/root-project/root/pull/528:58,deployability,instal,installed,58,Be more specific on what is a header file to be moved and installed; Editors like VIM creates temporary files (.*.swp) that were added into the list of files to be moved or installed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/528
https://github.com/root-project/root/pull/528:173,deployability,instal,installed,173,Be more specific on what is a header file to be moved and installed; Editors like VIM creates temporary files (.*.swp) that were added into the list of files to be moved or installed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/528
https://github.com/root-project/root/pull/528:8,interoperability,specif,specific,8,Be more specific on what is a header file to be moved and installed; Editors like VIM creates temporary files (.*.swp) that were added into the list of files to be moved or installed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/528
https://github.com/root-project/root/pull/529:0,safety,test,testing,0,testing new PR procedure;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/529
https://github.com/root-project/root/pull/529:0,testability,test,testing,0,testing new PR procedure;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/529
https://github.com/root-project/root/pull/530:21,usability,user,user,21,Added warning if the user uses LLVM_ENABLE_ASSERTIONS.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/530
https://github.com/root-project/root/pull/532:249,deployability,updat,updated,249,"[TDF] branch type inference for actions with multiple branches; This PR adds branch type inference to Histo1D with weights, as well as Histo2D, Histo3D, Profile1D and Profile2D both with and without weights. Code has been simplified. Docs have been updated. A related PR in roottest introduces testing for the new functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/532
https://github.com/root-project/root/pull/532:249,safety,updat,updated,249,"[TDF] branch type inference for actions with multiple branches; This PR adds branch type inference to Histo1D with weights, as well as Histo2D, Histo3D, Profile1D and Profile2D both with and without weights. Code has been simplified. Docs have been updated. A related PR in roottest introduces testing for the new functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/532
https://github.com/root-project/root/pull/532:294,safety,test,testing,294,"[TDF] branch type inference for actions with multiple branches; This PR adds branch type inference to Histo1D with weights, as well as Histo2D, Histo3D, Profile1D and Profile2D both with and without weights. Code has been simplified. Docs have been updated. A related PR in roottest introduces testing for the new functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/532
https://github.com/root-project/root/pull/532:249,security,updat,updated,249,"[TDF] branch type inference for actions with multiple branches; This PR adds branch type inference to Histo1D with weights, as well as Histo2D, Histo3D, Profile1D and Profile2D both with and without weights. Code has been simplified. Docs have been updated. A related PR in roottest introduces testing for the new functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/532
https://github.com/root-project/root/pull/532:222,testability,simpl,simplified,222,"[TDF] branch type inference for actions with multiple branches; This PR adds branch type inference to Histo1D with weights, as well as Histo2D, Histo3D, Profile1D and Profile2D both with and without weights. Code has been simplified. Docs have been updated. A related PR in roottest introduces testing for the new functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/532
https://github.com/root-project/root/pull/532:294,testability,test,testing,294,"[TDF] branch type inference for actions with multiple branches; This PR adds branch type inference to Histo1D with weights, as well as Histo2D, Histo3D, Profile1D and Profile2D both with and without weights. Code has been simplified. Docs have been updated. A related PR in roottest introduces testing for the new functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/532
https://github.com/root-project/root/pull/532:222,usability,simpl,simplified,222,"[TDF] branch type inference for actions with multiple branches; This PR adds branch type inference to Histo1D with weights, as well as Histo2D, Histo3D, Profile1D and Profile2D both with and without weights. Code has been simplified. Docs have been updated. A related PR in roottest introduces testing for the new functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/532
https://github.com/root-project/root/pull/533:145,deployability,version,version,145,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:216,deployability,version,version,216,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:145,integrability,version,version,145,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:216,integrability,version,version,216,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:471,integrability,interfac,interfaces,471,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:471,interoperability,interfac,interfaces,471,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:145,modifiability,version,version,145,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:216,modifiability,version,version,216,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:458,modifiability,refact,refactor,458,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:471,modifiability,interfac,interfaces,471,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:49,performance,parallel,parallel,49,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:136,performance,parallel,parallel,136,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:458,performance,refactor,refactor,458,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:265,safety,test,test,265,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:370,security,auth,authorship,370,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:265,testability,test,test,265,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:121,usability,progress,progress,121,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/533:495,usability,feedback,feedback,495,"Add TBufferMerger and TBufferMergerFile to allow parallel data creating and writing to single file; This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/533
https://github.com/root-project/root/pull/534:273,availability,toler,tolerance,273,"[TMVA] Fix for testDerivativesCpu; The problem with this test is that it is comparing an analytical. solution of the derivative against the center difference formula. f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact. The choice of dx was too large for the tolerance accepted for the. maximum relative error. Using a smaller dx for the center difference. calculation fixes this issue by reducing the error in the numerical. derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/534
https://github.com/root-project/root/pull/534:318,availability,error,error,318,"[TMVA] Fix for testDerivativesCpu; The problem with this test is that it is comparing an analytical. solution of the derivative against the center difference formula. f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact. The choice of dx was too large for the tolerance accepted for the. maximum relative error. Using a smaller dx for the center difference. calculation fixes this issue by reducing the error in the numerical. derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/534
https://github.com/root-project/root/pull/534:416,availability,error,error,416,"[TMVA] Fix for testDerivativesCpu; The problem with this test is that it is comparing an analytical. solution of the derivative against the center difference formula. f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact. The choice of dx was too large for the tolerance accepted for the. maximum relative error. Using a smaller dx for the center difference. calculation fixes this issue by reducing the error in the numerical. derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/534
https://github.com/root-project/root/pull/534:403,energy efficiency,reduc,reducing,403,"[TMVA] Fix for testDerivativesCpu; The problem with this test is that it is comparing an analytical. solution of the derivative against the center difference formula. f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact. The choice of dx was too large for the tolerance accepted for the. maximum relative error. Using a smaller dx for the center difference. calculation fixes this issue by reducing the error in the numerical. derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/534
https://github.com/root-project/root/pull/534:318,performance,error,error,318,"[TMVA] Fix for testDerivativesCpu; The problem with this test is that it is comparing an analytical. solution of the derivative against the center difference formula. f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact. The choice of dx was too large for the tolerance accepted for the. maximum relative error. Using a smaller dx for the center difference. calculation fixes this issue by reducing the error in the numerical. derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/534
https://github.com/root-project/root/pull/534:416,performance,error,error,416,"[TMVA] Fix for testDerivativesCpu; The problem with this test is that it is comparing an analytical. solution of the derivative against the center difference formula. f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact. The choice of dx was too large for the tolerance accepted for the. maximum relative error. Using a smaller dx for the center difference. calculation fixes this issue by reducing the error in the numerical. derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/534
https://github.com/root-project/root/pull/534:273,reliability,toleran,tolerance,273,"[TMVA] Fix for testDerivativesCpu; The problem with this test is that it is comparing an analytical. solution of the derivative against the center difference formula. f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact. The choice of dx was too large for the tolerance accepted for the. maximum relative error. Using a smaller dx for the center difference. calculation fixes this issue by reducing the error in the numerical. derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/534
https://github.com/root-project/root/pull/534:15,safety,test,testDerivativesCpu,15,"[TMVA] Fix for testDerivativesCpu; The problem with this test is that it is comparing an analytical. solution of the derivative against the center difference formula. f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact. The choice of dx was too large for the tolerance accepted for the. maximum relative error. Using a smaller dx for the center difference. calculation fixes this issue by reducing the error in the numerical. derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/534
https://github.com/root-project/root/pull/534:57,safety,test,test,57,"[TMVA] Fix for testDerivativesCpu; The problem with this test is that it is comparing an analytical. solution of the derivative against the center difference formula. f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact. The choice of dx was too large for the tolerance accepted for the. maximum relative error. Using a smaller dx for the center difference. calculation fixes this issue by reducing the error in the numerical. derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/534
https://github.com/root-project/root/pull/534:318,safety,error,error,318,"[TMVA] Fix for testDerivativesCpu; The problem with this test is that it is comparing an analytical. solution of the derivative against the center difference formula. f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact. The choice of dx was too large for the tolerance accepted for the. maximum relative error. Using a smaller dx for the center difference. calculation fixes this issue by reducing the error in the numerical. derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/534
https://github.com/root-project/root/pull/534:416,safety,error,error,416,"[TMVA] Fix for testDerivativesCpu; The problem with this test is that it is comparing an analytical. solution of the derivative against the center difference formula. f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact. The choice of dx was too large for the tolerance accepted for the. maximum relative error. Using a smaller dx for the center difference. calculation fixes this issue by reducing the error in the numerical. derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/534
https://github.com/root-project/root/pull/534:15,testability,test,testDerivativesCpu,15,"[TMVA] Fix for testDerivativesCpu; The problem with this test is that it is comparing an analytical. solution of the derivative against the center difference formula. f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact. The choice of dx was too large for the tolerance accepted for the. maximum relative error. Using a smaller dx for the center difference. calculation fixes this issue by reducing the error in the numerical. derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/534
https://github.com/root-project/root/pull/534:57,testability,test,test,57,"[TMVA] Fix for testDerivativesCpu; The problem with this test is that it is comparing an analytical. solution of the derivative against the center difference formula. f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact. The choice of dx was too large for the tolerance accepted for the. maximum relative error. Using a smaller dx for the center difference. calculation fixes this issue by reducing the error in the numerical. derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/534
https://github.com/root-project/root/pull/534:318,usability,error,error,318,"[TMVA] Fix for testDerivativesCpu; The problem with this test is that it is comparing an analytical. solution of the derivative against the center difference formula. f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact. The choice of dx was too large for the tolerance accepted for the. maximum relative error. Using a smaller dx for the center difference. calculation fixes this issue by reducing the error in the numerical. derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/534
https://github.com/root-project/root/pull/534:416,usability,error,error,416,"[TMVA] Fix for testDerivativesCpu; The problem with this test is that it is comparing an analytical. solution of the derivative against the center difference formula. f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact. The choice of dx was too large for the tolerance accepted for the. maximum relative error. Using a smaller dx for the center difference. calculation fixes this issue by reducing the error in the numerical. derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/534
https://github.com/root-project/root/pull/535:96,safety,Test,Tests,96,[TDF] Add branch type inference for `Fill` and `Snapshot` actions; This PR concludes ROOT-8766. Tests for this functionality are added by a separate PR to roottest.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/535
https://github.com/root-project/root/pull/535:96,testability,Test,Tests,96,[TDF] Add branch type inference for `Fill` and `Snapshot` actions; This PR concludes ROOT-8766. Tests for this functionality are added by a separate PR to roottest.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/535
https://github.com/root-project/root/pull/536:45,deployability,version,version,45,"Made the overlay file work with ROOT's clang version.; Seems like ignore-non-existent-contents is quite new,. so we just remove it for now to avoid crashing on. parsing this file with the old clang version inside. ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/536
https://github.com/root-project/root/pull/536:198,deployability,version,version,198,"Made the overlay file work with ROOT's clang version.; Seems like ignore-non-existent-contents is quite new,. so we just remove it for now to avoid crashing on. parsing this file with the old clang version inside. ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/536
https://github.com/root-project/root/pull/536:45,integrability,version,version,45,"Made the overlay file work with ROOT's clang version.; Seems like ignore-non-existent-contents is quite new,. so we just remove it for now to avoid crashing on. parsing this file with the old clang version inside. ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/536
https://github.com/root-project/root/pull/536:198,integrability,version,version,198,"Made the overlay file work with ROOT's clang version.; Seems like ignore-non-existent-contents is quite new,. so we just remove it for now to avoid crashing on. parsing this file with the old clang version inside. ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/536
https://github.com/root-project/root/pull/536:45,modifiability,version,version,45,"Made the overlay file work with ROOT's clang version.; Seems like ignore-non-existent-contents is quite new,. so we just remove it for now to avoid crashing on. parsing this file with the old clang version inside. ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/536
https://github.com/root-project/root/pull/536:198,modifiability,version,version,198,"Made the overlay file work with ROOT's clang version.; Seems like ignore-non-existent-contents is quite new,. so we just remove it for now to avoid crashing on. parsing this file with the old clang version inside. ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/536
https://github.com/root-project/root/pull/536:86,performance,content,contents,86,"Made the overlay file work with ROOT's clang version.; Seems like ignore-non-existent-contents is quite new,. so we just remove it for now to avoid crashing on. parsing this file with the old clang version inside. ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/536
https://github.com/root-project/root/pull/536:142,safety,avoid,avoid,142,"Made the overlay file work with ROOT's clang version.; Seems like ignore-non-existent-contents is quite new,. so we just remove it for now to avoid crashing on. parsing this file with the old clang version inside. ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/536
https://github.com/root-project/root/pull/537:53,deployability,depend,depend,53,"Made cassert a textual header.; It's AST supposed to depend on NDEBUG, so having this as a module is. wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/537
https://github.com/root-project/root/pull/537:91,deployability,modul,module,91,"Made cassert a textual header.; It's AST supposed to depend on NDEBUG, so having this as a module is. wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/537
https://github.com/root-project/root/pull/537:53,integrability,depend,depend,53,"Made cassert a textual header.; It's AST supposed to depend on NDEBUG, so having this as a module is. wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/537
https://github.com/root-project/root/pull/537:53,modifiability,depend,depend,53,"Made cassert a textual header.; It's AST supposed to depend on NDEBUG, so having this as a module is. wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/537
https://github.com/root-project/root/pull/537:91,modifiability,modul,module,91,"Made cassert a textual header.; It's AST supposed to depend on NDEBUG, so having this as a module is. wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/537
https://github.com/root-project/root/pull/537:53,safety,depend,depend,53,"Made cassert a textual header.; It's AST supposed to depend on NDEBUG, so having this as a module is. wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/537
https://github.com/root-project/root/pull/537:91,safety,modul,module,91,"Made cassert a textual header.; It's AST supposed to depend on NDEBUG, so having this as a module is. wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/537
https://github.com/root-project/root/pull/537:53,testability,depend,depend,53,"Made cassert a textual header.; It's AST supposed to depend on NDEBUG, so having this as a module is. wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/537
https://github.com/root-project/root/pull/538:46,deployability,modul,modules,46,Don't overwrite the ExternalSemaSource in the modules case.; The modules implementation provides it's own sema source and. overwriting this confuses clang when we have -fmodules enabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/538
https://github.com/root-project/root/pull/538:65,deployability,modul,modules,65,Don't overwrite the ExternalSemaSource in the modules case.; The modules implementation provides it's own sema source and. overwriting this confuses clang when we have -fmodules enabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/538
https://github.com/root-project/root/pull/538:46,modifiability,modul,modules,46,Don't overwrite the ExternalSemaSource in the modules case.; The modules implementation provides it's own sema source and. overwriting this confuses clang when we have -fmodules enabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/538
https://github.com/root-project/root/pull/538:65,modifiability,modul,modules,65,Don't overwrite the ExternalSemaSource in the modules case.; The modules implementation provides it's own sema source and. overwriting this confuses clang when we have -fmodules enabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/538
https://github.com/root-project/root/pull/538:46,safety,modul,modules,46,Don't overwrite the ExternalSemaSource in the modules case.; The modules implementation provides it's own sema source and. overwriting this confuses clang when we have -fmodules enabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/538
https://github.com/root-project/root/pull/538:65,safety,modul,modules,65,Don't overwrite the ExternalSemaSource in the modules case.; The modules implementation provides it's own sema source and. overwriting this confuses clang when we have -fmodules enabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/538
https://github.com/root-project/root/pull/539:34,availability,error,errors,34,WriteAST now correctly checks for errors.; The previous assert was not only ugly but also did the inverse. check (failed when it could open the file correctly).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/539
https://github.com/root-project/root/pull/539:114,deployability,fail,failed,114,WriteAST now correctly checks for errors.; The previous assert was not only ugly but also did the inverse. check (failed when it could open the file correctly).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/539
https://github.com/root-project/root/pull/539:34,performance,error,errors,34,WriteAST now correctly checks for errors.; The previous assert was not only ugly but also did the inverse. check (failed when it could open the file correctly).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/539
https://github.com/root-project/root/pull/539:114,reliability,fail,failed,114,WriteAST now correctly checks for errors.; The previous assert was not only ugly but also did the inverse. check (failed when it could open the file correctly).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/539
https://github.com/root-project/root/pull/539:34,safety,error,errors,34,WriteAST now correctly checks for errors.; The previous assert was not only ugly but also did the inverse. check (failed when it could open the file correctly).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/539
https://github.com/root-project/root/pull/539:56,testability,assert,assert,56,WriteAST now correctly checks for errors.; The previous assert was not only ugly but also did the inverse. check (failed when it could open the file correctly).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/539
https://github.com/root-project/root/pull/539:34,usability,error,errors,34,WriteAST now correctly checks for errors.; The previous assert was not only ugly but also did the inverse. check (failed when it could open the file correctly).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/539
https://github.com/root-project/root/pull/541:9,deployability,modul,modulemap,9,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:77,deployability,depend,dependency,77,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:158,deployability,modul,modulemap,158,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:175,deployability,build,build,175,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:220,deployability,depend,depends,220,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:245,deployability,modul,modulemap,245,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:312,deployability,modul,modulemap,312,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:77,integrability,depend,dependency,77,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:220,integrability,depend,depends,220,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:9,modifiability,modul,modulemap,9,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:77,modifiability,depend,dependency,77,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:158,modifiability,modul,modulemap,158,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:220,modifiability,depend,depends,220,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:245,modifiability,modul,modulemap,245,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:312,modifiability,modul,modulemap,312,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:9,safety,modul,modulemap,9,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:77,safety,depend,dependency,77,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:158,safety,modul,modulemap,158,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:220,safety,depend,depends,220,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:245,safety,modul,modulemap,245,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:312,safety,modul,modulemap,312,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:77,testability,depend,dependency,77,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:220,testability,depend,depends,220,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:106,usability,command,commands,106,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:272,usability,custom,custom,272,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/541:279,usability,command,command,279,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/541
https://github.com/root-project/root/pull/542:9,deployability,modul,modulemap,9,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:77,deployability,depend,dependency,77,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:158,deployability,modul,modulemap,158,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:175,deployability,build,build,175,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:220,deployability,depend,depends,220,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:245,deployability,modul,modulemap,245,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:312,deployability,modul,modulemap,312,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:77,integrability,depend,dependency,77,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:220,integrability,depend,depends,220,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:9,modifiability,modul,modulemap,9,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:77,modifiability,depend,dependency,77,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:158,modifiability,modul,modulemap,158,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:220,modifiability,depend,depends,220,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:245,modifiability,modul,modulemap,245,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:312,modifiability,modul,modulemap,312,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:9,safety,modul,modulemap,9,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:77,safety,depend,dependency,77,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:158,safety,modul,modulemap,158,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:220,safety,depend,depends,220,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:245,safety,modul,modulemap,245,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:312,safety,modul,modulemap,312,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:77,testability,depend,dependency,77,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:220,testability,depend,depends,220,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:106,usability,command,commands,106,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:272,usability,custom,custom,272,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/542:279,usability,command,command,279,Untangle modulemap generation code in CMake.; Previously we had some strange dependency net with multiple commands. that sometimes lead to only having half a modulemap in the build dir. Now there is only one target that depends on the generated modulemap. and exactly one custom command that generates the whole modulemap.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/542
https://github.com/root-project/root/pull/543:23,deployability,modul,modules,23,No PCH and rootmap for modules; Disable both features when running modules to prevent that those mess with our modules tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:67,deployability,modul,modules,67,No PCH and rootmap for modules; Disable both features when running modules to prevent that those mess with our modules tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:111,deployability,modul,modules,111,No PCH and rootmap for modules; Disable both features when running modules to prevent that those mess with our modules tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:23,modifiability,modul,modules,23,No PCH and rootmap for modules; Disable both features when running modules to prevent that those mess with our modules tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:67,modifiability,modul,modules,67,No PCH and rootmap for modules; Disable both features when running modules to prevent that those mess with our modules tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:111,modifiability,modul,modules,111,No PCH and rootmap for modules; Disable both features when running modules to prevent that those mess with our modules tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:23,safety,modul,modules,23,No PCH and rootmap for modules; Disable both features when running modules to prevent that those mess with our modules tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:67,safety,modul,modules,67,No PCH and rootmap for modules; Disable both features when running modules to prevent that those mess with our modules tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:78,safety,prevent,prevent,78,No PCH and rootmap for modules; Disable both features when running modules to prevent that those mess with our modules tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:111,safety,modul,modules,111,No PCH and rootmap for modules; Disable both features when running modules to prevent that those mess with our modules tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:119,safety,test,tests,119,No PCH and rootmap for modules; Disable both features when running modules to prevent that those mess with our modules tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:78,security,preven,prevent,78,No PCH and rootmap for modules; Disable both features when running modules to prevent that those mess with our modules tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/543:119,testability,test,tests,119,No PCH and rootmap for modules; Disable both features when running modules to prevent that those mess with our modules tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/543
https://github.com/root-project/root/pull/544:112,interoperability,semant,semantics,112,"[TDF] Misc fixes; * never jit `TActionResultProxies`, so that their lifetime is always as expected. * more move semantics :). * minor fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/544
https://github.com/root-project/root/pull/546:0,integrability,Sub,Submitting,0,Submitting latest fixes to 10 coverity defects;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/546
https://github.com/root-project/root/pull/547:42,modifiability,Layer,Layer,42,"Revert ""coverity 68746,68745"", breaks DNN/Layer; This reverts commit ccc0521cfff70b33d3e606ded521ae2ebcd91aa8. This commit reintroduces a bug fixed previously in commit. 910dcb3c24d58c76efb95f7a0acdf0093597de1e. The bug was originally. introduced by commit 9c71b95b0ea069f1aac5f0c2a4ba6bec9c4079de.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/547
https://github.com/root-project/root/pull/548:6,safety,test,test,6,Added test coverage badge;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/548
https://github.com/root-project/root/pull/548:6,testability,test,test,6,Added test coverage badge;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/548
https://github.com/root-project/root/pull/548:11,testability,coverag,coverage,11,Added test coverage badge;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/548
https://github.com/root-project/root/pull/549:174,availability,avail,available,174,"Re-enable C++14 for GCC 4.9 in Interpretator; GCC 4.9 only defines '__cplusplus' to the value 201300L and not to. 201402L as expected for C++14. This makes the check for the available. C++ standards in the interpreter fail to enable C++14 (which in turn. means that ROOT cannot be compiled with GCC 4.9 if C++14 was enabled in. Cmake). Similarly, for C++17 apart from the proper value 201703L other. values seems to be floating around (e.g. 201406L as defined by the. version of LLVM included with ROOT). The requirement for '__cplusplus_'. to enable certain C++ standards in the interpreter is made less strict. and just needs to be larger than the previous final value. This basically reinstates commit. 0a62e34aa86b812651cfcf9526ba03b975adaa5c which was undone by commit. 702298d9ad83866d0be62f0422c03ac8ea6687f1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/549
https://github.com/root-project/root/pull/549:218,deployability,fail,fail,218,"Re-enable C++14 for GCC 4.9 in Interpretator; GCC 4.9 only defines '__cplusplus' to the value 201300L and not to. 201402L as expected for C++14. This makes the check for the available. C++ standards in the interpreter fail to enable C++14 (which in turn. means that ROOT cannot be compiled with GCC 4.9 if C++14 was enabled in. Cmake). Similarly, for C++17 apart from the proper value 201703L other. values seems to be floating around (e.g. 201406L as defined by the. version of LLVM included with ROOT). The requirement for '__cplusplus_'. to enable certain C++ standards in the interpreter is made less strict. and just needs to be larger than the previous final value. This basically reinstates commit. 0a62e34aa86b812651cfcf9526ba03b975adaa5c which was undone by commit. 702298d9ad83866d0be62f0422c03ac8ea6687f1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/549
https://github.com/root-project/root/pull/549:468,deployability,version,version,468,"Re-enable C++14 for GCC 4.9 in Interpretator; GCC 4.9 only defines '__cplusplus' to the value 201300L and not to. 201402L as expected for C++14. This makes the check for the available. C++ standards in the interpreter fail to enable C++14 (which in turn. means that ROOT cannot be compiled with GCC 4.9 if C++14 was enabled in. Cmake). Similarly, for C++17 apart from the proper value 201703L other. values seems to be floating around (e.g. 201406L as defined by the. version of LLVM included with ROOT). The requirement for '__cplusplus_'. to enable certain C++ standards in the interpreter is made less strict. and just needs to be larger than the previous final value. This basically reinstates commit. 0a62e34aa86b812651cfcf9526ba03b975adaa5c which was undone by commit. 702298d9ad83866d0be62f0422c03ac8ea6687f1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/549
https://github.com/root-project/root/pull/549:468,integrability,version,version,468,"Re-enable C++14 for GCC 4.9 in Interpretator; GCC 4.9 only defines '__cplusplus' to the value 201300L and not to. 201402L as expected for C++14. This makes the check for the available. C++ standards in the interpreter fail to enable C++14 (which in turn. means that ROOT cannot be compiled with GCC 4.9 if C++14 was enabled in. Cmake). Similarly, for C++17 apart from the proper value 201703L other. values seems to be floating around (e.g. 201406L as defined by the. version of LLVM included with ROOT). The requirement for '__cplusplus_'. to enable certain C++ standards in the interpreter is made less strict. and just needs to be larger than the previous final value. This basically reinstates commit. 0a62e34aa86b812651cfcf9526ba03b975adaa5c which was undone by commit. 702298d9ad83866d0be62f0422c03ac8ea6687f1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/549
https://github.com/root-project/root/pull/549:189,interoperability,standard,standards,189,"Re-enable C++14 for GCC 4.9 in Interpretator; GCC 4.9 only defines '__cplusplus' to the value 201300L and not to. 201402L as expected for C++14. This makes the check for the available. C++ standards in the interpreter fail to enable C++14 (which in turn. means that ROOT cannot be compiled with GCC 4.9 if C++14 was enabled in. Cmake). Similarly, for C++17 apart from the proper value 201703L other. values seems to be floating around (e.g. 201406L as defined by the. version of LLVM included with ROOT). The requirement for '__cplusplus_'. to enable certain C++ standards in the interpreter is made less strict. and just needs to be larger than the previous final value. This basically reinstates commit. 0a62e34aa86b812651cfcf9526ba03b975adaa5c which was undone by commit. 702298d9ad83866d0be62f0422c03ac8ea6687f1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/549
https://github.com/root-project/root/pull/549:563,interoperability,standard,standards,563,"Re-enable C++14 for GCC 4.9 in Interpretator; GCC 4.9 only defines '__cplusplus' to the value 201300L and not to. 201402L as expected for C++14. This makes the check for the available. C++ standards in the interpreter fail to enable C++14 (which in turn. means that ROOT cannot be compiled with GCC 4.9 if C++14 was enabled in. Cmake). Similarly, for C++17 apart from the proper value 201703L other. values seems to be floating around (e.g. 201406L as defined by the. version of LLVM included with ROOT). The requirement for '__cplusplus_'. to enable certain C++ standards in the interpreter is made less strict. and just needs to be larger than the previous final value. This basically reinstates commit. 0a62e34aa86b812651cfcf9526ba03b975adaa5c which was undone by commit. 702298d9ad83866d0be62f0422c03ac8ea6687f1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/549
https://github.com/root-project/root/pull/549:468,modifiability,version,version,468,"Re-enable C++14 for GCC 4.9 in Interpretator; GCC 4.9 only defines '__cplusplus' to the value 201300L and not to. 201402L as expected for C++14. This makes the check for the available. C++ standards in the interpreter fail to enable C++14 (which in turn. means that ROOT cannot be compiled with GCC 4.9 if C++14 was enabled in. Cmake). Similarly, for C++17 apart from the proper value 201703L other. values seems to be floating around (e.g. 201406L as defined by the. version of LLVM included with ROOT). The requirement for '__cplusplus_'. to enable certain C++ standards in the interpreter is made less strict. and just needs to be larger than the previous final value. This basically reinstates commit. 0a62e34aa86b812651cfcf9526ba03b975adaa5c which was undone by commit. 702298d9ad83866d0be62f0422c03ac8ea6687f1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/549
https://github.com/root-project/root/pull/549:174,reliability,availab,available,174,"Re-enable C++14 for GCC 4.9 in Interpretator; GCC 4.9 only defines '__cplusplus' to the value 201300L and not to. 201402L as expected for C++14. This makes the check for the available. C++ standards in the interpreter fail to enable C++14 (which in turn. means that ROOT cannot be compiled with GCC 4.9 if C++14 was enabled in. Cmake). Similarly, for C++17 apart from the proper value 201703L other. values seems to be floating around (e.g. 201406L as defined by the. version of LLVM included with ROOT). The requirement for '__cplusplus_'. to enable certain C++ standards in the interpreter is made less strict. and just needs to be larger than the previous final value. This basically reinstates commit. 0a62e34aa86b812651cfcf9526ba03b975adaa5c which was undone by commit. 702298d9ad83866d0be62f0422c03ac8ea6687f1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/549
https://github.com/root-project/root/pull/549:218,reliability,fail,fail,218,"Re-enable C++14 for GCC 4.9 in Interpretator; GCC 4.9 only defines '__cplusplus' to the value 201300L and not to. 201402L as expected for C++14. This makes the check for the available. C++ standards in the interpreter fail to enable C++14 (which in turn. means that ROOT cannot be compiled with GCC 4.9 if C++14 was enabled in. Cmake). Similarly, for C++17 apart from the proper value 201703L other. values seems to be floating around (e.g. 201406L as defined by the. version of LLVM included with ROOT). The requirement for '__cplusplus_'. to enable certain C++ standards in the interpreter is made less strict. and just needs to be larger than the previous final value. This basically reinstates commit. 0a62e34aa86b812651cfcf9526ba03b975adaa5c which was undone by commit. 702298d9ad83866d0be62f0422c03ac8ea6687f1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/549
https://github.com/root-project/root/pull/549:174,safety,avail,available,174,"Re-enable C++14 for GCC 4.9 in Interpretator; GCC 4.9 only defines '__cplusplus' to the value 201300L and not to. 201402L as expected for C++14. This makes the check for the available. C++ standards in the interpreter fail to enable C++14 (which in turn. means that ROOT cannot be compiled with GCC 4.9 if C++14 was enabled in. Cmake). Similarly, for C++17 apart from the proper value 201703L other. values seems to be floating around (e.g. 201406L as defined by the. version of LLVM included with ROOT). The requirement for '__cplusplus_'. to enable certain C++ standards in the interpreter is made less strict. and just needs to be larger than the previous final value. This basically reinstates commit. 0a62e34aa86b812651cfcf9526ba03b975adaa5c which was undone by commit. 702298d9ad83866d0be62f0422c03ac8ea6687f1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/549
https://github.com/root-project/root/pull/549:174,security,availab,available,174,"Re-enable C++14 for GCC 4.9 in Interpretator; GCC 4.9 only defines '__cplusplus' to the value 201300L and not to. 201402L as expected for C++14. This makes the check for the available. C++ standards in the interpreter fail to enable C++14 (which in turn. means that ROOT cannot be compiled with GCC 4.9 if C++14 was enabled in. Cmake). Similarly, for C++17 apart from the proper value 201703L other. values seems to be floating around (e.g. 201406L as defined by the. version of LLVM included with ROOT). The requirement for '__cplusplus_'. to enable certain C++ standards in the interpreter is made less strict. and just needs to be larger than the previous final value. This basically reinstates commit. 0a62e34aa86b812651cfcf9526ba03b975adaa5c which was undone by commit. 702298d9ad83866d0be62f0422c03ac8ea6687f1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/549
https://github.com/root-project/root/pull/549:757,usability,undo,undone,757,"Re-enable C++14 for GCC 4.9 in Interpretator; GCC 4.9 only defines '__cplusplus' to the value 201300L and not to. 201402L as expected for C++14. This makes the check for the available. C++ standards in the interpreter fail to enable C++14 (which in turn. means that ROOT cannot be compiled with GCC 4.9 if C++14 was enabled in. Cmake). Similarly, for C++17 apart from the proper value 201703L other. values seems to be floating around (e.g. 201406L as defined by the. version of LLVM included with ROOT). The requirement for '__cplusplus_'. to enable certain C++ standards in the interpreter is made less strict. and just needs to be larger than the previous final value. This basically reinstates commit. 0a62e34aa86b812651cfcf9526ba03b975adaa5c which was undone by commit. 702298d9ad83866d0be62f0422c03ac8ea6687f1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/549
https://github.com/root-project/root/pull/550:42,usability,support,support,42,"Revised fix for ROOT-8452; Adds also full support for wildcards, at least for the backends supporting it,. and for generic paths on the command line, e.g. for. $ root root://host.my.dom//my/dir/file.root?option#anchor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/550
https://github.com/root-project/root/pull/550:91,usability,support,supporting,91,"Revised fix for ROOT-8452; Adds also full support for wildcards, at least for the backends supporting it,. and for generic paths on the command line, e.g. for. $ root root://host.my.dom//my/dir/file.root?option#anchor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/550
https://github.com/root-project/root/pull/550:136,usability,command,command,136,"Revised fix for ROOT-8452; Adds also full support for wildcards, at least for the backends supporting it,. and for generic paths on the command line, e.g. for. $ root root://host.my.dom//my/dir/file.root?option#anchor",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/550
https://github.com/root-project/root/pull/551:8,availability,redund,redundant,8,"Removed redundant -fmodule-map-file= compilation flag.; We already have implicit module maps, so this module map. will be automatically discovered by clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/551
https://github.com/root-project/root/pull/551:8,deployability,redundan,redundant,8,"Removed redundant -fmodule-map-file= compilation flag.; We already have implicit module maps, so this module map. will be automatically discovered by clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/551
https://github.com/root-project/root/pull/551:81,deployability,modul,module,81,"Removed redundant -fmodule-map-file= compilation flag.; We already have implicit module maps, so this module map. will be automatically discovered by clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/551
https://github.com/root-project/root/pull/551:102,deployability,modul,module,102,"Removed redundant -fmodule-map-file= compilation flag.; We already have implicit module maps, so this module map. will be automatically discovered by clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/551
https://github.com/root-project/root/pull/551:122,deployability,automat,automatically,122,"Removed redundant -fmodule-map-file= compilation flag.; We already have implicit module maps, so this module map. will be automatically discovered by clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/551
https://github.com/root-project/root/pull/551:136,integrability,discover,discovered,136,"Removed redundant -fmodule-map-file= compilation flag.; We already have implicit module maps, so this module map. will be automatically discovered by clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/551
https://github.com/root-project/root/pull/551:136,interoperability,discover,discovered,136,"Removed redundant -fmodule-map-file= compilation flag.; We already have implicit module maps, so this module map. will be automatically discovered by clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/551
https://github.com/root-project/root/pull/551:81,modifiability,modul,module,81,"Removed redundant -fmodule-map-file= compilation flag.; We already have implicit module maps, so this module map. will be automatically discovered by clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/551
https://github.com/root-project/root/pull/551:102,modifiability,modul,module,102,"Removed redundant -fmodule-map-file= compilation flag.; We already have implicit module maps, so this module map. will be automatically discovered by clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/551
https://github.com/root-project/root/pull/551:8,reliability,redundan,redundant,8,"Removed redundant -fmodule-map-file= compilation flag.; We already have implicit module maps, so this module map. will be automatically discovered by clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/551
https://github.com/root-project/root/pull/551:8,safety,redund,redundant,8,"Removed redundant -fmodule-map-file= compilation flag.; We already have implicit module maps, so this module map. will be automatically discovered by clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/551
https://github.com/root-project/root/pull/551:81,safety,modul,module,81,"Removed redundant -fmodule-map-file= compilation flag.; We already have implicit module maps, so this module map. will be automatically discovered by clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/551
https://github.com/root-project/root/pull/551:102,safety,modul,module,102,"Removed redundant -fmodule-map-file= compilation flag.; We already have implicit module maps, so this module map. will be automatically discovered by clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/551
https://github.com/root-project/root/pull/551:122,testability,automat,automatically,122,"Removed redundant -fmodule-map-file= compilation flag.; We already have implicit module maps, so this module map. will be automatically discovered by clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/551
https://github.com/root-project/root/pull/551:136,usability,discov,discovered,136,"Removed redundant -fmodule-map-file= compilation flag.; We already have implicit module maps, so this module map. will be automatically discovered by clang.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/551
https://github.com/root-project/root/pull/554:12,modifiability,variab,variable,12,Unused make variable; The make variable BONJOURCPPFLAGS and all uses of it was removed in commit cd86add. This one occurrence was reintroduced in commit dc627fb. Remove it again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/554
https://github.com/root-project/root/pull/554:31,modifiability,variab,variable,31,Unused make variable; The make variable BONJOURCPPFLAGS and all uses of it was removed in commit cd86add. This one occurrence was reintroduced in commit dc627fb. Remove it again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/554
https://github.com/root-project/root/pull/555:103,deployability,Modul,Module,103,Remove wrongly re-added file; The whole math/vdt directory was removed in commit 6795d8b. The math/vdt/Module.mk file was re-added again in commit ca144df. Remove it again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/555
https://github.com/root-project/root/pull/555:103,modifiability,Modul,Module,103,Remove wrongly re-added file; The whole math/vdt directory was removed in commit 6795d8b. The math/vdt/Module.mk file was re-added again in commit ca144df. Remove it again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/555
https://github.com/root-project/root/pull/555:103,safety,Modul,Module,103,Remove wrongly re-added file; The whole math/vdt directory was removed in commit 6795d8b. The math/vdt/Module.mk file was re-added again in commit ca144df. Remove it again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/555
https://github.com/root-project/root/pull/556:21,integrability,batch,batch,21,Run GL tests also in batch mode.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/556
https://github.com/root-project/root/pull/556:21,performance,batch,batch,21,Run GL tests also in batch mode.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/556
https://github.com/root-project/root/pull/556:7,safety,test,tests,7,Run GL tests also in batch mode.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/556
https://github.com/root-project/root/pull/556:7,testability,test,tests,7,Run GL tests also in batch mode.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/556
https://github.com/root-project/root/pull/557:6,deployability,Updat,Update,6,"[DOC] Update TDF release notes; Added my contributions and changed wordings w.r.t. latest 6.09 release. Naturally, feel free to modify anything.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/557
https://github.com/root-project/root/pull/557:17,deployability,releas,release,17,"[DOC] Update TDF release notes; Added my contributions and changed wordings w.r.t. latest 6.09 release. Naturally, feel free to modify anything.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/557
https://github.com/root-project/root/pull/557:95,deployability,releas,release,95,"[DOC] Update TDF release notes; Added my contributions and changed wordings w.r.t. latest 6.09 release. Naturally, feel free to modify anything.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/557
https://github.com/root-project/root/pull/557:6,safety,Updat,Update,6,"[DOC] Update TDF release notes; Added my contributions and changed wordings w.r.t. latest 6.09 release. Naturally, feel free to modify anything.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/557
https://github.com/root-project/root/pull/557:6,security,Updat,Update,6,"[DOC] Update TDF release notes; Added my contributions and changed wordings w.r.t. latest 6.09 release. Naturally, feel free to modify anything.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/557
https://github.com/root-project/root/pull/557:128,security,modif,modify,128,"[DOC] Update TDF release notes; Added my contributions and changed wordings w.r.t. latest 6.09 release. Naturally, feel free to modify anything.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/557
https://github.com/root-project/root/pull/558:49,deployability,modul,modules,49,Fix Interpreter::getMacro returning 0 when using modules.; The old code didn't query the modules if the identifier is updated. This caused some checks to fail such as CheckABICompatibility().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/558
https://github.com/root-project/root/pull/558:89,deployability,modul,modules,89,Fix Interpreter::getMacro returning 0 when using modules.; The old code didn't query the modules if the identifier is updated. This caused some checks to fail such as CheckABICompatibility().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/558
https://github.com/root-project/root/pull/558:118,deployability,updat,updated,118,Fix Interpreter::getMacro returning 0 when using modules.; The old code didn't query the modules if the identifier is updated. This caused some checks to fail such as CheckABICompatibility().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/558
https://github.com/root-project/root/pull/558:154,deployability,fail,fail,154,Fix Interpreter::getMacro returning 0 when using modules.; The old code didn't query the modules if the identifier is updated. This caused some checks to fail such as CheckABICompatibility().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/558
https://github.com/root-project/root/pull/558:49,modifiability,modul,modules,49,Fix Interpreter::getMacro returning 0 when using modules.; The old code didn't query the modules if the identifier is updated. This caused some checks to fail such as CheckABICompatibility().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/558
https://github.com/root-project/root/pull/558:89,modifiability,modul,modules,89,Fix Interpreter::getMacro returning 0 when using modules.; The old code didn't query the modules if the identifier is updated. This caused some checks to fail such as CheckABICompatibility().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/558
https://github.com/root-project/root/pull/558:154,reliability,fail,fail,154,Fix Interpreter::getMacro returning 0 when using modules.; The old code didn't query the modules if the identifier is updated. This caused some checks to fail such as CheckABICompatibility().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/558
https://github.com/root-project/root/pull/558:49,safety,modul,modules,49,Fix Interpreter::getMacro returning 0 when using modules.; The old code didn't query the modules if the identifier is updated. This caused some checks to fail such as CheckABICompatibility().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/558
https://github.com/root-project/root/pull/558:89,safety,modul,modules,89,Fix Interpreter::getMacro returning 0 when using modules.; The old code didn't query the modules if the identifier is updated. This caused some checks to fail such as CheckABICompatibility().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/558
https://github.com/root-project/root/pull/558:118,safety,updat,updated,118,Fix Interpreter::getMacro returning 0 when using modules.; The old code didn't query the modules if the identifier is updated. This caused some checks to fail such as CheckABICompatibility().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/558
https://github.com/root-project/root/pull/558:104,security,ident,identifier,104,Fix Interpreter::getMacro returning 0 when using modules.; The old code didn't query the modules if the identifier is updated. This caused some checks to fail such as CheckABICompatibility().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/558
https://github.com/root-project/root/pull/558:118,security,updat,updated,118,Fix Interpreter::getMacro returning 0 when using modules.; The old code didn't query the modules if the identifier is updated. This caused some checks to fail such as CheckABICompatibility().,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/558
https://github.com/root-project/root/pull/559:8,safety,compl,completion,8,"Fix tab completion for notebooks; These commits fix the tab completion for JupyROOT notebooks. This fixes [ROOT-8346](https://sft.its.cern.ch/jira/browse/ROOT-8346) and [ROOT-8347](https://sft.its.cern.ch/jira/browse/ROOT-8347). There still seem to be issues though, for example. ```. TString a (SHIFT+ENTER). a.D(TAB)a(TAB). ```. completes to. ```. a.Data()ta(). ```. But to me this seems to be caused outside of ROOT. The completions were tested using this [test](https://gist.github.com/suhlatwork/ef20df8ffeef8cf9212d6535ef2e8137#file-testtcjupyroot-py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/559
https://github.com/root-project/root/pull/559:60,safety,compl,completion,60,"Fix tab completion for notebooks; These commits fix the tab completion for JupyROOT notebooks. This fixes [ROOT-8346](https://sft.its.cern.ch/jira/browse/ROOT-8346) and [ROOT-8347](https://sft.its.cern.ch/jira/browse/ROOT-8347). There still seem to be issues though, for example. ```. TString a (SHIFT+ENTER). a.D(TAB)a(TAB). ```. completes to. ```. a.Data()ta(). ```. But to me this seems to be caused outside of ROOT. The completions were tested using this [test](https://gist.github.com/suhlatwork/ef20df8ffeef8cf9212d6535ef2e8137#file-testtcjupyroot-py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/559
https://github.com/root-project/root/pull/559:331,safety,compl,completes,331,"Fix tab completion for notebooks; These commits fix the tab completion for JupyROOT notebooks. This fixes [ROOT-8346](https://sft.its.cern.ch/jira/browse/ROOT-8346) and [ROOT-8347](https://sft.its.cern.ch/jira/browse/ROOT-8347). There still seem to be issues though, for example. ```. TString a (SHIFT+ENTER). a.D(TAB)a(TAB). ```. completes to. ```. a.Data()ta(). ```. But to me this seems to be caused outside of ROOT. The completions were tested using this [test](https://gist.github.com/suhlatwork/ef20df8ffeef8cf9212d6535ef2e8137#file-testtcjupyroot-py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/559
https://github.com/root-project/root/pull/559:424,safety,compl,completions,424,"Fix tab completion for notebooks; These commits fix the tab completion for JupyROOT notebooks. This fixes [ROOT-8346](https://sft.its.cern.ch/jira/browse/ROOT-8346) and [ROOT-8347](https://sft.its.cern.ch/jira/browse/ROOT-8347). There still seem to be issues though, for example. ```. TString a (SHIFT+ENTER). a.D(TAB)a(TAB). ```. completes to. ```. a.Data()ta(). ```. But to me this seems to be caused outside of ROOT. The completions were tested using this [test](https://gist.github.com/suhlatwork/ef20df8ffeef8cf9212d6535ef2e8137#file-testtcjupyroot-py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/559
https://github.com/root-project/root/pull/559:441,safety,test,tested,441,"Fix tab completion for notebooks; These commits fix the tab completion for JupyROOT notebooks. This fixes [ROOT-8346](https://sft.its.cern.ch/jira/browse/ROOT-8346) and [ROOT-8347](https://sft.its.cern.ch/jira/browse/ROOT-8347). There still seem to be issues though, for example. ```. TString a (SHIFT+ENTER). a.D(TAB)a(TAB). ```. completes to. ```. a.Data()ta(). ```. But to me this seems to be caused outside of ROOT. The completions were tested using this [test](https://gist.github.com/suhlatwork/ef20df8ffeef8cf9212d6535ef2e8137#file-testtcjupyroot-py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/559
https://github.com/root-project/root/pull/559:460,safety,test,test,460,"Fix tab completion for notebooks; These commits fix the tab completion for JupyROOT notebooks. This fixes [ROOT-8346](https://sft.its.cern.ch/jira/browse/ROOT-8346) and [ROOT-8347](https://sft.its.cern.ch/jira/browse/ROOT-8347). There still seem to be issues though, for example. ```. TString a (SHIFT+ENTER). a.D(TAB)a(TAB). ```. completes to. ```. a.Data()ta(). ```. But to me this seems to be caused outside of ROOT. The completions were tested using this [test](https://gist.github.com/suhlatwork/ef20df8ffeef8cf9212d6535ef2e8137#file-testtcjupyroot-py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/559
https://github.com/root-project/root/pull/559:539,safety,test,testtcjupyroot-py,539,"Fix tab completion for notebooks; These commits fix the tab completion for JupyROOT notebooks. This fixes [ROOT-8346](https://sft.its.cern.ch/jira/browse/ROOT-8346) and [ROOT-8347](https://sft.its.cern.ch/jira/browse/ROOT-8347). There still seem to be issues though, for example. ```. TString a (SHIFT+ENTER). a.D(TAB)a(TAB). ```. completes to. ```. a.Data()ta(). ```. But to me this seems to be caused outside of ROOT. The completions were tested using this [test](https://gist.github.com/suhlatwork/ef20df8ffeef8cf9212d6535ef2e8137#file-testtcjupyroot-py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/559
https://github.com/root-project/root/pull/559:8,security,compl,completion,8,"Fix tab completion for notebooks; These commits fix the tab completion for JupyROOT notebooks. This fixes [ROOT-8346](https://sft.its.cern.ch/jira/browse/ROOT-8346) and [ROOT-8347](https://sft.its.cern.ch/jira/browse/ROOT-8347). There still seem to be issues though, for example. ```. TString a (SHIFT+ENTER). a.D(TAB)a(TAB). ```. completes to. ```. a.Data()ta(). ```. But to me this seems to be caused outside of ROOT. The completions were tested using this [test](https://gist.github.com/suhlatwork/ef20df8ffeef8cf9212d6535ef2e8137#file-testtcjupyroot-py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/559
https://github.com/root-project/root/pull/559:60,security,compl,completion,60,"Fix tab completion for notebooks; These commits fix the tab completion for JupyROOT notebooks. This fixes [ROOT-8346](https://sft.its.cern.ch/jira/browse/ROOT-8346) and [ROOT-8347](https://sft.its.cern.ch/jira/browse/ROOT-8347). There still seem to be issues though, for example. ```. TString a (SHIFT+ENTER). a.D(TAB)a(TAB). ```. completes to. ```. a.Data()ta(). ```. But to me this seems to be caused outside of ROOT. The completions were tested using this [test](https://gist.github.com/suhlatwork/ef20df8ffeef8cf9212d6535ef2e8137#file-testtcjupyroot-py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/559
https://github.com/root-project/root/pull/559:331,security,compl,completes,331,"Fix tab completion for notebooks; These commits fix the tab completion for JupyROOT notebooks. This fixes [ROOT-8346](https://sft.its.cern.ch/jira/browse/ROOT-8346) and [ROOT-8347](https://sft.its.cern.ch/jira/browse/ROOT-8347). There still seem to be issues though, for example. ```. TString a (SHIFT+ENTER). a.D(TAB)a(TAB). ```. completes to. ```. a.Data()ta(). ```. But to me this seems to be caused outside of ROOT. The completions were tested using this [test](https://gist.github.com/suhlatwork/ef20df8ffeef8cf9212d6535ef2e8137#file-testtcjupyroot-py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/559
https://github.com/root-project/root/pull/559:424,security,compl,completions,424,"Fix tab completion for notebooks; These commits fix the tab completion for JupyROOT notebooks. This fixes [ROOT-8346](https://sft.its.cern.ch/jira/browse/ROOT-8346) and [ROOT-8347](https://sft.its.cern.ch/jira/browse/ROOT-8347). There still seem to be issues though, for example. ```. TString a (SHIFT+ENTER). a.D(TAB)a(TAB). ```. completes to. ```. a.Data()ta(). ```. But to me this seems to be caused outside of ROOT. The completions were tested using this [test](https://gist.github.com/suhlatwork/ef20df8ffeef8cf9212d6535ef2e8137#file-testtcjupyroot-py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/559
https://github.com/root-project/root/pull/559:441,testability,test,tested,441,"Fix tab completion for notebooks; These commits fix the tab completion for JupyROOT notebooks. This fixes [ROOT-8346](https://sft.its.cern.ch/jira/browse/ROOT-8346) and [ROOT-8347](https://sft.its.cern.ch/jira/browse/ROOT-8347). There still seem to be issues though, for example. ```. TString a (SHIFT+ENTER). a.D(TAB)a(TAB). ```. completes to. ```. a.Data()ta(). ```. But to me this seems to be caused outside of ROOT. The completions were tested using this [test](https://gist.github.com/suhlatwork/ef20df8ffeef8cf9212d6535ef2e8137#file-testtcjupyroot-py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/559
https://github.com/root-project/root/pull/559:460,testability,test,test,460,"Fix tab completion for notebooks; These commits fix the tab completion for JupyROOT notebooks. This fixes [ROOT-8346](https://sft.its.cern.ch/jira/browse/ROOT-8346) and [ROOT-8347](https://sft.its.cern.ch/jira/browse/ROOT-8347). There still seem to be issues though, for example. ```. TString a (SHIFT+ENTER). a.D(TAB)a(TAB). ```. completes to. ```. a.Data()ta(). ```. But to me this seems to be caused outside of ROOT. The completions were tested using this [test](https://gist.github.com/suhlatwork/ef20df8ffeef8cf9212d6535ef2e8137#file-testtcjupyroot-py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/559
https://github.com/root-project/root/pull/559:539,testability,test,testtcjupyroot-py,539,"Fix tab completion for notebooks; These commits fix the tab completion for JupyROOT notebooks. This fixes [ROOT-8346](https://sft.its.cern.ch/jira/browse/ROOT-8346) and [ROOT-8347](https://sft.its.cern.ch/jira/browse/ROOT-8347). There still seem to be issues though, for example. ```. TString a (SHIFT+ENTER). a.D(TAB)a(TAB). ```. completes to. ```. a.Data()ta(). ```. But to me this seems to be caused outside of ROOT. The completions were tested using this [test](https://gist.github.com/suhlatwork/ef20df8ffeef8cf9212d6535ef2e8137#file-testtcjupyroot-py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/559
https://github.com/root-project/root/pull/560:21,deployability,releas,release,21,Add TBufferMerger to release notes; Self explanatory.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/560
https://github.com/root-project/root/pull/561:20,integrability,sub,submitting,20,"Allow http requests submitting; Before all http requests were executed, using extra threads from civetweb or fastcgi. With new engines (like from Qt WebEngine) such threads do not exists. Therefore http requests should be submitted and processed async. Also fix problem in longpoll socket",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/561
https://github.com/root-project/root/pull/561:222,integrability,sub,submitted,222,"Allow http requests submitting; Before all http requests were executed, using extra threads from civetweb or fastcgi. With new engines (like from Qt WebEngine) such threads do not exists. Therefore http requests should be submitted and processed async. Also fix problem in longpoll socket",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/561
https://github.com/root-project/root/pull/561:282,interoperability,socket,socket,282,"Allow http requests submitting; Before all http requests were executed, using extra threads from civetweb or fastcgi. With new engines (like from Qt WebEngine) such threads do not exists. Therefore http requests should be submitted and processed async. Also fix problem in longpoll socket",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/561
https://github.com/root-project/root/pull/561:282,security,soc,socket,282,"Allow http requests submitting; Before all http requests were executed, using extra threads from civetweb or fastcgi. With new engines (like from Qt WebEngine) such threads do not exists. Therefore http requests should be submitted and processed async. Also fix problem in longpoll socket",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/561
https://github.com/root-project/root/pull/562:172,availability,cluster,cluster,172,"Parallel version of Snapshot in TDataFrame using TBufferMerger; Passes `test_snapshot.C` on my computer. However, I believe there are problems elsewhere when more than one cluster exists in the generated trees (i.e. when ForeachSlot actually has more than one slot). We need to make sure to test TDataFrame with trees with multiple slots in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/562
https://github.com/root-project/root/pull/562:260,availability,slo,slot,260,"Parallel version of Snapshot in TDataFrame using TBufferMerger; Passes `test_snapshot.C` on my computer. However, I believe there are problems elsewhere when more than one cluster exists in the generated trees (i.e. when ForeachSlot actually has more than one slot). We need to make sure to test TDataFrame with trees with multiple slots in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/562
https://github.com/root-project/root/pull/562:332,availability,slo,slots,332,"Parallel version of Snapshot in TDataFrame using TBufferMerger; Passes `test_snapshot.C` on my computer. However, I believe there are problems elsewhere when more than one cluster exists in the generated trees (i.e. when ForeachSlot actually has more than one slot). We need to make sure to test TDataFrame with trees with multiple slots in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/562
https://github.com/root-project/root/pull/562:9,deployability,version,version,9,"Parallel version of Snapshot in TDataFrame using TBufferMerger; Passes `test_snapshot.C` on my computer. However, I believe there are problems elsewhere when more than one cluster exists in the generated trees (i.e. when ForeachSlot actually has more than one slot). We need to make sure to test TDataFrame with trees with multiple slots in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/562
https://github.com/root-project/root/pull/562:172,deployability,cluster,cluster,172,"Parallel version of Snapshot in TDataFrame using TBufferMerger; Passes `test_snapshot.C` on my computer. However, I believe there are problems elsewhere when more than one cluster exists in the generated trees (i.e. when ForeachSlot actually has more than one slot). We need to make sure to test TDataFrame with trees with multiple slots in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/562
https://github.com/root-project/root/pull/562:9,integrability,version,version,9,"Parallel version of Snapshot in TDataFrame using TBufferMerger; Passes `test_snapshot.C` on my computer. However, I believe there are problems elsewhere when more than one cluster exists in the generated trees (i.e. when ForeachSlot actually has more than one slot). We need to make sure to test TDataFrame with trees with multiple slots in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/562
https://github.com/root-project/root/pull/562:9,modifiability,version,version,9,"Parallel version of Snapshot in TDataFrame using TBufferMerger; Passes `test_snapshot.C` on my computer. However, I believe there are problems elsewhere when more than one cluster exists in the generated trees (i.e. when ForeachSlot actually has more than one slot). We need to make sure to test TDataFrame with trees with multiple slots in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/562
https://github.com/root-project/root/pull/562:0,performance,Parallel,Parallel,0,"Parallel version of Snapshot in TDataFrame using TBufferMerger; Passes `test_snapshot.C` on my computer. However, I believe there are problems elsewhere when more than one cluster exists in the generated trees (i.e. when ForeachSlot actually has more than one slot). We need to make sure to test TDataFrame with trees with multiple slots in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/562
https://github.com/root-project/root/pull/562:260,reliability,slo,slot,260,"Parallel version of Snapshot in TDataFrame using TBufferMerger; Passes `test_snapshot.C` on my computer. However, I believe there are problems elsewhere when more than one cluster exists in the generated trees (i.e. when ForeachSlot actually has more than one slot). We need to make sure to test TDataFrame with trees with multiple slots in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/562
https://github.com/root-project/root/pull/562:332,reliability,slo,slots,332,"Parallel version of Snapshot in TDataFrame using TBufferMerger; Passes `test_snapshot.C` on my computer. However, I believe there are problems elsewhere when more than one cluster exists in the generated trees (i.e. when ForeachSlot actually has more than one slot). We need to make sure to test TDataFrame with trees with multiple slots in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/562
https://github.com/root-project/root/pull/562:291,safety,test,test,291,"Parallel version of Snapshot in TDataFrame using TBufferMerger; Passes `test_snapshot.C` on my computer. However, I believe there are problems elsewhere when more than one cluster exists in the generated trees (i.e. when ForeachSlot actually has more than one slot). We need to make sure to test TDataFrame with trees with multiple slots in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/562
https://github.com/root-project/root/pull/562:291,testability,test,test,291,"Parallel version of Snapshot in TDataFrame using TBufferMerger; Passes `test_snapshot.C` on my computer. However, I believe there are problems elsewhere when more than one cluster exists in the generated trees (i.e. when ForeachSlot actually has more than one slot). We need to make sure to test TDataFrame with trees with multiple slots in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/562
https://github.com/root-project/root/pull/563:42,availability,error,errors,42,"Disable Oracle on OS X to prevent linking errors.; libOracle.so is compiled with stdc++ and on OS X we're always. compiling with libc++. To prevent linking errors between libOracle.so. and the generated ROOT code in the STL symbols, we just disable. Oracle on this platform.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/563
https://github.com/root-project/root/pull/563:156,availability,error,errors,156,"Disable Oracle on OS X to prevent linking errors.; libOracle.so is compiled with stdc++ and on OS X we're always. compiling with libc++. To prevent linking errors between libOracle.so. and the generated ROOT code in the STL symbols, we just disable. Oracle on this platform.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/563
https://github.com/root-project/root/pull/563:265,interoperability,platform,platform,265,"Disable Oracle on OS X to prevent linking errors.; libOracle.so is compiled with stdc++ and on OS X we're always. compiling with libc++. To prevent linking errors between libOracle.so. and the generated ROOT code in the STL symbols, we just disable. Oracle on this platform.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/563
https://github.com/root-project/root/pull/563:42,performance,error,errors,42,"Disable Oracle on OS X to prevent linking errors.; libOracle.so is compiled with stdc++ and on OS X we're always. compiling with libc++. To prevent linking errors between libOracle.so. and the generated ROOT code in the STL symbols, we just disable. Oracle on this platform.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/563
https://github.com/root-project/root/pull/563:156,performance,error,errors,156,"Disable Oracle on OS X to prevent linking errors.; libOracle.so is compiled with stdc++ and on OS X we're always. compiling with libc++. To prevent linking errors between libOracle.so. and the generated ROOT code in the STL symbols, we just disable. Oracle on this platform.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/563
https://github.com/root-project/root/pull/563:26,safety,prevent,prevent,26,"Disable Oracle on OS X to prevent linking errors.; libOracle.so is compiled with stdc++ and on OS X we're always. compiling with libc++. To prevent linking errors between libOracle.so. and the generated ROOT code in the STL symbols, we just disable. Oracle on this platform.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/563
https://github.com/root-project/root/pull/563:42,safety,error,errors,42,"Disable Oracle on OS X to prevent linking errors.; libOracle.so is compiled with stdc++ and on OS X we're always. compiling with libc++. To prevent linking errors between libOracle.so. and the generated ROOT code in the STL symbols, we just disable. Oracle on this platform.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/563
https://github.com/root-project/root/pull/563:140,safety,prevent,prevent,140,"Disable Oracle on OS X to prevent linking errors.; libOracle.so is compiled with stdc++ and on OS X we're always. compiling with libc++. To prevent linking errors between libOracle.so. and the generated ROOT code in the STL symbols, we just disable. Oracle on this platform.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/563
https://github.com/root-project/root/pull/563:156,safety,error,errors,156,"Disable Oracle on OS X to prevent linking errors.; libOracle.so is compiled with stdc++ and on OS X we're always. compiling with libc++. To prevent linking errors between libOracle.so. and the generated ROOT code in the STL symbols, we just disable. Oracle on this platform.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/563
https://github.com/root-project/root/pull/563:26,security,preven,prevent,26,"Disable Oracle on OS X to prevent linking errors.; libOracle.so is compiled with stdc++ and on OS X we're always. compiling with libc++. To prevent linking errors between libOracle.so. and the generated ROOT code in the STL symbols, we just disable. Oracle on this platform.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/563
https://github.com/root-project/root/pull/563:140,security,preven,prevent,140,"Disable Oracle on OS X to prevent linking errors.; libOracle.so is compiled with stdc++ and on OS X we're always. compiling with libc++. To prevent linking errors between libOracle.so. and the generated ROOT code in the STL symbols, we just disable. Oracle on this platform.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/563
https://github.com/root-project/root/pull/563:42,usability,error,errors,42,"Disable Oracle on OS X to prevent linking errors.; libOracle.so is compiled with stdc++ and on OS X we're always. compiling with libc++. To prevent linking errors between libOracle.so. and the generated ROOT code in the STL symbols, we just disable. Oracle on this platform.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/563
https://github.com/root-project/root/pull/563:156,usability,error,errors,156,"Disable Oracle on OS X to prevent linking errors.; libOracle.so is compiled with stdc++ and on OS X we're always. compiling with libc++. To prevent linking errors between libOracle.so. and the generated ROOT code in the STL symbols, we just disable. Oracle on this platform.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/563
https://github.com/root-project/root/pull/564:0,usability,Document,Documentation,0,Documentation improvement for TTree::SetNotify.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/564
https://github.com/root-project/root/pull/565:6,usability,User,User-visible,6,[TDF] User-visible changes as per ROOT-8780; A second PR with internal namespace and naming changes will follow.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/565
https://github.com/root-project/root/pull/566:4,deployability,updat,updating,4,Fix updating of GED editors from EVE GL Viewer; Also sanitize setting of TEveArrow parameters and propagation of bounding-box updates to GL viewer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/566
https://github.com/root-project/root/pull/566:126,deployability,updat,updates,126,Fix updating of GED editors from EVE GL Viewer; Also sanitize setting of TEveArrow parameters and propagation of bounding-box updates to GL viewer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/566
https://github.com/root-project/root/pull/566:83,modifiability,paramet,parameters,83,Fix updating of GED editors from EVE GL Viewer; Also sanitize setting of TEveArrow parameters and propagation of bounding-box updates to GL viewer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/566
https://github.com/root-project/root/pull/566:4,safety,updat,updating,4,Fix updating of GED editors from EVE GL Viewer; Also sanitize setting of TEveArrow parameters and propagation of bounding-box updates to GL viewer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/566
https://github.com/root-project/root/pull/566:53,safety,sanit,sanitize,53,Fix updating of GED editors from EVE GL Viewer; Also sanitize setting of TEveArrow parameters and propagation of bounding-box updates to GL viewer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/566
https://github.com/root-project/root/pull/566:126,safety,updat,updates,126,Fix updating of GED editors from EVE GL Viewer; Also sanitize setting of TEveArrow parameters and propagation of bounding-box updates to GL viewer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/566
https://github.com/root-project/root/pull/566:4,security,updat,updating,4,Fix updating of GED editors from EVE GL Viewer; Also sanitize setting of TEveArrow parameters and propagation of bounding-box updates to GL viewer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/566
https://github.com/root-project/root/pull/566:53,security,sanit,sanitize,53,Fix updating of GED editors from EVE GL Viewer; Also sanitize setting of TEveArrow parameters and propagation of bounding-box updates to GL viewer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/566
https://github.com/root-project/root/pull/566:126,security,updat,updates,126,Fix updating of GED editors from EVE GL Viewer; Also sanitize setting of TEveArrow parameters and propagation of bounding-box updates to GL viewer.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/566
https://github.com/root-project/root/pull/567:107,integrability,interfac,interfaces,107,[WIP] PR#3 Vectorization: Added parallelized and vectorized Chi2 and Unbinned Likelihood; Extended fitting interfaces.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/567
https://github.com/root-project/root/pull/567:107,interoperability,interfac,interfaces,107,[WIP] PR#3 Vectorization: Added parallelized and vectorized Chi2 and Unbinned Likelihood; Extended fitting interfaces.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/567
https://github.com/root-project/root/pull/567:90,modifiability,Exten,Extended,90,[WIP] PR#3 Vectorization: Added parallelized and vectorized Chi2 and Unbinned Likelihood; Extended fitting interfaces.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/567
https://github.com/root-project/root/pull/567:107,modifiability,interfac,interfaces,107,[WIP] PR#3 Vectorization: Added parallelized and vectorized Chi2 and Unbinned Likelihood; Extended fitting interfaces.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/567
https://github.com/root-project/root/pull/567:32,performance,parallel,parallelized,32,[WIP] PR#3 Vectorization: Added parallelized and vectorized Chi2 and Unbinned Likelihood; Extended fitting interfaces.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/567
https://github.com/root-project/root/pull/568:93,reliability,doe,does,93,"[WIP] Fix for snapshot action in TDataFrame; **Please do not merge yet.**. This change still does not fix the problem for me, although it does fix part of the problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/568
https://github.com/root-project/root/pull/568:138,reliability,doe,does,138,"[WIP] Fix for snapshot action in TDataFrame; **Please do not merge yet.**. This change still does not fix the problem for me, although it does fix part of the problem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/568
https://github.com/root-project/root/pull/569:55,deployability,modul,modules,55,"Use full path for loading CDLL; This helps when python modules are not in the default library path, e.g. when installed in the default system location for python modules like /usr/lib64/pythonX.X/site-packages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/569
https://github.com/root-project/root/pull/569:110,deployability,instal,installed,110,"Use full path for loading CDLL; This helps when python modules are not in the default library path, e.g. when installed in the default system location for python modules like /usr/lib64/pythonX.X/site-packages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/569
https://github.com/root-project/root/pull/569:162,deployability,modul,modules,162,"Use full path for loading CDLL; This helps when python modules are not in the default library path, e.g. when installed in the default system location for python modules like /usr/lib64/pythonX.X/site-packages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/569
https://github.com/root-project/root/pull/569:18,energy efficiency,load,loading,18,"Use full path for loading CDLL; This helps when python modules are not in the default library path, e.g. when installed in the default system location for python modules like /usr/lib64/pythonX.X/site-packages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/569
https://github.com/root-project/root/pull/569:55,modifiability,modul,modules,55,"Use full path for loading CDLL; This helps when python modules are not in the default library path, e.g. when installed in the default system location for python modules like /usr/lib64/pythonX.X/site-packages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/569
https://github.com/root-project/root/pull/569:162,modifiability,modul,modules,162,"Use full path for loading CDLL; This helps when python modules are not in the default library path, e.g. when installed in the default system location for python modules like /usr/lib64/pythonX.X/site-packages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/569
https://github.com/root-project/root/pull/569:201,modifiability,pac,packages,201,"Use full path for loading CDLL; This helps when python modules are not in the default library path, e.g. when installed in the default system location for python modules like /usr/lib64/pythonX.X/site-packages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/569
https://github.com/root-project/root/pull/569:18,performance,load,loading,18,"Use full path for loading CDLL; This helps when python modules are not in the default library path, e.g. when installed in the default system location for python modules like /usr/lib64/pythonX.X/site-packages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/569
https://github.com/root-project/root/pull/569:55,safety,modul,modules,55,"Use full path for loading CDLL; This helps when python modules are not in the default library path, e.g. when installed in the default system location for python modules like /usr/lib64/pythonX.X/site-packages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/569
https://github.com/root-project/root/pull/569:162,safety,modul,modules,162,"Use full path for loading CDLL; This helps when python modules are not in the default library path, e.g. when installed in the default system location for python modules like /usr/lib64/pythonX.X/site-packages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/569
https://github.com/root-project/root/pull/569:37,usability,help,helps,37,"Use full path for loading CDLL; This helps when python modules are not in the default library path, e.g. when installed in the default system location for python modules like /usr/lib64/pythonX.X/site-packages.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/569
https://github.com/root-project/root/pull/570:583,deployability,manag,managing,583,"Fix a potential issue when doing pointer arithmetics.; C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]. 17) ""Non-static data members of a (non-union) class with the same access control. (Clause 11) are allocated so that later members have higher addresses within a. class object. The order of allocation of non-static data members with different. access control is unspecified (Clause 11). Implementation alignment requirements. might cause two adjacent members not to be allocated immediately after each. other; so might requirements for space for managing virtual functions (10.3) and. virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be. continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/570
https://github.com/root-project/root/pull/570:736,deployability,continu,continuous,736,"Fix a potential issue when doing pointer arithmetics.; C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]. 17) ""Non-static data members of a (non-union) class with the same access control. (Clause 11) are allocated so that later members have higher addresses within a. class object. The order of allocation of non-static data members with different. access control is unspecified (Clause 11). Implementation alignment requirements. might cause two adjacent members not to be allocated immediately after each. other; so might requirements for space for managing virtual functions (10.3) and. virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be. continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/570
https://github.com/root-project/root/pull/570:236,energy efficiency,alloc,allocated,236,"Fix a potential issue when doing pointer arithmetics.; C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]. 17) ""Non-static data members of a (non-union) class with the same access control. (Clause 11) are allocated so that later members have higher addresses within a. class object. The order of allocation of non-static data members with different. access control is unspecified (Clause 11). Implementation alignment requirements. might cause two adjacent members not to be allocated immediately after each. other; so might requirements for space for managing virtual functions (10.3) and. virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be. continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/570
https://github.com/root-project/root/pull/570:327,energy efficiency,alloc,allocation,327,"Fix a potential issue when doing pointer arithmetics.; C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]. 17) ""Non-static data members of a (non-union) class with the same access control. (Clause 11) are allocated so that later members have higher addresses within a. class object. The order of allocation of non-static data members with different. access control is unspecified (Clause 11). Implementation alignment requirements. might cause two adjacent members not to be allocated immediately after each. other; so might requirements for space for managing virtual functions (10.3) and. virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be. continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/570
https://github.com/root-project/root/pull/570:506,energy efficiency,alloc,allocated,506,"Fix a potential issue when doing pointer arithmetics.; C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]. 17) ""Non-static data members of a (non-union) class with the same access control. (Clause 11) are allocated so that later members have higher addresses within a. class object. The order of allocation of non-static data members with different. access control is unspecified (Clause 11). Implementation alignment requirements. might cause two adjacent members not to be allocated immediately after each. other; so might requirements for space for managing virtual functions (10.3) and. virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be. continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/570
https://github.com/root-project/root/pull/570:583,energy efficiency,manag,managing,583,"Fix a potential issue when doing pointer arithmetics.; C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]. 17) ""Non-static data members of a (non-union) class with the same access control. (Clause 11) are allocated so that later members have higher addresses within a. class object. The order of allocation of non-static data members with different. access control is unspecified (Clause 11). Implementation alignment requirements. might cause two adjacent members not to be allocated immediately after each. other; so might requirements for space for managing virtual functions (10.3) and. virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be. continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/570
https://github.com/root-project/root/pull/570:750,performance,memor,memory,750,"Fix a potential issue when doing pointer arithmetics.; C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]. 17) ""Non-static data members of a (non-union) class with the same access control. (Clause 11) are allocated so that later members have higher addresses within a. class object. The order of allocation of non-static data members with different. access control is unspecified (Clause 11). Implementation alignment requirements. might cause two adjacent members not to be allocated immediately after each. other; so might requirements for space for managing virtual functions (10.3) and. virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be. continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/570
https://github.com/root-project/root/pull/570:583,safety,manag,managing,583,"Fix a potential issue when doing pointer arithmetics.; C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]. 17) ""Non-static data members of a (non-union) class with the same access control. (Clause 11) are allocated so that later members have higher addresses within a. class object. The order of allocation of non-static data members with different. access control is unspecified (Clause 11). Implementation alignment requirements. might cause two adjacent members not to be allocated immediately after each. other; so might requirements for space for managing virtual functions (10.3) and. virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be. continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/570
https://github.com/root-project/root/pull/570:204,security,access,access,204,"Fix a potential issue when doing pointer arithmetics.; C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]. 17) ""Non-static data members of a (non-union) class with the same access control. (Clause 11) are allocated so that later members have higher addresses within a. class object. The order of allocation of non-static data members with different. access control is unspecified (Clause 11). Implementation alignment requirements. might cause two adjacent members not to be allocated immediately after each. other; so might requirements for space for managing virtual functions (10.3) and. virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be. continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/570
https://github.com/root-project/root/pull/570:211,security,control,control,211,"Fix a potential issue when doing pointer arithmetics.; C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]. 17) ""Non-static data members of a (non-union) class with the same access control. (Clause 11) are allocated so that later members have higher addresses within a. class object. The order of allocation of non-static data members with different. access control is unspecified (Clause 11). Implementation alignment requirements. might cause two adjacent members not to be allocated immediately after each. other; so might requirements for space for managing virtual functions (10.3) and. virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be. continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/570
https://github.com/root-project/root/pull/570:381,security,access,access,381,"Fix a potential issue when doing pointer arithmetics.; C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]. 17) ""Non-static data members of a (non-union) class with the same access control. (Clause 11) are allocated so that later members have higher addresses within a. class object. The order of allocation of non-static data members with different. access control is unspecified (Clause 11). Implementation alignment requirements. might cause two adjacent members not to be allocated immediately after each. other; so might requirements for space for managing virtual functions (10.3) and. virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be. continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/570
https://github.com/root-project/root/pull/570:388,security,control,control,388,"Fix a potential issue when doing pointer arithmetics.; C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]. 17) ""Non-static data members of a (non-union) class with the same access control. (Clause 11) are allocated so that later members have higher addresses within a. class object. The order of allocation of non-static data members with different. access control is unspecified (Clause 11). Implementation alignment requirements. might cause two adjacent members not to be allocated immediately after each. other; so might requirements for space for managing virtual functions (10.3) and. virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be. continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/570
https://github.com/root-project/root/pull/570:211,testability,control,control,211,"Fix a potential issue when doing pointer arithmetics.; C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]. 17) ""Non-static data members of a (non-union) class with the same access control. (Clause 11) are allocated so that later members have higher addresses within a. class object. The order of allocation of non-static data members with different. access control is unspecified (Clause 11). Implementation alignment requirements. might cause two adjacent members not to be allocated immediately after each. other; so might requirements for space for managing virtual functions (10.3) and. virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be. continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/570
https://github.com/root-project/root/pull/570:388,testability,control,control,388,"Fix a potential issue when doing pointer arithmetics.; C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]. 17) ""Non-static data members of a (non-union) class with the same access control. (Clause 11) are allocated so that later members have higher addresses within a. class object. The order of allocation of non-static data members with different. access control is unspecified (Clause 11). Implementation alignment requirements. might cause two adjacent members not to be allocated immediately after each. other; so might requirements for space for managing virtual functions (10.3) and. virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be. continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/570
https://github.com/root-project/root/pull/570:750,usability,memor,memory,750,"Fix a potential issue when doing pointer arithmetics.; C++ didn't have wording for class members until C++11. C++ draft, 9.2 [class.mem]. 17) ""Non-static data members of a (non-union) class with the same access control. (Clause 11) are allocated so that later members have higher addresses within a. class object. The order of allocation of non-static data members with different. access control is unspecified (Clause 11). Implementation alignment requirements. might cause two adjacent members not to be allocated immediately after each. other; so might requirements for space for managing virtual functions (10.3) and. virtual base classes (10.1)."". This means fX, fY and fZ indeed get higher addresses but are not guaranteed to be. continuous in memory. This should fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/570
https://github.com/root-project/root/pull/572:347,energy efficiency,alloc,allocated,347,"[tmva] MLP codegen threadsafety; as it turnes out the `...class.C` files generated by the TMVA MLP are not thread safe (`fWeights` is a constant array of contant pointers to beginnings of double arrays, and the contents therein vary at runtime inside the GetMvaValue__ method). So the quick hack here is to replace the class member of dynamically allocated arrays by fixed sized arrays in the function scope. # QUASICODE OLD. ```. class mlp {. private:. double *fweights[3]. mlp() {. fweights[0] = new double[5];. fweights[1] = new double[10];. fweights[2] = new double[1];. }. ~mlp() {. delete fweights[0];. delete fweights[1];. delete fweights[2];. }. getmvavalue( std::vector<double> input) const {. fweights[0] = input;. fweights[1] = some_function(fweights[0]);. fweights[2] = some_other_function(fweights[1]);. return fweights[2][0];. }. ```. # QUASICODE NEW. ```. class mlp {. private:. mlp() {. }. ~mlp() {. }. getmvavalue( std::vector<double> input) const {. double fweights0[5];. double fweights1[10];. double fweights2[1];. fweights0 = input;. fweights1 = some_function(fweights0);. fweights2 = some_other_function(fweights1);. return fweights2[0];. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/572
https://github.com/root-project/root/pull/572:211,performance,content,contents,211,"[tmva] MLP codegen threadsafety; as it turnes out the `...class.C` files generated by the TMVA MLP are not thread safe (`fWeights` is a constant array of contant pointers to beginnings of double arrays, and the contents therein vary at runtime inside the GetMvaValue__ method). So the quick hack here is to replace the class member of dynamically allocated arrays by fixed sized arrays in the function scope. # QUASICODE OLD. ```. class mlp {. private:. double *fweights[3]. mlp() {. fweights[0] = new double[5];. fweights[1] = new double[10];. fweights[2] = new double[1];. }. ~mlp() {. delete fweights[0];. delete fweights[1];. delete fweights[2];. }. getmvavalue( std::vector<double> input) const {. fweights[0] = input;. fweights[1] = some_function(fweights[0]);. fweights[2] = some_other_function(fweights[1]);. return fweights[2][0];. }. ```. # QUASICODE NEW. ```. class mlp {. private:. mlp() {. }. ~mlp() {. }. getmvavalue( std::vector<double> input) const {. double fweights0[5];. double fweights1[10];. double fweights2[1];. fweights0 = input;. fweights1 = some_function(fweights0);. fweights2 = some_other_function(fweights1);. return fweights2[0];. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/572
https://github.com/root-project/root/pull/572:114,safety,safe,safe,114,"[tmva] MLP codegen threadsafety; as it turnes out the `...class.C` files generated by the TMVA MLP are not thread safe (`fWeights` is a constant array of contant pointers to beginnings of double arrays, and the contents therein vary at runtime inside the GetMvaValue__ method). So the quick hack here is to replace the class member of dynamically allocated arrays by fixed sized arrays in the function scope. # QUASICODE OLD. ```. class mlp {. private:. double *fweights[3]. mlp() {. fweights[0] = new double[5];. fweights[1] = new double[10];. fweights[2] = new double[1];. }. ~mlp() {. delete fweights[0];. delete fweights[1];. delete fweights[2];. }. getmvavalue( std::vector<double> input) const {. fweights[0] = input;. fweights[1] = some_function(fweights[0]);. fweights[2] = some_other_function(fweights[1]);. return fweights[2][0];. }. ```. # QUASICODE NEW. ```. class mlp {. private:. mlp() {. }. ~mlp() {. }. getmvavalue( std::vector<double> input) const {. double fweights0[5];. double fweights1[10];. double fweights2[1];. fweights0 = input;. fweights1 = some_function(fweights0);. fweights2 = some_other_function(fweights1);. return fweights2[0];. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/572
https://github.com/root-project/root/pull/572:687,safety,input,input,687,"[tmva] MLP codegen threadsafety; as it turnes out the `...class.C` files generated by the TMVA MLP are not thread safe (`fWeights` is a constant array of contant pointers to beginnings of double arrays, and the contents therein vary at runtime inside the GetMvaValue__ method). So the quick hack here is to replace the class member of dynamically allocated arrays by fixed sized arrays in the function scope. # QUASICODE OLD. ```. class mlp {. private:. double *fweights[3]. mlp() {. fweights[0] = new double[5];. fweights[1] = new double[10];. fweights[2] = new double[1];. }. ~mlp() {. delete fweights[0];. delete fweights[1];. delete fweights[2];. }. getmvavalue( std::vector<double> input) const {. fweights[0] = input;. fweights[1] = some_function(fweights[0]);. fweights[2] = some_other_function(fweights[1]);. return fweights[2][0];. }. ```. # QUASICODE NEW. ```. class mlp {. private:. mlp() {. }. ~mlp() {. }. getmvavalue( std::vector<double> input) const {. double fweights0[5];. double fweights1[10];. double fweights2[1];. fweights0 = input;. fweights1 = some_function(fweights0);. fweights2 = some_other_function(fweights1);. return fweights2[0];. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/572
https://github.com/root-project/root/pull/572:717,safety,input,input,717,"[tmva] MLP codegen threadsafety; as it turnes out the `...class.C` files generated by the TMVA MLP are not thread safe (`fWeights` is a constant array of contant pointers to beginnings of double arrays, and the contents therein vary at runtime inside the GetMvaValue__ method). So the quick hack here is to replace the class member of dynamically allocated arrays by fixed sized arrays in the function scope. # QUASICODE OLD. ```. class mlp {. private:. double *fweights[3]. mlp() {. fweights[0] = new double[5];. fweights[1] = new double[10];. fweights[2] = new double[1];. }. ~mlp() {. delete fweights[0];. delete fweights[1];. delete fweights[2];. }. getmvavalue( std::vector<double> input) const {. fweights[0] = input;. fweights[1] = some_function(fweights[0]);. fweights[2] = some_other_function(fweights[1]);. return fweights[2][0];. }. ```. # QUASICODE NEW. ```. class mlp {. private:. mlp() {. }. ~mlp() {. }. getmvavalue( std::vector<double> input) const {. double fweights0[5];. double fweights1[10];. double fweights2[1];. fweights0 = input;. fweights1 = some_function(fweights0);. fweights2 = some_other_function(fweights1);. return fweights2[0];. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/572
https://github.com/root-project/root/pull/572:952,safety,input,input,952,"[tmva] MLP codegen threadsafety; as it turnes out the `...class.C` files generated by the TMVA MLP are not thread safe (`fWeights` is a constant array of contant pointers to beginnings of double arrays, and the contents therein vary at runtime inside the GetMvaValue__ method). So the quick hack here is to replace the class member of dynamically allocated arrays by fixed sized arrays in the function scope. # QUASICODE OLD. ```. class mlp {. private:. double *fweights[3]. mlp() {. fweights[0] = new double[5];. fweights[1] = new double[10];. fweights[2] = new double[1];. }. ~mlp() {. delete fweights[0];. delete fweights[1];. delete fweights[2];. }. getmvavalue( std::vector<double> input) const {. fweights[0] = input;. fweights[1] = some_function(fweights[0]);. fweights[2] = some_other_function(fweights[1]);. return fweights[2][0];. }. ```. # QUASICODE NEW. ```. class mlp {. private:. mlp() {. }. ~mlp() {. }. getmvavalue( std::vector<double> input) const {. double fweights0[5];. double fweights1[10];. double fweights2[1];. fweights0 = input;. fweights1 = some_function(fweights0);. fweights2 = some_other_function(fweights1);. return fweights2[0];. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/572
https://github.com/root-project/root/pull/572:1047,safety,input,input,1047,"[tmva] MLP codegen threadsafety; as it turnes out the `...class.C` files generated by the TMVA MLP are not thread safe (`fWeights` is a constant array of contant pointers to beginnings of double arrays, and the contents therein vary at runtime inside the GetMvaValue__ method). So the quick hack here is to replace the class member of dynamically allocated arrays by fixed sized arrays in the function scope. # QUASICODE OLD. ```. class mlp {. private:. double *fweights[3]. mlp() {. fweights[0] = new double[5];. fweights[1] = new double[10];. fweights[2] = new double[1];. }. ~mlp() {. delete fweights[0];. delete fweights[1];. delete fweights[2];. }. getmvavalue( std::vector<double> input) const {. fweights[0] = input;. fweights[1] = some_function(fweights[0]);. fweights[2] = some_other_function(fweights[1]);. return fweights[2][0];. }. ```. # QUASICODE NEW. ```. class mlp {. private:. mlp() {. }. ~mlp() {. }. getmvavalue( std::vector<double> input) const {. double fweights0[5];. double fweights1[10];. double fweights2[1];. fweights0 = input;. fweights1 = some_function(fweights0);. fweights2 = some_other_function(fweights1);. return fweights2[0];. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/572
https://github.com/root-project/root/pull/572:291,security,hack,hack,291,"[tmva] MLP codegen threadsafety; as it turnes out the `...class.C` files generated by the TMVA MLP are not thread safe (`fWeights` is a constant array of contant pointers to beginnings of double arrays, and the contents therein vary at runtime inside the GetMvaValue__ method). So the quick hack here is to replace the class member of dynamically allocated arrays by fixed sized arrays in the function scope. # QUASICODE OLD. ```. class mlp {. private:. double *fweights[3]. mlp() {. fweights[0] = new double[5];. fweights[1] = new double[10];. fweights[2] = new double[1];. }. ~mlp() {. delete fweights[0];. delete fweights[1];. delete fweights[2];. }. getmvavalue( std::vector<double> input) const {. fweights[0] = input;. fweights[1] = some_function(fweights[0]);. fweights[2] = some_other_function(fweights[1]);. return fweights[2][0];. }. ```. # QUASICODE NEW. ```. class mlp {. private:. mlp() {. }. ~mlp() {. }. getmvavalue( std::vector<double> input) const {. double fweights0[5];. double fweights1[10];. double fweights2[1];. fweights0 = input;. fweights1 = some_function(fweights0);. fweights2 = some_other_function(fweights1);. return fweights2[0];. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/572
https://github.com/root-project/root/pull/572:687,usability,input,input,687,"[tmva] MLP codegen threadsafety; as it turnes out the `...class.C` files generated by the TMVA MLP are not thread safe (`fWeights` is a constant array of contant pointers to beginnings of double arrays, and the contents therein vary at runtime inside the GetMvaValue__ method). So the quick hack here is to replace the class member of dynamically allocated arrays by fixed sized arrays in the function scope. # QUASICODE OLD. ```. class mlp {. private:. double *fweights[3]. mlp() {. fweights[0] = new double[5];. fweights[1] = new double[10];. fweights[2] = new double[1];. }. ~mlp() {. delete fweights[0];. delete fweights[1];. delete fweights[2];. }. getmvavalue( std::vector<double> input) const {. fweights[0] = input;. fweights[1] = some_function(fweights[0]);. fweights[2] = some_other_function(fweights[1]);. return fweights[2][0];. }. ```. # QUASICODE NEW. ```. class mlp {. private:. mlp() {. }. ~mlp() {. }. getmvavalue( std::vector<double> input) const {. double fweights0[5];. double fweights1[10];. double fweights2[1];. fweights0 = input;. fweights1 = some_function(fweights0);. fweights2 = some_other_function(fweights1);. return fweights2[0];. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/572
https://github.com/root-project/root/pull/572:717,usability,input,input,717,"[tmva] MLP codegen threadsafety; as it turnes out the `...class.C` files generated by the TMVA MLP are not thread safe (`fWeights` is a constant array of contant pointers to beginnings of double arrays, and the contents therein vary at runtime inside the GetMvaValue__ method). So the quick hack here is to replace the class member of dynamically allocated arrays by fixed sized arrays in the function scope. # QUASICODE OLD. ```. class mlp {. private:. double *fweights[3]. mlp() {. fweights[0] = new double[5];. fweights[1] = new double[10];. fweights[2] = new double[1];. }. ~mlp() {. delete fweights[0];. delete fweights[1];. delete fweights[2];. }. getmvavalue( std::vector<double> input) const {. fweights[0] = input;. fweights[1] = some_function(fweights[0]);. fweights[2] = some_other_function(fweights[1]);. return fweights[2][0];. }. ```. # QUASICODE NEW. ```. class mlp {. private:. mlp() {. }. ~mlp() {. }. getmvavalue( std::vector<double> input) const {. double fweights0[5];. double fweights1[10];. double fweights2[1];. fweights0 = input;. fweights1 = some_function(fweights0);. fweights2 = some_other_function(fweights1);. return fweights2[0];. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/572
https://github.com/root-project/root/pull/572:952,usability,input,input,952,"[tmva] MLP codegen threadsafety; as it turnes out the `...class.C` files generated by the TMVA MLP are not thread safe (`fWeights` is a constant array of contant pointers to beginnings of double arrays, and the contents therein vary at runtime inside the GetMvaValue__ method). So the quick hack here is to replace the class member of dynamically allocated arrays by fixed sized arrays in the function scope. # QUASICODE OLD. ```. class mlp {. private:. double *fweights[3]. mlp() {. fweights[0] = new double[5];. fweights[1] = new double[10];. fweights[2] = new double[1];. }. ~mlp() {. delete fweights[0];. delete fweights[1];. delete fweights[2];. }. getmvavalue( std::vector<double> input) const {. fweights[0] = input;. fweights[1] = some_function(fweights[0]);. fweights[2] = some_other_function(fweights[1]);. return fweights[2][0];. }. ```. # QUASICODE NEW. ```. class mlp {. private:. mlp() {. }. ~mlp() {. }. getmvavalue( std::vector<double> input) const {. double fweights0[5];. double fweights1[10];. double fweights2[1];. fweights0 = input;. fweights1 = some_function(fweights0);. fweights2 = some_other_function(fweights1);. return fweights2[0];. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/572
https://github.com/root-project/root/pull/572:1047,usability,input,input,1047,"[tmva] MLP codegen threadsafety; as it turnes out the `...class.C` files generated by the TMVA MLP are not thread safe (`fWeights` is a constant array of contant pointers to beginnings of double arrays, and the contents therein vary at runtime inside the GetMvaValue__ method). So the quick hack here is to replace the class member of dynamically allocated arrays by fixed sized arrays in the function scope. # QUASICODE OLD. ```. class mlp {. private:. double *fweights[3]. mlp() {. fweights[0] = new double[5];. fweights[1] = new double[10];. fweights[2] = new double[1];. }. ~mlp() {. delete fweights[0];. delete fweights[1];. delete fweights[2];. }. getmvavalue( std::vector<double> input) const {. fweights[0] = input;. fweights[1] = some_function(fweights[0]);. fweights[2] = some_other_function(fweights[1]);. return fweights[2][0];. }. ```. # QUASICODE NEW. ```. class mlp {. private:. mlp() {. }. ~mlp() {. }. getmvavalue( std::vector<double> input) const {. double fweights0[5];. double fweights1[10];. double fweights2[1];. fweights0 = input;. fweights1 = some_function(fweights0);. fweights2 = some_other_function(fweights1);. return fweights2[0];. }. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/572
https://github.com/root-project/root/pull/573:112,integrability,filter,filtering,112,Add entrylist support to TreeProcessorMP; This PR adds in TreeProcessorMP support for processing TTree datasets filtering via a TEntryList. A new set of Process methods taking a TEntryList * as 3rd argument has been added. A test for the new functionality is ready to be pushed in roottest once this is pushed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/573
https://github.com/root-project/root/pull/573:225,safety,test,test,225,Add entrylist support to TreeProcessorMP; This PR adds in TreeProcessorMP support for processing TTree datasets filtering via a TEntryList. A new set of Process methods taking a TEntryList * as 3rd argument has been added. A test for the new functionality is ready to be pushed in roottest once this is pushed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/573
https://github.com/root-project/root/pull/573:225,testability,test,test,225,Add entrylist support to TreeProcessorMP; This PR adds in TreeProcessorMP support for processing TTree datasets filtering via a TEntryList. A new set of Process methods taking a TEntryList * as 3rd argument has been added. A test for the new functionality is ready to be pushed in roottest once this is pushed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/573
https://github.com/root-project/root/pull/573:14,usability,support,support,14,Add entrylist support to TreeProcessorMP; This PR adds in TreeProcessorMP support for processing TTree datasets filtering via a TEntryList. A new set of Process methods taking a TEntryList * as 3rd argument has been added. A test for the new functionality is ready to be pushed in roottest once this is pushed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/573
https://github.com/root-project/root/pull/573:74,usability,support,support,74,Add entrylist support to TreeProcessorMP; This PR adds in TreeProcessorMP support for processing TTree datasets filtering via a TEntryList. A new set of Process methods taking a TEntryList * as 3rd argument has been added. A test for the new functionality is ready to be pushed in roottest once this is pushed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/573
https://github.com/root-project/root/pull/574:172,deployability,contain,contains,172,Add multiclass ROC curves for TMVAMulticlassGui; Introduces a new (for multiclass anyway) button in the gui that. when clicked displays one ROC curve per class. Each curve contains. the performance of all methods for that class. Uses the new ROCCurve class to calculate the curves.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/574
https://github.com/root-project/root/pull/574:186,performance,perform,performance,186,Add multiclass ROC curves for TMVAMulticlassGui; Introduces a new (for multiclass anyway) button in the gui that. when clicked displays one ROC curve per class. Each curve contains. the performance of all methods for that class. Uses the new ROCCurve class to calculate the curves.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/574
https://github.com/root-project/root/pull/574:186,usability,perform,performance,186,Add multiclass ROC curves for TMVAMulticlassGui; Introduces a new (for multiclass anyway) button in the gui that. when clicked displays one ROC curve per class. Each curve contains. the performance of all methods for that class. Uses the new ROCCurve class to calculate the curves.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/574
https://github.com/root-project/root/pull/575:38,modifiability,refact,refactoring,38,"[TDF] Internal renaming and namespace refactoring; Second and last PR to resolve [ROOT-8780](https://sft.its.cern.ch/jira/browse/ROOT-8780) (""Less namespace verbosity and more uniform namings for TDataFrame"").",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/575
https://github.com/root-project/root/pull/575:38,performance,refactor,refactoring,38,"[TDF] Internal renaming and namespace refactoring; Second and last PR to resolve [ROOT-8780](https://sft.its.cern.ch/jira/browse/ROOT-8780) (""Less namespace verbosity and more uniform namings for TDataFrame"").",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/575
https://github.com/root-project/root/pull/576:92,interoperability,conflict,conflicts,92,Use a lock to protect access to collection from TROOT::GetListOfClean…; …ups (resolve merge conflicts for 6.08),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/576
https://github.com/root-project/root/pull/576:6,performance,lock,lock,6,Use a lock to protect access to collection from TROOT::GetListOfClean…; …ups (resolve merge conflicts for 6.08),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/576
https://github.com/root-project/root/pull/576:6,security,lock,lock,6,Use a lock to protect access to collection from TROOT::GetListOfClean…; …ups (resolve merge conflicts for 6.08),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/576
https://github.com/root-project/root/pull/576:22,security,access,access,22,Use a lock to protect access to collection from TROOT::GetListOfClean…; …ups (resolve merge conflicts for 6.08),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/576
https://github.com/root-project/root/pull/577:74,reliability,doe,does,74,"Simplify implementation of TBufferMerger using TFileMerger directly; This does not completely resolve the issue of the race conditions, but simplifies the implementation of TBufferMerger a lot by doing away with the ThreadFileMerger imported from GeantV and using TFileMerger directly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/577
https://github.com/root-project/root/pull/577:83,safety,compl,completely,83,"Simplify implementation of TBufferMerger using TFileMerger directly; This does not completely resolve the issue of the race conditions, but simplifies the implementation of TBufferMerger a lot by doing away with the ThreadFileMerger imported from GeantV and using TFileMerger directly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/577
https://github.com/root-project/root/pull/577:83,security,compl,completely,83,"Simplify implementation of TBufferMerger using TFileMerger directly; This does not completely resolve the issue of the race conditions, but simplifies the implementation of TBufferMerger a lot by doing away with the ThreadFileMerger imported from GeantV and using TFileMerger directly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/577
https://github.com/root-project/root/pull/577:0,testability,Simpl,Simplify,0,"Simplify implementation of TBufferMerger using TFileMerger directly; This does not completely resolve the issue of the race conditions, but simplifies the implementation of TBufferMerger a lot by doing away with the ThreadFileMerger imported from GeantV and using TFileMerger directly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/577
https://github.com/root-project/root/pull/577:140,testability,simpl,simplifies,140,"Simplify implementation of TBufferMerger using TFileMerger directly; This does not completely resolve the issue of the race conditions, but simplifies the implementation of TBufferMerger a lot by doing away with the ThreadFileMerger imported from GeantV and using TFileMerger directly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/577
https://github.com/root-project/root/pull/577:0,usability,Simpl,Simplify,0,"Simplify implementation of TBufferMerger using TFileMerger directly; This does not completely resolve the issue of the race conditions, but simplifies the implementation of TBufferMerger a lot by doing away with the ThreadFileMerger imported from GeantV and using TFileMerger directly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/577
https://github.com/root-project/root/pull/577:140,usability,simpl,simplifies,140,"Simplify implementation of TBufferMerger using TFileMerger directly; This does not completely resolve the issue of the race conditions, but simplifies the implementation of TBufferMerger a lot by doing away with the ThreadFileMerger imported from GeantV and using TFileMerger directly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/577
https://github.com/root-project/root/pull/578:227,availability,sli,slightly,227,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:571,deployability,build,build,571,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:1173,deployability,patch,patch,1173,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:1263,interoperability,format,formatting,1263,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:160,modifiability,reu,reused,160,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:772,modifiability,paramet,parameter,772,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:809,modifiability,reu,reused,809,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:179,performance,I/O,I/O,179,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:395,performance,I/O,I/O,395,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:826,performance,I/O,I/O,826,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:227,reliability,sli,slightly,227,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:280,safety,compl,complimentary,280,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:365,safety,isol,isolate,365,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:614,safety,avoid,avoid,614,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:1137,safety,test,test,1137,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:1173,safety,patch,patch,1173,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:280,security,compl,complimentary,280,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:365,security,iso,isolate,365,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:1173,security,patch,patch,1173,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:365,testability,isol,isolate,365,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:1137,testability,test,test,1137,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/578:1061,usability,support,support,1061,"Provide actions for text-based streamers; Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O, . only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. - creating separate list **fWriteText,** now used only with JSON. - provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. - actions build from the full list of class members (avoid compressed members). - provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. - make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. - TNamed and TObject as direct data members. - correct store of kSTLp members with arrays. - kStreamLoop member with fCounter==0. - kStreamLoop member with fCounter==1. - rudimentary support for TRef. - store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/578
https://github.com/root-project/root/pull/580:256,availability,sli,slightly,256,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:590,deployability,build,build,590,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:1176,deployability,patch,patch,1176,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:1266,interoperability,format,formatting,1266,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:190,modifiability,reu,reused,190,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:787,modifiability,paramet,parameter,787,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:824,modifiability,reu,reused,824,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:209,performance,I/O,I/O,209,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:424,performance,I/O,I/O,424,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:841,performance,I/O,I/O,841,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:256,reliability,sli,slightly,256,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:309,safety,compl,complimentary,309,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:394,safety,isol,isolate,394,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:633,safety,avoid,avoid,633,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:1140,safety,test,test,1140,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:1176,safety,patch,patch,1176,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:309,security,compl,complimentary,309,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:394,security,iso,isolate,394,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:1176,security,patch,patch,1176,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:394,testability,isol,isolate,394,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:1140,testability,test,test,1140,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/580:1066,usability,support,support,1066,"Provide actions for text-based streamers; Improved variant of PR #578 . Idea to create separate actions list, which will be used only for text-based streaming. Most actions functions can be reused from normal I/O,. only several cases should be implemented slightly different. On the long run one could create complimentary actions list for reading data with TBufferXML or TBufferSQL2 and fully isolate text-based and binary I/O. That is in PR:. creating separate list fWriteText, now used only with JSON. provide new method TStreamerInfo::AddWriteTextAction() to fill actions list. actions build from the full list of class members (avoid compressed members). provide specialized actions for kTNamed, kTObject, kSTLp and kStreamLoop. make actions for kSTLp and kStreamLoop with template parameter isText, potentially can be reused in binary I/O. PR solves several existing problem with JSON:. TNamed and TObject as direct data members. correct store of kSTLp members with arrays. kStreamLoop member with fCounter==0. kStreamLoop member with fCounter==1. rudimentary support for TRef. store dummy TObject instance. With provided code all my test classes working. I can provide patch for roottest. P.S. Most probably, Travis-CI check will be unhappy about source-code formatting.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/580
https://github.com/root-project/root/pull/581:23,energy efficiency,reduc,reduction,23,Reintroduce the greedy reduction in TProcessExecutor;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/581
https://github.com/root-project/root/pull/582:144,availability,operat,operations,144,[RGL] Allow disabling of display list usage; Some MesaGL implementations (since 2016) have trouble (segv) when one tries. to store vertex array operations into display lists. The following options allow complete or partial. disablement of display list usage. OpenGL.UseDisplayLists: 1. OpenGL.UseDisplayListsForVertexArrays: 1. OpenGL.UseDisplayLists already works. Handling of OpenGL.UseDisplayListsForVertexArrays still needs to be. implemented as it requires review of all GL rendering classes but the cover-all case should allow people to get past this hurdle already.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/582
https://github.com/root-project/root/pull/582:203,safety,compl,complete,203,[RGL] Allow disabling of display list usage; Some MesaGL implementations (since 2016) have trouble (segv) when one tries. to store vertex array operations into display lists. The following options allow complete or partial. disablement of display list usage. OpenGL.UseDisplayLists: 1. OpenGL.UseDisplayListsForVertexArrays: 1. OpenGL.UseDisplayLists already works. Handling of OpenGL.UseDisplayListsForVertexArrays still needs to be. implemented as it requires review of all GL rendering classes but the cover-all case should allow people to get past this hurdle already.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/582
https://github.com/root-project/root/pull/582:462,safety,review,review,462,[RGL] Allow disabling of display list usage; Some MesaGL implementations (since 2016) have trouble (segv) when one tries. to store vertex array operations into display lists. The following options allow complete or partial. disablement of display list usage. OpenGL.UseDisplayLists: 1. OpenGL.UseDisplayListsForVertexArrays: 1. OpenGL.UseDisplayLists already works. Handling of OpenGL.UseDisplayListsForVertexArrays still needs to be. implemented as it requires review of all GL rendering classes but the cover-all case should allow people to get past this hurdle already.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/582
https://github.com/root-project/root/pull/582:203,security,compl,complete,203,[RGL] Allow disabling of display list usage; Some MesaGL implementations (since 2016) have trouble (segv) when one tries. to store vertex array operations into display lists. The following options allow complete or partial. disablement of display list usage. OpenGL.UseDisplayLists: 1. OpenGL.UseDisplayListsForVertexArrays: 1. OpenGL.UseDisplayLists already works. Handling of OpenGL.UseDisplayListsForVertexArrays still needs to be. implemented as it requires review of all GL rendering classes but the cover-all case should allow people to get past this hurdle already.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/582
https://github.com/root-project/root/pull/582:462,testability,review,review,462,[RGL] Allow disabling of display list usage; Some MesaGL implementations (since 2016) have trouble (segv) when one tries. to store vertex array operations into display lists. The following options allow complete or partial. disablement of display list usage. OpenGL.UseDisplayLists: 1. OpenGL.UseDisplayListsForVertexArrays: 1. OpenGL.UseDisplayLists already works. Handling of OpenGL.UseDisplayListsForVertexArrays still needs to be. implemented as it requires review of all GL rendering classes but the cover-all case should allow people to get past this hurdle already.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/582
https://github.com/root-project/root/pull/583:6,integrability,buffer,buffers,6,"Flush buffers at 96MB in TDF snapshot action, and fix TBufferMerger deadlock;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/583
https://github.com/root-project/root/pull/583:68,performance,deadlock,deadlock,68,"Flush buffers at 96MB in TDF snapshot action, and fix TBufferMerger deadlock;",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/583
https://github.com/root-project/root/pull/584:140,availability,redund,redundant,140,"optimize xml reading in TMVA (at least for CMS use case); Primary changes proposed. - avoiding char to TString to char conversions. - avoid redundant call to xmlEngine().hasattr(node,att) checking instead for null ptr from getattr. - Add specialization of void TMVA::Tools::ReadAttr( void* node, const char* attrname, T& value ) for float,int, short. [which seem to be the ones we use aside from bool, which now is the biggest contributor to ReadAttr* timing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/584
https://github.com/root-project/root/pull/584:140,deployability,redundan,redundant,140,"optimize xml reading in TMVA (at least for CMS use case); Primary changes proposed. - avoiding char to TString to char conversions. - avoid redundant call to xmlEngine().hasattr(node,att) checking instead for null ptr from getattr. - Add specialization of void TMVA::Tools::ReadAttr( void* node, const char* attrname, T& value ) for float,int, short. [which seem to be the ones we use aside from bool, which now is the biggest contributor to ReadAttr* timing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/584
https://github.com/root-project/root/pull/584:0,energy efficiency,optim,optimize,0,"optimize xml reading in TMVA (at least for CMS use case); Primary changes proposed. - avoiding char to TString to char conversions. - avoid redundant call to xmlEngine().hasattr(node,att) checking instead for null ptr from getattr. - Add specialization of void TMVA::Tools::ReadAttr( void* node, const char* attrname, T& value ) for float,int, short. [which seem to be the ones we use aside from bool, which now is the biggest contributor to ReadAttr* timing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/584
https://github.com/root-project/root/pull/584:9,interoperability,xml,xml,9,"optimize xml reading in TMVA (at least for CMS use case); Primary changes proposed. - avoiding char to TString to char conversions. - avoid redundant call to xmlEngine().hasattr(node,att) checking instead for null ptr from getattr. - Add specialization of void TMVA::Tools::ReadAttr( void* node, const char* attrname, T& value ) for float,int, short. [which seem to be the ones we use aside from bool, which now is the biggest contributor to ReadAttr* timing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/584
https://github.com/root-project/root/pull/584:119,interoperability,convers,conversions,119,"optimize xml reading in TMVA (at least for CMS use case); Primary changes proposed. - avoiding char to TString to char conversions. - avoid redundant call to xmlEngine().hasattr(node,att) checking instead for null ptr from getattr. - Add specialization of void TMVA::Tools::ReadAttr( void* node, const char* attrname, T& value ) for float,int, short. [which seem to be the ones we use aside from bool, which now is the biggest contributor to ReadAttr* timing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/584
https://github.com/root-project/root/pull/584:158,interoperability,xml,xmlEngine,158,"optimize xml reading in TMVA (at least for CMS use case); Primary changes proposed. - avoiding char to TString to char conversions. - avoid redundant call to xmlEngine().hasattr(node,att) checking instead for null ptr from getattr. - Add specialization of void TMVA::Tools::ReadAttr( void* node, const char* attrname, T& value ) for float,int, short. [which seem to be the ones we use aside from bool, which now is the biggest contributor to ReadAttr* timing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/584
https://github.com/root-project/root/pull/584:0,performance,optimiz,optimize,0,"optimize xml reading in TMVA (at least for CMS use case); Primary changes proposed. - avoiding char to TString to char conversions. - avoid redundant call to xmlEngine().hasattr(node,att) checking instead for null ptr from getattr. - Add specialization of void TMVA::Tools::ReadAttr( void* node, const char* attrname, T& value ) for float,int, short. [which seem to be the ones we use aside from bool, which now is the biggest contributor to ReadAttr* timing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/584
https://github.com/root-project/root/pull/584:140,reliability,redundan,redundant,140,"optimize xml reading in TMVA (at least for CMS use case); Primary changes proposed. - avoiding char to TString to char conversions. - avoid redundant call to xmlEngine().hasattr(node,att) checking instead for null ptr from getattr. - Add specialization of void TMVA::Tools::ReadAttr( void* node, const char* attrname, T& value ) for float,int, short. [which seem to be the ones we use aside from bool, which now is the biggest contributor to ReadAttr* timing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/584
https://github.com/root-project/root/pull/584:86,safety,avoid,avoiding,86,"optimize xml reading in TMVA (at least for CMS use case); Primary changes proposed. - avoiding char to TString to char conversions. - avoid redundant call to xmlEngine().hasattr(node,att) checking instead for null ptr from getattr. - Add specialization of void TMVA::Tools::ReadAttr( void* node, const char* attrname, T& value ) for float,int, short. [which seem to be the ones we use aside from bool, which now is the biggest contributor to ReadAttr* timing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/584
https://github.com/root-project/root/pull/584:134,safety,avoid,avoid,134,"optimize xml reading in TMVA (at least for CMS use case); Primary changes proposed. - avoiding char to TString to char conversions. - avoid redundant call to xmlEngine().hasattr(node,att) checking instead for null ptr from getattr. - Add specialization of void TMVA::Tools::ReadAttr( void* node, const char* attrname, T& value ) for float,int, short. [which seem to be the ones we use aside from bool, which now is the biggest contributor to ReadAttr* timing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/584
https://github.com/root-project/root/pull/584:140,safety,redund,redundant,140,"optimize xml reading in TMVA (at least for CMS use case); Primary changes proposed. - avoiding char to TString to char conversions. - avoid redundant call to xmlEngine().hasattr(node,att) checking instead for null ptr from getattr. - Add specialization of void TMVA::Tools::ReadAttr( void* node, const char* attrname, T& value ) for float,int, short. [which seem to be the ones we use aside from bool, which now is the biggest contributor to ReadAttr* timing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/584
https://github.com/root-project/root/pull/584:267,usability,Tool,Tools,267,"optimize xml reading in TMVA (at least for CMS use case); Primary changes proposed. - avoiding char to TString to char conversions. - avoid redundant call to xmlEngine().hasattr(node,att) checking instead for null ptr from getattr. - Add specialization of void TMVA::Tools::ReadAttr( void* node, const char* attrname, T& value ) for float,int, short. [which seem to be the ones we use aside from bool, which now is the biggest contributor to ReadAttr* timing.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/584
https://github.com/root-project/root/pull/585:18,performance,parallel,parallelization,18,Vectorization and parallelization of PoissonLogL;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/585
https://github.com/root-project/root/pull/585:37,reliability,Poisson,PoissonLogL,37,Vectorization and parallelization of PoissonLogL;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/585
https://github.com/root-project/root/pull/586:198,availability,Ping,Ping,198,"Refactoring of stressMathMore; This is a general refactoring of the class test/stressMathMore.cxx. It involves using Google test for assertions, test fixtures, and general. refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/586
https://github.com/root-project/root/pull/586:0,modifiability,Refact,Refactoring,0,"Refactoring of stressMathMore; This is a general refactoring of the class test/stressMathMore.cxx. It involves using Google test for assertions, test fixtures, and general. refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/586
https://github.com/root-project/root/pull/586:49,modifiability,refact,refactoring,49,"Refactoring of stressMathMore; This is a general refactoring of the class test/stressMathMore.cxx. It involves using Google test for assertions, test fixtures, and general. refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/586
https://github.com/root-project/root/pull/586:173,modifiability,refact,refactoring,173,"Refactoring of stressMathMore; This is a general refactoring of the class test/stressMathMore.cxx. It involves using Google test for assertions, test fixtures, and general. refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/586
https://github.com/root-project/root/pull/586:0,performance,Refactor,Refactoring,0,"Refactoring of stressMathMore; This is a general refactoring of the class test/stressMathMore.cxx. It involves using Google test for assertions, test fixtures, and general. refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/586
https://github.com/root-project/root/pull/586:49,performance,refactor,refactoring,49,"Refactoring of stressMathMore; This is a general refactoring of the class test/stressMathMore.cxx. It involves using Google test for assertions, test fixtures, and general. refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/586
https://github.com/root-project/root/pull/586:173,performance,refactor,refactoring,173,"Refactoring of stressMathMore; This is a general refactoring of the class test/stressMathMore.cxx. It involves using Google test for assertions, test fixtures, and general. refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/586
https://github.com/root-project/root/pull/586:74,safety,test,test,74,"Refactoring of stressMathMore; This is a general refactoring of the class test/stressMathMore.cxx. It involves using Google test for assertions, test fixtures, and general. refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/586
https://github.com/root-project/root/pull/586:124,safety,test,test,124,"Refactoring of stressMathMore; This is a general refactoring of the class test/stressMathMore.cxx. It involves using Google test for assertions, test fixtures, and general. refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/586
https://github.com/root-project/root/pull/586:145,safety,test,test,145,"Refactoring of stressMathMore; This is a general refactoring of the class test/stressMathMore.cxx. It involves using Google test for assertions, test fixtures, and general. refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/586
https://github.com/root-project/root/pull/586:74,testability,test,test,74,"Refactoring of stressMathMore; This is a general refactoring of the class test/stressMathMore.cxx. It involves using Google test for assertions, test fixtures, and general. refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/586
https://github.com/root-project/root/pull/586:124,testability,test,test,124,"Refactoring of stressMathMore; This is a general refactoring of the class test/stressMathMore.cxx. It involves using Google test for assertions, test fixtures, and general. refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/586
https://github.com/root-project/root/pull/586:133,testability,assert,assertions,133,"Refactoring of stressMathMore; This is a general refactoring of the class test/stressMathMore.cxx. It involves using Google test for assertions, test fixtures, and general. refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/586
https://github.com/root-project/root/pull/586:145,testability,test,test,145,"Refactoring of stressMathMore; This is a general refactoring of the class test/stressMathMore.cxx. It involves using Google test for assertions, test fixtures, and general. refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/586
https://github.com/root-project/root/pull/587:116,energy efficiency,optim,optimal,116,"[TDF] Add file cache size option setting to snapshot action; The default setting has been determined to be near the optimal. value from tests runs on a 4 core machine (up to 8 threads), by. creating up to 1GB of data with lightweight calculations both to. tmpfs, and to ext4 filesystem on an SSD drive.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/587
https://github.com/root-project/root/pull/587:154,energy efficiency,core,core,154,"[TDF] Add file cache size option setting to snapshot action; The default setting has been determined to be near the optimal. value from tests runs on a 4 core machine (up to 8 threads), by. creating up to 1GB of data with lightweight calculations both to. tmpfs, and to ext4 filesystem on an SSD drive.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/587
https://github.com/root-project/root/pull/587:15,performance,cach,cache,15,"[TDF] Add file cache size option setting to snapshot action; The default setting has been determined to be near the optimal. value from tests runs on a 4 core machine (up to 8 threads), by. creating up to 1GB of data with lightweight calculations both to. tmpfs, and to ext4 filesystem on an SSD drive.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/587
https://github.com/root-project/root/pull/587:136,safety,test,tests,136,"[TDF] Add file cache size option setting to snapshot action; The default setting has been determined to be near the optimal. value from tests runs on a 4 core machine (up to 8 threads), by. creating up to 1GB of data with lightweight calculations both to. tmpfs, and to ext4 filesystem on an SSD drive.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/587
https://github.com/root-project/root/pull/587:136,testability,test,tests,136,"[TDF] Add file cache size option setting to snapshot action; The default setting has been determined to be near the optimal. value from tests runs on a 4 core machine (up to 8 threads), by. creating up to 1GB of data with lightweight calculations both to. tmpfs, and to ext4 filesystem on an SSD drive.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/587
https://github.com/root-project/root/pull/589:0,deployability,Updat,Update,0,Update llvm to r302975;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/589
https://github.com/root-project/root/pull/589:0,safety,Updat,Update,0,Update llvm to r302975;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/589
https://github.com/root-project/root/pull/589:0,security,Updat,Update,0,Update llvm to r302975;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/589
https://github.com/root-project/root/pull/590:148,integrability,Event,Event,148,"Add support for LZ4; This PR adds support for the LZ4 compression algorithm (branch has been significantly cleaned up). In testing with the sample `Event` object found in the `test` subdirectory, we found that the resulting files were about 13% larger than the default compression settings. Deserialization speed was 95% of the uncompressed speed. As discussed with @pcanal",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/590
https://github.com/root-project/root/pull/590:182,integrability,sub,subdirectory,182,"Add support for LZ4; This PR adds support for the LZ4 compression algorithm (branch has been significantly cleaned up). In testing with the sample `Event` object found in the `test` subdirectory, we found that the resulting files were about 13% larger than the default compression settings. Deserialization speed was 95% of the uncompressed speed. As discussed with @pcanal",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/590
https://github.com/root-project/root/pull/590:123,safety,test,testing,123,"Add support for LZ4; This PR adds support for the LZ4 compression algorithm (branch has been significantly cleaned up). In testing with the sample `Event` object found in the `test` subdirectory, we found that the resulting files were about 13% larger than the default compression settings. Deserialization speed was 95% of the uncompressed speed. As discussed with @pcanal",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/590
https://github.com/root-project/root/pull/590:176,safety,test,test,176,"Add support for LZ4; This PR adds support for the LZ4 compression algorithm (branch has been significantly cleaned up). In testing with the sample `Event` object found in the `test` subdirectory, we found that the resulting files were about 13% larger than the default compression settings. Deserialization speed was 95% of the uncompressed speed. As discussed with @pcanal",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/590
https://github.com/root-project/root/pull/590:93,security,sign,significantly,93,"Add support for LZ4; This PR adds support for the LZ4 compression algorithm (branch has been significantly cleaned up). In testing with the sample `Event` object found in the `test` subdirectory, we found that the resulting files were about 13% larger than the default compression settings. Deserialization speed was 95% of the uncompressed speed. As discussed with @pcanal",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/590
https://github.com/root-project/root/pull/590:123,testability,test,testing,123,"Add support for LZ4; This PR adds support for the LZ4 compression algorithm (branch has been significantly cleaned up). In testing with the sample `Event` object found in the `test` subdirectory, we found that the resulting files were about 13% larger than the default compression settings. Deserialization speed was 95% of the uncompressed speed. As discussed with @pcanal",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/590
https://github.com/root-project/root/pull/590:176,testability,test,test,176,"Add support for LZ4; This PR adds support for the LZ4 compression algorithm (branch has been significantly cleaned up). In testing with the sample `Event` object found in the `test` subdirectory, we found that the resulting files were about 13% larger than the default compression settings. Deserialization speed was 95% of the uncompressed speed. As discussed with @pcanal",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/590
https://github.com/root-project/root/pull/590:4,usability,support,support,4,"Add support for LZ4; This PR adds support for the LZ4 compression algorithm (branch has been significantly cleaned up). In testing with the sample `Event` object found in the `test` subdirectory, we found that the resulting files were about 13% larger than the default compression settings. Deserialization speed was 95% of the uncompressed speed. As discussed with @pcanal",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/590
https://github.com/root-project/root/pull/590:34,usability,support,support,34,"Add support for LZ4; This PR adds support for the LZ4 compression algorithm (branch has been significantly cleaned up). In testing with the sample `Event` object found in the `test` subdirectory, we found that the resulting files were about 13% larger than the default compression settings. Deserialization speed was 95% of the uncompressed speed. As discussed with @pcanal",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/590
https://github.com/root-project/root/pull/591:79,deployability,patch,patches,79,C++17 fixes; I have moved CMSSW to the latest GCC 7.1.1 and to the tip of 6.10 patches branch. These are the fixes I have applied on top of that branch for CMS.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/591
https://github.com/root-project/root/pull/591:79,safety,patch,patches,79,C++17 fixes; I have moved CMSSW to the latest GCC 7.1.1 and to the tip of 6.10 patches branch. These are the fixes I have applied on top of that branch for CMS.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/591
https://github.com/root-project/root/pull/591:79,security,patch,patches,79,C++17 fixes; I have moved CMSSW to the latest GCC 7.1.1 and to the tip of 6.10 patches branch. These are the fixes I have applied on top of that branch for CMS.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/591
https://github.com/root-project/root/pull/591:67,usability,tip,tip,67,C++17 fixes; I have moved CMSSW to the latest GCC 7.1.1 and to the tip of 6.10 patches branch. These are the fixes I have applied on top of that branch for CMS.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/591
https://github.com/root-project/root/pull/592:68,deployability,build,builds,68,"Allow user to turn off support for libAfterImage; The current setup builds the bundled libAfterImage by force,. even when support for X11 is disabled, which is a problem when. building ROOT on a headless server or with the Intel compiler.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/592
https://github.com/root-project/root/pull/592:176,deployability,build,building,176,"Allow user to turn off support for libAfterImage; The current setup builds the bundled libAfterImage by force,. even when support for X11 is disabled, which is a problem when. building ROOT on a headless server or with the Intel compiler.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/592
https://github.com/root-project/root/pull/592:54,energy efficiency,current,current,54,"Allow user to turn off support for libAfterImage; The current setup builds the bundled libAfterImage by force,. even when support for X11 is disabled, which is a problem when. building ROOT on a headless server or with the Intel compiler.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/592
https://github.com/root-project/root/pull/592:6,usability,user,user,6,"Allow user to turn off support for libAfterImage; The current setup builds the bundled libAfterImage by force,. even when support for X11 is disabled, which is a problem when. building ROOT on a headless server or with the Intel compiler.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/592
https://github.com/root-project/root/pull/592:23,usability,support,support,23,"Allow user to turn off support for libAfterImage; The current setup builds the bundled libAfterImage by force,. even when support for X11 is disabled, which is a problem when. building ROOT on a headless server or with the Intel compiler.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/592
https://github.com/root-project/root/pull/592:122,usability,support,support,122,"Allow user to turn off support for libAfterImage; The current setup builds the bundled libAfterImage by force,. even when support for X11 is disabled, which is a problem when. building ROOT on a headless server or with the Intel compiler.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/592
https://github.com/root-project/root/pull/593:31,deployability,build,build,31,"Add support for LZ4 in classic build; This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/593
https://github.com/root-project/root/pull/593:103,deployability,build,build,103,"Add support for LZ4 in classic build; This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/593
https://github.com/root-project/root/pull/593:150,deployability,build,build,150,"Add support for LZ4 in classic build; This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/593
https://github.com/root-project/root/pull/593:195,deployability,Modul,Module,195,"Add support for LZ4 in classic build; This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/593
https://github.com/root-project/root/pull/593:403,deployability,build,build,403,"Add support for LZ4 in classic build; This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/593
https://github.com/root-project/root/pull/593:186,energy efficiency,core,core,186,"Add support for LZ4 in classic build; This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/593
https://github.com/root-project/root/pull/593:84,integrability,configur,configure,84,"Add support for LZ4 in classic build; This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/593
https://github.com/root-project/root/pull/593:84,modifiability,configur,configure,84,"Add support for LZ4 in classic build; This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/593
https://github.com/root-project/root/pull/593:195,modifiability,Modul,Module,195,"Add support for LZ4 in classic build; This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/593
https://github.com/root-project/root/pull/593:161,safety,except,exception,161,"Add support for LZ4 in classic build; This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/593
https://github.com/root-project/root/pull/593:195,safety,Modul,Module,195,"Add support for LZ4 in classic build; This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/593
https://github.com/root-project/root/pull/593:84,security,configur,configure,84,"Add support for LZ4 in classic build; This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/593
https://github.com/root-project/root/pull/593:290,security,access,access,290,"Add support for LZ4 in classic build; This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/593
https://github.com/root-project/root/pull/593:4,usability,support,support,4,"Add support for LZ4 in classic build; This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/593
https://github.com/root-project/root/pull/593:51,usability,support,support,51,"Add support for LZ4 in classic build; This PR adds support for LZ4 in the ""classic"" configure/Makefile build, adding near-parity to the `cmake`-based build. The exception is `win32` -- `core/lz4/Module.mk` will need to be heavily tackled by someone with a Windows background (I do not have access to a Windows-based host). @pcanal - note that this reverts the commit disabling LZ4 for the `cmake`-based build.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/593
https://github.com/root-project/root/pull/594:263,availability,operat,operations,263,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:308,availability,Ping,Ping,308,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:121,deployability,manag,manageable,121,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:255,deployability,log,logical,255,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:121,energy efficiency,manag,manageable,121,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:0,modifiability,Refact,Refactor,0,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:62,modifiability,refact,refactoring,62,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:0,performance,Refactor,Refactor,0,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:62,performance,refactor,refactoring,62,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:12,safety,test,test,12,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:50,safety,Test,Test,50,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:77,safety,test,test,77,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:121,safety,manag,manageable,121,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:157,safety,Test,Test,157,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:218,safety,Test,Test,218,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:255,safety,log,logical,255,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:295,safety,test,test,295,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:255,security,log,logical,255,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:12,testability,test,test,12,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:50,testability,Test,Test,50,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:77,testability,test,test,77,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:157,testability,Test,Test,157,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:218,testability,Test,Test,218,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:227,testability,assert,assertions,227,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:255,testability,log,logical,255,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/594:295,testability,test,test,295,"Refactor of test/stressMathCore.cxx to use Google Test; Basic refactoring of test/stressMathCore.cxx to be smaller, more manageable files, and to use Google Test. The functionality is the same, but is now using Google Test for assertions instead of doing logical operations on an integer as the test result. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/594
https://github.com/root-project/root/pull/595:194,availability,slo,slow,194,"Change Snapshot option from file cache to TTree auto-flush parameter; Please take a look. Although the tests pass, this is not supposed to be merged yet, as I have yet to understand why it's so slow when we pass a positive auto-flush value to snapshot the tree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/595
https://github.com/root-project/root/pull/595:59,modifiability,paramet,parameter,59,"Change Snapshot option from file cache to TTree auto-flush parameter; Please take a look. Although the tests pass, this is not supposed to be merged yet, as I have yet to understand why it's so slow when we pass a positive auto-flush value to snapshot the tree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/595
https://github.com/root-project/root/pull/595:33,performance,cach,cache,33,"Change Snapshot option from file cache to TTree auto-flush parameter; Please take a look. Although the tests pass, this is not supposed to be merged yet, as I have yet to understand why it's so slow when we pass a positive auto-flush value to snapshot the tree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/595
https://github.com/root-project/root/pull/595:194,reliability,slo,slow,194,"Change Snapshot option from file cache to TTree auto-flush parameter; Please take a look. Although the tests pass, this is not supposed to be merged yet, as I have yet to understand why it's so slow when we pass a positive auto-flush value to snapshot the tree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/595
https://github.com/root-project/root/pull/595:103,safety,test,tests,103,"Change Snapshot option from file cache to TTree auto-flush parameter; Please take a look. Although the tests pass, this is not supposed to be merged yet, as I have yet to understand why it's so slow when we pass a positive auto-flush value to snapshot the tree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/595
https://github.com/root-project/root/pull/595:103,testability,test,tests,103,"Change Snapshot option from file cache to TTree auto-flush parameter; Please take a look. Although the tests pass, this is not supposed to be merged yet, as I have yet to understand why it's so slow when we pass a positive auto-flush value to snapshot the tree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/595
https://github.com/root-project/root/pull/595:171,testability,understand,understand,171,"Change Snapshot option from file cache to TTree auto-flush parameter; Please take a look. Although the tests pass, this is not supposed to be merged yet, as I have yet to understand why it's so slow when we pass a positive auto-flush value to snapshot the tree.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/595
https://github.com/root-project/root/pull/596:67,performance,perform,performant,67,gROOTMutex -> RWLock; One pending question (beside whether this is performant enough) is whether to keep the old TRWSpinLock and the new TRWSpinLock (Reentrant) or to have them (as in this MR) the same.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/596
https://github.com/root-project/root/pull/596:67,usability,perform,performant,67,gROOTMutex -> RWLock; One pending question (beside whether this is performant enough) is whether to keep the old TRWSpinLock and the new TRWSpinLock (Reentrant) or to have them (as in this MR) the same.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/596
https://github.com/root-project/root/pull/597:37,energy efficiency,measur,measures,37,Add 1-vs-rest and 1-vs-1 performance measures to TMVA multiclass output; Adds a simple comparison technique for multiclass classifiers. 1-vs-rest will do a binary comparison between given class. considered signal and all others collectively considered. background. 1-vs-1 will do pair-wise binary comparisons. Output is in TMVA::Factory::EvaluateAllMethods,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/597
https://github.com/root-project/root/pull/597:25,performance,perform,performance,25,Add 1-vs-rest and 1-vs-1 performance measures to TMVA multiclass output; Adds a simple comparison technique for multiclass classifiers. 1-vs-rest will do a binary comparison between given class. considered signal and all others collectively considered. background. 1-vs-1 will do pair-wise binary comparisons. Output is in TMVA::Factory::EvaluateAllMethods,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/597
https://github.com/root-project/root/pull/597:206,security,sign,signal,206,Add 1-vs-rest and 1-vs-1 performance measures to TMVA multiclass output; Adds a simple comparison technique for multiclass classifiers. 1-vs-rest will do a binary comparison between given class. considered signal and all others collectively considered. background. 1-vs-1 will do pair-wise binary comparisons. Output is in TMVA::Factory::EvaluateAllMethods,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/597
https://github.com/root-project/root/pull/597:80,testability,simpl,simple,80,Add 1-vs-rest and 1-vs-1 performance measures to TMVA multiclass output; Adds a simple comparison technique for multiclass classifiers. 1-vs-rest will do a binary comparison between given class. considered signal and all others collectively considered. background. 1-vs-1 will do pair-wise binary comparisons. Output is in TMVA::Factory::EvaluateAllMethods,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/597
https://github.com/root-project/root/pull/597:25,usability,perform,performance,25,Add 1-vs-rest and 1-vs-1 performance measures to TMVA multiclass output; Adds a simple comparison technique for multiclass classifiers. 1-vs-rest will do a binary comparison between given class. considered signal and all others collectively considered. background. 1-vs-1 will do pair-wise binary comparisons. Output is in TMVA::Factory::EvaluateAllMethods,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/597
https://github.com/root-project/root/pull/597:80,usability,simpl,simple,80,Add 1-vs-rest and 1-vs-1 performance measures to TMVA multiclass output; Adds a simple comparison technique for multiclass classifiers. 1-vs-rest will do a binary comparison between given class. considered signal and all others collectively considered. background. 1-vs-1 will do pair-wise binary comparisons. Output is in TMVA::Factory::EvaluateAllMethods,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/597
https://github.com/root-project/root/pull/598:126,availability,down,downloads,126,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/598:4,deployability,build,build,4,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/598:67,deployability,updat,updating,67,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/598:88,deployability,version,version,88,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/598:114,deployability,version,version,114,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/598:88,integrability,version,version,88,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/598:114,integrability,version,version,114,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/598:171,integrability,repositor,repository,171,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/598:171,interoperability,repositor,repository,171,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/598:88,modifiability,version,version,88,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/598:114,modifiability,version,version,114,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/598:162,modifiability,pac,packages,162,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/598:67,safety,updat,updating,67,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/598:227,safety,avoid,avoid,227,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/598:67,security,updat,updating,67,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/598:274,usability,support,support,274,"Fix build when builtin_veccore=ON; I realized this was broken when updating the VecCore version to 0.4.1. The new version now downloads Vc and UME::SIMD from LCG packages repository, and uses http instead of https, in order to avoid problems in systems in which curl has no support for https. I also took the oportunity to fix a few warnings due to wrong indentation of the code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/598
https://github.com/root-project/root/pull/599:43,deployability,build,build,43,"Utilize git submodules for `roottest`; The build system appears to assume that `roottest` is, by default, in a subdirectory of the source directory named `roottest`. I'd love to make it easier to include `roottest` in builds to encourage developers to utilize it: this seems like a great use of `git submodule`! Here's how a user would clone the `root` and `roottest` repos:. ```. git clone https://github.com/root-project/root.git. cd root. git submodule init. git submodule update. ```. One would then do the normal build with `cmake`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/599
https://github.com/root-project/root/pull/599:218,deployability,build,builds,218,"Utilize git submodules for `roottest`; The build system appears to assume that `roottest` is, by default, in a subdirectory of the source directory named `roottest`. I'd love to make it easier to include `roottest` in builds to encourage developers to utilize it: this seems like a great use of `git submodule`! Here's how a user would clone the `root` and `roottest` repos:. ```. git clone https://github.com/root-project/root.git. cd root. git submodule init. git submodule update. ```. One would then do the normal build with `cmake`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/599
https://github.com/root-project/root/pull/599:476,deployability,updat,update,476,"Utilize git submodules for `roottest`; The build system appears to assume that `roottest` is, by default, in a subdirectory of the source directory named `roottest`. I'd love to make it easier to include `roottest` in builds to encourage developers to utilize it: this seems like a great use of `git submodule`! Here's how a user would clone the `root` and `roottest` repos:. ```. git clone https://github.com/root-project/root.git. cd root. git submodule init. git submodule update. ```. One would then do the normal build with `cmake`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/599
https://github.com/root-project/root/pull/599:518,deployability,build,build,518,"Utilize git submodules for `roottest`; The build system appears to assume that `roottest` is, by default, in a subdirectory of the source directory named `roottest`. I'd love to make it easier to include `roottest` in builds to encourage developers to utilize it: this seems like a great use of `git submodule`! Here's how a user would clone the `root` and `roottest` repos:. ```. git clone https://github.com/root-project/root.git. cd root. git submodule init. git submodule update. ```. One would then do the normal build with `cmake`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/599
https://github.com/root-project/root/pull/599:12,integrability,sub,submodules,12,"Utilize git submodules for `roottest`; The build system appears to assume that `roottest` is, by default, in a subdirectory of the source directory named `roottest`. I'd love to make it easier to include `roottest` in builds to encourage developers to utilize it: this seems like a great use of `git submodule`! Here's how a user would clone the `root` and `roottest` repos:. ```. git clone https://github.com/root-project/root.git. cd root. git submodule init. git submodule update. ```. One would then do the normal build with `cmake`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/599
https://github.com/root-project/root/pull/599:111,integrability,sub,subdirectory,111,"Utilize git submodules for `roottest`; The build system appears to assume that `roottest` is, by default, in a subdirectory of the source directory named `roottest`. I'd love to make it easier to include `roottest` in builds to encourage developers to utilize it: this seems like a great use of `git submodule`! Here's how a user would clone the `root` and `roottest` repos:. ```. git clone https://github.com/root-project/root.git. cd root. git submodule init. git submodule update. ```. One would then do the normal build with `cmake`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/599
https://github.com/root-project/root/pull/599:300,integrability,sub,submodule,300,"Utilize git submodules for `roottest`; The build system appears to assume that `roottest` is, by default, in a subdirectory of the source directory named `roottest`. I'd love to make it easier to include `roottest` in builds to encourage developers to utilize it: this seems like a great use of `git submodule`! Here's how a user would clone the `root` and `roottest` repos:. ```. git clone https://github.com/root-project/root.git. cd root. git submodule init. git submodule update. ```. One would then do the normal build with `cmake`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/599
https://github.com/root-project/root/pull/599:446,integrability,sub,submodule,446,"Utilize git submodules for `roottest`; The build system appears to assume that `roottest` is, by default, in a subdirectory of the source directory named `roottest`. I'd love to make it easier to include `roottest` in builds to encourage developers to utilize it: this seems like a great use of `git submodule`! Here's how a user would clone the `root` and `roottest` repos:. ```. git clone https://github.com/root-project/root.git. cd root. git submodule init. git submodule update. ```. One would then do the normal build with `cmake`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/599
https://github.com/root-project/root/pull/599:466,integrability,sub,submodule,466,"Utilize git submodules for `roottest`; The build system appears to assume that `roottest` is, by default, in a subdirectory of the source directory named `roottest`. I'd love to make it easier to include `roottest` in builds to encourage developers to utilize it: this seems like a great use of `git submodule`! Here's how a user would clone the `root` and `roottest` repos:. ```. git clone https://github.com/root-project/root.git. cd root. git submodule init. git submodule update. ```. One would then do the normal build with `cmake`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/599
https://github.com/root-project/root/pull/599:476,safety,updat,update,476,"Utilize git submodules for `roottest`; The build system appears to assume that `roottest` is, by default, in a subdirectory of the source directory named `roottest`. I'd love to make it easier to include `roottest` in builds to encourage developers to utilize it: this seems like a great use of `git submodule`! Here's how a user would clone the `root` and `roottest` repos:. ```. git clone https://github.com/root-project/root.git. cd root. git submodule init. git submodule update. ```. One would then do the normal build with `cmake`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/599
https://github.com/root-project/root/pull/599:476,security,updat,update,476,"Utilize git submodules for `roottest`; The build system appears to assume that `roottest` is, by default, in a subdirectory of the source directory named `roottest`. I'd love to make it easier to include `roottest` in builds to encourage developers to utilize it: this seems like a great use of `git submodule`! Here's how a user would clone the `root` and `roottest` repos:. ```. git clone https://github.com/root-project/root.git. cd root. git submodule init. git submodule update. ```. One would then do the normal build with `cmake`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/599
https://github.com/root-project/root/pull/599:325,usability,user,user,325,"Utilize git submodules for `roottest`; The build system appears to assume that `roottest` is, by default, in a subdirectory of the source directory named `roottest`. I'd love to make it easier to include `roottest` in builds to encourage developers to utilize it: this seems like a great use of `git submodule`! Here's how a user would clone the `root` and `roottest` repos:. ```. git clone https://github.com/root-project/root.git. cd root. git submodule init. git submodule update. ```. One would then do the normal build with `cmake`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/599
https://github.com/root-project/root/pull/600:58,interoperability,Architectur,Architecture,58,Fix DNN in tutorial examples; Removes the DNN option with Architecture=Standard from ordinary. and multiclass settings. Smaller fixups for output and homogenisation of DNN options.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/600
https://github.com/root-project/root/pull/600:71,interoperability,Standard,Standard,71,Fix DNN in tutorial examples; Removes the DNN option with Architecture=Standard from ordinary. and multiclass settings. Smaller fixups for output and homogenisation of DNN options.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/600
https://github.com/root-project/root/pull/601:41,safety,input,input,41,[TDF] Fix Snapshot not handling multiple input files correctly;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/601
https://github.com/root-project/root/pull/601:41,usability,input,input,41,[TDF] Fix Snapshot not handling multiple input files correctly;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/601
https://github.com/root-project/root/pull/602:17,modifiability,paramet,parameter,17,[TDF] Fix unused parameter warning on mac;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/602
https://github.com/root-project/root/pull/603:8,deployability,configurat,configuration,8,Improve configuration of clang-tidy.; Disable analyzer alpha checks yielding a few false positives. Enable all other. stable static analysis checks by default. Add experimental clang-tidy modernization checks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/603
https://github.com/root-project/root/pull/603:8,integrability,configur,configuration,8,Improve configuration of clang-tidy.; Disable analyzer alpha checks yielding a few false positives. Enable all other. stable static analysis checks by default. Add experimental clang-tidy modernization checks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/603
https://github.com/root-project/root/pull/603:8,modifiability,configur,configuration,8,Improve configuration of clang-tidy.; Disable analyzer alpha checks yielding a few false positives. Enable all other. stable static analysis checks by default. Add experimental clang-tidy modernization checks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/603
https://github.com/root-project/root/pull/603:8,security,configur,configuration,8,Improve configuration of clang-tidy.; Disable analyzer alpha checks yielding a few false positives. Enable all other. stable static analysis checks by default. Add experimental clang-tidy modernization checks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/603
https://github.com/root-project/root/pull/605:100,availability,failur,failure,100,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:304,availability,failur,failure,304,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:100,deployability,fail,failure,100,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:159,deployability,build,build,159,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:304,deployability,fail,failure,304,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:12,interoperability,Standard,Standard,12,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:186,interoperability,architectur,architecture,186,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:199,interoperability,Standard,Standard,199,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:37,modifiability,maintain,maintained,37,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:100,performance,failur,failure,100,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:304,performance,failur,failure,304,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:100,reliability,fail,failure,100,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:304,reliability,fail,failure,304,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:37,safety,maintain,maintained,37,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:129,safety,test,testDetails,129,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:145,safety,test,test,145,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:288,safety,test,test,288,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:129,testability,test,testDetails,129,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:145,testability,test,test,145,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/605:288,testability,test,test,288,"Disable DNN Standard since it is not maintained any more; In response to @dpiparo pointing out this failure http://cdash.cern.ch/testDetails.php?test=25539356&build=359962. The DNN with architecture=Standard is to phased out. In this case it would make sense to disable the corresponding test, since the failure is not to be fixed. If this is acceptable, feel free to merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/605
https://github.com/root-project/root/pull/607:20,deployability,build,builds,20,Fixed typo for i686-builds; Solves this failing build: http://cdash.cern.ch/viewBuildError.php?buildid=361557,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/607
https://github.com/root-project/root/pull/607:40,deployability,fail,failing,40,Fixed typo for i686-builds; Solves this failing build: http://cdash.cern.ch/viewBuildError.php?buildid=361557,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/607
https://github.com/root-project/root/pull/607:48,deployability,build,build,48,Fixed typo for i686-builds; Solves this failing build: http://cdash.cern.ch/viewBuildError.php?buildid=361557,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/607
https://github.com/root-project/root/pull/607:95,deployability,build,buildid,95,Fixed typo for i686-builds; Solves this failing build: http://cdash.cern.ch/viewBuildError.php?buildid=361557,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/607
https://github.com/root-project/root/pull/607:40,reliability,fail,failing,40,Fixed typo for i686-builds; Solves this failing build: http://cdash.cern.ch/viewBuildError.php?buildid=361557,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/607
https://github.com/root-project/root/pull/608:0,deployability,Updat,Update,0,Update Vc version to 1.3.2 and suppress warnings by including it as a system header;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/608
https://github.com/root-project/root/pull/608:10,deployability,version,version,10,Update Vc version to 1.3.2 and suppress warnings by including it as a system header;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/608
https://github.com/root-project/root/pull/608:10,integrability,version,version,10,Update Vc version to 1.3.2 and suppress warnings by including it as a system header;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/608
https://github.com/root-project/root/pull/608:10,modifiability,version,version,10,Update Vc version to 1.3.2 and suppress warnings by including it as a system header;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/608
https://github.com/root-project/root/pull/608:0,safety,Updat,Update,0,Update Vc version to 1.3.2 and suppress warnings by including it as a system header;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/608
https://github.com/root-project/root/pull/608:0,security,Updat,Update,0,Update Vc version to 1.3.2 and suppress warnings by including it as a system header;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/608
https://github.com/root-project/root/pull/609:27,deployability,build,build,27,"Supress R warnings in ROOT build; Warnings shown, for example, at the link below:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=361790",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/609
https://github.com/root-project/root/pull/609:130,deployability,build,buildid,130,"Supress R warnings in ROOT build; Warnings shown, for example, at the link below:. http://cdash.cern.ch/viewBuildError.php?type=1&buildid=361790",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/609
https://github.com/root-project/root/pull/610:212,deployability,fail,fails,212,"TMVA various fixes; Multiclass: Better support in Factory methods. Disable costly effS*purS calc. Classification: Textual output now considers event weights when calc ROC curve. DNN: Deprecate arch=STANDARD, now fails earlier when using CPU/GPU on unsupported build. Add warning about event weights not being considered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/610
https://github.com/root-project/root/pull/610:260,deployability,build,build,260,"TMVA various fixes; Multiclass: Better support in Factory methods. Disable costly effS*purS calc. Classification: Textual output now considers event weights when calc ROC curve. DNN: Deprecate arch=STANDARD, now fails earlier when using CPU/GPU on unsupported build. Add warning about event weights not being considered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/610
https://github.com/root-project/root/pull/610:237,energy efficiency,CPU,CPU,237,"TMVA various fixes; Multiclass: Better support in Factory methods. Disable costly effS*purS calc. Classification: Textual output now considers event weights when calc ROC curve. DNN: Deprecate arch=STANDARD, now fails earlier when using CPU/GPU on unsupported build. Add warning about event weights not being considered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/610
https://github.com/root-project/root/pull/610:241,energy efficiency,GPU,GPU,241,"TMVA various fixes; Multiclass: Better support in Factory methods. Disable costly effS*purS calc. Classification: Textual output now considers event weights when calc ROC curve. DNN: Deprecate arch=STANDARD, now fails earlier when using CPU/GPU on unsupported build. Add warning about event weights not being considered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/610
https://github.com/root-project/root/pull/610:143,integrability,event,event,143,"TMVA various fixes; Multiclass: Better support in Factory methods. Disable costly effS*purS calc. Classification: Textual output now considers event weights when calc ROC curve. DNN: Deprecate arch=STANDARD, now fails earlier when using CPU/GPU on unsupported build. Add warning about event weights not being considered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/610
https://github.com/root-project/root/pull/610:285,integrability,event,event,285,"TMVA various fixes; Multiclass: Better support in Factory methods. Disable costly effS*purS calc. Classification: Textual output now considers event weights when calc ROC curve. DNN: Deprecate arch=STANDARD, now fails earlier when using CPU/GPU on unsupported build. Add warning about event weights not being considered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/610
https://github.com/root-project/root/pull/610:198,interoperability,STANDARD,STANDARD,198,"TMVA various fixes; Multiclass: Better support in Factory methods. Disable costly effS*purS calc. Classification: Textual output now considers event weights when calc ROC curve. DNN: Deprecate arch=STANDARD, now fails earlier when using CPU/GPU on unsupported build. Add warning about event weights not being considered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/610
https://github.com/root-project/root/pull/610:237,performance,CPU,CPU,237,"TMVA various fixes; Multiclass: Better support in Factory methods. Disable costly effS*purS calc. Classification: Textual output now considers event weights when calc ROC curve. DNN: Deprecate arch=STANDARD, now fails earlier when using CPU/GPU on unsupported build. Add warning about event weights not being considered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/610
https://github.com/root-project/root/pull/610:241,performance,GPU,GPU,241,"TMVA various fixes; Multiclass: Better support in Factory methods. Disable costly effS*purS calc. Classification: Textual output now considers event weights when calc ROC curve. DNN: Deprecate arch=STANDARD, now fails earlier when using CPU/GPU on unsupported build. Add warning about event weights not being considered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/610
https://github.com/root-project/root/pull/610:212,reliability,fail,fails,212,"TMVA various fixes; Multiclass: Better support in Factory methods. Disable costly effS*purS calc. Classification: Textual output now considers event weights when calc ROC curve. DNN: Deprecate arch=STANDARD, now fails earlier when using CPU/GPU on unsupported build. Add warning about event weights not being considered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/610
https://github.com/root-project/root/pull/610:39,usability,support,support,39,"TMVA various fixes; Multiclass: Better support in Factory methods. Disable costly effS*purS calc. Classification: Textual output now considers event weights when calc ROC curve. DNN: Deprecate arch=STANDARD, now fails earlier when using CPU/GPU on unsupported build. Add warning about event weights not being considered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/610
https://github.com/root-project/root/pull/611:101,deployability,contain,contain,101,"Resolve warnings reported by -Wnon-virtual-dtor; If a class/struct has virtual method it should also contain a virtual. dtor. This is important if one uses allocator (tcmalloc, jemalloc) with. C++14 sized deallocation. It's needed to provide a proper object size. to deallocation function. We found that jemalloc (dev branch) tends to deadlock if wrong object. size is provided to deallocation function. Patch is just as precaution. Signed-off-by: David Abdurachmanov <david.abdurachmanov@gmail.com>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/611
https://github.com/root-project/root/pull/611:404,deployability,Patch,Patch,404,"Resolve warnings reported by -Wnon-virtual-dtor; If a class/struct has virtual method it should also contain a virtual. dtor. This is important if one uses allocator (tcmalloc, jemalloc) with. C++14 sized deallocation. It's needed to provide a proper object size. to deallocation function. We found that jemalloc (dev branch) tends to deadlock if wrong object. size is provided to deallocation function. Patch is just as precaution. Signed-off-by: David Abdurachmanov <david.abdurachmanov@gmail.com>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/611
https://github.com/root-project/root/pull/611:156,energy efficiency,alloc,allocator,156,"Resolve warnings reported by -Wnon-virtual-dtor; If a class/struct has virtual method it should also contain a virtual. dtor. This is important if one uses allocator (tcmalloc, jemalloc) with. C++14 sized deallocation. It's needed to provide a proper object size. to deallocation function. We found that jemalloc (dev branch) tends to deadlock if wrong object. size is provided to deallocation function. Patch is just as precaution. Signed-off-by: David Abdurachmanov <david.abdurachmanov@gmail.com>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/611
https://github.com/root-project/root/pull/611:335,performance,deadlock,deadlock,335,"Resolve warnings reported by -Wnon-virtual-dtor; If a class/struct has virtual method it should also contain a virtual. dtor. This is important if one uses allocator (tcmalloc, jemalloc) with. C++14 sized deallocation. It's needed to provide a proper object size. to deallocation function. We found that jemalloc (dev branch) tends to deadlock if wrong object. size is provided to deallocation function. Patch is just as precaution. Signed-off-by: David Abdurachmanov <david.abdurachmanov@gmail.com>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/611
https://github.com/root-project/root/pull/611:404,safety,Patch,Patch,404,"Resolve warnings reported by -Wnon-virtual-dtor; If a class/struct has virtual method it should also contain a virtual. dtor. This is important if one uses allocator (tcmalloc, jemalloc) with. C++14 sized deallocation. It's needed to provide a proper object size. to deallocation function. We found that jemalloc (dev branch) tends to deadlock if wrong object. size is provided to deallocation function. Patch is just as precaution. Signed-off-by: David Abdurachmanov <david.abdurachmanov@gmail.com>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/611
https://github.com/root-project/root/pull/611:404,security,Patch,Patch,404,"Resolve warnings reported by -Wnon-virtual-dtor; If a class/struct has virtual method it should also contain a virtual. dtor. This is important if one uses allocator (tcmalloc, jemalloc) with. C++14 sized deallocation. It's needed to provide a proper object size. to deallocation function. We found that jemalloc (dev branch) tends to deadlock if wrong object. size is provided to deallocation function. Patch is just as precaution. Signed-off-by: David Abdurachmanov <david.abdurachmanov@gmail.com>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/611
https://github.com/root-project/root/pull/611:433,security,Sign,Signed-off-by,433,"Resolve warnings reported by -Wnon-virtual-dtor; If a class/struct has virtual method it should also contain a virtual. dtor. This is important if one uses allocator (tcmalloc, jemalloc) with. C++14 sized deallocation. It's needed to provide a proper object size. to deallocation function. We found that jemalloc (dev branch) tends to deadlock if wrong object. size is provided to deallocation function. Patch is just as precaution. Signed-off-by: David Abdurachmanov <david.abdurachmanov@gmail.com>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/611
https://github.com/root-project/root/pull/612:0,deployability,Updat,Update,0,Update release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/612
https://github.com/root-project/root/pull/612:7,deployability,releas,release,7,Update release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/612
https://github.com/root-project/root/pull/612:0,safety,Updat,Update,0,Update release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/612
https://github.com/root-project/root/pull/612:0,security,Updat,Update,0,Update release notes;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/612
https://github.com/root-project/root/pull/614:449,availability,operat,operator,449,"Improve lookup when we call a function from TClingCallFunc.; It turns out that just calling every function like this. ```. functionname[<template args>](args). ```. doesn't always result in correct code. In a concrete example, PyROOT is currently not able to generate a. valid wrapper for comparing libc++ std::vector<int>::iterator objects. The wrapper becomes invalid by over-specifying the template arguments. and trying to call:. ```. std::__1::operator==<int *, int *>(a, b). ```. Now we first try to cast such functions to the correct type before. we start doing a lookup, e.g. above example would be:. ```. ((bool (&)(const std::__wrap_iter<int*>&,const std::__wrap_iter<int*>&))std::__1::operator==<int*, int*>)(i,i)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/614
https://github.com/root-project/root/pull/614:696,availability,operat,operator,696,"Improve lookup when we call a function from TClingCallFunc.; It turns out that just calling every function like this. ```. functionname[<template args>](args). ```. doesn't always result in correct code. In a concrete example, PyROOT is currently not able to generate a. valid wrapper for comparing libc++ std::vector<int>::iterator objects. The wrapper becomes invalid by over-specifying the template arguments. and trying to call:. ```. std::__1::operator==<int *, int *>(a, b). ```. Now we first try to cast such functions to the correct type before. we start doing a lookup, e.g. above example would be:. ```. ((bool (&)(const std::__wrap_iter<int*>&,const std::__wrap_iter<int*>&))std::__1::operator==<int*, int*>)(i,i)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/614
https://github.com/root-project/root/pull/614:237,energy efficiency,current,currently,237,"Improve lookup when we call a function from TClingCallFunc.; It turns out that just calling every function like this. ```. functionname[<template args>](args). ```. doesn't always result in correct code. In a concrete example, PyROOT is currently not able to generate a. valid wrapper for comparing libc++ std::vector<int>::iterator objects. The wrapper becomes invalid by over-specifying the template arguments. and trying to call:. ```. std::__1::operator==<int *, int *>(a, b). ```. Now we first try to cast such functions to the correct type before. we start doing a lookup, e.g. above example would be:. ```. ((bool (&)(const std::__wrap_iter<int*>&,const std::__wrap_iter<int*>&))std::__1::operator==<int*, int*>)(i,i)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/614
https://github.com/root-project/root/pull/614:277,integrability,wrap,wrapper,277,"Improve lookup when we call a function from TClingCallFunc.; It turns out that just calling every function like this. ```. functionname[<template args>](args). ```. doesn't always result in correct code. In a concrete example, PyROOT is currently not able to generate a. valid wrapper for comparing libc++ std::vector<int>::iterator objects. The wrapper becomes invalid by over-specifying the template arguments. and trying to call:. ```. std::__1::operator==<int *, int *>(a, b). ```. Now we first try to cast such functions to the correct type before. we start doing a lookup, e.g. above example would be:. ```. ((bool (&)(const std::__wrap_iter<int*>&,const std::__wrap_iter<int*>&))std::__1::operator==<int*, int*>)(i,i)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/614
https://github.com/root-project/root/pull/614:346,integrability,wrap,wrapper,346,"Improve lookup when we call a function from TClingCallFunc.; It turns out that just calling every function like this. ```. functionname[<template args>](args). ```. doesn't always result in correct code. In a concrete example, PyROOT is currently not able to generate a. valid wrapper for comparing libc++ std::vector<int>::iterator objects. The wrapper becomes invalid by over-specifying the template arguments. and trying to call:. ```. std::__1::operator==<int *, int *>(a, b). ```. Now we first try to cast such functions to the correct type before. we start doing a lookup, e.g. above example would be:. ```. ((bool (&)(const std::__wrap_iter<int*>&,const std::__wrap_iter<int*>&))std::__1::operator==<int*, int*>)(i,i)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/614
https://github.com/root-project/root/pull/614:277,interoperability,wrapper,wrapper,277,"Improve lookup when we call a function from TClingCallFunc.; It turns out that just calling every function like this. ```. functionname[<template args>](args). ```. doesn't always result in correct code. In a concrete example, PyROOT is currently not able to generate a. valid wrapper for comparing libc++ std::vector<int>::iterator objects. The wrapper becomes invalid by over-specifying the template arguments. and trying to call:. ```. std::__1::operator==<int *, int *>(a, b). ```. Now we first try to cast such functions to the correct type before. we start doing a lookup, e.g. above example would be:. ```. ((bool (&)(const std::__wrap_iter<int*>&,const std::__wrap_iter<int*>&))std::__1::operator==<int*, int*>)(i,i)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/614
https://github.com/root-project/root/pull/614:346,interoperability,wrapper,wrapper,346,"Improve lookup when we call a function from TClingCallFunc.; It turns out that just calling every function like this. ```. functionname[<template args>](args). ```. doesn't always result in correct code. In a concrete example, PyROOT is currently not able to generate a. valid wrapper for comparing libc++ std::vector<int>::iterator objects. The wrapper becomes invalid by over-specifying the template arguments. and trying to call:. ```. std::__1::operator==<int *, int *>(a, b). ```. Now we first try to cast such functions to the correct type before. we start doing a lookup, e.g. above example would be:. ```. ((bool (&)(const std::__wrap_iter<int*>&,const std::__wrap_iter<int*>&))std::__1::operator==<int*, int*>)(i,i)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/614
https://github.com/root-project/root/pull/614:378,interoperability,specif,specifying,378,"Improve lookup when we call a function from TClingCallFunc.; It turns out that just calling every function like this. ```. functionname[<template args>](args). ```. doesn't always result in correct code. In a concrete example, PyROOT is currently not able to generate a. valid wrapper for comparing libc++ std::vector<int>::iterator objects. The wrapper becomes invalid by over-specifying the template arguments. and trying to call:. ```. std::__1::operator==<int *, int *>(a, b). ```. Now we first try to cast such functions to the correct type before. we start doing a lookup, e.g. above example would be:. ```. ((bool (&)(const std::__wrap_iter<int*>&,const std::__wrap_iter<int*>&))std::__1::operator==<int*, int*>)(i,i)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/614
https://github.com/root-project/root/pull/614:165,reliability,doe,doesn,165,"Improve lookup when we call a function from TClingCallFunc.; It turns out that just calling every function like this. ```. functionname[<template args>](args). ```. doesn't always result in correct code. In a concrete example, PyROOT is currently not able to generate a. valid wrapper for comparing libc++ std::vector<int>::iterator objects. The wrapper becomes invalid by over-specifying the template arguments. and trying to call:. ```. std::__1::operator==<int *, int *>(a, b). ```. Now we first try to cast such functions to the correct type before. we start doing a lookup, e.g. above example would be:. ```. ((bool (&)(const std::__wrap_iter<int*>&,const std::__wrap_iter<int*>&))std::__1::operator==<int*, int*>)(i,i)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/614
https://github.com/root-project/root/pull/614:271,safety,valid,valid,271,"Improve lookup when we call a function from TClingCallFunc.; It turns out that just calling every function like this. ```. functionname[<template args>](args). ```. doesn't always result in correct code. In a concrete example, PyROOT is currently not able to generate a. valid wrapper for comparing libc++ std::vector<int>::iterator objects. The wrapper becomes invalid by over-specifying the template arguments. and trying to call:. ```. std::__1::operator==<int *, int *>(a, b). ```. Now we first try to cast such functions to the correct type before. we start doing a lookup, e.g. above example would be:. ```. ((bool (&)(const std::__wrap_iter<int*>&,const std::__wrap_iter<int*>&))std::__1::operator==<int*, int*>)(i,i)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/614
https://github.com/root-project/root/pull/615:30,deployability,contain,containers,30,JSON: Special handling of STL containers with len=1; It solves problem I recognize for the first time with ROOT7 webgui. It was wrong representation for container like: std::vector<UserClass>. Patch for roottest will follow very soon.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/615
https://github.com/root-project/root/pull/615:153,deployability,contain,container,153,JSON: Special handling of STL containers with len=1; It solves problem I recognize for the first time with ROOT7 webgui. It was wrong representation for container like: std::vector<UserClass>. Patch for roottest will follow very soon.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/615
https://github.com/root-project/root/pull/615:193,deployability,Patch,Patch,193,JSON: Special handling of STL containers with len=1; It solves problem I recognize for the first time with ROOT7 webgui. It was wrong representation for container like: std::vector<UserClass>. Patch for roottest will follow very soon.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/615
https://github.com/root-project/root/pull/615:97,performance,time,time,97,JSON: Special handling of STL containers with len=1; It solves problem I recognize for the first time with ROOT7 webgui. It was wrong representation for container like: std::vector<UserClass>. Patch for roottest will follow very soon.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/615
https://github.com/root-project/root/pull/615:193,safety,Patch,Patch,193,JSON: Special handling of STL containers with len=1; It solves problem I recognize for the first time with ROOT7 webgui. It was wrong representation for container like: std::vector<UserClass>. Patch for roottest will follow very soon.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/615
https://github.com/root-project/root/pull/615:193,security,Patch,Patch,193,JSON: Special handling of STL containers with len=1; It solves problem I recognize for the first time with ROOT7 webgui. It was wrong representation for container like: std::vector<UserClass>. Patch for roottest will follow very soon.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/615
https://github.com/root-project/root/pull/615:181,usability,User,UserClass,181,JSON: Special handling of STL containers with len=1; It solves problem I recognize for the first time with ROOT7 webgui. It was wrong representation for container like: std::vector<UserClass>. Patch for roottest will follow very soon.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/615
https://github.com/root-project/root/pull/616:543,deployability,updat,updated,543,"Allow passing arguments as options after the -- option; `root macro.C -- arg1 arg2 arg3 ...` will behave as `root macro.C(arg1,arg2,arg3,...)`. Options won't be attached to:. - expressions — `root -e expression`;. - macros, passed with options (with `(` in them, to be precise) — `root macro.C(arg1, arg2)`;. - `.root` files;. If there are several macros without options, the arguments will be passed to the last one (with warning). If there are no macros, the options after the `--` will be ignored (with warning). No options description was updated yet. Initially my idea was to allow to turn macro function parameters into named options, but @Axel-Naumann asked to leave them positional. But I'm still planning to introduce named arguments/options. Positional arguments as options is not a great improvement over the current way to pass arguments to macros.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/616
https://github.com/root-project/root/pull/616:820,energy efficiency,current,current,820,"Allow passing arguments as options after the -- option; `root macro.C -- arg1 arg2 arg3 ...` will behave as `root macro.C(arg1,arg2,arg3,...)`. Options won't be attached to:. - expressions — `root -e expression`;. - macros, passed with options (with `(` in them, to be precise) — `root macro.C(arg1, arg2)`;. - `.root` files;. If there are several macros without options, the arguments will be passed to the last one (with warning). If there are no macros, the options after the `--` will be ignored (with warning). No options description was updated yet. Initially my idea was to allow to turn macro function parameters into named options, but @Axel-Naumann asked to leave them positional. But I'm still planning to introduce named arguments/options. Positional arguments as options is not a great improvement over the current way to pass arguments to macros.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/616
https://github.com/root-project/root/pull/616:610,modifiability,paramet,parameters,610,"Allow passing arguments as options after the -- option; `root macro.C -- arg1 arg2 arg3 ...` will behave as `root macro.C(arg1,arg2,arg3,...)`. Options won't be attached to:. - expressions — `root -e expression`;. - macros, passed with options (with `(` in them, to be precise) — `root macro.C(arg1, arg2)`;. - `.root` files;. If there are several macros without options, the arguments will be passed to the last one (with warning). If there are no macros, the options after the `--` will be ignored (with warning). No options description was updated yet. Initially my idea was to allow to turn macro function parameters into named options, but @Axel-Naumann asked to leave them positional. But I'm still planning to introduce named arguments/options. Positional arguments as options is not a great improvement over the current way to pass arguments to macros.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/616
https://github.com/root-project/root/pull/616:543,safety,updat,updated,543,"Allow passing arguments as options after the -- option; `root macro.C -- arg1 arg2 arg3 ...` will behave as `root macro.C(arg1,arg2,arg3,...)`. Options won't be attached to:. - expressions — `root -e expression`;. - macros, passed with options (with `(` in them, to be precise) — `root macro.C(arg1, arg2)`;. - `.root` files;. If there are several macros without options, the arguments will be passed to the last one (with warning). If there are no macros, the options after the `--` will be ignored (with warning). No options description was updated yet. Initially my idea was to allow to turn macro function parameters into named options, but @Axel-Naumann asked to leave them positional. But I'm still planning to introduce named arguments/options. Positional arguments as options is not a great improvement over the current way to pass arguments to macros.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/616
https://github.com/root-project/root/pull/616:543,security,updat,updated,543,"Allow passing arguments as options after the -- option; `root macro.C -- arg1 arg2 arg3 ...` will behave as `root macro.C(arg1,arg2,arg3,...)`. Options won't be attached to:. - expressions — `root -e expression`;. - macros, passed with options (with `(` in them, to be precise) — `root macro.C(arg1, arg2)`;. - `.root` files;. If there are several macros without options, the arguments will be passed to the last one (with warning). If there are no macros, the options after the `--` will be ignored (with warning). No options description was updated yet. Initially my idea was to allow to turn macro function parameters into named options, but @Axel-Naumann asked to leave them positional. But I'm still planning to introduce named arguments/options. Positional arguments as options is not a great improvement over the current way to pass arguments to macros.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/616
https://github.com/root-project/root/pull/616:705,testability,plan,planning,705,"Allow passing arguments as options after the -- option; `root macro.C -- arg1 arg2 arg3 ...` will behave as `root macro.C(arg1,arg2,arg3,...)`. Options won't be attached to:. - expressions — `root -e expression`;. - macros, passed with options (with `(` in them, to be precise) — `root macro.C(arg1, arg2)`;. - `.root` files;. If there are several macros without options, the arguments will be passed to the last one (with warning). If there are no macros, the options after the `--` will be ignored (with warning). No options description was updated yet. Initially my idea was to allow to turn macro function parameters into named options, but @Axel-Naumann asked to leave them positional. But I'm still planning to introduce named arguments/options. Positional arguments as options is not a great improvement over the current way to pass arguments to macros.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/616
https://github.com/root-project/root/pull/617:0,energy efficiency,Reduc,Reduce,0,Reduce severity warning for DNN with weights.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/617
https://github.com/root-project/root/pull/618:111,deployability,build,buildid,111,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/618:151,deployability,depend,dependencies,151,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/618:197,deployability,Build,Building,197,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/618:151,integrability,depend,dependencies,151,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/618:19,modifiability,variab,variable,19,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/618:151,modifiability,depend,dependencies,151,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/618:151,safety,depend,dependencies,151,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/618:174,safety,test,testRootFinder,174,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/618:231,safety,test,test,231,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/618:247,safety,test,testRootFinder,247,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/618:266,safety,test,testRootFinder,266,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/618:151,testability,depend,dependencies,151,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/618:174,testability,test,testRootFinder,174,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/618:231,testability,test,test,231,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/618:247,testability,test,testRootFinder,247,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/618:266,testability,test,testRootFinder,266,"[GL2PS] Fix unused variable warning and use nullptr; Fix [this](http://cdash.cern.ch/viewBuildError.php?type=1&buildid=362417) warning:. ```. Scanning dependencies of target testRootFinder. [ 96%] Building CXX object math/mathcore/test/CMakeFiles/testRootFinder.dir/testRootFinder.cxx.o. /.../root/graf3d/gl/src/gl2ps.cxx: In function ‘void gl2psBuildBspTree(GL2PSbsptree*, GL2PSlist*)’:. /.../root/graf3d/gl/src/gl2ps.cxx:1540:19: warning: ‘prim’ may be used uninitialized in this function [-Wmaybe-uninitialized]. GL2PSprimitive *prim, *frontprim = NULL, *backprim = NULL;. ^~~~. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/618
https://github.com/root-project/root/pull/620:61,deployability,upgrad,upgrade,61,It seems that cmake is smart enough finding cling.; The llvm upgrade broke users builds because it double finds the llvm external. project cling. Remove the overspecification. Note that if there is still an issue with the incrementals one needs to delete. CMakeCache.txt file in the main directory.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/620
https://github.com/root-project/root/pull/620:81,deployability,build,builds,81,It seems that cmake is smart enough finding cling.; The llvm upgrade broke users builds because it double finds the llvm external. project cling. Remove the overspecification. Note that if there is still an issue with the incrementals one needs to delete. CMakeCache.txt file in the main directory.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/620
https://github.com/root-project/root/pull/620:61,modifiability,upgrad,upgrade,61,It seems that cmake is smart enough finding cling.; The llvm upgrade broke users builds because it double finds the llvm external. project cling. Remove the overspecification. Note that if there is still an issue with the incrementals one needs to delete. CMakeCache.txt file in the main directory.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/620
https://github.com/root-project/root/pull/620:75,usability,user,users,75,It seems that cmake is smart enough finding cling.; The llvm upgrade broke users builds because it double finds the llvm external. project cling. Remove the overspecification. Note that if there is still an issue with the incrementals one needs to delete. CMakeCache.txt file in the main directory.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/620
https://github.com/root-project/root/pull/622:104,deployability,Updat,Update,104,Extend TCanvasImp interface; - let create TVirtualPadPainter via the TCanvasImp. - handling of TCanvas::Update() can be perfromed in TCanvasImp,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/622
https://github.com/root-project/root/pull/622:18,integrability,interfac,interface,18,Extend TCanvasImp interface; - let create TVirtualPadPainter via the TCanvasImp. - handling of TCanvas::Update() can be perfromed in TCanvasImp,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/622
https://github.com/root-project/root/pull/622:18,interoperability,interfac,interface,18,Extend TCanvasImp interface; - let create TVirtualPadPainter via the TCanvasImp. - handling of TCanvas::Update() can be perfromed in TCanvasImp,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/622
https://github.com/root-project/root/pull/622:0,modifiability,Exten,Extend,0,Extend TCanvasImp interface; - let create TVirtualPadPainter via the TCanvasImp. - handling of TCanvas::Update() can be perfromed in TCanvasImp,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/622
https://github.com/root-project/root/pull/622:18,modifiability,interfac,interface,18,Extend TCanvasImp interface; - let create TVirtualPadPainter via the TCanvasImp. - handling of TCanvas::Update() can be perfromed in TCanvasImp,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/622
https://github.com/root-project/root/pull/622:104,safety,Updat,Update,104,Extend TCanvasImp interface; - let create TVirtualPadPainter via the TCanvasImp. - handling of TCanvas::Update() can be perfromed in TCanvasImp,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/622
https://github.com/root-project/root/pull/622:104,security,Updat,Update,104,Extend TCanvasImp interface; - let create TVirtualPadPainter via the TCanvasImp. - handling of TCanvas::Update() can be perfromed in TCanvasImp,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/622
https://github.com/root-project/root/pull/623:0,availability,Restor,Restore,0,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:238,availability,error,errors,238,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:281,availability,avail,available,281,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:92,deployability,stack,stack,92,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:370,deployability,fail,fails,370,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:379,deployability,build,build,379,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:405,deployability,FAIL,FAILED,405,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:477,deployability,build,build,477,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:483,deployability,build,build,483,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:536,deployability,build,build,536,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:542,deployability,build,build,542,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:573,deployability,build,build,573,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:579,deployability,build,build,579,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:629,deployability,build,build,629,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:635,deployability,build,build,635,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:670,deployability,build,build,670,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:695,deployability,build,build,695,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:701,deployability,build,build,701,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:729,deployability,build,build,729,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:735,deployability,build,build,735,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:764,deployability,build,build,764,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:778,deployability,build,build,778,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:818,deployability,build,build,818,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:824,deployability,build,build,824,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:918,deployability,build,build,918,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:238,performance,error,errors,238,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:0,reliability,Restor,Restore,0,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:281,reliability,availab,available,281,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:370,reliability,fail,fails,370,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:405,reliability,FAIL,FAILED,405,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:238,safety,error,errors,238,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:281,safety,avail,available,281,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:281,security,availab,available,281,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:992,security,Sign,Signed-off-by,992,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/623:238,usability,error,errors,238,"Restore C++17 mode for Interpreter/Cling; This was lost while migrating to newer LLVM/Clang stack. Otherwise `-std=c++11` is added to compilation lines overriding `-std=c++1z`. Thus Cling/Interpreter ends up in C++11 mode and then we get errors about `std::string_view` only being available in C++17. Compiled on Fedora 26 with `-Dminimal=ON -Dcxx17=ON`. Note, it still fails to build near the end:. ```. FAILED: html/G__Html.cxx lib/libHtml_rdict.pcm lib/libHtml.rootmap. cd /build/build/html && /usr/bin/cmake -E env LD_LIBRARY_PATH=/build/build/lib: ROOTIGNOREPREFIX=1 /build/build/bin/rootcling -rootbuild -f G__Html.cxx -s /build/build/lib/libHtml.so -excludePath /build/root -excludePath /build/build -rml libHtml.so -rmf /build/build/lib/libHtml.rootmap -I/build/root -I/build/root/interpreter/cling/include -I/build/build/include TClassDocOutput.h TDocDirective.h TDocInfo.h TDocOutput.h TDocParser.h THtml.h /build/root/html/inc/LinkDef.h. *** Break *** segmentation violation. ```. Signed-off-by: David Abdurachmanov <davidlt@cern.ch>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/623
https://github.com/root-project/root/pull/624:10,integrability,configur,configure,10,http: let configure global directories scan via THttpServer constructor; Simplifies usage for the use-case:. https://root-forum.cern.ch/t/thttpserver-without-items-from-groot-only-explicitly-registered/24640.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/624
https://github.com/root-project/root/pull/624:10,modifiability,configur,configure,10,http: let configure global directories scan via THttpServer constructor; Simplifies usage for the use-case:. https://root-forum.cern.ch/t/thttpserver-without-items-from-groot-only-explicitly-registered/24640.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/624
https://github.com/root-project/root/pull/624:10,security,configur,configure,10,http: let configure global directories scan via THttpServer constructor; Simplifies usage for the use-case:. https://root-forum.cern.ch/t/thttpserver-without-items-from-groot-only-explicitly-registered/24640.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/624
https://github.com/root-project/root/pull/624:73,testability,Simpl,Simplifies,73,http: let configure global directories scan via THttpServer constructor; Simplifies usage for the use-case:. https://root-forum.cern.ch/t/thttpserver-without-items-from-groot-only-explicitly-registered/24640.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/624
https://github.com/root-project/root/pull/624:73,usability,Simpl,Simplifies,73,http: let configure global directories scan via THttpServer constructor; Simplifies usage for the use-case:. https://root-forum.cern.ch/t/thttpserver-without-items-from-groot-only-explicitly-registered/24640.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/624
https://github.com/root-project/root/pull/625:27,deployability,upgrad,upgrade,27,Cling fixes after the LLVM upgrade; Patches by @marsupial,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/625
https://github.com/root-project/root/pull/625:36,deployability,Patch,Patches,36,Cling fixes after the LLVM upgrade; Patches by @marsupial,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/625
https://github.com/root-project/root/pull/625:27,modifiability,upgrad,upgrade,27,Cling fixes after the LLVM upgrade; Patches by @marsupial,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/625
https://github.com/root-project/root/pull/625:36,safety,Patch,Patches,36,Cling fixes after the LLVM upgrade; Patches by @marsupial,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/625
https://github.com/root-project/root/pull/625:36,security,Patch,Patches,36,Cling fixes after the LLVM upgrade; Patches by @marsupial,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/625
https://github.com/root-project/root/pull/627:109,deployability,fail,failing,109,Commented multithreaded execution policy test.; Commented this part on request until we figure out why is it failing in. specific machines.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/627
https://github.com/root-project/root/pull/627:121,interoperability,specif,specific,121,Commented multithreaded execution policy test.; Commented this part on request until we figure out why is it failing in. specific machines.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/627
https://github.com/root-project/root/pull/627:109,reliability,fail,failing,109,Commented multithreaded execution policy test.; Commented this part on request until we figure out why is it failing in. specific machines.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/627
https://github.com/root-project/root/pull/627:41,safety,test,test,41,Commented multithreaded execution policy test.; Commented this part on request until we figure out why is it failing in. specific machines.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/627
https://github.com/root-project/root/pull/627:34,security,polic,policy,34,Commented multithreaded execution policy test.; Commented this part on request until we figure out why is it failing in. specific machines.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/627
https://github.com/root-project/root/pull/627:41,testability,test,test,41,Commented multithreaded execution policy test.; Commented this part on request until we figure out why is it failing in. specific machines.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/627
https://github.com/root-project/root/pull/628:120,deployability,fail,failing,120,"Revert ""Commented multithreaded execution policy test.""; Reverts root-project/root#627. Note: do not merge it until the failing 'projectroot.math.mathcore.test.mathcore_testLogLExecPolicy' on some platforms is resolved. @xvallspl, @lmoneta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/628
https://github.com/root-project/root/pull/628:197,interoperability,platform,platforms,197,"Revert ""Commented multithreaded execution policy test.""; Reverts root-project/root#627. Note: do not merge it until the failing 'projectroot.math.mathcore.test.mathcore_testLogLExecPolicy' on some platforms is resolved. @xvallspl, @lmoneta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/628
https://github.com/root-project/root/pull/628:120,reliability,fail,failing,120,"Revert ""Commented multithreaded execution policy test.""; Reverts root-project/root#627. Note: do not merge it until the failing 'projectroot.math.mathcore.test.mathcore_testLogLExecPolicy' on some platforms is resolved. @xvallspl, @lmoneta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/628
https://github.com/root-project/root/pull/628:49,safety,test,test,49,"Revert ""Commented multithreaded execution policy test.""; Reverts root-project/root#627. Note: do not merge it until the failing 'projectroot.math.mathcore.test.mathcore_testLogLExecPolicy' on some platforms is resolved. @xvallspl, @lmoneta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/628
https://github.com/root-project/root/pull/628:155,safety,test,test,155,"Revert ""Commented multithreaded execution policy test.""; Reverts root-project/root#627. Note: do not merge it until the failing 'projectroot.math.mathcore.test.mathcore_testLogLExecPolicy' on some platforms is resolved. @xvallspl, @lmoneta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/628
https://github.com/root-project/root/pull/628:42,security,polic,policy,42,"Revert ""Commented multithreaded execution policy test.""; Reverts root-project/root#627. Note: do not merge it until the failing 'projectroot.math.mathcore.test.mathcore_testLogLExecPolicy' on some platforms is resolved. @xvallspl, @lmoneta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/628
https://github.com/root-project/root/pull/628:49,testability,test,test,49,"Revert ""Commented multithreaded execution policy test.""; Reverts root-project/root#627. Note: do not merge it until the failing 'projectroot.math.mathcore.test.mathcore_testLogLExecPolicy' on some platforms is resolved. @xvallspl, @lmoneta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/628
https://github.com/root-project/root/pull/628:155,testability,test,test,155,"Revert ""Commented multithreaded execution policy test.""; Reverts root-project/root#627. Note: do not merge it until the failing 'projectroot.math.mathcore.test.mathcore_testLogLExecPolicy' on some platforms is resolved. @xvallspl, @lmoneta.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/628
https://github.com/root-project/root/pull/629:120,deployability,upgrad,upgrade,120,Do not only set the const char* but the whole StringRef of the MainFile.; Fixes a memory corruption seen after the llvm upgrade. This is still a terrible hack;. it will be replaced by a proper fix in clang::CodeGen (coming up).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/629
https://github.com/root-project/root/pull/629:120,modifiability,upgrad,upgrade,120,Do not only set the const char* but the whole StringRef of the MainFile.; Fixes a memory corruption seen after the llvm upgrade. This is still a terrible hack;. it will be replaced by a proper fix in clang::CodeGen (coming up).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/629
https://github.com/root-project/root/pull/629:82,performance,memor,memory,82,Do not only set the const char* but the whole StringRef of the MainFile.; Fixes a memory corruption seen after the llvm upgrade. This is still a terrible hack;. it will be replaced by a proper fix in clang::CodeGen (coming up).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/629
https://github.com/root-project/root/pull/629:154,security,hack,hack,154,Do not only set the const char* but the whole StringRef of the MainFile.; Fixes a memory corruption seen after the llvm upgrade. This is still a terrible hack;. it will be replaced by a proper fix in clang::CodeGen (coming up).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/629
https://github.com/root-project/root/pull/629:82,usability,memor,memory,82,Do not only set the const char* but the whole StringRef of the MainFile.; Fixes a memory corruption seen after the llvm upgrade. This is still a terrible hack;. it will be replaced by a proper fix in clang::CodeGen (coming up).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/629
https://github.com/root-project/root/pull/630:18,deployability,modul,module,18,Clang CodeGen use module name;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/630
https://github.com/root-project/root/pull/630:18,modifiability,modul,module,18,Clang CodeGen use module name;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/630
https://github.com/root-project/root/pull/630:18,safety,modul,module,18,Clang CodeGen use module name;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/630
https://github.com/root-project/root/pull/631:13,usability,support,support,13,Cling lambda support;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/631
https://github.com/root-project/root/pull/632:30,deployability,modul,modules,30,Runtime cxxmodules; Merge the modules work back to master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/632
https://github.com/root-project/root/pull/632:30,modifiability,modul,modules,30,Runtime cxxmodules; Merge the modules work back to master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/632
https://github.com/root-project/root/pull/632:30,safety,modul,modules,30,Runtime cxxmodules; Merge the modules work back to master.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/632
https://github.com/root-project/root/pull/633:98,interoperability,specif,specifying,98,Allow for globbing on Google Test sources; This PR enables globbing on ROOT_ADD_GTEST. Instead of specifying a test in CMake as . ```. ROOT_ADD_GTEST(myTest test1.cxx test2.cxx test3.cxx). ```. This PR enables specifying it as:. ```. ROOT_ADD_GTEST(myTest test*.cxx). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/633
https://github.com/root-project/root/pull/633:210,interoperability,specif,specifying,210,Allow for globbing on Google Test sources; This PR enables globbing on ROOT_ADD_GTEST. Instead of specifying a test in CMake as . ```. ROOT_ADD_GTEST(myTest test1.cxx test2.cxx test3.cxx). ```. This PR enables specifying it as:. ```. ROOT_ADD_GTEST(myTest test*.cxx). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/633
https://github.com/root-project/root/pull/633:29,safety,Test,Test,29,Allow for globbing on Google Test sources; This PR enables globbing on ROOT_ADD_GTEST. Instead of specifying a test in CMake as . ```. ROOT_ADD_GTEST(myTest test1.cxx test2.cxx test3.cxx). ```. This PR enables specifying it as:. ```. ROOT_ADD_GTEST(myTest test*.cxx). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/633
https://github.com/root-project/root/pull/633:111,safety,test,test,111,Allow for globbing on Google Test sources; This PR enables globbing on ROOT_ADD_GTEST. Instead of specifying a test in CMake as . ```. ROOT_ADD_GTEST(myTest test1.cxx test2.cxx test3.cxx). ```. This PR enables specifying it as:. ```. ROOT_ADD_GTEST(myTest test*.cxx). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/633
https://github.com/root-project/root/pull/633:256,safety,test,test,256,Allow for globbing on Google Test sources; This PR enables globbing on ROOT_ADD_GTEST. Instead of specifying a test in CMake as . ```. ROOT_ADD_GTEST(myTest test1.cxx test2.cxx test3.cxx). ```. This PR enables specifying it as:. ```. ROOT_ADD_GTEST(myTest test*.cxx). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/633
https://github.com/root-project/root/pull/633:29,testability,Test,Test,29,Allow for globbing on Google Test sources; This PR enables globbing on ROOT_ADD_GTEST. Instead of specifying a test in CMake as . ```. ROOT_ADD_GTEST(myTest test1.cxx test2.cxx test3.cxx). ```. This PR enables specifying it as:. ```. ROOT_ADD_GTEST(myTest test*.cxx). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/633
https://github.com/root-project/root/pull/633:111,testability,test,test,111,Allow for globbing on Google Test sources; This PR enables globbing on ROOT_ADD_GTEST. Instead of specifying a test in CMake as . ```. ROOT_ADD_GTEST(myTest test1.cxx test2.cxx test3.cxx). ```. This PR enables specifying it as:. ```. ROOT_ADD_GTEST(myTest test*.cxx). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/633
https://github.com/root-project/root/pull/633:256,testability,test,test,256,Allow for globbing on Google Test sources; This PR enables globbing on ROOT_ADD_GTEST. Instead of specifying a test in CMake as . ```. ROOT_ADD_GTEST(myTest test1.cxx test2.cxx test3.cxx). ```. This PR enables specifying it as:. ```. ROOT_ADD_GTEST(myTest test*.cxx). ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/633
https://github.com/root-project/root/pull/634:649,availability,error,error,649,"Add support for named arguments; when macro function is invoked from command line or by `.x macro.C` metacommand. i.e. `root 'macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)'` (compiled macros are also supported) or from ROOT REPL: `.x macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)`. **N.B.! No space between parentheses and `#`.**. Calling from REPL as `macro(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)` is not supported (yet?). Passing arguments as options (`root macro.C+ --# arg3=13 'arg1={42, 43}' 'arg5=""string""'`), like in #616 ~~will be implemented if this PR merged~~ is implemented. Some implementation decisions, e.g. error reporting, are suboptimal so discussion, suggestions, criticism are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/634
https://github.com/root-project/root/pull/634:670,integrability,sub,suboptimal,670,"Add support for named arguments; when macro function is invoked from command line or by `.x macro.C` metacommand. i.e. `root 'macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)'` (compiled macros are also supported) or from ROOT REPL: `.x macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)`. **N.B.! No space between parentheses and `#`.**. Calling from REPL as `macro(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)` is not supported (yet?). Passing arguments as options (`root macro.C+ --# arg3=13 'arg1={42, 43}' 'arg5=""string""'`), like in #616 ~~will be implemented if this PR merged~~ is implemented. Some implementation decisions, e.g. error reporting, are suboptimal so discussion, suggestions, criticism are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/634
https://github.com/root-project/root/pull/634:649,performance,error,error,649,"Add support for named arguments; when macro function is invoked from command line or by `.x macro.C` metacommand. i.e. `root 'macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)'` (compiled macros are also supported) or from ROOT REPL: `.x macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)`. **N.B.! No space between parentheses and `#`.**. Calling from REPL as `macro(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)` is not supported (yet?). Passing arguments as options (`root macro.C+ --# arg3=13 'arg1={42, 43}' 'arg5=""string""'`), like in #616 ~~will be implemented if this PR merged~~ is implemented. Some implementation decisions, e.g. error reporting, are suboptimal so discussion, suggestions, criticism are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/634
https://github.com/root-project/root/pull/634:649,safety,error,error,649,"Add support for named arguments; when macro function is invoked from command line or by `.x macro.C` metacommand. i.e. `root 'macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)'` (compiled macros are also supported) or from ROOT REPL: `.x macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)`. **N.B.! No space between parentheses and `#`.**. Calling from REPL as `macro(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)` is not supported (yet?). Passing arguments as options (`root macro.C+ --# arg3=13 'arg1={42, 43}' 'arg5=""string""'`), like in #616 ~~will be implemented if this PR merged~~ is implemented. Some implementation decisions, e.g. error reporting, are suboptimal so discussion, suggestions, criticism are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/634
https://github.com/root-project/root/pull/634:4,usability,support,support,4,"Add support for named arguments; when macro function is invoked from command line or by `.x macro.C` metacommand. i.e. `root 'macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)'` (compiled macros are also supported) or from ROOT REPL: `.x macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)`. **N.B.! No space between parentheses and `#`.**. Calling from REPL as `macro(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)` is not supported (yet?). Passing arguments as options (`root macro.C+ --# arg3=13 'arg1={42, 43}' 'arg5=""string""'`), like in #616 ~~will be implemented if this PR merged~~ is implemented. Some implementation decisions, e.g. error reporting, are suboptimal so discussion, suggestions, criticism are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/634
https://github.com/root-project/root/pull/634:69,usability,command,command,69,"Add support for named arguments; when macro function is invoked from command line or by `.x macro.C` metacommand. i.e. `root 'macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)'` (compiled macros are also supported) or from ROOT REPL: `.x macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)`. **N.B.! No space between parentheses and `#`.**. Calling from REPL as `macro(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)` is not supported (yet?). Passing arguments as options (`root macro.C+ --# arg3=13 'arg1={42, 43}' 'arg5=""string""'`), like in #616 ~~will be implemented if this PR merged~~ is implemented. Some implementation decisions, e.g. error reporting, are suboptimal so discussion, suggestions, criticism are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/634
https://github.com/root-project/root/pull/634:209,usability,support,supported,209,"Add support for named arguments; when macro function is invoked from command line or by `.x macro.C` metacommand. i.e. `root 'macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)'` (compiled macros are also supported) or from ROOT REPL: `.x macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)`. **N.B.! No space between parentheses and `#`.**. Calling from REPL as `macro(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)` is not supported (yet?). Passing arguments as options (`root macro.C+ --# arg3=13 'arg1={42, 43}' 'arg5=""string""'`), like in #616 ~~will be implemented if this PR merged~~ is implemented. Some implementation decisions, e.g. error reporting, are suboptimal so discussion, suggestions, criticism are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/634
https://github.com/root-project/root/pull/634:432,usability,support,supported,432,"Add support for named arguments; when macro function is invoked from command line or by `.x macro.C` metacommand. i.e. `root 'macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)'` (compiled macros are also supported) or from ROOT REPL: `.x macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)`. **N.B.! No space between parentheses and `#`.**. Calling from REPL as `macro(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)` is not supported (yet?). Passing arguments as options (`root macro.C+ --# arg3=13 'arg1={42, 43}' 'arg5=""string""'`), like in #616 ~~will be implemented if this PR merged~~ is implemented. Some implementation decisions, e.g. error reporting, are suboptimal so discussion, suggestions, criticism are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/634
https://github.com/root-project/root/pull/634:649,usability,error,error,649,"Add support for named arguments; when macro function is invoked from command line or by `.x macro.C` metacommand. i.e. `root 'macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)'` (compiled macros are also supported) or from ROOT REPL: `.x macro.C(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)`. **N.B.! No space between parentheses and `#`.**. Calling from REPL as `macro(#arg3 = 13, arg1 = {42, 43}, arg5 = ""string""#)` is not supported (yet?). Passing arguments as options (`root macro.C+ --# arg3=13 'arg1={42, 43}' 'arg5=""string""'`), like in #616 ~~will be implemented if this PR merged~~ is implemented. Some implementation decisions, e.g. error reporting, are suboptimal so discussion, suggestions, criticism are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/634
https://github.com/root-project/root/pull/635:29,deployability,modul,modulemap,29,"Remove float.h from the libc.modulemap.; The header is usually not in /usr/include/ but instead in the clang internal directory, so this modulemap is probably wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/635
https://github.com/root-project/root/pull/635:137,deployability,modul,modulemap,137,"Remove float.h from the libc.modulemap.; The header is usually not in /usr/include/ but instead in the clang internal directory, so this modulemap is probably wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/635
https://github.com/root-project/root/pull/635:29,modifiability,modul,modulemap,29,"Remove float.h from the libc.modulemap.; The header is usually not in /usr/include/ but instead in the clang internal directory, so this modulemap is probably wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/635
https://github.com/root-project/root/pull/635:137,modifiability,modul,modulemap,137,"Remove float.h from the libc.modulemap.; The header is usually not in /usr/include/ but instead in the clang internal directory, so this modulemap is probably wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/635
https://github.com/root-project/root/pull/635:29,safety,modul,modulemap,29,"Remove float.h from the libc.modulemap.; The header is usually not in /usr/include/ but instead in the clang internal directory, so this modulemap is probably wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/635
https://github.com/root-project/root/pull/635:137,safety,modul,modulemap,137,"Remove float.h from the libc.modulemap.; The header is usually not in /usr/include/ but instead in the clang internal directory, so this modulemap is probably wrong.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/635
https://github.com/root-project/root/pull/636:129,usability,feedback,feedback,129,[TypeTraits] Move general-purpose metaprogramming utilities from TDataFrame's utils to ROOT TypeTraits; Here it is...any kind of feedback welcome :),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/636
https://github.com/root-project/root/pull/639:165,deployability,Resourc,Resource,165,"CORS and ssl_certificate for THttpServer; - enables ""ssl_certificate"" option for civetweb engine in THttpServer (for https). - adds an option for CORS (Cross-Origin Resource Sharing) headers in THttpServer responses (e.g. json, xml)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/639
https://github.com/root-project/root/pull/639:165,energy efficiency,Resourc,Resource,165,"CORS and ssl_certificate for THttpServer; - enables ""ssl_certificate"" option for civetweb engine in THttpServer (for https). - adds an option for CORS (Cross-Origin Resource Sharing) headers in THttpServer responses (e.g. json, xml)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/639
https://github.com/root-project/root/pull/639:228,interoperability,xml,xml,228,"CORS and ssl_certificate for THttpServer; - enables ""ssl_certificate"" option for civetweb engine in THttpServer (for https). - adds an option for CORS (Cross-Origin Resource Sharing) headers in THttpServer responses (e.g. json, xml)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/639
https://github.com/root-project/root/pull/639:165,performance,Resourc,Resource,165,"CORS and ssl_certificate for THttpServer; - enables ""ssl_certificate"" option for civetweb engine in THttpServer (for https). - adds an option for CORS (Cross-Origin Resource Sharing) headers in THttpServer responses (e.g. json, xml)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/639
https://github.com/root-project/root/pull/639:165,safety,Resourc,Resource,165,"CORS and ssl_certificate for THttpServer; - enables ""ssl_certificate"" option for civetweb engine in THttpServer (for https). - adds an option for CORS (Cross-Origin Resource Sharing) headers in THttpServer responses (e.g. json, xml)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/639
https://github.com/root-project/root/pull/639:165,testability,Resourc,Resource,165,"CORS and ssl_certificate for THttpServer; - enables ""ssl_certificate"" option for civetweb engine in THttpServer (for https). - adds an option for CORS (Cross-Origin Resource Sharing) headers in THttpServer responses (e.g. json, xml)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/639
https://github.com/root-project/root/pull/640:29,deployability,build,build,29,"Avoid duplicate detection of build byproducts; It seems that CMake is somehow automatically picking up the existence of `lib/libz4.a` from the `ExternalProject` definition (perhaps because LZ4 is also using cmake?) and explicitly declaring it as a build byproduct is also creating a rule for building `lib/liblz4.a`. The result is there are two build rules for this particular build output, which is not allowed according to the ninja generator. @bellenot @pcanal - this fixes up the discussed ninja generator issue. Hopefully it also allows work on the Windows build to proceed?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/640
https://github.com/root-project/root/pull/640:78,deployability,automat,automatically,78,"Avoid duplicate detection of build byproducts; It seems that CMake is somehow automatically picking up the existence of `lib/libz4.a` from the `ExternalProject` definition (perhaps because LZ4 is also using cmake?) and explicitly declaring it as a build byproduct is also creating a rule for building `lib/liblz4.a`. The result is there are two build rules for this particular build output, which is not allowed according to the ninja generator. @bellenot @pcanal - this fixes up the discussed ninja generator issue. Hopefully it also allows work on the Windows build to proceed?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/640
https://github.com/root-project/root/pull/640:248,deployability,build,build,248,"Avoid duplicate detection of build byproducts; It seems that CMake is somehow automatically picking up the existence of `lib/libz4.a` from the `ExternalProject` definition (perhaps because LZ4 is also using cmake?) and explicitly declaring it as a build byproduct is also creating a rule for building `lib/liblz4.a`. The result is there are two build rules for this particular build output, which is not allowed according to the ninja generator. @bellenot @pcanal - this fixes up the discussed ninja generator issue. Hopefully it also allows work on the Windows build to proceed?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/640
https://github.com/root-project/root/pull/640:292,deployability,build,building,292,"Avoid duplicate detection of build byproducts; It seems that CMake is somehow automatically picking up the existence of `lib/libz4.a` from the `ExternalProject` definition (perhaps because LZ4 is also using cmake?) and explicitly declaring it as a build byproduct is also creating a rule for building `lib/liblz4.a`. The result is there are two build rules for this particular build output, which is not allowed according to the ninja generator. @bellenot @pcanal - this fixes up the discussed ninja generator issue. Hopefully it also allows work on the Windows build to proceed?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/640
https://github.com/root-project/root/pull/640:345,deployability,build,build,345,"Avoid duplicate detection of build byproducts; It seems that CMake is somehow automatically picking up the existence of `lib/libz4.a` from the `ExternalProject` definition (perhaps because LZ4 is also using cmake?) and explicitly declaring it as a build byproduct is also creating a rule for building `lib/liblz4.a`. The result is there are two build rules for this particular build output, which is not allowed according to the ninja generator. @bellenot @pcanal - this fixes up the discussed ninja generator issue. Hopefully it also allows work on the Windows build to proceed?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/640
https://github.com/root-project/root/pull/640:377,deployability,build,build,377,"Avoid duplicate detection of build byproducts; It seems that CMake is somehow automatically picking up the existence of `lib/libz4.a` from the `ExternalProject` definition (perhaps because LZ4 is also using cmake?) and explicitly declaring it as a build byproduct is also creating a rule for building `lib/liblz4.a`. The result is there are two build rules for this particular build output, which is not allowed according to the ninja generator. @bellenot @pcanal - this fixes up the discussed ninja generator issue. Hopefully it also allows work on the Windows build to proceed?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/640
https://github.com/root-project/root/pull/640:562,deployability,build,build,562,"Avoid duplicate detection of build byproducts; It seems that CMake is somehow automatically picking up the existence of `lib/libz4.a` from the `ExternalProject` definition (perhaps because LZ4 is also using cmake?) and explicitly declaring it as a build byproduct is also creating a rule for building `lib/liblz4.a`. The result is there are two build rules for this particular build output, which is not allowed according to the ninja generator. @bellenot @pcanal - this fixes up the discussed ninja generator issue. Hopefully it also allows work on the Windows build to proceed?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/640
https://github.com/root-project/root/pull/640:0,safety,Avoid,Avoid,0,"Avoid duplicate detection of build byproducts; It seems that CMake is somehow automatically picking up the existence of `lib/libz4.a` from the `ExternalProject` definition (perhaps because LZ4 is also using cmake?) and explicitly declaring it as a build byproduct is also creating a rule for building `lib/liblz4.a`. The result is there are two build rules for this particular build output, which is not allowed according to the ninja generator. @bellenot @pcanal - this fixes up the discussed ninja generator issue. Hopefully it also allows work on the Windows build to proceed?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/640
https://github.com/root-project/root/pull/640:16,safety,detect,detection,16,"Avoid duplicate detection of build byproducts; It seems that CMake is somehow automatically picking up the existence of `lib/libz4.a` from the `ExternalProject` definition (perhaps because LZ4 is also using cmake?) and explicitly declaring it as a build byproduct is also creating a rule for building `lib/liblz4.a`. The result is there are two build rules for this particular build output, which is not allowed according to the ninja generator. @bellenot @pcanal - this fixes up the discussed ninja generator issue. Hopefully it also allows work on the Windows build to proceed?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/640
https://github.com/root-project/root/pull/640:16,security,detect,detection,16,"Avoid duplicate detection of build byproducts; It seems that CMake is somehow automatically picking up the existence of `lib/libz4.a` from the `ExternalProject` definition (perhaps because LZ4 is also using cmake?) and explicitly declaring it as a build byproduct is also creating a rule for building `lib/liblz4.a`. The result is there are two build rules for this particular build output, which is not allowed according to the ninja generator. @bellenot @pcanal - this fixes up the discussed ninja generator issue. Hopefully it also allows work on the Windows build to proceed?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/640
https://github.com/root-project/root/pull/640:78,testability,automat,automatically,78,"Avoid duplicate detection of build byproducts; It seems that CMake is somehow automatically picking up the existence of `lib/libz4.a` from the `ExternalProject` definition (perhaps because LZ4 is also using cmake?) and explicitly declaring it as a build byproduct is also creating a rule for building `lib/liblz4.a`. The result is there are two build rules for this particular build output, which is not allowed according to the ninja generator. @bellenot @pcanal - this fixes up the discussed ninja generator issue. Hopefully it also allows work on the Windows build to proceed?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/640
https://github.com/root-project/root/pull/641:16,deployability,build,builds,16,Block Travis-CI builds on legacy branches.; Add a dummy Travis-CI build file that does nothing but excludes this branch from Travis-CI tests. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/641
https://github.com/root-project/root/pull/641:66,deployability,build,build,66,Block Travis-CI builds on legacy branches.; Add a dummy Travis-CI build file that does nothing but excludes this branch from Travis-CI tests. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/641
https://github.com/root-project/root/pull/641:82,reliability,doe,does,82,Block Travis-CI builds on legacy branches.; Add a dummy Travis-CI build file that does nothing but excludes this branch from Travis-CI tests. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/641
https://github.com/root-project/root/pull/641:135,safety,test,tests,135,Block Travis-CI builds on legacy branches.; Add a dummy Travis-CI build file that does nothing but excludes this branch from Travis-CI tests. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/641
https://github.com/root-project/root/pull/641:135,testability,test,tests,135,Block Travis-CI builds on legacy branches.; Add a dummy Travis-CI build file that does nothing but excludes this branch from Travis-CI tests. @vgvassilev,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/641
https://github.com/root-project/root/pull/642:51,availability,consist,consistent,51,Rename print_wrapper to get_wrapper_code.; To stay consistent with the interface method.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/642
https://github.com/root-project/root/pull/642:71,integrability,interfac,interface,71,Rename print_wrapper to get_wrapper_code.; To stay consistent with the interface method.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/642
https://github.com/root-project/root/pull/642:71,interoperability,interfac,interface,71,Rename print_wrapper to get_wrapper_code.; To stay consistent with the interface method.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/642
https://github.com/root-project/root/pull/642:71,modifiability,interfac,interface,71,Rename print_wrapper to get_wrapper_code.; To stay consistent with the interface method.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/642
https://github.com/root-project/root/pull/642:51,usability,consist,consistent,51,Rename print_wrapper to get_wrapper_code.; To stay consistent with the interface method.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/642
https://github.com/root-project/root/pull/643:8,usability,support,support,8,Add LZ4 support on Windows;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/643
https://github.com/root-project/root/pull/644:642,deployability,contain,contain,642,"Fix linking warnings due to visibility=hidden being set for the tests.; Currently if we compile this test we get ld warning messages like this:. ```. ld: direct access in function ... to global weak symbol. This was likely. caused by different translation units being compiled with different. visibility settings. ```. This seems to be caused by the fact that visibility=hidden is spreading. from the parent directory to the test directory, even though it should. only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a. per subdirectory basis, we just move the code for handling the source. code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/644
https://github.com/root-project/root/pull/644:72,energy efficiency,Current,Currently,72,"Fix linking warnings due to visibility=hidden being set for the tests.; Currently if we compile this test we get ld warning messages like this:. ```. ld: direct access in function ... to global weak symbol. This was likely. caused by different translation units being compiled with different. visibility settings. ```. This seems to be caused by the fact that visibility=hidden is spreading. from the parent directory to the test directory, even though it should. only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a. per subdirectory basis, we just move the code for handling the source. code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/644
https://github.com/root-project/root/pull/644:124,integrability,messag,messages,124,"Fix linking warnings due to visibility=hidden being set for the tests.; Currently if we compile this test we get ld warning messages like this:. ```. ld: direct access in function ... to global weak symbol. This was likely. caused by different translation units being compiled with different. visibility settings. ```. This seems to be caused by the fact that visibility=hidden is spreading. from the parent directory to the test directory, even though it should. only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a. per subdirectory basis, we just move the code for handling the source. code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/644
https://github.com/root-project/root/pull/644:244,integrability,translat,translation,244,"Fix linking warnings due to visibility=hidden being set for the tests.; Currently if we compile this test we get ld warning messages like this:. ```. ld: direct access in function ... to global weak symbol. This was likely. caused by different translation units being compiled with different. visibility settings. ```. This seems to be caused by the fact that visibility=hidden is spreading. from the parent directory to the test directory, even though it should. only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a. per subdirectory basis, we just move the code for handling the source. code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/644
https://github.com/root-project/root/pull/644:537,integrability,sub,subdirectory,537,"Fix linking warnings due to visibility=hidden being set for the tests.; Currently if we compile this test we get ld warning messages like this:. ```. ld: direct access in function ... to global weak symbol. This was likely. caused by different translation units being compiled with different. visibility settings. ```. This seems to be caused by the fact that visibility=hidden is spreading. from the parent directory to the test directory, even though it should. only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a. per subdirectory basis, we just move the code for handling the source. code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/644
https://github.com/root-project/root/pull/644:124,interoperability,messag,messages,124,"Fix linking warnings due to visibility=hidden being set for the tests.; Currently if we compile this test we get ld warning messages like this:. ```. ld: direct access in function ... to global weak symbol. This was likely. caused by different translation units being compiled with different. visibility settings. ```. This seems to be caused by the fact that visibility=hidden is spreading. from the parent directory to the test directory, even though it should. only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a. per subdirectory basis, we just move the code for handling the source. code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/644
https://github.com/root-project/root/pull/644:244,interoperability,translat,translation,244,"Fix linking warnings due to visibility=hidden being set for the tests.; Currently if we compile this test we get ld warning messages like this:. ```. ld: direct access in function ... to global weak symbol. This was likely. caused by different translation units being compiled with different. visibility settings. ```. This seems to be caused by the fact that visibility=hidden is spreading. from the parent directory to the test directory, even though it should. only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a. per subdirectory basis, we just move the code for handling the source. code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/644
https://github.com/root-project/root/pull/644:64,safety,test,tests,64,"Fix linking warnings due to visibility=hidden being set for the tests.; Currently if we compile this test we get ld warning messages like this:. ```. ld: direct access in function ... to global weak symbol. This was likely. caused by different translation units being compiled with different. visibility settings. ```. This seems to be caused by the fact that visibility=hidden is spreading. from the parent directory to the test directory, even though it should. only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a. per subdirectory basis, we just move the code for handling the source. code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/644
https://github.com/root-project/root/pull/644:101,safety,test,test,101,"Fix linking warnings due to visibility=hidden being set for the tests.; Currently if we compile this test we get ld warning messages like this:. ```. ld: direct access in function ... to global weak symbol. This was likely. caused by different translation units being compiled with different. visibility settings. ```. This seems to be caused by the fact that visibility=hidden is spreading. from the parent directory to the test directory, even though it should. only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a. per subdirectory basis, we just move the code for handling the source. code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/644
https://github.com/root-project/root/pull/644:425,safety,test,test,425,"Fix linking warnings due to visibility=hidden being set for the tests.; Currently if we compile this test we get ld warning messages like this:. ```. ld: direct access in function ... to global weak symbol. This was likely. caused by different translation units being compiled with different. visibility settings. ```. This seems to be caused by the fact that visibility=hidden is spreading. from the parent directory to the test directory, even though it should. only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a. per subdirectory basis, we just move the code for handling the source. code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/644
https://github.com/root-project/root/pull/644:161,security,access,access,161,"Fix linking warnings due to visibility=hidden being set for the tests.; Currently if we compile this test we get ld warning messages like this:. ```. ld: direct access in function ... to global weak symbol. This was likely. caused by different translation units being compiled with different. visibility settings. ```. This seems to be caused by the fact that visibility=hidden is spreading. from the parent directory to the test directory, even though it should. only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a. per subdirectory basis, we just move the code for handling the source. code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/644
https://github.com/root-project/root/pull/644:64,testability,test,tests,64,"Fix linking warnings due to visibility=hidden being set for the tests.; Currently if we compile this test we get ld warning messages like this:. ```. ld: direct access in function ... to global weak symbol. This was likely. caused by different translation units being compiled with different. visibility settings. ```. This seems to be caused by the fact that visibility=hidden is spreading. from the parent directory to the test directory, even though it should. only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a. per subdirectory basis, we just move the code for handling the source. code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/644
https://github.com/root-project/root/pull/644:101,testability,test,test,101,"Fix linking warnings due to visibility=hidden being set for the tests.; Currently if we compile this test we get ld warning messages like this:. ```. ld: direct access in function ... to global weak symbol. This was likely. caused by different translation units being compiled with different. visibility settings. ```. This seems to be caused by the fact that visibility=hidden is spreading. from the parent directory to the test directory, even though it should. only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a. per subdirectory basis, we just move the code for handling the source. code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/644
https://github.com/root-project/root/pull/644:256,testability,unit,units,256,"Fix linking warnings due to visibility=hidden being set for the tests.; Currently if we compile this test we get ld warning messages like this:. ```. ld: direct access in function ... to global weak symbol. This was likely. caused by different translation units being compiled with different. visibility settings. ```. This seems to be caused by the fact that visibility=hidden is spreading. from the parent directory to the test directory, even though it should. only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a. per subdirectory basis, we just move the code for handling the source. code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/644
https://github.com/root-project/root/pull/644:425,testability,test,test,425,"Fix linking warnings due to visibility=hidden being set for the tests.; Currently if we compile this test we get ld warning messages like this:. ```. ld: direct access in function ... to global weak symbol. This was likely. caused by different translation units being compiled with different. visibility settings. ```. This seems to be caused by the fact that visibility=hidden is spreading. from the parent directory to the test directory, even though it should. only land in the src/ directory. As CMAKE_CXX_FLAGS is working on a. per subdirectory basis, we just move the code for handling the source. code to the src/ folder, which should contain the visibility=hidden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/644
https://github.com/root-project/root/pull/645:48,deployability,Updat,Updates,48,Support undoing of #undef preprocessor tokens.; Updates DeclCollectorPPAdapter to new clang interface that reports an when every **#undef** encountered.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/645
https://github.com/root-project/root/pull/645:92,integrability,interfac,interface,92,Support undoing of #undef preprocessor tokens.; Updates DeclCollectorPPAdapter to new clang interface that reports an when every **#undef** encountered.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/645
https://github.com/root-project/root/pull/645:92,interoperability,interfac,interface,92,Support undoing of #undef preprocessor tokens.; Updates DeclCollectorPPAdapter to new clang interface that reports an when every **#undef** encountered.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/645
https://github.com/root-project/root/pull/645:92,modifiability,interfac,interface,92,Support undoing of #undef preprocessor tokens.; Updates DeclCollectorPPAdapter to new clang interface that reports an when every **#undef** encountered.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/645
https://github.com/root-project/root/pull/645:48,safety,Updat,Updates,48,Support undoing of #undef preprocessor tokens.; Updates DeclCollectorPPAdapter to new clang interface that reports an when every **#undef** encountered.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/645
https://github.com/root-project/root/pull/645:39,security,token,tokens,39,Support undoing of #undef preprocessor tokens.; Updates DeclCollectorPPAdapter to new clang interface that reports an when every **#undef** encountered.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/645
https://github.com/root-project/root/pull/645:48,security,Updat,Updates,48,Support undoing of #undef preprocessor tokens.; Updates DeclCollectorPPAdapter to new clang interface that reports an when every **#undef** encountered.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/645
https://github.com/root-project/root/pull/645:0,usability,Support,Support,0,Support undoing of #undef preprocessor tokens.; Updates DeclCollectorPPAdapter to new clang interface that reports an when every **#undef** encountered.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/645
https://github.com/root-project/root/pull/645:8,usability,undo,undoing,8,Support undoing of #undef preprocessor tokens.; Updates DeclCollectorPPAdapter to new clang interface that reports an when every **#undef** encountered.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/645
https://github.com/root-project/root/pull/646:59,deployability,modul,modules,59,Push a new transaction in the DictSelectionReader.; In the modules case it's possible that we deserialize declarations. while traversing the AST. This means we also need to have a new. transaction during this part of the code.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/646
https://github.com/root-project/root/pull/646:59,modifiability,modul,modules,59,Push a new transaction in the DictSelectionReader.; In the modules case it's possible that we deserialize declarations. while traversing the AST. This means we also need to have a new. transaction during this part of the code.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/646
https://github.com/root-project/root/pull/646:59,safety,modul,modules,59,Push a new transaction in the DictSelectionReader.; In the modules case it's possible that we deserialize declarations. while traversing the AST. This means we also need to have a new. transaction during this part of the code.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/646
https://github.com/root-project/root/pull/647:13,availability,Error,Error,13,Missing Lock Error Detection for TCollection;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/647
https://github.com/root-project/root/pull/647:8,performance,Lock,Lock,8,Missing Lock Error Detection for TCollection;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/647
https://github.com/root-project/root/pull/647:13,performance,Error,Error,13,Missing Lock Error Detection for TCollection;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/647
https://github.com/root-project/root/pull/647:13,safety,Error,Error,13,Missing Lock Error Detection for TCollection;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/647
https://github.com/root-project/root/pull/647:19,safety,Detect,Detection,19,Missing Lock Error Detection for TCollection;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/647
https://github.com/root-project/root/pull/647:8,security,Lock,Lock,8,Missing Lock Error Detection for TCollection;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/647
https://github.com/root-project/root/pull/647:19,security,Detect,Detection,19,Missing Lock Error Detection for TCollection;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/647
https://github.com/root-project/root/pull/647:13,usability,Error,Error,13,Missing Lock Error Detection for TCollection;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/647
https://github.com/root-project/root/pull/650:111,deployability,observ,observed,111,Fixing an O(N^2) scaling problem caused by TTree::Draw(); This is a first attempt at solving a scaling problem observed during TTree::Draw of a branch that contains a TClonesArray where each element contains another small vector container. The fix works for me.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/650
https://github.com/root-project/root/pull/650:156,deployability,contain,contains,156,Fixing an O(N^2) scaling problem caused by TTree::Draw(); This is a first attempt at solving a scaling problem observed during TTree::Draw of a branch that contains a TClonesArray where each element contains another small vector container. The fix works for me.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/650
https://github.com/root-project/root/pull/650:199,deployability,contain,contains,199,Fixing an O(N^2) scaling problem caused by TTree::Draw(); This is a first attempt at solving a scaling problem observed during TTree::Draw of a branch that contains a TClonesArray where each element contains another small vector container. The fix works for me.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/650
https://github.com/root-project/root/pull/650:229,deployability,contain,container,229,Fixing an O(N^2) scaling problem caused by TTree::Draw(); This is a first attempt at solving a scaling problem observed during TTree::Draw of a branch that contains a TClonesArray where each element contains another small vector container. The fix works for me.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/650
https://github.com/root-project/root/pull/650:50,energy efficiency,Draw,Draw,50,Fixing an O(N^2) scaling problem caused by TTree::Draw(); This is a first attempt at solving a scaling problem observed during TTree::Draw of a branch that contains a TClonesArray where each element contains another small vector container. The fix works for me.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/650
https://github.com/root-project/root/pull/650:134,energy efficiency,Draw,Draw,134,Fixing an O(N^2) scaling problem caused by TTree::Draw(); This is a first attempt at solving a scaling problem observed during TTree::Draw of a branch that contains a TClonesArray where each element contains another small vector container. The fix works for me.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/650
https://github.com/root-project/root/pull/650:17,modifiability,scal,scaling,17,Fixing an O(N^2) scaling problem caused by TTree::Draw(); This is a first attempt at solving a scaling problem observed during TTree::Draw of a branch that contains a TClonesArray where each element contains another small vector container. The fix works for me.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/650
https://github.com/root-project/root/pull/650:95,modifiability,scal,scaling,95,Fixing an O(N^2) scaling problem caused by TTree::Draw(); This is a first attempt at solving a scaling problem observed during TTree::Draw of a branch that contains a TClonesArray where each element contains another small vector container. The fix works for me.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/650
https://github.com/root-project/root/pull/650:111,testability,observ,observed,111,Fixing an O(N^2) scaling problem caused by TTree::Draw(); This is a first attempt at solving a scaling problem observed during TTree::Draw of a branch that contains a TClonesArray where each element contains another small vector container. The fix works for me.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/650
https://github.com/root-project/root/pull/651:4,integrability,buffer,buffer,4,Fix buffer overflow.;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/651
https://github.com/root-project/root/pull/652:10,availability,toler,tolerance,10,"Increased tolerance; Increase the tolerance for testVector34, as done in 43cae6c9ab93723b880eba4a4c5a20403cd6659a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/652
https://github.com/root-project/root/pull/652:34,availability,toler,tolerance,34,"Increased tolerance; Increase the tolerance for testVector34, as done in 43cae6c9ab93723b880eba4a4c5a20403cd6659a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/652
https://github.com/root-project/root/pull/652:10,reliability,toleran,tolerance,10,"Increased tolerance; Increase the tolerance for testVector34, as done in 43cae6c9ab93723b880eba4a4c5a20403cd6659a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/652
https://github.com/root-project/root/pull/652:34,reliability,toleran,tolerance,34,"Increased tolerance; Increase the tolerance for testVector34, as done in 43cae6c9ab93723b880eba4a4c5a20403cd6659a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/652
https://github.com/root-project/root/pull/653:11,deployability,build,build,11,Make cling build again on Windows (following the recent changes). To …; …be reviewed,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/653
https://github.com/root-project/root/pull/653:76,safety,review,reviewed,76,Make cling build again on Windows (following the recent changes). To …; …be reviewed,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/653
https://github.com/root-project/root/pull/653:76,testability,review,reviewed,76,Make cling build again on Windows (following the recent changes). To …; …be reviewed,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/653
https://github.com/root-project/root/pull/654:23,deployability,build,builds,23,Fix warnings on no-imt builds;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/654
https://github.com/root-project/root/pull/655:159,energy efficiency,Current,Currently,159,"[WIP] Vectorization of TMath; This PR adds vectorized implementations of several functions in TMath. It is a work in progress, just to receive early feedback. Currently, the following functions are vectorized and tested:. - TMath::Min. - TMath::Gaus. - TMath::BreitWigner. - TMath::CauchyDist. - TMath::LaplaceDist. - TMath::LaplaceDistI. TODO:. - [ ] Refactor the tests to avoid repeated code. - [ ] Implement remaining functions. - [ ] Discuss what to do with functions that, i.e., receive an Int_t and return a Double_t. When vectorizing this kind of patterns, one problem arises: the length of integers and double vectors cannot be assumed to be the same. Any comment is more than welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/655
https://github.com/root-project/root/pull/655:352,modifiability,Refact,Refactor,352,"[WIP] Vectorization of TMath; This PR adds vectorized implementations of several functions in TMath. It is a work in progress, just to receive early feedback. Currently, the following functions are vectorized and tested:. - TMath::Min. - TMath::Gaus. - TMath::BreitWigner. - TMath::CauchyDist. - TMath::LaplaceDist. - TMath::LaplaceDistI. TODO:. - [ ] Refactor the tests to avoid repeated code. - [ ] Implement remaining functions. - [ ] Discuss what to do with functions that, i.e., receive an Int_t and return a Double_t. When vectorizing this kind of patterns, one problem arises: the length of integers and double vectors cannot be assumed to be the same. Any comment is more than welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/655
https://github.com/root-project/root/pull/655:352,performance,Refactor,Refactor,352,"[WIP] Vectorization of TMath; This PR adds vectorized implementations of several functions in TMath. It is a work in progress, just to receive early feedback. Currently, the following functions are vectorized and tested:. - TMath::Min. - TMath::Gaus. - TMath::BreitWigner. - TMath::CauchyDist. - TMath::LaplaceDist. - TMath::LaplaceDistI. TODO:. - [ ] Refactor the tests to avoid repeated code. - [ ] Implement remaining functions. - [ ] Discuss what to do with functions that, i.e., receive an Int_t and return a Double_t. When vectorizing this kind of patterns, one problem arises: the length of integers and double vectors cannot be assumed to be the same. Any comment is more than welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/655
https://github.com/root-project/root/pull/655:213,safety,test,tested,213,"[WIP] Vectorization of TMath; This PR adds vectorized implementations of several functions in TMath. It is a work in progress, just to receive early feedback. Currently, the following functions are vectorized and tested:. - TMath::Min. - TMath::Gaus. - TMath::BreitWigner. - TMath::CauchyDist. - TMath::LaplaceDist. - TMath::LaplaceDistI. TODO:. - [ ] Refactor the tests to avoid repeated code. - [ ] Implement remaining functions. - [ ] Discuss what to do with functions that, i.e., receive an Int_t and return a Double_t. When vectorizing this kind of patterns, one problem arises: the length of integers and double vectors cannot be assumed to be the same. Any comment is more than welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/655
https://github.com/root-project/root/pull/655:365,safety,test,tests,365,"[WIP] Vectorization of TMath; This PR adds vectorized implementations of several functions in TMath. It is a work in progress, just to receive early feedback. Currently, the following functions are vectorized and tested:. - TMath::Min. - TMath::Gaus. - TMath::BreitWigner. - TMath::CauchyDist. - TMath::LaplaceDist. - TMath::LaplaceDistI. TODO:. - [ ] Refactor the tests to avoid repeated code. - [ ] Implement remaining functions. - [ ] Discuss what to do with functions that, i.e., receive an Int_t and return a Double_t. When vectorizing this kind of patterns, one problem arises: the length of integers and double vectors cannot be assumed to be the same. Any comment is more than welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/655
https://github.com/root-project/root/pull/655:374,safety,avoid,avoid,374,"[WIP] Vectorization of TMath; This PR adds vectorized implementations of several functions in TMath. It is a work in progress, just to receive early feedback. Currently, the following functions are vectorized and tested:. - TMath::Min. - TMath::Gaus. - TMath::BreitWigner. - TMath::CauchyDist. - TMath::LaplaceDist. - TMath::LaplaceDistI. TODO:. - [ ] Refactor the tests to avoid repeated code. - [ ] Implement remaining functions. - [ ] Discuss what to do with functions that, i.e., receive an Int_t and return a Double_t. When vectorizing this kind of patterns, one problem arises: the length of integers and double vectors cannot be assumed to be the same. Any comment is more than welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/655
https://github.com/root-project/root/pull/655:213,testability,test,tested,213,"[WIP] Vectorization of TMath; This PR adds vectorized implementations of several functions in TMath. It is a work in progress, just to receive early feedback. Currently, the following functions are vectorized and tested:. - TMath::Min. - TMath::Gaus. - TMath::BreitWigner. - TMath::CauchyDist. - TMath::LaplaceDist. - TMath::LaplaceDistI. TODO:. - [ ] Refactor the tests to avoid repeated code. - [ ] Implement remaining functions. - [ ] Discuss what to do with functions that, i.e., receive an Int_t and return a Double_t. When vectorizing this kind of patterns, one problem arises: the length of integers and double vectors cannot be assumed to be the same. Any comment is more than welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/655
https://github.com/root-project/root/pull/655:365,testability,test,tests,365,"[WIP] Vectorization of TMath; This PR adds vectorized implementations of several functions in TMath. It is a work in progress, just to receive early feedback. Currently, the following functions are vectorized and tested:. - TMath::Min. - TMath::Gaus. - TMath::BreitWigner. - TMath::CauchyDist. - TMath::LaplaceDist. - TMath::LaplaceDistI. TODO:. - [ ] Refactor the tests to avoid repeated code. - [ ] Implement remaining functions. - [ ] Discuss what to do with functions that, i.e., receive an Int_t and return a Double_t. When vectorizing this kind of patterns, one problem arises: the length of integers and double vectors cannot be assumed to be the same. Any comment is more than welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/655
https://github.com/root-project/root/pull/655:117,usability,progress,progress,117,"[WIP] Vectorization of TMath; This PR adds vectorized implementations of several functions in TMath. It is a work in progress, just to receive early feedback. Currently, the following functions are vectorized and tested:. - TMath::Min. - TMath::Gaus. - TMath::BreitWigner. - TMath::CauchyDist. - TMath::LaplaceDist. - TMath::LaplaceDistI. TODO:. - [ ] Refactor the tests to avoid repeated code. - [ ] Implement remaining functions. - [ ] Discuss what to do with functions that, i.e., receive an Int_t and return a Double_t. When vectorizing this kind of patterns, one problem arises: the length of integers and double vectors cannot be assumed to be the same. Any comment is more than welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/655
https://github.com/root-project/root/pull/655:149,usability,feedback,feedback,149,"[WIP] Vectorization of TMath; This PR adds vectorized implementations of several functions in TMath. It is a work in progress, just to receive early feedback. Currently, the following functions are vectorized and tested:. - TMath::Min. - TMath::Gaus. - TMath::BreitWigner. - TMath::CauchyDist. - TMath::LaplaceDist. - TMath::LaplaceDistI. TODO:. - [ ] Refactor the tests to avoid repeated code. - [ ] Implement remaining functions. - [ ] Discuss what to do with functions that, i.e., receive an Int_t and return a Double_t. When vectorizing this kind of patterns, one problem arises: the length of integers and double vectors cannot be assumed to be the same. Any comment is more than welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/655
https://github.com/root-project/root/pull/657:251,availability,cluster,cluster,251,"Overhaul OptimizeBaskets algorithm.; This is an overhaul of the optimize baskets algorithm, primarily done by Ilija Vukotic and extended by David Smith. Goal of this algorithm is to minimize overall memory size when writing and number of baskets in a cluster. Since this work predates ROOT moving to GitHub, it appears the patches primarily are floating around in various people's inbox. This is my attempt to ""capture"" the knowledge and ideas, even if we don't decide to go this direction. @pcanal @smithdh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/657
https://github.com/root-project/root/pull/657:251,deployability,cluster,cluster,251,"Overhaul OptimizeBaskets algorithm.; This is an overhaul of the optimize baskets algorithm, primarily done by Ilija Vukotic and extended by David Smith. Goal of this algorithm is to minimize overall memory size when writing and number of baskets in a cluster. Since this work predates ROOT moving to GitHub, it appears the patches primarily are floating around in various people's inbox. This is my attempt to ""capture"" the knowledge and ideas, even if we don't decide to go this direction. @pcanal @smithdh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/657
https://github.com/root-project/root/pull/657:323,deployability,patch,patches,323,"Overhaul OptimizeBaskets algorithm.; This is an overhaul of the optimize baskets algorithm, primarily done by Ilija Vukotic and extended by David Smith. Goal of this algorithm is to minimize overall memory size when writing and number of baskets in a cluster. Since this work predates ROOT moving to GitHub, it appears the patches primarily are floating around in various people's inbox. This is my attempt to ""capture"" the knowledge and ideas, even if we don't decide to go this direction. @pcanal @smithdh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/657
https://github.com/root-project/root/pull/657:9,energy efficiency,Optim,OptimizeBaskets,9,"Overhaul OptimizeBaskets algorithm.; This is an overhaul of the optimize baskets algorithm, primarily done by Ilija Vukotic and extended by David Smith. Goal of this algorithm is to minimize overall memory size when writing and number of baskets in a cluster. Since this work predates ROOT moving to GitHub, it appears the patches primarily are floating around in various people's inbox. This is my attempt to ""capture"" the knowledge and ideas, even if we don't decide to go this direction. @pcanal @smithdh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/657
https://github.com/root-project/root/pull/657:64,energy efficiency,optim,optimize,64,"Overhaul OptimizeBaskets algorithm.; This is an overhaul of the optimize baskets algorithm, primarily done by Ilija Vukotic and extended by David Smith. Goal of this algorithm is to minimize overall memory size when writing and number of baskets in a cluster. Since this work predates ROOT moving to GitHub, it appears the patches primarily are floating around in various people's inbox. This is my attempt to ""capture"" the knowledge and ideas, even if we don't decide to go this direction. @pcanal @smithdh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/657
https://github.com/root-project/root/pull/657:128,modifiability,exten,extended,128,"Overhaul OptimizeBaskets algorithm.; This is an overhaul of the optimize baskets algorithm, primarily done by Ilija Vukotic and extended by David Smith. Goal of this algorithm is to minimize overall memory size when writing and number of baskets in a cluster. Since this work predates ROOT moving to GitHub, it appears the patches primarily are floating around in various people's inbox. This is my attempt to ""capture"" the knowledge and ideas, even if we don't decide to go this direction. @pcanal @smithdh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/657
https://github.com/root-project/root/pull/657:9,performance,Optimiz,OptimizeBaskets,9,"Overhaul OptimizeBaskets algorithm.; This is an overhaul of the optimize baskets algorithm, primarily done by Ilija Vukotic and extended by David Smith. Goal of this algorithm is to minimize overall memory size when writing and number of baskets in a cluster. Since this work predates ROOT moving to GitHub, it appears the patches primarily are floating around in various people's inbox. This is my attempt to ""capture"" the knowledge and ideas, even if we don't decide to go this direction. @pcanal @smithdh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/657
https://github.com/root-project/root/pull/657:64,performance,optimiz,optimize,64,"Overhaul OptimizeBaskets algorithm.; This is an overhaul of the optimize baskets algorithm, primarily done by Ilija Vukotic and extended by David Smith. Goal of this algorithm is to minimize overall memory size when writing and number of baskets in a cluster. Since this work predates ROOT moving to GitHub, it appears the patches primarily are floating around in various people's inbox. This is my attempt to ""capture"" the knowledge and ideas, even if we don't decide to go this direction. @pcanal @smithdh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/657
https://github.com/root-project/root/pull/657:199,performance,memor,memory,199,"Overhaul OptimizeBaskets algorithm.; This is an overhaul of the optimize baskets algorithm, primarily done by Ilija Vukotic and extended by David Smith. Goal of this algorithm is to minimize overall memory size when writing and number of baskets in a cluster. Since this work predates ROOT moving to GitHub, it appears the patches primarily are floating around in various people's inbox. This is my attempt to ""capture"" the knowledge and ideas, even if we don't decide to go this direction. @pcanal @smithdh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/657
https://github.com/root-project/root/pull/657:323,safety,patch,patches,323,"Overhaul OptimizeBaskets algorithm.; This is an overhaul of the optimize baskets algorithm, primarily done by Ilija Vukotic and extended by David Smith. Goal of this algorithm is to minimize overall memory size when writing and number of baskets in a cluster. Since this work predates ROOT moving to GitHub, it appears the patches primarily are floating around in various people's inbox. This is my attempt to ""capture"" the knowledge and ideas, even if we don't decide to go this direction. @pcanal @smithdh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/657
https://github.com/root-project/root/pull/657:323,security,patch,patches,323,"Overhaul OptimizeBaskets algorithm.; This is an overhaul of the optimize baskets algorithm, primarily done by Ilija Vukotic and extended by David Smith. Goal of this algorithm is to minimize overall memory size when writing and number of baskets in a cluster. Since this work predates ROOT moving to GitHub, it appears the patches primarily are floating around in various people's inbox. This is my attempt to ""capture"" the knowledge and ideas, even if we don't decide to go this direction. @pcanal @smithdh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/657
https://github.com/root-project/root/pull/657:182,usability,minim,minimize,182,"Overhaul OptimizeBaskets algorithm.; This is an overhaul of the optimize baskets algorithm, primarily done by Ilija Vukotic and extended by David Smith. Goal of this algorithm is to minimize overall memory size when writing and number of baskets in a cluster. Since this work predates ROOT moving to GitHub, it appears the patches primarily are floating around in various people's inbox. This is my attempt to ""capture"" the knowledge and ideas, even if we don't decide to go this direction. @pcanal @smithdh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/657
https://github.com/root-project/root/pull/657:199,usability,memor,memory,199,"Overhaul OptimizeBaskets algorithm.; This is an overhaul of the optimize baskets algorithm, primarily done by Ilija Vukotic and extended by David Smith. Goal of this algorithm is to minimize overall memory size when writing and number of baskets in a cluster. Since this work predates ROOT moving to GitHub, it appears the patches primarily are floating around in various people's inbox. This is my attempt to ""capture"" the knowledge and ideas, even if we don't decide to go this direction. @pcanal @smithdh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/657
https://github.com/root-project/root/pull/659:323,availability,Error,Error,323,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:795,availability,Error,Error,795,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:1138,availability,error,error,1138,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:280,deployability,FAIL,FAILED,280,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:752,deployability,FAIL,FAILED,752,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:1087,energy efficiency,current,current,1087,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:323,performance,Error,Error,323,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:795,performance,Error,Error,795,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:1138,performance,error,error,1138,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:280,reliability,FAIL,FAILED,280,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:752,reliability,FAIL,FAILED,752,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:90,safety,Test,Test,90,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:323,safety,Error,Error,323,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:562,safety,Test,Test,562,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:795,safety,Error,Error,795,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:1138,safety,error,error,1138,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:90,testability,Test,Test,90,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:562,testability,Test,Test,562,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:323,usability,Error,Error,323,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:795,usability,Error,Error,795,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/659:1138,usability,error,error,1138,"Fix reference for RHEL 7 and Fedora 24; Fix for stressGraphics.ref. On RHEL/EPEL 7:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13517. Reference = 14622. Error = 1105 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. On Fedora 24:. ```. Test 10: TLatex 4 (Greek letters).................................. OK. PDF output................................................ OK. GIF output......................................... 10 FAILED. Result = 13509. Reference = 14622. Error = 1113 (was 1100). JPG output................................................ OK. PNG output................................................ OK. C file result............................................. OK. ```. The results were off by just 5 and 13 bytes more, respectively, than the current allowed limit. For Fedora 25, 26 and 27 no error was triggered.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/659
https://github.com/root-project/root/pull/660:6,safety,Prevent,Prevent,6,[TDF] Prevent switch of gDirectory to TBufferMergerFile;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/660
https://github.com/root-project/root/pull/660:6,security,Preven,Prevent,6,[TDF] Prevent switch of gDirectory to TBufferMergerFile;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/660
https://github.com/root-project/root/pull/661:4,deployability,build,build,4,Add build timing cross platform support.; This enables to easily get build performance statistics and debug other build. bottlenecks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/661
https://github.com/root-project/root/pull/661:69,deployability,build,build,69,Add build timing cross platform support.; This enables to easily get build performance statistics and debug other build. bottlenecks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/661
https://github.com/root-project/root/pull/661:114,deployability,build,build,114,Add build timing cross platform support.; This enables to easily get build performance statistics and debug other build. bottlenecks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/661
https://github.com/root-project/root/pull/661:23,interoperability,platform,platform,23,Add build timing cross platform support.; This enables to easily get build performance statistics and debug other build. bottlenecks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/661
https://github.com/root-project/root/pull/661:75,performance,perform,performance,75,Add build timing cross platform support.; This enables to easily get build performance statistics and debug other build. bottlenecks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/661
https://github.com/root-project/root/pull/661:121,performance,bottleneck,bottlenecks,121,Add build timing cross platform support.; This enables to easily get build performance statistics and debug other build. bottlenecks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/661
https://github.com/root-project/root/pull/661:32,usability,support,support,32,Add build timing cross platform support.; This enables to easily get build performance statistics and debug other build. bottlenecks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/661
https://github.com/root-project/root/pull/661:75,usability,perform,performance,75,Add build timing cross platform support.; This enables to easily get build performance statistics and debug other build. bottlenecks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/661
https://github.com/root-project/root/pull/662:86,integrability,sub,submitted,86,[TDF] Fix jitting in the case of no data source; The corresponding regression test is submitted in a PR to roottest.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/662
https://github.com/root-project/root/pull/662:78,safety,test,test,78,[TDF] Fix jitting in the case of no data source; The corresponding regression test is submitted in a PR to roottest.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/662
https://github.com/root-project/root/pull/662:67,testability,regress,regression,67,[TDF] Fix jitting in the case of no data source; The corresponding regression test is submitted in a PR to roottest.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/662
https://github.com/root-project/root/pull/662:78,testability,test,test,78,[TDF] Fix jitting in the case of no data source; The corresponding regression test is submitted in a PR to roottest.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/662
https://github.com/root-project/root/pull/663:0,deployability,Updat,Update,0,Update zlib to 1.2.8; Update zlib to 1.2.8 released in Apr 2013. This is a battle tested. version which is used as a base for QAT and Cloudflare zlib forks. roottest passed with no additional issues. Signed-off-by: David Abdurachmanov <David.Abdurachmanov@cern.ch>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/663
https://github.com/root-project/root/pull/663:22,deployability,Updat,Update,22,Update zlib to 1.2.8; Update zlib to 1.2.8 released in Apr 2013. This is a battle tested. version which is used as a base for QAT and Cloudflare zlib forks. roottest passed with no additional issues. Signed-off-by: David Abdurachmanov <David.Abdurachmanov@cern.ch>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/663
https://github.com/root-project/root/pull/663:43,deployability,releas,released,43,Update zlib to 1.2.8; Update zlib to 1.2.8 released in Apr 2013. This is a battle tested. version which is used as a base for QAT and Cloudflare zlib forks. roottest passed with no additional issues. Signed-off-by: David Abdurachmanov <David.Abdurachmanov@cern.ch>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/663
https://github.com/root-project/root/pull/663:90,deployability,version,version,90,Update zlib to 1.2.8; Update zlib to 1.2.8 released in Apr 2013. This is a battle tested. version which is used as a base for QAT and Cloudflare zlib forks. roottest passed with no additional issues. Signed-off-by: David Abdurachmanov <David.Abdurachmanov@cern.ch>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/663
https://github.com/root-project/root/pull/663:134,energy efficiency,Cloud,Cloudflare,134,Update zlib to 1.2.8; Update zlib to 1.2.8 released in Apr 2013. This is a battle tested. version which is used as a base for QAT and Cloudflare zlib forks. roottest passed with no additional issues. Signed-off-by: David Abdurachmanov <David.Abdurachmanov@cern.ch>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/663
https://github.com/root-project/root/pull/663:90,integrability,version,version,90,Update zlib to 1.2.8; Update zlib to 1.2.8 released in Apr 2013. This is a battle tested. version which is used as a base for QAT and Cloudflare zlib forks. roottest passed with no additional issues. Signed-off-by: David Abdurachmanov <David.Abdurachmanov@cern.ch>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/663
https://github.com/root-project/root/pull/663:90,modifiability,version,version,90,Update zlib to 1.2.8; Update zlib to 1.2.8 released in Apr 2013. This is a battle tested. version which is used as a base for QAT and Cloudflare zlib forks. roottest passed with no additional issues. Signed-off-by: David Abdurachmanov <David.Abdurachmanov@cern.ch>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/663
https://github.com/root-project/root/pull/663:0,safety,Updat,Update,0,Update zlib to 1.2.8; Update zlib to 1.2.8 released in Apr 2013. This is a battle tested. version which is used as a base for QAT and Cloudflare zlib forks. roottest passed with no additional issues. Signed-off-by: David Abdurachmanov <David.Abdurachmanov@cern.ch>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/663
https://github.com/root-project/root/pull/663:22,safety,Updat,Update,22,Update zlib to 1.2.8; Update zlib to 1.2.8 released in Apr 2013. This is a battle tested. version which is used as a base for QAT and Cloudflare zlib forks. roottest passed with no additional issues. Signed-off-by: David Abdurachmanov <David.Abdurachmanov@cern.ch>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/663
https://github.com/root-project/root/pull/663:82,safety,test,tested,82,Update zlib to 1.2.8; Update zlib to 1.2.8 released in Apr 2013. This is a battle tested. version which is used as a base for QAT and Cloudflare zlib forks. roottest passed with no additional issues. Signed-off-by: David Abdurachmanov <David.Abdurachmanov@cern.ch>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/663
https://github.com/root-project/root/pull/663:0,security,Updat,Update,0,Update zlib to 1.2.8; Update zlib to 1.2.8 released in Apr 2013. This is a battle tested. version which is used as a base for QAT and Cloudflare zlib forks. roottest passed with no additional issues. Signed-off-by: David Abdurachmanov <David.Abdurachmanov@cern.ch>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/663
https://github.com/root-project/root/pull/663:22,security,Updat,Update,22,Update zlib to 1.2.8; Update zlib to 1.2.8 released in Apr 2013. This is a battle tested. version which is used as a base for QAT and Cloudflare zlib forks. roottest passed with no additional issues. Signed-off-by: David Abdurachmanov <David.Abdurachmanov@cern.ch>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/663
https://github.com/root-project/root/pull/663:200,security,Sign,Signed-off-by,200,Update zlib to 1.2.8; Update zlib to 1.2.8 released in Apr 2013. This is a battle tested. version which is used as a base for QAT and Cloudflare zlib forks. roottest passed with no additional issues. Signed-off-by: David Abdurachmanov <David.Abdurachmanov@cern.ch>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/663
https://github.com/root-project/root/pull/663:82,testability,test,tested,82,Update zlib to 1.2.8; Update zlib to 1.2.8 released in Apr 2013. This is a battle tested. version which is used as a base for QAT and Cloudflare zlib forks. roottest passed with no additional issues. Signed-off-by: David Abdurachmanov <David.Abdurachmanov@cern.ch>,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/663
https://github.com/root-project/root/pull/664:6,deployability,patch,patch,6,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:157,deployability,patch,patch,157,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:403,deployability,patch,patch,403,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:481,energy efficiency,CPU,CPU,481,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:261,interoperability,architectur,architecture,261,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:486,interoperability,architectur,architecture,486,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:76,performance,Network,Networks,76,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:481,performance,CPU,CPU,481,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:6,safety,patch,patch,6,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:157,safety,patch,patch,157,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:239,safety,test,tested,239,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:343,safety,test,test,343,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:384,safety,test,tests,384,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:403,safety,patch,patch,403,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:6,security,patch,patch,6,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:76,security,Network,Networks,76,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:157,security,patch,patch,157,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:403,security,patch,patch,403,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:239,testability,test,tested,239,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:343,testability,test,test,343,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:384,testability,test,tests,384,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/664:417,testability,plan,plan,417,"First patch CNN; Hello,. it is Vladimir working on the Convolutional Neural Networks in TMVA,. as a part of the Google Summer of Code 2017. This is my first patch for now,. where I have created the entire CNN structure and implemented and tested. the reference architecture. I had some problems with the backpropagation,. so I was not able to test that. For everything else there are tests. In the next patch which I plan to be before the first evaluation starts, I will include a CPU. architecture implementation, and a correct backporpagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/664
https://github.com/root-project/root/pull/666:0,energy efficiency,Optim,Optimizations,0,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:166,energy efficiency,Load,LoadClassInfo,166,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:256,energy efficiency,load,loaded,256,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:367,energy efficiency,optim,optimizations,367,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:429,energy efficiency,green,green,429,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:470,energy efficiency,green,green,470,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:0,performance,Optimiz,Optimizations,0,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:36,performance,parallel,parallel,36,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:45,performance,I/O,I/O,45,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:166,performance,Load,LoadClassInfo,166,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:219,performance,lock,lock,219,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:256,performance,load,loaded,256,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:287,performance,perform,performance,287,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:367,performance,optimiz,optimizations,367,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:417,performance,time,time,417,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:219,security,lock,lock,219,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:275,security,sign,significant,275,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:287,usability,perform,performance,287,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:535,usability,user,user-images,535,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/666:661,usability,user,user-images,661,"Optimizations for TBufferMerger and parallel I/O in general; These changes are based on an analysis with VTune that showed that most waiting happened around `TClass::LoadClassInfo()`. Returning early without taking the lock when the information is already loaded yields very significant performance improvements. Images with each thread activity before and after the optimizations are attached. The x-axis represents time, light green means a thread is active, and dark green and brown mean running. Before changes:. ![before](https://user-images.githubusercontent.com/249404/27340439-be419240-55da-11e7-9cba-d881cfdd3104.png). After changes:. ![after](https://user-images.githubusercontent.com/249404/27340446-c57cf018-55da-11e7-9ef2-bbe30b30092f.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/666
https://github.com/root-project/root/pull/667:224,deployability,patch,patch,224,"Fix invalid return type when casting function in TClingCallFunc; We accidentially check and annotate the return type of the function twice for. being a pointer/reference type when we do the ""else"" part of the. wrapper. This patch removes this wrong second check and extends. the tests to check that the cast in both branches of the if/else. is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/667
https://github.com/root-project/root/pull/667:210,integrability,wrap,wrapper,210,"Fix invalid return type when casting function in TClingCallFunc; We accidentially check and annotate the return type of the function twice for. being a pointer/reference type when we do the ""else"" part of the. wrapper. This patch removes this wrong second check and extends. the tests to check that the cast in both branches of the if/else. is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/667
https://github.com/root-project/root/pull/667:210,interoperability,wrapper,wrapper,210,"Fix invalid return type when casting function in TClingCallFunc; We accidentially check and annotate the return type of the function twice for. being a pointer/reference type when we do the ""else"" part of the. wrapper. This patch removes this wrong second check and extends. the tests to check that the cast in both branches of the if/else. is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/667
https://github.com/root-project/root/pull/667:266,modifiability,exten,extends,266,"Fix invalid return type when casting function in TClingCallFunc; We accidentially check and annotate the return type of the function twice for. being a pointer/reference type when we do the ""else"" part of the. wrapper. This patch removes this wrong second check and extends. the tests to check that the cast in both branches of the if/else. is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/667
https://github.com/root-project/root/pull/667:68,safety,accid,accidentially,68,"Fix invalid return type when casting function in TClingCallFunc; We accidentially check and annotate the return type of the function twice for. being a pointer/reference type when we do the ""else"" part of the. wrapper. This patch removes this wrong second check and extends. the tests to check that the cast in both branches of the if/else. is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/667
https://github.com/root-project/root/pull/667:224,safety,patch,patch,224,"Fix invalid return type when casting function in TClingCallFunc; We accidentially check and annotate the return type of the function twice for. being a pointer/reference type when we do the ""else"" part of the. wrapper. This patch removes this wrong second check and extends. the tests to check that the cast in both branches of the if/else. is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/667
https://github.com/root-project/root/pull/667:279,safety,test,tests,279,"Fix invalid return type when casting function in TClingCallFunc; We accidentially check and annotate the return type of the function twice for. being a pointer/reference type when we do the ""else"" part of the. wrapper. This patch removes this wrong second check and extends. the tests to check that the cast in both branches of the if/else. is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/667
https://github.com/root-project/root/pull/667:224,security,patch,patch,224,"Fix invalid return type when casting function in TClingCallFunc; We accidentially check and annotate the return type of the function twice for. being a pointer/reference type when we do the ""else"" part of the. wrapper. This patch removes this wrong second check and extends. the tests to check that the cast in both branches of the if/else. is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/667
https://github.com/root-project/root/pull/667:279,testability,test,tests,279,"Fix invalid return type when casting function in TClingCallFunc; We accidentially check and annotate the return type of the function twice for. being a pointer/reference type when we do the ""else"" part of the. wrapper. This patch removes this wrong second check and extends. the tests to check that the cast in both branches of the if/else. is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/667
https://github.com/root-project/root/pull/669:118,interoperability,convers,conversions,118,Have MetaProcessor::process take an llvm::StringRef. Remove unnecessa…; …ry std::string -> const char* -> std::string conversions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/669
https://github.com/root-project/root/pull/676:419,deployability,Updat,Update,419,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:509,deployability,updat,update,509,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:339,energy efficiency,current,current,339,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:106,integrability,abstract,abstract,106,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:115,integrability,interfac,interface,115,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:115,interoperability,interfac,interface,115,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:106,modifiability,abstract,abstract,106,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:115,modifiability,interfac,interface,115,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:528,modifiability,scal,scalability,528,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:590,modifiability,scal,scalability,590,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:31,performance,Lock,Lock,31,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:356,performance,lock,locks,356,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:528,performance,scalab,scalability,528,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:571,performance,lock,lock,571,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:590,performance,scalab,scalability,590,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:419,safety,Updat,Update,419,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:509,safety,updat,update,509,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:602,safety,test,test,602,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:31,security,Lock,Lock,31,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:80,security,access,access,80,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:356,security,lock,locks,356,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:419,security,Updat,Update,419,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:509,security,updat,update,509,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:571,security,lock,lock,571,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/676:602,testability,test,test,602,"Introduce Reentrant Read Write Lock; The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:. 1) Replace gROOTMutex by a TRWMutexImp. 2) Add R__READLOCKGUARD. 3) Add a TListWithRWLock and THashListWithRWLock. 4) Use those in TROOT. 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles). 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock. 7) Introduce scalability test on RecursiveRemove.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/676
https://github.com/root-project/root/pull/677:151,availability,redund,redundant,151,"[Math] Avoid redefinition of `VECCORE_ENABLE_VC` macro; The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via. `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/677
https://github.com/root-project/root/pull/677:151,deployability,redundan,redundant,151,"[Math] Avoid redefinition of `VECCORE_ENABLE_VC` macro; The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via. `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/677
https://github.com/root-project/root/pull/677:202,deployability,build,build,202,"[Math] Avoid redefinition of `VECCORE_ENABLE_VC` macro; The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via. `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/677
https://github.com/root-project/root/pull/677:325,deployability,depend,dependencies,325,"[Math] Avoid redefinition of `VECCORE_ENABLE_VC` macro; The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via. `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/677
https://github.com/root-project/root/pull/677:325,integrability,depend,dependencies,325,"[Math] Avoid redefinition of `VECCORE_ENABLE_VC` macro; The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via. `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/677
https://github.com/root-project/root/pull/677:325,modifiability,depend,dependencies,325,"[Math] Avoid redefinition of `VECCORE_ENABLE_VC` macro; The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via. `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/677
https://github.com/root-project/root/pull/677:151,reliability,redundan,redundant,151,"[Math] Avoid redefinition of `VECCORE_ENABLE_VC` macro; The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via. `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/677
https://github.com/root-project/root/pull/677:7,safety,Avoid,Avoid,7,"[Math] Avoid redefinition of `VECCORE_ENABLE_VC` macro; The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via. `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/677
https://github.com/root-project/root/pull/677:151,safety,redund,redundant,151,"[Math] Avoid redefinition of `VECCORE_ENABLE_VC` macro; The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via. `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/677
https://github.com/root-project/root/pull/677:325,safety,depend,dependencies,325,"[Math] Avoid redefinition of `VECCORE_ENABLE_VC` macro; The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via. `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/677
https://github.com/root-project/root/pull/677:325,testability,depend,dependencies,325,"[Math] Avoid redefinition of `VECCORE_ENABLE_VC` macro; The macro should be already set via `${VecCore_DEFINITIONS}`, so setting it unconditionally is redundant and leads to many warnings. However, the build system is not quite ready for setting this only via. `${VecCore_DEFINITIONS}`, so we need to conditionally set it if dependencies are satisfied and it is not set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/677
https://github.com/root-project/root/pull/679:101,availability,error,errors,101,"Value print diags [WIP]; Can we enable diagnostics for value printing, to be more helpful in case of errors?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/679
https://github.com/root-project/root/pull/679:101,performance,error,errors,101,"Value print diags [WIP]; Can we enable diagnostics for value printing, to be more helpful in case of errors?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/679
https://github.com/root-project/root/pull/679:39,reliability,diagno,diagnostics,39,"Value print diags [WIP]; Can we enable diagnostics for value printing, to be more helpful in case of errors?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/679
https://github.com/root-project/root/pull/679:101,safety,error,errors,101,"Value print diags [WIP]; Can we enable diagnostics for value printing, to be more helpful in case of errors?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/679
https://github.com/root-project/root/pull/679:39,testability,diagno,diagnostics,39,"Value print diags [WIP]; Can we enable diagnostics for value printing, to be more helpful in case of errors?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/679
https://github.com/root-project/root/pull/679:82,usability,help,helpful,82,"Value print diags [WIP]; Can we enable diagnostics for value printing, to be more helpful in case of errors?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/679
https://github.com/root-project/root/pull/679:101,usability,error,errors,101,"Value print diags [WIP]; Can we enable diagnostics for value printing, to be more helpful in case of errors?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/679
https://github.com/root-project/root/pull/681:635,availability,avail,available,635,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/681:449,integrability,sub,subset,449,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/681:191,modifiability,exten,extend,191,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/681:418,modifiability,pac,package,418,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/681:544,modifiability,exten,extended,544,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/681:635,reliability,availab,available,635,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/681:635,safety,avail,available,635,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/681:280,security,modif,modified,280,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/681:635,security,availab,available,635,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/681:6,testability,regress,regression,6,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/681:154,testability,Regress,Regression,154,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/681:328,testability,regress,regression,328,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/681:482,testability,simpl,simply,482,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/681:683,testability,plan,planning,683,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/681:482,usability,simpl,simply,482,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/681:773,usability,learn,learning,773,"Multi regression decision trees; Hello, Everyone! My name is Sergey and I am a GSOC student this year. The aim of my project is to implement Multi-Target Regression algorithms to TMVA and to extend the capability of existing ones to handle multiple targets. In this commit I have modified the DecisionTree, allowing it to solve regression problems for multiple targets. The idea was inspired by how it is done in Clus package. (The variance of each subset resulting from a split is simply summed up from variances for each target). I have also extended the capability of BDT method to handle multiple targets (The only boosting method available for it right now is Bagging, but I am planning to implement Multi-target gradient descent based on the paper Boosted multi-task learning (2010) by Olivier Chapelle. Pannagadatta Shivaswamy. ·",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/681
https://github.com/root-project/root/pull/682:213,deployability,version,version,213,"Revert ""Work around vtable index issue due to base class definition b…; …eing replaced by later PCM."". This reverts commit fc1cb8039199c081f3029c437c758dd11ae0eff8. And brings that file back to the original clang version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/682
https://github.com/root-project/root/pull/682:213,integrability,version,version,213,"Revert ""Work around vtable index issue due to base class definition b…; …eing replaced by later PCM."". This reverts commit fc1cb8039199c081f3029c437c758dd11ae0eff8. And brings that file back to the original clang version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/682
https://github.com/root-project/root/pull/682:213,modifiability,version,version,213,"Revert ""Work around vtable index issue due to base class definition b…; …eing replaced by later PCM."". This reverts commit fc1cb8039199c081f3029c437c758dd11ae0eff8. And brings that file back to the original clang version.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/682
https://github.com/root-project/root/pull/683:97,deployability,patch,patch,97,"Revert ""Temporary hack to survive (unnecessary) codegening of deseria…; …lized decls"". clang.git patch id: ffc388b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/683
https://github.com/root-project/root/pull/683:97,safety,patch,patch,97,"Revert ""Temporary hack to survive (unnecessary) codegening of deseria…; …lized decls"". clang.git patch id: ffc388b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/683
https://github.com/root-project/root/pull/683:18,security,hack,hack,18,"Revert ""Temporary hack to survive (unnecessary) codegening of deseria…; …lized decls"". clang.git patch id: ffc388b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/683
https://github.com/root-project/root/pull/683:97,security,patch,patch,97,"Revert ""Temporary hack to survive (unnecessary) codegening of deseria…; …lized decls"". clang.git patch id: ffc388b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/683
https://github.com/root-project/root/pull/684:141,deployability,patch,patch,141,"Revert ""Change the clang default to request bool rather than _Bool""; This reverts commit 5f7fd3aa6007c04e9d761816fea6d9b3146bd79a. clang.git patch id: 4412120",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/684
https://github.com/root-project/root/pull/684:141,safety,patch,patch,141,"Revert ""Change the clang default to request bool rather than _Bool""; This reverts commit 5f7fd3aa6007c04e9d761816fea6d9b3146bd79a. clang.git patch id: 4412120",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/684
https://github.com/root-project/root/pull/684:141,security,patch,patch,141,"Revert ""Change the clang default to request bool rather than _Bool""; This reverts commit 5f7fd3aa6007c04e9d761816fea6d9b3146bd79a. clang.git patch id: 4412120",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/684
https://github.com/root-project/root/pull/685:6,deployability,Patch,Patch,6,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/685
https://github.com/root-project/root/pull/685:206,integrability,wrap,wrapper,206,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/685
https://github.com/root-project/root/pull/685:206,interoperability,wrapper,wrapper,206,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/685
https://github.com/root-project/root/pull/685:90,performance,Network,Networks,90,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/685
https://github.com/root-project/root/pull/685:6,safety,Patch,Patch,6,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/685
https://github.com/root-project/root/pull/685:291,safety,test,tests,291,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/685
https://github.com/root-project/root/pull/685:6,security,Patch,Patch,6,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/685
https://github.com/root-project/root/pull/685:90,security,Network,Networks,90,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/685
https://github.com/root-project/root/pull/685:291,testability,test,tests,291,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/685
https://github.com/root-project/root/pull/686:6,deployability,Patch,Patch,6,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:169,deployability,stack,stacking,169,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:247,deployability,patch,patch,247,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:286,deployability,stack,stacked,286,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:107,energy efficiency,Current,Currently,107,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:300,interoperability,architectur,architecture,300,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:148,modifiability,Layer,Layer,148,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:185,modifiability,layer,layers,185,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:294,modifiability,layer,layer,294,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:6,safety,Patch,Patch,6,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:223,safety,test,tests,223,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:247,safety,patch,patch,247,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:322,safety,test,tests,322,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:6,security,Patch,Patch,6,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:247,security,patch,patch,247,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:223,testability,test,tests,223,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:322,testability,test,tests,322,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/686:332,testability,verif,verifying,332,"First Patch AutoEnoders; Hello everyone! This is Akshay Vashistha, a GSOC student working on AutoEncoders. Currently I have implemented the Denoise Layer and working on stacking up the layers. After this, I will write some tests for same. My next patch will have a properly implemented stacked layer architecture and some tests for verifying the correctness. Thanks",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/686
https://github.com/root-project/root/pull/687:8,energy efficiency,Reduc,Reduce,8,[cmake] Reduce the copy-paste boilerplate code in setting up gtest;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/687
https://github.com/root-project/root/pull/688:466,energy efficiency,optim,optimization,466,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:514,energy efficiency,optim,optimized,514,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:192,integrability,configur,configure,192,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:74,interoperability,specif,specific,74,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:235,interoperability,specif,specifying,235,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:192,modifiability,configur,configure,192,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:293,modifiability,paramet,parameters,293,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:47,performance,perform,performance,47,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:147,performance,performance test,performance tests,147,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:461,performance,tune,tune,461,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:466,performance,optimiz,optimization,466,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:514,performance,optimiz,optimized,514,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:601,performance,perform,performance,601,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:159,safety,test,tests,159,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:175,safety,test,tests,175,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:357,safety,compl,complexity,357,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:487,safety,prevent,preventing,487,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:192,security,configur,configure,192,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:357,security,compl,complexity,357,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:487,security,preven,preventing,487,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:159,testability,test,tests,159,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:170,testability,unit,unit,170,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:175,testability,test,tests,175,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:47,usability,perform,performance,47,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:147,usability,perform,performance,147,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/688:601,usability,perform,performance,601,"Add google benchmark; This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:. * We can split performance tests from unit tests;. * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);. * We can calculate asymptotic complexity (Big O) of the benchmarked items;. * Multithreading is a first class citizen;. * We can fine tune optimization levels (preventing some code to be optimized away);. * Rich reporting options;. * Possibility for calculating statistical performance deviations;. * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/688
https://github.com/root-project/root/pull/689:18,deployability,patch,patch,18,[gsoc '17] Second patch CNN;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/689
https://github.com/root-project/root/pull/689:18,safety,patch,patch,18,[gsoc '17] Second patch CNN;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/689
https://github.com/root-project/root/pull/689:18,security,patch,patch,18,[gsoc '17] Second patch CNN;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/689
https://github.com/root-project/root/pull/690:14,interoperability,format,formatting,14,http: improve formatting in THttpServer.cxx; Improves formatting after #639 . Please ignore complains from travis-ci - it make wrong formatting after ClassImp(THttpServer) .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/690
https://github.com/root-project/root/pull/690:54,interoperability,format,formatting,54,http: improve formatting in THttpServer.cxx; Improves formatting after #639 . Please ignore complains from travis-ci - it make wrong formatting after ClassImp(THttpServer) .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/690
https://github.com/root-project/root/pull/690:133,interoperability,format,formatting,133,http: improve formatting in THttpServer.cxx; Improves formatting after #639 . Please ignore complains from travis-ci - it make wrong formatting after ClassImp(THttpServer) .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/690
https://github.com/root-project/root/pull/690:92,safety,compl,complains,92,http: improve formatting in THttpServer.cxx; Improves formatting after #639 . Please ignore complains from travis-ci - it make wrong formatting after ClassImp(THttpServer) .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/690
https://github.com/root-project/root/pull/690:92,security,compl,complains,92,http: improve formatting in THttpServer.cxx; Improves formatting after #639 . Please ignore complains from travis-ci - it make wrong formatting after ClassImp(THttpServer) .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/690
https://github.com/root-project/root/pull/691:74,deployability,log,logic,74,[TDF] Refactor TDF::TLoopManager::Run; Various clean-ups to the even loop logic of TDF,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/691
https://github.com/root-project/root/pull/691:6,modifiability,Refact,Refactor,6,[TDF] Refactor TDF::TLoopManager::Run; Various clean-ups to the even loop logic of TDF,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/691
https://github.com/root-project/root/pull/691:6,performance,Refactor,Refactor,6,[TDF] Refactor TDF::TLoopManager::Run; Various clean-ups to the even loop logic of TDF,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/691
https://github.com/root-project/root/pull/691:74,safety,log,logic,74,[TDF] Refactor TDF::TLoopManager::Run; Various clean-ups to the even loop logic of TDF,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/691
https://github.com/root-project/root/pull/691:74,security,log,logic,74,[TDF] Refactor TDF::TLoopManager::Run; Various clean-ups to the even loop logic of TDF,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/691
https://github.com/root-project/root/pull/691:74,testability,log,logic,74,[TDF] Refactor TDF::TLoopManager::Run; Various clean-ups to the even loop logic of TDF,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/691
https://github.com/root-project/root/pull/692:33,deployability,log,logic,33,"[TDF] Refactor SnapshotImpl; The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/692
https://github.com/root-project/root/pull/692:304,deployability,log,logic,304,"[TDF] Refactor SnapshotImpl; The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/692
https://github.com/root-project/root/pull/692:6,modifiability,Refact,Refactor,6,"[TDF] Refactor SnapshotImpl; The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/692
https://github.com/root-project/root/pull/692:66,modifiability,refact,refactored,66,"[TDF] Refactor SnapshotImpl; The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/692
https://github.com/root-project/root/pull/692:6,performance,Refactor,Refactor,6,"[TDF] Refactor SnapshotImpl; The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/692
https://github.com/root-project/root/pull/692:66,performance,refactor,refactored,66,"[TDF] Refactor SnapshotImpl; The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/692
https://github.com/root-project/root/pull/692:175,performance,multi-thread,multi-thread,175,"[TDF] Refactor SnapshotImpl; The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/692
https://github.com/root-project/root/pull/692:33,safety,log,logic,33,"[TDF] Refactor SnapshotImpl; The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/692
https://github.com/root-project/root/pull/692:304,safety,log,logic,304,"[TDF] Refactor SnapshotImpl; The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/692
https://github.com/root-project/root/pull/692:33,security,log,logic,33,"[TDF] Refactor SnapshotImpl; The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/692
https://github.com/root-project/root/pull/692:304,security,log,logic,304,"[TDF] Refactor SnapshotImpl; The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/692
https://github.com/root-project/root/pull/692:33,testability,log,logic,33,"[TDF] Refactor SnapshotImpl; The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/692
https://github.com/root-project/root/pull/692:221,testability,simpl,simplification,221,"[TDF] Refactor SnapshotImpl; The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/692
https://github.com/root-project/root/pull/692:304,testability,log,logic,304,"[TDF] Refactor SnapshotImpl; The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/692
https://github.com/root-project/root/pull/692:221,usability,simpl,simplification,221,"[TDF] Refactor SnapshotImpl; The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/692
https://github.com/root-project/root/pull/693:6,deployability,Patch,Patch,6,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/693
https://github.com/root-project/root/pull/693:206,integrability,wrap,wrapper,206,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/693
https://github.com/root-project/root/pull/693:206,interoperability,wrapper,wrapper,206,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/693
https://github.com/root-project/root/pull/693:90,performance,Network,Networks,90,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/693
https://github.com/root-project/root/pull/693:6,safety,Patch,Patch,6,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/693
https://github.com/root-project/root/pull/693:291,safety,test,tests,291,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/693
https://github.com/root-project/root/pull/693:6,security,Patch,Patch,6,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/693
https://github.com/root-project/root/pull/693:90,security,Network,Networks,90,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/693
https://github.com/root-project/root/pull/693:291,testability,test,tests,291,"First Patch RNN; Hi everyone! I am a GSoC student working on introducing Recurrent Neural Networks in TMVA. This is the first part of commits which introduces the `RNNLayer` class as well as `RecurrentNet` wrapper along with their respective methods (Forward, Backward etc). I will soon add tests for different functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/693
https://github.com/root-project/root/pull/696:6,deployability,patch,patch,6,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/696:140,deployability,patch,patch,140,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/696:203,deployability,stack,stacking,203,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/696:224,deployability,patch,patch,224,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/696:147,energy efficiency,Current,Currently,147,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/696:174,modifiability,layer,layer,174,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/696:193,modifiability,layer,layer,193,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/696:6,safety,patch,patch,6,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/696:140,safety,patch,patch,140,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/696:224,safety,patch,patch,224,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/696:250,safety,test,tests,250,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/696:6,security,patch,patch,6,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/696:140,security,patch,patch,140,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/696:224,security,patch,patch,224,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/696:241,testability,verif,verified,241,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/696:250,testability,test,tests,250,"First patch Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on Autoencoder implementation. Here is my first patch. Currently it has a denoise layer and finetune layer for stacking. In my next patch I will add verified tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/696
https://github.com/root-project/root/pull/697:19,deployability,version,version,19,"cling Pr 158; ROOT version of https://github.com/root-project/cling/pull/158 (but NOTE different directory; this patch needs to be applied to cling, too)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/697
https://github.com/root-project/root/pull/697:113,deployability,patch,patch,113,"cling Pr 158; ROOT version of https://github.com/root-project/cling/pull/158 (but NOTE different directory; this patch needs to be applied to cling, too)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/697
https://github.com/root-project/root/pull/697:19,integrability,version,version,19,"cling Pr 158; ROOT version of https://github.com/root-project/cling/pull/158 (but NOTE different directory; this patch needs to be applied to cling, too)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/697
https://github.com/root-project/root/pull/697:19,modifiability,version,version,19,"cling Pr 158; ROOT version of https://github.com/root-project/cling/pull/158 (but NOTE different directory; this patch needs to be applied to cling, too)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/697
https://github.com/root-project/root/pull/697:113,safety,patch,patch,113,"cling Pr 158; ROOT version of https://github.com/root-project/cling/pull/158 (but NOTE different directory; this patch needs to be applied to cling, too)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/697
https://github.com/root-project/root/pull/697:113,security,patch,patch,113,"cling Pr 158; ROOT version of https://github.com/root-project/cling/pull/158 (but NOTE different directory; this patch needs to be applied to cling, too)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/697
https://github.com/root-project/root/pull/700:23,deployability,modul,modulemap,23,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:37,deployability,instal,install,37,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:61,deployability,modul,modules,61,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:106,deployability,modul,modulemap,106,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:121,deployability,instal,install,121,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:224,deployability,modul,modulemap,224,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:363,deployability,build,build,363,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:384,deployability,modul,modules,384,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:399,deployability,patch,patch,399,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:419,deployability,modul,modulemap,419,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:498,deployability,modul,modulemap,498,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:557,deployability,instal,install,557,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:569,deployability,modul,modulemap,569,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:667,deployability,modul,modulemap,667,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:726,deployability,modul,modules,726,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:23,modifiability,modul,modulemap,23,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:61,modifiability,modul,modules,61,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:106,modifiability,modul,modulemap,106,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:224,modifiability,modul,modulemap,224,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:384,modifiability,modul,modules,384,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:419,modifiability,modul,modulemap,419,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:498,modifiability,modul,modulemap,498,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:569,modifiability,modul,modulemap,569,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:667,modifiability,modul,modulemap,667,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:726,modifiability,modul,modules,726,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:23,safety,modul,modulemap,23,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:61,safety,modul,modules,61,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:106,safety,modul,modulemap,106,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:224,safety,modul,modulemap,224,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:384,safety,modul,modules,384,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:399,safety,patch,patch,399,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:419,safety,modul,modulemap,419,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:498,safety,modul,modulemap,498,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:569,safety,modul,modulemap,569,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:667,safety,modul,modulemap,667,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:726,safety,modul,modules,726,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/700:399,security,patch,patch,399,"Always generate a ROOT modulemap and install it.; To use C++ modules during runtime we need to generate a modulemap. and install it alongside the ROOT headers. However, right now. we need to turn on cxxmodules to generate a modulemap, which would. force experiments to fulfill all the depndencies that cxxmodules. brings with it (that is, a modern clang that can build ROOT with C++. modules). This patch untangles the modulemap generation from the cxxmodules. option, so that we always generate a modulemap even when cxxmodules. is turned off. We now also install the modulemap alongside. the ROOT headers. No functional change for normal ROOT expected here, as the modulemap. will just be ignored without having runtime C++ modules enabled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/700
https://github.com/root-project/root/pull/701:19,deployability,build,builds,19,Fix c++14 and gcc7 builds;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/701
https://github.com/root-project/root/pull/703:158,safety,test,tests,158,"[TDF] Misc fixes -- was ""Use TH*D instead of TH*F in Histo actions""; The PR changes TDF's source code as well as the tutorials. A related PR that changes the tests is open in roottest. I also added an extra commit with a minor fix to TDF's user guide.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/703
https://github.com/root-project/root/pull/703:158,testability,test,tests,158,"[TDF] Misc fixes -- was ""Use TH*D instead of TH*F in Histo actions""; The PR changes TDF's source code as well as the tutorials. A related PR that changes the tests is open in roottest. I also added an extra commit with a minor fix to TDF's user guide.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/703
https://github.com/root-project/root/pull/703:240,usability,user,user,240,"[TDF] Misc fixes -- was ""Use TH*D instead of TH*F in Histo actions""; The PR changes TDF's source code as well as the tutorials. A related PR that changes the tests is open in roottest. I also added an extra commit with a minor fix to TDF's user guide.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/703
https://github.com/root-project/root/pull/703:245,usability,guid,guide,245,"[TDF] Misc fixes -- was ""Use TH*D instead of TH*F in Histo actions""; The PR changes TDF's source code as well as the tutorials. A related PR that changes the tests is open in roottest. I also added an extra commit with a minor fix to TDF's user guide.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/703
https://github.com/root-project/root/pull/704:92,availability,error,error,92,"Minor fix: include <functional> in testTypeTraits.cxx; Without this, I am getting a compile error because `std::function` is undefined.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/704
https://github.com/root-project/root/pull/704:92,performance,error,error,92,"Minor fix: include <functional> in testTypeTraits.cxx; Without this, I am getting a compile error because `std::function` is undefined.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/704
https://github.com/root-project/root/pull/704:35,safety,test,testTypeTraits,35,"Minor fix: include <functional> in testTypeTraits.cxx; Without this, I am getting a compile error because `std::function` is undefined.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/704
https://github.com/root-project/root/pull/704:92,safety,error,error,92,"Minor fix: include <functional> in testTypeTraits.cxx; Without this, I am getting a compile error because `std::function` is undefined.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/704
https://github.com/root-project/root/pull/704:35,testability,test,testTypeTraits,35,"Minor fix: include <functional> in testTypeTraits.cxx; Without this, I am getting a compile error because `std::function` is undefined.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/704
https://github.com/root-project/root/pull/704:92,usability,error,error,92,"Minor fix: include <functional> in testTypeTraits.cxx; Without this, I am getting a compile error because `std::function` is undefined.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/704
https://github.com/root-project/root/pull/705:471,availability,error,error,471,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:713,deployability,integr,integral,713,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:94,integrability,messag,messages,94,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:713,integrability,integr,integral,713,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:94,interoperability,messag,messages,94,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:713,interoperability,integr,integral,713,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:713,modifiability,integr,integral,713,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:339,performance,content,content,339,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:453,performance,content,content,453,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:471,performance,error,error,471,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:492,performance,cach,caching,492,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:608,performance,content,content,608,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:713,reliability,integr,integral,713,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:294,safety,test,test,294,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:361,safety,prevent,prevent,361,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:471,safety,error,error,471,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:361,security,preven,prevent,361,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:713,security,integr,integral,713,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:294,testability,test,test,294,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:713,testability,integr,integral,713,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/705:471,usability,error,error,471,"TH1 KolmogorovTest infinite loop; [EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content. (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error. (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/705
https://github.com/root-project/root/pull/706:262,testability,regress,regression,262,"TMVA BDT grad boost; Fixes to the gradient boosting of the bdt. The first three commits affects only multiclass cases. The final commit corrects a long-standing typo of the gradient step size. This affects all kinds of grad boost (classification, multiclass and regression).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/706
https://github.com/root-project/root/pull/707:20,deployability,updat,updates,20,TMVA Multiclass gui updates; Updated EvaluateAllMethods to output confusion matrix and 1vsRest data for both test data and training data for easier overtraining check. The TMVAMultiClassGui now supports generating 1v1 roc curves. Fixes bug where generated multiclass roc curves were not save to disk when created. Adds correctness tests for the ROCCurve class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/707
https://github.com/root-project/root/pull/707:29,deployability,Updat,Updated,29,TMVA Multiclass gui updates; Updated EvaluateAllMethods to output confusion matrix and 1vsRest data for both test data and training data for easier overtraining check. The TMVAMultiClassGui now supports generating 1v1 roc curves. Fixes bug where generated multiclass roc curves were not save to disk when created. Adds correctness tests for the ROCCurve class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/707
https://github.com/root-project/root/pull/707:295,performance,disk,disk,295,TMVA Multiclass gui updates; Updated EvaluateAllMethods to output confusion matrix and 1vsRest data for both test data and training data for easier overtraining check. The TMVAMultiClassGui now supports generating 1v1 roc curves. Fixes bug where generated multiclass roc curves were not save to disk when created. Adds correctness tests for the ROCCurve class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/707
https://github.com/root-project/root/pull/707:20,safety,updat,updates,20,TMVA Multiclass gui updates; Updated EvaluateAllMethods to output confusion matrix and 1vsRest data for both test data and training data for easier overtraining check. The TMVAMultiClassGui now supports generating 1v1 roc curves. Fixes bug where generated multiclass roc curves were not save to disk when created. Adds correctness tests for the ROCCurve class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/707
https://github.com/root-project/root/pull/707:29,safety,Updat,Updated,29,TMVA Multiclass gui updates; Updated EvaluateAllMethods to output confusion matrix and 1vsRest data for both test data and training data for easier overtraining check. The TMVAMultiClassGui now supports generating 1v1 roc curves. Fixes bug where generated multiclass roc curves were not save to disk when created. Adds correctness tests for the ROCCurve class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/707
https://github.com/root-project/root/pull/707:109,safety,test,test,109,TMVA Multiclass gui updates; Updated EvaluateAllMethods to output confusion matrix and 1vsRest data for both test data and training data for easier overtraining check. The TMVAMultiClassGui now supports generating 1v1 roc curves. Fixes bug where generated multiclass roc curves were not save to disk when created. Adds correctness tests for the ROCCurve class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/707
https://github.com/root-project/root/pull/707:331,safety,test,tests,331,TMVA Multiclass gui updates; Updated EvaluateAllMethods to output confusion matrix and 1vsRest data for both test data and training data for easier overtraining check. The TMVAMultiClassGui now supports generating 1v1 roc curves. Fixes bug where generated multiclass roc curves were not save to disk when created. Adds correctness tests for the ROCCurve class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/707
https://github.com/root-project/root/pull/707:20,security,updat,updates,20,TMVA Multiclass gui updates; Updated EvaluateAllMethods to output confusion matrix and 1vsRest data for both test data and training data for easier overtraining check. The TMVAMultiClassGui now supports generating 1v1 roc curves. Fixes bug where generated multiclass roc curves were not save to disk when created. Adds correctness tests for the ROCCurve class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/707
https://github.com/root-project/root/pull/707:29,security,Updat,Updated,29,TMVA Multiclass gui updates; Updated EvaluateAllMethods to output confusion matrix and 1vsRest data for both test data and training data for easier overtraining check. The TMVAMultiClassGui now supports generating 1v1 roc curves. Fixes bug where generated multiclass roc curves were not save to disk when created. Adds correctness tests for the ROCCurve class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/707
https://github.com/root-project/root/pull/707:109,testability,test,test,109,TMVA Multiclass gui updates; Updated EvaluateAllMethods to output confusion matrix and 1vsRest data for both test data and training data for easier overtraining check. The TMVAMultiClassGui now supports generating 1v1 roc curves. Fixes bug where generated multiclass roc curves were not save to disk when created. Adds correctness tests for the ROCCurve class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/707
https://github.com/root-project/root/pull/707:331,testability,test,tests,331,TMVA Multiclass gui updates; Updated EvaluateAllMethods to output confusion matrix and 1vsRest data for both test data and training data for easier overtraining check. The TMVAMultiClassGui now supports generating 1v1 roc curves. Fixes bug where generated multiclass roc curves were not save to disk when created. Adds correctness tests for the ROCCurve class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/707
https://github.com/root-project/root/pull/707:194,usability,support,supports,194,TMVA Multiclass gui updates; Updated EvaluateAllMethods to output confusion matrix and 1vsRest data for both test data and training data for easier overtraining check. The TMVAMultiClassGui now supports generating 1v1 roc curves. Fixes bug where generated multiclass roc curves were not save to disk when created. Adds correctness tests for the ROCCurve class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/707
https://github.com/root-project/root/pull/708:6,deployability,Patch,Patch,6,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:144,deployability,patch,patch,144,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:215,deployability,Stack,StackedNets,215,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:297,deployability,stack,stacked,297,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:436,deployability,patch,patch,436,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:356,energy efficiency,Current,Currently,356,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:171,modifiability,layer,layer,171,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:205,modifiability,layer,layer,205,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:240,modifiability,layer,layer,240,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:305,modifiability,layer,layer,305,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:478,modifiability,required chang,required changes,478,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:6,safety,Patch,Patch,6,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:144,safety,patch,patch,144,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:286,safety,input,input,286,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:385,safety,test,tests,385,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:436,safety,patch,patch,436,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:467,safety,test,tests,467,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:6,security,Patch,Patch,6,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:144,security,patch,patch,144,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:436,security,patch,patch,436,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:385,testability,test,tests,385,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:458,testability,verif,verified,458,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:467,testability,test,tests,467,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/708:286,usability,input,input,286,"First Patch for Autoencoders; Hello everyone,. This is Akshay Vashistha, a GSOC student working on AutoEncoder implementation. Here is my first patch. It has a base class layer for autoencoders, a denoise layer and StackedNets. The denoise layer can corrupt, encode and reconstruct the input. The stacked layer has both Pretraining and finetuning steps. . Currently working on writing tests to check the correctness of code. In my next patch I will add some verified tests with required changes. Thank You.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/708
https://github.com/root-project/root/pull/709:397,availability,avail,available,397,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:29,deployability,updat,updates,29,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:50,deployability,contain,contains,50,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:232,energy efficiency,Load,LoadClassInfo,232,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:410,energy efficiency,Reduc,Reduce,410,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:640,interoperability,format,formatting,640,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:5,performance,I/O,I/O,5,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:9,performance,perform,performance,9,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:89,performance,performance issu,performance issues,89,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:232,performance,Load,LoadClassInfo,232,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:267,performance,lock,locking,267,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:326,performance,lock,lock,326,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:438,performance,lock,locks,438,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:472,performance,lock,lock,472,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:510,performance,lock,locks,510,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:592,performance,perform,performance,592,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:397,reliability,availab,available,397,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:29,safety,updat,updates,29,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:261,safety,avoid,avoid,261,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:308,safety,Avoid,Avoid,308,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:397,safety,avail,available,397,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:29,security,updat,updates,29,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:59,security,modif,modifications,59,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:108,security,ident,identifies,108,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:267,security,lock,locking,267,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:326,security,lock,lock,326,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:397,security,availab,available,397,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:438,security,lock,locks,438,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:472,security,lock,lock,472,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:510,security,lock,locks,510,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:9,usability,perform,performance,9,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:89,usability,perform,performance,89,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:580,usability,clarit,clarity,580,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/709:592,usability,perform,performance,592,ROOT I/O performance related updates; This branch contains modifications to address some performance issues identifies in JIRA issue [ROOT-8871](https://sft.its.cern.ch/jira/browse/ROOT-8871). The main changes are:. * Make `TClass::LoadClassInfo()` private and avoid locking the interpreter unnecessarily. * Avoid interpreter lock in `TClass::GetListOfBases()` and return existing list if already available. * Reduce scope of interpreter locks in several places where the lock is taken before necessary. * Add locks where unprotected use of `gInterpreter` is made. * Improve code clarity and performance of `TTree::Fill()`. * Some typo and formatting fixes to improve conformance to coding conventions,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/709
https://github.com/root-project/root/pull/710:47,integrability,wrap,wrapper,47,Reject all but the first auto auto attempt per wrapper (ROOT-8828).;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/710
https://github.com/root-project/root/pull/710:47,interoperability,wrapper,wrapper,47,Reject all but the first auto auto attempt per wrapper (ROOT-8828).;,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/710
https://github.com/root-project/root/pull/711:131,availability,operat,operator,131,"cling PR 163; https://github.com/root-project/cling/pull/163. NOTE: commit ""Windows: Fix infinite loop when piping to cling with < operator."" must be separately applied to cling!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/711
