id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/14034:616,testability,log,log,616,"Following a suggestion by @pcanal, I also tested a different scenario creating many (identical) branches to see the scaling behavior. I started with 10,000 entries and 10,000 branches (100k didn't fit into memory), then 100,000 entries with 1,000 branches, and so on:. ```. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t1.log. ttreeTBufferMergerBranches.00-master.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.81. ttreeTBufferMergerBranches.01-limit.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.92. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.52. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t64.log. ttreeTBufferMergerBranches.00-master.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:49.27. ttreeTBufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:738,testability,log,log,738,"Following a suggestion by @pcanal, I also tested a different scenario creating many (identical) branches to see the scaling behavior. I started with 10,000 entries and 10,000 branches (100k didn't fit into memory), then 100,000 entries with 1,000 branches, and so on:. ```. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t1.log. ttreeTBufferMergerBranches.00-master.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.81. ttreeTBufferMergerBranches.01-limit.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.92. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.52. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t64.log. ttreeTBufferMergerBranches.00-master.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:49.27. ttreeTBufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:796,testability,log,log,796,"Following a suggestion by @pcanal, I also tested a different scenario creating many (identical) branches to see the scaling behavior. I started with 10,000 entries and 10,000 branches (100k didn't fit into memory), then 100,000 entries with 1,000 branches, and so on:. ```. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t1.log. ttreeTBufferMergerBranches.00-master.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.81. ttreeTBufferMergerBranches.01-limit.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.92. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.52. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t64.log. ttreeTBufferMergerBranches.00-master.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:49.27. ttreeTBufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:907,testability,log,log,907,"Following a suggestion by @pcanal, I also tested a different scenario creating many (identical) branches to see the scaling behavior. I started with 10,000 entries and 10,000 branches (100k didn't fit into memory), then 100,000 entries with 1,000 branches, and so on:. ```. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t1.log. ttreeTBufferMergerBranches.00-master.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.81. ttreeTBufferMergerBranches.01-limit.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.92. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.52. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t64.log. ttreeTBufferMergerBranches.00-master.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:49.27. ttreeTBufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1021,testability,log,log,1021,"by @pcanal, I also tested a different scenario creating many (identical) branches to see the scaling behavior. I started with 10,000 entries and 10,000 branches (100k didn't fit into memory), then 100,000 entries with 1,000 branches, and so on:. ```. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t1.log. ttreeTBufferMergerBranches.00-master.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.81. ttreeTBufferMergerBranches.01-limit.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.92. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.52. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t64.log. ttreeTBufferMergerBranches.00-master.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:49.27. ttreeTBufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeT",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1174,testability,log,log,1174,"ranches (100k didn't fit into memory), then 100,000 entries with 1,000 branches, and so on:. ```. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t1.log. ttreeTBufferMergerBranches.00-master.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.81. ttreeTBufferMergerBranches.01-limit.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.92. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.52. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t64.log. ttreeTBufferMergerBranches.00-master.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:49.27. ttreeTBufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1231,testability,log,log,1231,"es with 1,000 branches, and so on:. ```. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t1.log. ttreeTBufferMergerBranches.00-master.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.81. ttreeTBufferMergerBranches.01-limit.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.92. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.52. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t64.log. ttreeTBufferMergerBranches.00-master.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:49.27. ttreeTBufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1341,testability,log,log,1341,"reeTBufferMergerBranches.00-master.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.81. ttreeTBufferMergerBranches.01-limit.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.92. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.52. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t64.log. ttreeTBufferMergerBranches.00-master.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:49.27. ttreeTBufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1454,testability,log,log,1454,"eTBufferMergerBranches.01-limit.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.92. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.52. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t64.log. ttreeTBufferMergerBranches.00-master.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:49.27. ttreeTBufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1576,testability,log,log,1576,"erBranches.02-no-queue.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.52. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t64.log. ttreeTBufferMergerBranches.00-master.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:49.27. ttreeTBufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1634,testability,log,log,1634,"lock) time (h:mm:ss or m:ss): 0:21.52. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t64.log. ttreeTBufferMergerBranches.00-master.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:49.27. ttreeTBufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1745,testability,log,log,1745,"eTBufferMergerBranches.00-master.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:49.27. ttreeTBufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1859,testability,log,log,1859,"BufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeT",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:2012,testability,log,log,2012,"00.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:2069,testability,log,log,2069,"5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:2179,testability,log,log,2179,"reeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.69. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:2292,testability,log,log,2292,"eTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.69. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.01. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t64.log. ttreeTBufferMergerBranches.00-master.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:2414,testability,log,log,2414,"erBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.69. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.01. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t64.log. ttreeTBufferMergerBranches.00-master.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.81. ttreeTBufferMergerBranches.01-limit.10000000.10",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:2472,testability,log,log,2472,"lock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.69. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.01. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t64.log. ttreeTBufferMergerBranches.00-master.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.81. ttreeTBufferMergerBranches.01-limit.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:2",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:2583,testability,log,log,2583,"eTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.69. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.01. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t64.log. ttreeTBufferMergerBranches.00-master.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.81. ttreeTBufferMergerBranches.01-limit.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:24.65. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:2697,testability,log,log,2697,"BufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.69. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.01. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t64.log. ttreeTBufferMergerBranches.00-master.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.81. ttreeTBufferMergerBranches.01-limit.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:24.65. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.21. ```. The scaling with 10,000 branches is really terrible (I didn't investigate the underlying reason), bu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:2850,testability,log,log,2850,"00.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.69. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.01. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t64.log. ttreeTBufferMergerBranches.00-master.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.81. ttreeTBufferMergerBranches.01-limit.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:24.65. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.21. ```. The scaling with 10,000 branches is really terrible (I didn't investigate the underlying reason), but the changes proposed here seem to give comparable performance. For one thread it's sometimes a bit slower, but that could also be variations in the mea",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:2907,testability,log,log,2907,"g: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.69. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.01. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t64.log. ttreeTBufferMergerBranches.00-master.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.81. ttreeTBufferMergerBranches.01-limit.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:24.65. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.21. ```. The scaling with 10,000 branches is really terrible (I didn't investigate the underlying reason), but the changes proposed here seem to give comparable performance. For one thread it's sometimes a bit slower, but that could also be variations in the measurement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:3017,testability,log,log,3017,"g: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.69. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.01. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t64.log. ttreeTBufferMergerBranches.00-master.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.81. ttreeTBufferMergerBranches.01-limit.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:24.65. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.21. ```. The scaling with 10,000 branches is really terrible (I didn't investigate the underlying reason), but the changes proposed here seem to give comparable performance. For one thread it's sometimes a bit slower, but that could also be variations in the measurement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:3130,testability,log,log,3130,"g: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.69. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.01. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t64.log. ttreeTBufferMergerBranches.00-master.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.81. ttreeTBufferMergerBranches.01-limit.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:24.65. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.21. ```. The scaling with 10,000 branches is really terrible (I didn't investigate the underlying reason), but the changes proposed here seem to give comparable performance. For one thread it's sometimes a bit slower, but that could also be variations in the measurement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:3252,testability,log,log,3252,"g: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.69. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.01. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t64.log. ttreeTBufferMergerBranches.00-master.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.81. ttreeTBufferMergerBranches.01-limit.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:24.65. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.21. ```. The scaling with 10,000 branches is really terrible (I didn't investigate the underlying reason), but the changes proposed here seem to give comparable performance. For one thread it's sometimes a bit slower, but that could also be variations in the measurement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:3310,testability,log,log,3310,"g: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.69. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.01. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t64.log. ttreeTBufferMergerBranches.00-master.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.81. ttreeTBufferMergerBranches.01-limit.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:24.65. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.21. ```. The scaling with 10,000 branches is really terrible (I didn't investigate the underlying reason), but the changes proposed here seem to give comparable performance. For one thread it's sometimes a bit slower, but that could also be variations in the measurement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:3421,testability,log,log,3421,"g: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.69. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.01. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t64.log. ttreeTBufferMergerBranches.00-master.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.81. ttreeTBufferMergerBranches.01-limit.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:24.65. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.21. ```. The scaling with 10,000 branches is really terrible (I didn't investigate the underlying reason), but the changes proposed here seem to give comparable performance. For one thread it's sometimes a bit slower, but that could also be variations in the measurement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:3535,testability,log,log,3535,"g: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.69. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.01. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t64.log. ttreeTBufferMergerBranches.00-master.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.81. ttreeTBufferMergerBranches.01-limit.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:24.65. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.21. ```. The scaling with 10,000 branches is really terrible (I didn't investigate the underlying reason), but the changes proposed here seem to give comparable performance. For one thread it's sometimes a bit slower, but that could also be variations in the measurement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:124,usability,behavi,behavior,124,"Following a suggestion by @pcanal, I also tested a different scenario creating many (identical) branches to see the scaling behavior. I started with 10,000 entries and 10,000 branches (100k didn't fit into memory), then 100,000 entries with 1,000 branches, and so on:. ```. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t1.log. ttreeTBufferMergerBranches.00-master.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.81. ttreeTBufferMergerBranches.01-limit.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.92. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.52. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t64.log. ttreeTBufferMergerBranches.00-master.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:49.27. ttreeTBufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:206,usability,memor,memory,206,"Following a suggestion by @pcanal, I also tested a different scenario creating many (identical) branches to see the scaling behavior. I started with 10,000 entries and 10,000 branches (100k didn't fit into memory), then 100,000 entries with 1,000 branches, and so on:. ```. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t1.log. ttreeTBufferMergerBranches.00-master.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.81. ttreeTBufferMergerBranches.01-limit.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.92. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.52. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000.10000.t64.log. ttreeTBufferMergerBranches.00-master.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:49.27. ttreeTBufferMergerBranches.01-limit.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:44.11. ttreeTBufferMergerBranches.02-no-queue.10000.10000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:33.18. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t1.log. ttreeTBufferMergerBranches.00-master.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.10. ttreeTBufferMergerBranches.01-limit.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.29. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.39. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100000.1000.t64.log. ttreeTBufferMergerBranches.00-master.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:48.43. ttreeTBufferMergerBranches.01-limit.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:50.99. ttreeTBufferMergerBranches.02-no-queue.100000.1000.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.100",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:3751,usability,perform,performance,3751,"g: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:47.48. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t1.log. ttreeTBufferMergerBranches.00-master.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.71. ttreeTBufferMergerBranches.01-limit.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.16. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.19. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.1000000.100.t64.log. ttreeTBufferMergerBranches.00-master.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.52. ttreeTBufferMergerBranches.01-limit.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.45. ttreeTBufferMergerBranches.02-no-queue.1000000.100.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:23.47. [jonas@ntpl-perf01 20231114]$ . [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t1.log. ttreeTBufferMergerBranches.00-master.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:09.62. ttreeTBufferMergerBranches.01-limit.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:10.69. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t1.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:11.01. [jonas@ntpl-perf01 20231114]$ grep ""Elapsed"" *.10000000.10.t64.log. ttreeTBufferMergerBranches.00-master.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.81. ttreeTBufferMergerBranches.01-limit.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:24.65. ttreeTBufferMergerBranches.02-no-queue.10000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 0:20.21. ```. The scaling with 10,000 branches is really terrible (I didn't investigate the underlying reason), but the changes proposed here seem to give comparable performance. For one thread it's sometimes a bit slower, but that could also be variations in the measurement.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:149,availability,slo,slower,149,"> The scaling with 10,000 branches is really terrible . One factor is that the ""merging"" step (which involves iterating through all the branches) is slower than 1/64 of the filling leading to a serialization of some (only some since the 64 cases is 'only' 17 times slow) of the filling. However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). Another surprising results is the fact that the case for 10 columns does not scale that well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:265,availability,slo,slow,265,"> The scaling with 10,000 branches is really terrible . One factor is that the ""merging"" step (which involves iterating through all the branches) is slower than 1/64 of the filling leading to a serialization of some (only some since the 64 cases is 'only' 17 times slow) of the filling. However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). Another surprising results is the fact that the case for 10 columns does not scale that well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:553,deployability,scale,scale,553,"> The scaling with 10,000 branches is really terrible . One factor is that the ""merging"" step (which involves iterating through all the branches) is slower than 1/64 of the filling leading to a serialization of some (only some since the 64 cases is 'only' 17 times slow) of the filling. However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). Another surprising results is the fact that the case for 10 columns does not scale that well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:553,energy efficiency,scale,scale,553,"> The scaling with 10,000 branches is really terrible . One factor is that the ""merging"" step (which involves iterating through all the branches) is slower than 1/64 of the filling leading to a serialization of some (only some since the 64 cases is 'only' 17 times slow) of the filling. However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). Another surprising results is the fact that the case for 10 columns does not scale that well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:6,modifiability,scal,scaling,6,"> The scaling with 10,000 branches is really terrible . One factor is that the ""merging"" step (which involves iterating through all the branches) is slower than 1/64 of the filling leading to a serialization of some (only some since the 64 cases is 'only' 17 times slow) of the filling. However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). Another surprising results is the fact that the case for 10 columns does not scale that well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:553,modifiability,scal,scale,553,"> The scaling with 10,000 branches is really terrible . One factor is that the ""merging"" step (which involves iterating through all the branches) is slower than 1/64 of the filling leading to a serialization of some (only some since the 64 cases is 'only' 17 times slow) of the filling. However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). Another surprising results is the fact that the case for 10 columns does not scale that well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:259,performance,time,times,259,"> The scaling with 10,000 branches is really terrible . One factor is that the ""merging"" step (which involves iterating through all the branches) is slower than 1/64 of the filling leading to a serialization of some (only some since the 64 cases is 'only' 17 times slow) of the filling. However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). Another surprising results is the fact that the case for 10 columns does not scale that well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:553,performance,scale,scale,553,"> The scaling with 10,000 branches is really terrible . One factor is that the ""merging"" step (which involves iterating through all the branches) is slower than 1/64 of the filling leading to a serialization of some (only some since the 64 cases is 'only' 17 times slow) of the filling. However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). Another surprising results is the fact that the case for 10 columns does not scale that well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:149,reliability,slo,slower,149,"> The scaling with 10,000 branches is really terrible . One factor is that the ""merging"" step (which involves iterating through all the branches) is slower than 1/64 of the filling leading to a serialization of some (only some since the 64 cases is 'only' 17 times slow) of the filling. However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). Another surprising results is the fact that the case for 10 columns does not scale that well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:265,reliability,slo,slow,265,"> The scaling with 10,000 branches is really terrible . One factor is that the ""merging"" step (which involves iterating through all the branches) is slower than 1/64 of the filling leading to a serialization of some (only some since the 64 cases is 'only' 17 times slow) of the filling. However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). Another surprising results is the fact that the case for 10 columns does not scale that well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:544,reliability,doe,does,544,"> The scaling with 10,000 branches is really terrible . One factor is that the ""merging"" step (which involves iterating through all the branches) is slower than 1/64 of the filling leading to a serialization of some (only some since the 64 cases is 'only' 17 times slow) of the filling. However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). Another surprising results is the fact that the case for 10 columns does not scale that well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:412,usability,close,close,412,"> The scaling with 10,000 branches is really terrible . One factor is that the ""merging"" step (which involves iterating through all the branches) is slower than 1/64 of the filling leading to a serialization of some (only some since the 64 cases is 'only' 17 times slow) of the filling. However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). Another surprising results is the fact that the case for 10 columns does not scale that well.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:561,deployability,scale,scale,561,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:561,energy efficiency,scale,scale,561,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:286,integrability,buffer,buffers,286,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:431,integrability,buffer,buffer,431,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:658,integrability,event,event,658,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:561,modifiability,scal,scale,561,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:922,modifiability,scal,scalability,922,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1021,modifiability,scal,scalability,1021,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:310,performance,lock,lock,310,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:407,performance,overhead,overhead,407,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:466,performance,memor,memory,466,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:561,performance,scale,scale,561,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:695,performance,parallel,parallel,695,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:900,performance,memor,memory,900,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:922,performance,scalab,scalability,922,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1021,performance,scalab,scalability,1021,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:552,reliability,doe,does,552,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:851,reliability,doe,doesn,851,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:310,security,lock,lock,310,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:127,usability,close,close,127,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:466,usability,memor,memory,466,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:900,usability,memor,memory,900,"> However it is a bit surprising it also affects the master to the point that the timing are similar (actually it is a bit too close to make fully sense so I think we are missing something). I'm actually not that surprised: even with the queuing, some thread has to merge the resulting buffers while holding a lock. The queuing mechanism just allows that to be spread out a bit more, at the expense of some overhead to prepare the buffer and not merging from the in-memory `TTree`. > Another surprising results is the fact that the case for 10 columns does not scale that well. Yes, it is surprising. On the other hand, this is just filling the same `long` ""event id"" into many branches, so the parallel part of the application is quite negligible. In any case, these are the results that I have so far, and for me they show convincingly that this PR doesn't make things worse and certainly improves memory usage and even scalability for some cases. If you have other benchmarks that show the queuing mechanism improving scalability, I'm happy to run them but so far I'm not aware of any.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:276,energy efficiency,cpu,cpu,276,The case where the buffered implementation would possibly be more efficient are cases where the production rate varies so that there is time period where the queue grows (data production rate is high) and time where the queue decreases (data production rate is low (uses more cpu time)).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:19,integrability,buffer,buffered,19,The case where the buffered implementation would possibly be more efficient are cases where the production rate varies so that there is time period where the queue grows (data production rate is high) and time where the queue decreases (data production rate is low (uses more cpu time)).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:158,integrability,queue,queue,158,The case where the buffered implementation would possibly be more efficient are cases where the production rate varies so that there is time period where the queue grows (data production rate is high) and time where the queue decreases (data production rate is low (uses more cpu time)).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:220,integrability,queue,queue,220,The case where the buffered implementation would possibly be more efficient are cases where the production rate varies so that there is time period where the queue grows (data production rate is high) and time where the queue decreases (data production rate is low (uses more cpu time)).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:136,performance,time,time,136,The case where the buffered implementation would possibly be more efficient are cases where the production rate varies so that there is time period where the queue grows (data production rate is high) and time where the queue decreases (data production rate is low (uses more cpu time)).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:158,performance,queue,queue,158,The case where the buffered implementation would possibly be more efficient are cases where the production rate varies so that there is time period where the queue grows (data production rate is high) and time where the queue decreases (data production rate is low (uses more cpu time)).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:205,performance,time,time,205,The case where the buffered implementation would possibly be more efficient are cases where the production rate varies so that there is time period where the queue grows (data production rate is high) and time where the queue decreases (data production rate is low (uses more cpu time)).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:220,performance,queue,queue,220,The case where the buffered implementation would possibly be more efficient are cases where the production rate varies so that there is time period where the queue grows (data production rate is high) and time where the queue decreases (data production rate is low (uses more cpu time)).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:276,performance,cpu,cpu,276,The case where the buffered implementation would possibly be more efficient are cases where the production rate varies so that there is time period where the queue grows (data production rate is high) and time where the queue decreases (data production rate is low (uses more cpu time)).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:280,performance,time,time,280,The case where the buffered implementation would possibly be more efficient are cases where the production rate varies so that there is time period where the queue grows (data production rate is high) and time where the queue decreases (data production rate is low (uses more cpu time)).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:66,usability,efficien,efficient,66,The case where the buffered implementation would possibly be more efficient are cases where the production rate varies so that there is time period where the queue grows (data production rate is high) and time where the queue decreases (data production rate is low (uses more cpu time)).,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1194,availability,sli,slightly,1194,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1203,availability,slo,slower,1203,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:431,deployability,log,log,431,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:762,deployability,log,log,762,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:886,deployability,log,log,886,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1013,deployability,log,log,1013,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1283,deployability,log,log,1283,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1407,deployability,log,log,1407,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1534,deployability,log,log,1534,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:781,energy efficiency,clock,clock,781,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:905,energy efficiency,clock,clock,905,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1032,energy efficiency,clock,clock,1032,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1131,energy efficiency,reduc,reducing,1131,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1302,energy efficiency,clock,clock,1302,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1426,energy efficiency,clock,clock,1426,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1553,energy efficiency,clock,clock,1553,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1608,energy efficiency,measur,measurements,1608,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:19,integrability,event,event,19,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:990,integrability,queue,queue,990,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1511,integrability,queue,queue,1511,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:628,performance,perform,performance,628,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:788,performance,time,time,788,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:912,performance,time,time,912,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:990,performance,queue,queue,990,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1039,performance,time,time,1039,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1309,performance,time,time,1309,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1433,performance,time,time,1433,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1511,performance,queue,queue,1511,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1560,performance,time,time,1560,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1635,performance,perform,performance,1635,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:269,reliability,poisson,poisson,269,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:342,reliability,poisson,poisson,342,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1109,reliability,poisson,poisson,1109,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1194,reliability,sli,slightly,1194,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1203,reliability,slo,slower,1203,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:431,safety,log,log,431,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:762,safety,log,log,762,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:886,safety,log,log,886,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1013,safety,log,log,1013,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1283,safety,log,log,1283,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1407,safety,log,log,1407,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1534,safety,log,log,1534,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1764,safety,compl,complications,1764,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:431,security,log,log,431,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:762,security,log,log,762,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:886,security,log,log,886,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1013,security,log,log,1013,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1283,security,log,log,1283,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1407,security,log,log,1407,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1534,security,log,log,1534,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1764,security,compl,complications,1764,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:431,testability,log,log,431,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:762,testability,log,log,762,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:886,testability,log,log,886,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1013,testability,log,log,1013,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1283,testability,log,log,1283,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1407,testability,log,log,1407,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1534,testability,log,log,1534,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:628,usability,perform,performance,628,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1635,usability,perform,performance,1635,"Ok, I changed the ""event loop"" to roughly the following:. ```c++. double number = 0;. for (int b = 0; b < numBranches; b++) {. std::string name = ""b"" + std::to_string(b);. tree->Branch(name.c_str(), &number);. }. std::mt19937 generator(t);. std::poisson_distribution<> poisson(100);. for (long i = 0; i < numEntries; i++) {. int iterations = poisson(generator);. number = 0;. for (int j = 0; j < iterations; j++) {. number += std::log(j);. }. tree->Fill();. }. ```. (`t` is the thread index, used as a seed to give different RNG sequences to the individual threads). For 100M entries per thread into 10 branches, the only worse performance I can find is with 64 threads (on `ntpl-perf01`):. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:08.58. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:12.00. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t64.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 5:16.36. ```. Similar story when changing the poisson mean to 5 (ie reducing the production rate variation), again only 64 threads slightly slower:. ```. ttreeTBufferMergerBranchesVariableRate.00-master.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:08.02. ttreeTBufferMergerBranchesVariableRate.01-limit.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:13.51. ttreeTBufferMergerBranchesVariableRate.02-no-queue.100000000.10.t32.log: Elapsed (wall clock) time (h:mm:ss or m:ss): 1:12.79. ```. All other measurements show the same performance, or even better (at higher thread counts). I'm not sure if the difference at 64 threads is enough to justify all the complications of the queuing mechanism...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:171,integrability,queue,queue,171,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:108,performance,synch,synchronization,108,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:171,performance,queue,queue,171,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:78,safety,test,test,78,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:71,testability,simpl,simple,71,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:78,testability,test,test,78,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:27,usability,efficien,efficient,27,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:71,usability,simpl,simple,71,"I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:590,availability,slo,slower,590,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1064,availability,consist,consistently,1064,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1033,deployability,version,version,1033,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:579,energy efficiency,measur,measurably,579,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1227,energy efficiency,measur,measure,1227,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:173,integrability,queue,queue,173,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:324,integrability,event,event,324,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1033,integrability,version,version,1033,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1033,modifiability,version,version,1033,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:110,performance,synch,synchronization,110,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:173,performance,queue,queue,173,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:315,performance,time,time,315,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:473,performance,synch,synchronization,473,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:493,performance,content,contention,493,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:670,performance,perform,performance,670,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:813,performance,content,contention,813,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:590,reliability,slo,slower,590,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:80,safety,test,test,80,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:886,safety,prevent,prevents,886,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:340,security,ident,identical,340,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:386,security,barrier,barriers,386,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:737,security,barrier,barrier,737,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:878,security,barrier,barrier,878,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:886,security,preven,prevents,886,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:972,security,barrier,barrier,972,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:73,testability,simpl,simple,73,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:80,testability,test,test,80,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:29,usability,efficien,efficient,29,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:73,usability,simpl,simple,73,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:670,usability,perform,performance,670,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:947,usability,progress,progress,947,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1064,usability,consist,consistently,1064,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:1122,usability,support,supports,1122,"> I think that is sufficient efficient evidence albeit there is one more simple test to do, is to introduce a synchronization point every once in a while to insure that the queue is actually filled/used and then later emptied. Right; for this I went back to the variant of the benchmark that has perfectly balanced time per event and fills identical data into 10 branches. Then I added barriers around the call to `TBufferMergerFile::Write()` to make sure there is as much synchronization and contention as possible. With that, only the run with 64 threads on `/data/ssdext4` is measurably slower (4m16s instead of 3m57s, 9%), lower numbers of threads show very similar performance within noise. However, I then realized that the second barrier after the call to `Write()` is actually not necessary since we want contention when going into the merging / queuing, but the second barrier prevents threads that exit merging early from making further progress. With *only one barrier* before the call to `TBufferMergerFile::Write()` the version without any queuing is consistently faster at higher thread counts. I think this supports my hypothesis that things will balance out automagically. Finally, on `/data/hddext4/` I cannot measure any difference at all outside of noise.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:34,safety,test,tests,34,For posterity (and for a few more tests) can you upload here the tar file of you test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:81,safety,test,test,81,For posterity (and for a few more tests) can you upload here the tar file of you test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:34,testability,test,tests,34,For posterity (and for a few more tests) can you upload here the tar file of you test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:81,testability,test,test,81,For posterity (and for a few more tests) can you upload here the tar file of you test?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:36,safety,test,tests,36,"> For posterity (and for a few more tests) can you upload here the tar file of you test? Sure, here are the four ""benchmark applications"": [ttreeTBufferMerger.tar.gz](https://github.com/root-project/root/files/13457173/ttreeTBufferMerger.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:83,safety,test,test,83,"> For posterity (and for a few more tests) can you upload here the tar file of you test? Sure, here are the four ""benchmark applications"": [ttreeTBufferMerger.tar.gz](https://github.com/root-project/root/files/13457173/ttreeTBufferMerger.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:36,testability,test,tests,36,"> For posterity (and for a few more tests) can you upload here the tar file of you test? Sure, here are the four ""benchmark applications"": [ttreeTBufferMerger.tar.gz](https://github.com/root-project/root/files/13457173/ttreeTBufferMerger.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14034:83,testability,test,test,83,"> For posterity (and for a few more tests) can you upload here the tar file of you test? Sure, here are the four ""benchmark applications"": [ttreeTBufferMerger.tar.gz](https://github.com/root-project/root/files/13457173/ttreeTBufferMerger.tar.gz)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14034
https://github.com/root-project/root/pull/14036:264,safety,avoid,avoid,264,"This is quite a common C++ idiom, and IMO this warning is too aggressive. However, I fixed the code in [5168f56](https://github.com/artem-ogre/CDT/commit/5168f567422461b39f6ed6a8ba53c17b3c6f3627). Also FYI you might consider using something like `isystem` flag to avoid fighting with warnings in third-party libraries.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14036
https://github.com/root-project/root/issues/14037:90,deployability,version,version,90,Just tried without lto and it worked. Tried another machine with icx without ipo (Intel's version of lto) and it also compiled there. Problem solved. Don't use lto. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14037
https://github.com/root-project/root/issues/14037:90,integrability,version,version,90,Just tried without lto and it worked. Tried another machine with icx without ipo (Intel's version of lto) and it also compiled there. Problem solved. Don't use lto. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14037
https://github.com/root-project/root/issues/14037:90,modifiability,version,version,90,Just tried without lto and it worked. Tried another machine with icx without ipo (Intel's version of lto) and it also compiled there. Problem solved. Don't use lto. Thanks!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14037
https://github.com/root-project/root/pull/14038:117,availability,mainten,maintenance,117,"As suggestion, this header-only CLI parser (https://github.com/CLIUtils/CLI11) could be included and would save code maintenance on ROOT's side / errors with parsing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14038
https://github.com/root-project/root/pull/14038:146,availability,error,errors,146,"As suggestion, this header-only CLI parser (https://github.com/CLIUtils/CLI11) could be included and would save code maintenance on ROOT's side / errors with parsing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14038
https://github.com/root-project/root/pull/14038:146,performance,error,errors,146,"As suggestion, this header-only CLI parser (https://github.com/CLIUtils/CLI11) could be included and would save code maintenance on ROOT's side / errors with parsing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14038
https://github.com/root-project/root/pull/14038:117,reliability,mainten,maintenance,117,"As suggestion, this header-only CLI parser (https://github.com/CLIUtils/CLI11) could be included and would save code maintenance on ROOT's side / errors with parsing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14038
https://github.com/root-project/root/pull/14038:146,safety,error,errors,146,"As suggestion, this header-only CLI parser (https://github.com/CLIUtils/CLI11) could be included and would save code maintenance on ROOT's side / errors with parsing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14038
https://github.com/root-project/root/pull/14038:146,usability,error,errors,146,"As suggestion, this header-only CLI parser (https://github.com/CLIUtils/CLI11) could be included and would save code maintenance on ROOT's side / errors with parsing.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14038
https://github.com/root-project/root/pull/14041:27,safety,review,review,27,"Hi @pcanal, thanks for the review! I replied to your comments, sorry for the delay. Is it okay now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14041
https://github.com/root-project/root/pull/14041:27,testability,review,review,27,"Hi @pcanal, thanks for the review! I replied to your comments, sorry for the delay. Is it okay now?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14041
https://github.com/root-project/root/pull/14043:15,safety,review,review,15,"Thanks for the review, @vepadulano! I have addressed your change requests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14043
https://github.com/root-project/root/pull/14043:15,testability,review,review,15,"Thanks for the review, @vepadulano! I have addressed your change requests.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14043
https://github.com/root-project/root/pull/14048:40,safety,test,test,40,"As shown by the new CI, this breaks the test on `mac14arm`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14048
https://github.com/root-project/root/pull/14048:40,testability,test,test,40,"As shown by the new CI, this breaks the test on `mac14arm`...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14048
https://github.com/root-project/root/issues/14051:238,energy efficiency,draw,drawing,238,How you start ROOT? . Only with chrome browser which explicitly specified at start time one have possibility to set/change canvas dimensions. If I start:. ```. root --web=chrome tutorials/dataframe/df106_HiggsToFourLeptons.C . ```. I get drawing of 600x560 pixels. . With normal ROOT graphics one get image 598x575 pixels.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:64,interoperability,specif,specified,64,How you start ROOT? . Only with chrome browser which explicitly specified at start time one have possibility to set/change canvas dimensions. If I start:. ```. root --web=chrome tutorials/dataframe/df106_HiggsToFourLeptons.C . ```. I get drawing of 600x560 pixels. . With normal ROOT graphics one get image 598x575 pixels.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:83,performance,time,time,83,How you start ROOT? . Only with chrome browser which explicitly specified at start time one have possibility to set/change canvas dimensions. If I start:. ```. root --web=chrome tutorials/dataframe/df106_HiggsToFourLeptons.C . ```. I get drawing of 600x560 pixels. . With normal ROOT graphics one get image 598x575 pixels.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:193,interoperability,specif,specify,193,"ok, with chrome it works fine. My default browser is set to safari and then the mentioned issue appears (which wasn't there a few weeks ago). It is not a big issue then I guess, but do we then specify that the default web should be set to chrome? (sorry if it is very explicitly said somewhere and I missed it).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:95,integrability,configur,configured,95,There are pro and cons using chrome by default. Main problem - is startup time when chrome not configured as default browser. In some situation it can takes ~30 sec. But from functionality point of view - chrome is best possible choice.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:95,modifiability,configur,configured,95,There are pro and cons using chrome by default. Main problem - is startup time when chrome not configured as default browser. In some situation it can takes ~30 sec. But from functionality point of view - chrome is best possible choice.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:74,performance,time,time,74,There are pro and cons using chrome by default. Main problem - is startup time when chrome not configured as default browser. In some situation it can takes ~30 sec. But from functionality point of view - chrome is best possible choice.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:95,security,configur,configured,95,There are pro and cons using chrome by default. Main problem - is startup time when chrome not configured as default browser. In some situation it can takes ~30 sec. But from functionality point of view - chrome is best possible choice.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:357,safety,avoid,avoided,357,"sure, but I am now thinking of the user's perspective, if someone's default browser is ""safari"" and they are not aware that chrome, and hence always running ""root --web=chrome"" instead of just ""root"", provides the best functionality, they would also run into some issues like I did. I'm just thinking of how to communicate this well so that user issues are avoided (and I don't think this is explained anywhere yet, unless I am wrong, but then where is it explained?) . I now also tried doing the same but with firefox and I also run into issues . ![Screenshot 2023-11-14 at 14 20 05](https://github.com/root-project/root/assets/80402204/02710082-1104-4cf4-9a08-1aec4575aa21). <img width=""1275"" alt=""Screenshot 2023-11-14 at 14 20 15"" src=""https://github.com/root-project/root/assets/80402204/7b55511e-ed78-4321-b279-7abd2d278f3d"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:35,usability,user,user,35,"sure, but I am now thinking of the user's perspective, if someone's default browser is ""safari"" and they are not aware that chrome, and hence always running ""root --web=chrome"" instead of just ""root"", provides the best functionality, they would also run into some issues like I did. I'm just thinking of how to communicate this well so that user issues are avoided (and I don't think this is explained anywhere yet, unless I am wrong, but then where is it explained?) . I now also tried doing the same but with firefox and I also run into issues . ![Screenshot 2023-11-14 at 14 20 05](https://github.com/root-project/root/assets/80402204/02710082-1104-4cf4-9a08-1aec4575aa21). <img width=""1275"" alt=""Screenshot 2023-11-14 at 14 20 15"" src=""https://github.com/root-project/root/assets/80402204/7b55511e-ed78-4321-b279-7abd2d278f3d"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:341,usability,user,user,341,"sure, but I am now thinking of the user's perspective, if someone's default browser is ""safari"" and they are not aware that chrome, and hence always running ""root --web=chrome"" instead of just ""root"", provides the best functionality, they would also run into some issues like I did. I'm just thinking of how to communicate this well so that user issues are avoided (and I don't think this is explained anywhere yet, unless I am wrong, but then where is it explained?) . I now also tried doing the same but with firefox and I also run into issues . ![Screenshot 2023-11-14 at 14 20 05](https://github.com/root-project/root/assets/80402204/02710082-1104-4cf4-9a08-1aec4575aa21). <img width=""1275"" alt=""Screenshot 2023-11-14 at 14 20 15"" src=""https://github.com/root-project/root/assets/80402204/7b55511e-ed78-4321-b279-7abd2d278f3d"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:120,usability,behavi,behavior,120,"Marta, can you try https://github.com/root-project/root/pull/14054 in your environment? It should improve a lot firefox behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:125,deployability,instal,installed,125,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right? In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:689,deployability,instal,install,689,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right? In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:849,deployability,depend,dependency,849,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right? In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:849,integrability,depend,dependency,849,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right? In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:849,modifiability,depend,dependency,849,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right? In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:803,reliability,Pra,Practically,803,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right? In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:849,safety,depend,dependency,849,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right? In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:849,testability,depend,dependency,849,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right? In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:39,usability,user,user,39,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right? In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:44,usability,experien,experience,44,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right? In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:74,usability,user,user,74,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right? In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:635,usability,user,users,635,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right? In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:657,usability,document,documentation,657,"I believe the real issue here is about user experience. Suppose I'm a mac user, I only use safari and don't even have chrome installed. I have been using ROOT for 10+ years, I want to see my plot in a canvas. Now the default canvas is the web canvas, so it will go through the only browser it can find on my machine, safari. That breaks functionality w.r.t. how I was using the canvas before. So, that's something we want to fix, right? In general, I would imagine that at the very least for the three most commonly used browsers i.e. Chrome, Safari, Firefox (Edge even?) we should be able to provide exactly the same functionality to users. Writing in the documentation that they need to install google chrome on their machine in order to have a properly working canvas is not an option in my opinion. Practically, that would imply that ROOT has a dependency on Chrome and I don't think that's what we want",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:188,deployability,version,version,188,"Hi, I have just re-run the df106 tutorial with 6.32. Both the interactive canvases and the saved ones with and without the web graphics look quite different. EDIT'ed the pictures, correct version now . <img width=""1146"" alt=""Screenshot 2024-06-03 at 13 57 58"" src=""https://github.com/root-project/root/assets/80402204/f8218023-ff61-4231-9dcb-b1b798e0e3d9"">. <img width=""1391"" alt=""Screenshot 2024-06-03 at 14 13 14"" src=""https://github.com/root-project/root/assets/80402204/e0a9eefd-b912-422c-aa86-fa06da4e9bb2"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:188,integrability,version,version,188,"Hi, I have just re-run the df106 tutorial with 6.32. Both the interactive canvases and the saved ones with and without the web graphics look quite different. EDIT'ed the pictures, correct version now . <img width=""1146"" alt=""Screenshot 2024-06-03 at 13 57 58"" src=""https://github.com/root-project/root/assets/80402204/f8218023-ff61-4231-9dcb-b1b798e0e3d9"">. <img width=""1391"" alt=""Screenshot 2024-06-03 at 14 13 14"" src=""https://github.com/root-project/root/assets/80402204/e0a9eefd-b912-422c-aa86-fa06da4e9bb2"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:188,modifiability,version,version,188,"Hi, I have just re-run the df106 tutorial with 6.32. Both the interactive canvases and the saved ones with and without the web graphics look quite different. EDIT'ed the pictures, correct version now . <img width=""1146"" alt=""Screenshot 2024-06-03 at 13 57 58"" src=""https://github.com/root-project/root/assets/80402204/f8218023-ff61-4231-9dcb-b1b798e0e3d9"">. <img width=""1391"" alt=""Screenshot 2024-06-03 at 14 13 14"" src=""https://github.com/root-project/root/assets/80402204/e0a9eefd-b912-422c-aa86-fa06da4e9bb2"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:62,usability,interact,interactive,62,"Hi, I have just re-run the df106 tutorial with 6.32. Both the interactive canvases and the saved ones with and without the web graphics look quite different. EDIT'ed the pictures, correct version now . <img width=""1146"" alt=""Screenshot 2024-06-03 at 13 57 58"" src=""https://github.com/root-project/root/assets/80402204/f8218023-ff61-4231-9dcb-b1b798e0e3d9"">. <img width=""1391"" alt=""Screenshot 2024-06-03 at 14 13 14"" src=""https://github.com/root-project/root/assets/80402204/e0a9eefd-b912-422c-aa86-fa06da4e9bb2"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:198,security,session,session,198,"top figure is `root --web=off df106_HiggsToFourLeptons.C` and the bottom is: `root --web=chrome df106_HiggsToFourLeptons.C`. Left are the saved figures, right are the screenshots of the interactive session.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:186,usability,interact,interactive,186,"top figure is `root --web=off df106_HiggsToFourLeptons.C` and the bottom is: `root --web=chrome df106_HiggsToFourLeptons.C`. Left are the saved figures, right are the screenshots of the interactive session.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:96,modifiability,concern,concerning,96,"Yes, I saw this difference. And trying to fix it. But it is new bug introduced recently and not concerning canvas size",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:96,testability,concern,concerning,96,"Yes, I saw this difference. And trying to fix it. But it is new bug introduced recently and not concerning canvas size",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:51,usability,close,close,51,"ok, yes, the canvas size works fine now, so we can close this issue if the other problem is tracked elsewhere",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:142,availability,error,error,142,"actually I uploaded a wrong screenshot for the interactive version of the `root --web=chrome df106_HiggsToFourLeptons.C` - the legend and the error bars also seem to be missing there (it is fine for the saved figure and I uploaded the saved figure twice). <img width=""597"" alt=""Screenshot 2024-06-03 at 14 10 04"" src=""https://github.com/root-project/root/assets/80402204/1821c8fc-ad56-44bd-b008-add6ab12d359"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:59,deployability,version,version,59,"actually I uploaded a wrong screenshot for the interactive version of the `root --web=chrome df106_HiggsToFourLeptons.C` - the legend and the error bars also seem to be missing there (it is fine for the saved figure and I uploaded the saved figure twice). <img width=""597"" alt=""Screenshot 2024-06-03 at 14 10 04"" src=""https://github.com/root-project/root/assets/80402204/1821c8fc-ad56-44bd-b008-add6ab12d359"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:59,integrability,version,version,59,"actually I uploaded a wrong screenshot for the interactive version of the `root --web=chrome df106_HiggsToFourLeptons.C` - the legend and the error bars also seem to be missing there (it is fine for the saved figure and I uploaded the saved figure twice). <img width=""597"" alt=""Screenshot 2024-06-03 at 14 10 04"" src=""https://github.com/root-project/root/assets/80402204/1821c8fc-ad56-44bd-b008-add6ab12d359"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:59,modifiability,version,version,59,"actually I uploaded a wrong screenshot for the interactive version of the `root --web=chrome df106_HiggsToFourLeptons.C` - the legend and the error bars also seem to be missing there (it is fine for the saved figure and I uploaded the saved figure twice). <img width=""597"" alt=""Screenshot 2024-06-03 at 14 10 04"" src=""https://github.com/root-project/root/assets/80402204/1821c8fc-ad56-44bd-b008-add6ab12d359"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:142,performance,error,error,142,"actually I uploaded a wrong screenshot for the interactive version of the `root --web=chrome df106_HiggsToFourLeptons.C` - the legend and the error bars also seem to be missing there (it is fine for the saved figure and I uploaded the saved figure twice). <img width=""597"" alt=""Screenshot 2024-06-03 at 14 10 04"" src=""https://github.com/root-project/root/assets/80402204/1821c8fc-ad56-44bd-b008-add6ab12d359"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:142,safety,error,error,142,"actually I uploaded a wrong screenshot for the interactive version of the `root --web=chrome df106_HiggsToFourLeptons.C` - the legend and the error bars also seem to be missing there (it is fine for the saved figure and I uploaded the saved figure twice). <img width=""597"" alt=""Screenshot 2024-06-03 at 14 10 04"" src=""https://github.com/root-project/root/assets/80402204/1821c8fc-ad56-44bd-b008-add6ab12d359"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:47,usability,interact,interactive,47,"actually I uploaded a wrong screenshot for the interactive version of the `root --web=chrome df106_HiggsToFourLeptons.C` - the legend and the error bars also seem to be missing there (it is fine for the saved figure and I uploaded the saved figure twice). <img width=""597"" alt=""Screenshot 2024-06-03 at 14 10 04"" src=""https://github.com/root-project/root/assets/80402204/1821c8fc-ad56-44bd-b008-add6ab12d359"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:142,usability,error,error,142,"actually I uploaded a wrong screenshot for the interactive version of the `root --web=chrome df106_HiggsToFourLeptons.C` - the legend and the error bars also seem to be missing there (it is fine for the saved figure and I uploaded the saved figure twice). <img width=""597"" alt=""Screenshot 2024-06-03 at 14 10 04"" src=""https://github.com/root-project/root/assets/80402204/1821c8fc-ad56-44bd-b008-add6ab12d359"">.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:69,usability,close,close,69,"As per original issue - the canvas size, this has been fixed. I will close the issue and we can follow up with the other problems in the other threads.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/issues/14051:44,energy efficiency,draw,drawing,44,#15718 and #15747 fixes issues with THStack drawing and zooming. . Now canvas looks like:. ![Canvas](https://github.com/root-project/root/assets/4936580/fa73962c-026e-4105-b445-10f05496b59e). Small area below 0 due to issue #15740 and will be resolved/synced with ROOT changes later.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14051
https://github.com/root-project/root/pull/14052:91,deployability,log,log,91,@Axel-Naumann @hahnjo This is ready for review. [Note for once you may want to look at the log of the successful CI runs :) ],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14052
https://github.com/root-project/root/pull/14052:40,safety,review,review,40,@Axel-Naumann @hahnjo This is ready for review. [Note for once you may want to look at the log of the successful CI runs :) ],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14052
https://github.com/root-project/root/pull/14052:91,safety,log,log,91,@Axel-Naumann @hahnjo This is ready for review. [Note for once you may want to look at the log of the successful CI runs :) ],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14052
https://github.com/root-project/root/pull/14052:91,security,log,log,91,@Axel-Naumann @hahnjo This is ready for review. [Note for once you may want to look at the log of the successful CI runs :) ],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14052
https://github.com/root-project/root/pull/14052:40,testability,review,review,40,@Axel-Naumann @hahnjo This is ready for review. [Note for once you may want to look at the log of the successful CI runs :) ],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14052
https://github.com/root-project/root/pull/14052:91,testability,log,log,91,@Axel-Naumann @hahnjo This is ready for review. [Note for once you may want to look at the log of the successful CI runs :) ],MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14052
https://github.com/root-project/root/pull/14052:40,safety,review,review,40,"> Onwards should not be included in the review and they will be removed from this PR. Indeed, sorry for the confusion. Those commits have been removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14052
https://github.com/root-project/root/pull/14052:40,testability,review,review,40,"> Onwards should not be included in the review and they will be removed from this PR. Indeed, sorry for the confusion. Those commits have been removed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14052
https://github.com/root-project/root/issues/14055:58,availability,sli,slightly,58,"Indeed, compiling with Clang after having setting up via (slightly different from above as I used a different docker image). ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dbuiltin_afterimage=ON. ```. did succeed. Here the ROOT version from its executable:. ```. root@4bdbf4041f81:/SMASH/root_install/bin# ./root -b -q. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |. | From tags/v6-28-06@v6-28-06 |. | With Ubuntu clang version 13.0.1-2ubuntu2.2 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. **However**, the tests of my application still fail with [a very similar backtrace](https://github.com/root-project/root/files/13378676/ROOT_backtrace_leak_clang.txt). So in my opinion the issue still exists. Feel free to rename the issue title, if you think it is appropriate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:291,deployability,version,version,291,"Indeed, compiling with Clang after having setting up via (slightly different from above as I used a different docker image). ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dbuiltin_afterimage=ON. ```. did succeed. Here the ROOT version from its executable:. ```. root@4bdbf4041f81:/SMASH/root_install/bin# ./root -b -q. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |. | From tags/v6-28-06@v6-28-06 |. | With Ubuntu clang version 13.0.1-2ubuntu2.2 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. **However**, the tests of my application still fail with [a very similar backtrace](https://github.com/root-project/root/files/13378676/ROOT_backtrace_leak_clang.txt). So in my opinion the issue still exists. Feel free to rename the issue title, if you think it is appropriate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:675,deployability,version,version,675,"Indeed, compiling with Clang after having setting up via (slightly different from above as I used a different docker image). ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dbuiltin_afterimage=ON. ```. did succeed. Here the ROOT version from its executable:. ```. root@4bdbf4041f81:/SMASH/root_install/bin# ./root -b -q. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |. | From tags/v6-28-06@v6-28-06 |. | With Ubuntu clang version 13.0.1-2ubuntu2.2 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. **However**, the tests of my application still fail with [a very similar backtrace](https://github.com/root-project/root/files/13378676/ROOT_backtrace_leak_clang.txt). So in my opinion the issue still exists. Feel free to rename the issue title, if you think it is appropriate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:893,deployability,fail,fail,893,"Indeed, compiling with Clang after having setting up via (slightly different from above as I used a different docker image). ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dbuiltin_afterimage=ON. ```. did succeed. Here the ROOT version from its executable:. ```. root@4bdbf4041f81:/SMASH/root_install/bin# ./root -b -q. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |. | From tags/v6-28-06@v6-28-06 |. | With Ubuntu clang version 13.0.1-2ubuntu2.2 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. **However**, the tests of my application still fail with [a very similar backtrace](https://github.com/root-project/root/files/13378676/ROOT_backtrace_leak_clang.txt). So in my opinion the issue still exists. Feel free to rename the issue title, if you think it is appropriate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:291,integrability,version,version,291,"Indeed, compiling with Clang after having setting up via (slightly different from above as I used a different docker image). ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dbuiltin_afterimage=ON. ```. did succeed. Here the ROOT version from its executable:. ```. root@4bdbf4041f81:/SMASH/root_install/bin# ./root -b -q. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |. | From tags/v6-28-06@v6-28-06 |. | With Ubuntu clang version 13.0.1-2ubuntu2.2 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. **However**, the tests of my application still fail with [a very similar backtrace](https://github.com/root-project/root/files/13378676/ROOT_backtrace_leak_clang.txt). So in my opinion the issue still exists. Feel free to rename the issue title, if you think it is appropriate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:675,integrability,version,version,675,"Indeed, compiling with Clang after having setting up via (slightly different from above as I used a different docker image). ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dbuiltin_afterimage=ON. ```. did succeed. Here the ROOT version from its executable:. ```. root@4bdbf4041f81:/SMASH/root_install/bin# ./root -b -q. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |. | From tags/v6-28-06@v6-28-06 |. | With Ubuntu clang version 13.0.1-2ubuntu2.2 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. **However**, the tests of my application still fail with [a very similar backtrace](https://github.com/root-project/root/files/13378676/ROOT_backtrace_leak_clang.txt). So in my opinion the issue still exists. Feel free to rename the issue title, if you think it is appropriate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:291,modifiability,version,version,291,"Indeed, compiling with Clang after having setting up via (slightly different from above as I used a different docker image). ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dbuiltin_afterimage=ON. ```. did succeed. Here the ROOT version from its executable:. ```. root@4bdbf4041f81:/SMASH/root_install/bin# ./root -b -q. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |. | From tags/v6-28-06@v6-28-06 |. | With Ubuntu clang version 13.0.1-2ubuntu2.2 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. **However**, the tests of my application still fail with [a very similar backtrace](https://github.com/root-project/root/files/13378676/ROOT_backtrace_leak_clang.txt). So in my opinion the issue still exists. Feel free to rename the issue title, if you think it is appropriate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:675,modifiability,version,version,675,"Indeed, compiling with Clang after having setting up via (slightly different from above as I used a different docker image). ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dbuiltin_afterimage=ON. ```. did succeed. Here the ROOT version from its executable:. ```. root@4bdbf4041f81:/SMASH/root_install/bin# ./root -b -q. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |. | From tags/v6-28-06@v6-28-06 |. | With Ubuntu clang version 13.0.1-2ubuntu2.2 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. **However**, the tests of my application still fail with [a very similar backtrace](https://github.com/root-project/root/files/13378676/ROOT_backtrace_leak_clang.txt). So in my opinion the issue still exists. Feel free to rename the issue title, if you think it is appropriate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:58,reliability,sli,slightly,58,"Indeed, compiling with Clang after having setting up via (slightly different from above as I used a different docker image). ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dbuiltin_afterimage=ON. ```. did succeed. Here the ROOT version from its executable:. ```. root@4bdbf4041f81:/SMASH/root_install/bin# ./root -b -q. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |. | From tags/v6-28-06@v6-28-06 |. | With Ubuntu clang version 13.0.1-2ubuntu2.2 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. **However**, the tests of my application still fail with [a very similar backtrace](https://github.com/root-project/root/files/13378676/ROOT_backtrace_leak_clang.txt). So in my opinion the issue still exists. Feel free to rename the issue title, if you think it is appropriate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:893,reliability,fail,fail,893,"Indeed, compiling with Clang after having setting up via (slightly different from above as I used a different docker image). ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dbuiltin_afterimage=ON. ```. did succeed. Here the ROOT version from its executable:. ```. root@4bdbf4041f81:/SMASH/root_install/bin# ./root -b -q. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |. | From tags/v6-28-06@v6-28-06 |. | With Ubuntu clang version 13.0.1-2ubuntu2.2 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. **However**, the tests of my application still fail with [a very similar backtrace](https://github.com/root-project/root/files/13378676/ROOT_backtrace_leak_clang.txt). So in my opinion the issue still exists. Feel free to rename the issue title, if you think it is appropriate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:863,safety,test,tests,863,"Indeed, compiling with Clang after having setting up via (slightly different from above as I used a different docker image). ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dbuiltin_afterimage=ON. ```. did succeed. Here the ROOT version from its executable:. ```. root@4bdbf4041f81:/SMASH/root_install/bin# ./root -b -q. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |. | From tags/v6-28-06@v6-28-06 |. | With Ubuntu clang version 13.0.1-2ubuntu2.2 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. **However**, the tests of my application still fail with [a very similar backtrace](https://github.com/root-project/root/files/13378676/ROOT_backtrace_leak_clang.txt). So in my opinion the issue still exists. Feel free to rename the issue title, if you think it is appropriate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:524,security,Team,Team,524,"Indeed, compiling with Clang after having setting up via (slightly different from above as I used a different docker image). ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dbuiltin_afterimage=ON. ```. did succeed. Here the ROOT version from its executable:. ```. root@4bdbf4041f81:/SMASH/root_install/bin# ./root -b -q. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |. | From tags/v6-28-06@v6-28-06 |. | With Ubuntu clang version 13.0.1-2ubuntu2.2 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. **However**, the tests of my application still fail with [a very similar backtrace](https://github.com/root-project/root/files/13378676/ROOT_backtrace_leak_clang.txt). So in my opinion the issue still exists. Feel free to rename the issue title, if you think it is appropriate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:863,testability,test,tests,863,"Indeed, compiling with Clang after having setting up via (slightly different from above as I used a different docker image). ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dbuiltin_afterimage=ON. ```. did succeed. Here the ROOT version from its executable:. ```. root@4bdbf4041f81:/SMASH/root_install/bin# ./root -b -q. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |. | From tags/v6-28-06@v6-28-06 |. | With Ubuntu clang version 13.0.1-2ubuntu2.2 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. **However**, the tests of my application still fail with [a very similar backtrace](https://github.com/root-project/root/files/13378676/ROOT_backtrace_leak_clang.txt). So in my opinion the issue still exists. Feel free to rename the issue title, if you think it is appropriate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:712,usability,help,help,712,"Indeed, compiling with Clang after having setting up via (slightly different from above as I used a different docker image). ```. cmake -DCMAKE_CXX_STANDARD=17 -DCMAKE_INSTALL_PREFIX=../root_install ../root_src -Dxrootd=OFF -Dasan=ON -Dbuiltin_afterimage=ON. ```. did succeed. Here the ROOT version from its executable:. ```. root@4bdbf4041f81:/SMASH/root_install/bin# ./root -b -q. ------------------------------------------------------------------. | Welcome to ROOT 6.28/06 https://root.cern |. | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Aug 28 2023, 11:29:15 |. | From tags/v6-28-06@v6-28-06 |. | With Ubuntu clang version 13.0.1-2ubuntu2.2 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. **However**, the tests of my application still fail with [a very similar backtrace](https://github.com/root-project/root/files/13378676/ROOT_backtrace_leak_clang.txt). So in my opinion the issue still exists. Feel free to rename the issue title, if you think it is appropriate.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:482,deployability,build,build,482,"@AxelKrypton I'm sorry, I didn't read your initial report closely enough: what you see is a leak report that we turn off due to how ROOT uses the LLVM and Clang libraries:. https://github.com/root-project/root/blob/479d383c1019a2c75b3ca736f3ff0d1ebd3b0d63/core/sanitizer/SanitizerSetup.cxx#L22. I don't remember the details, but it's possible that the method we're using to suppress the leak sanitizer doesn't work with GCC and that's why switching to Clang solved the issue during build. For your own application, you need to pull in that same code, which should happen automatically if you use `ROOT_EXECUTABLE`. Can you check how your application is created? If it's not possible to use `ROOT_EXECUTABLE`, you can also manually link in `ROOT::ROOTStaticSanitizerConfig`. Alternatively you can try setting the environment variable `ASAN_OPTIONS=""detect_leaks=0""`. Hope this helps, let me know if you have further problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:571,deployability,automat,automatically,571,"@AxelKrypton I'm sorry, I didn't read your initial report closely enough: what you see is a leak report that we turn off due to how ROOT uses the LLVM and Clang libraries:. https://github.com/root-project/root/blob/479d383c1019a2c75b3ca736f3ff0d1ebd3b0d63/core/sanitizer/SanitizerSetup.cxx#L22. I don't remember the details, but it's possible that the method we're using to suppress the leak sanitizer doesn't work with GCC and that's why switching to Clang solved the issue during build. For your own application, you need to pull in that same code, which should happen automatically if you use `ROOT_EXECUTABLE`. Can you check how your application is created? If it's not possible to use `ROOT_EXECUTABLE`, you can also manually link in `ROOT::ROOTStaticSanitizerConfig`. Alternatively you can try setting the environment variable `ASAN_OPTIONS=""detect_leaks=0""`. Hope this helps, let me know if you have further problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:256,energy efficiency,core,core,256,"@AxelKrypton I'm sorry, I didn't read your initial report closely enough: what you see is a leak report that we turn off due to how ROOT uses the LLVM and Clang libraries:. https://github.com/root-project/root/blob/479d383c1019a2c75b3ca736f3ff0d1ebd3b0d63/core/sanitizer/SanitizerSetup.cxx#L22. I don't remember the details, but it's possible that the method we're using to suppress the leak sanitizer doesn't work with GCC and that's why switching to Clang solved the issue during build. For your own application, you need to pull in that same code, which should happen automatically if you use `ROOT_EXECUTABLE`. Can you check how your application is created? If it's not possible to use `ROOT_EXECUTABLE`, you can also manually link in `ROOT::ROOTStaticSanitizerConfig`. Alternatively you can try setting the environment variable `ASAN_OPTIONS=""detect_leaks=0""`. Hope this helps, let me know if you have further problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:824,modifiability,variab,variable,824,"@AxelKrypton I'm sorry, I didn't read your initial report closely enough: what you see is a leak report that we turn off due to how ROOT uses the LLVM and Clang libraries:. https://github.com/root-project/root/blob/479d383c1019a2c75b3ca736f3ff0d1ebd3b0d63/core/sanitizer/SanitizerSetup.cxx#L22. I don't remember the details, but it's possible that the method we're using to suppress the leak sanitizer doesn't work with GCC and that's why switching to Clang solved the issue during build. For your own application, you need to pull in that same code, which should happen automatically if you use `ROOT_EXECUTABLE`. Can you check how your application is created? If it's not possible to use `ROOT_EXECUTABLE`, you can also manually link in `ROOT::ROOTStaticSanitizerConfig`. Alternatively you can try setting the environment variable `ASAN_OPTIONS=""detect_leaks=0""`. Hope this helps, let me know if you have further problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:402,reliability,doe,doesn,402,"@AxelKrypton I'm sorry, I didn't read your initial report closely enough: what you see is a leak report that we turn off due to how ROOT uses the LLVM and Clang libraries:. https://github.com/root-project/root/blob/479d383c1019a2c75b3ca736f3ff0d1ebd3b0d63/core/sanitizer/SanitizerSetup.cxx#L22. I don't remember the details, but it's possible that the method we're using to suppress the leak sanitizer doesn't work with GCC and that's why switching to Clang solved the issue during build. For your own application, you need to pull in that same code, which should happen automatically if you use `ROOT_EXECUTABLE`. Can you check how your application is created? If it's not possible to use `ROOT_EXECUTABLE`, you can also manually link in `ROOT::ROOTStaticSanitizerConfig`. Alternatively you can try setting the environment variable `ASAN_OPTIONS=""detect_leaks=0""`. Hope this helps, let me know if you have further problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:261,safety,sanit,sanitizer,261,"@AxelKrypton I'm sorry, I didn't read your initial report closely enough: what you see is a leak report that we turn off due to how ROOT uses the LLVM and Clang libraries:. https://github.com/root-project/root/blob/479d383c1019a2c75b3ca736f3ff0d1ebd3b0d63/core/sanitizer/SanitizerSetup.cxx#L22. I don't remember the details, but it's possible that the method we're using to suppress the leak sanitizer doesn't work with GCC and that's why switching to Clang solved the issue during build. For your own application, you need to pull in that same code, which should happen automatically if you use `ROOT_EXECUTABLE`. Can you check how your application is created? If it's not possible to use `ROOT_EXECUTABLE`, you can also manually link in `ROOT::ROOTStaticSanitizerConfig`. Alternatively you can try setting the environment variable `ASAN_OPTIONS=""detect_leaks=0""`. Hope this helps, let me know if you have further problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:271,safety,Sanit,SanitizerSetup,271,"@AxelKrypton I'm sorry, I didn't read your initial report closely enough: what you see is a leak report that we turn off due to how ROOT uses the LLVM and Clang libraries:. https://github.com/root-project/root/blob/479d383c1019a2c75b3ca736f3ff0d1ebd3b0d63/core/sanitizer/SanitizerSetup.cxx#L22. I don't remember the details, but it's possible that the method we're using to suppress the leak sanitizer doesn't work with GCC and that's why switching to Clang solved the issue during build. For your own application, you need to pull in that same code, which should happen automatically if you use `ROOT_EXECUTABLE`. Can you check how your application is created? If it's not possible to use `ROOT_EXECUTABLE`, you can also manually link in `ROOT::ROOTStaticSanitizerConfig`. Alternatively you can try setting the environment variable `ASAN_OPTIONS=""detect_leaks=0""`. Hope this helps, let me know if you have further problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:303,safety,reme,remember,303,"@AxelKrypton I'm sorry, I didn't read your initial report closely enough: what you see is a leak report that we turn off due to how ROOT uses the LLVM and Clang libraries:. https://github.com/root-project/root/blob/479d383c1019a2c75b3ca736f3ff0d1ebd3b0d63/core/sanitizer/SanitizerSetup.cxx#L22. I don't remember the details, but it's possible that the method we're using to suppress the leak sanitizer doesn't work with GCC and that's why switching to Clang solved the issue during build. For your own application, you need to pull in that same code, which should happen automatically if you use `ROOT_EXECUTABLE`. Can you check how your application is created? If it's not possible to use `ROOT_EXECUTABLE`, you can also manually link in `ROOT::ROOTStaticSanitizerConfig`. Alternatively you can try setting the environment variable `ASAN_OPTIONS=""detect_leaks=0""`. Hope this helps, let me know if you have further problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:392,safety,sanit,sanitizer,392,"@AxelKrypton I'm sorry, I didn't read your initial report closely enough: what you see is a leak report that we turn off due to how ROOT uses the LLVM and Clang libraries:. https://github.com/root-project/root/blob/479d383c1019a2c75b3ca736f3ff0d1ebd3b0d63/core/sanitizer/SanitizerSetup.cxx#L22. I don't remember the details, but it's possible that the method we're using to suppress the leak sanitizer doesn't work with GCC and that's why switching to Clang solved the issue during build. For your own application, you need to pull in that same code, which should happen automatically if you use `ROOT_EXECUTABLE`. Can you check how your application is created? If it's not possible to use `ROOT_EXECUTABLE`, you can also manually link in `ROOT::ROOTStaticSanitizerConfig`. Alternatively you can try setting the environment variable `ASAN_OPTIONS=""detect_leaks=0""`. Hope this helps, let me know if you have further problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:261,security,sanit,sanitizer,261,"@AxelKrypton I'm sorry, I didn't read your initial report closely enough: what you see is a leak report that we turn off due to how ROOT uses the LLVM and Clang libraries:. https://github.com/root-project/root/blob/479d383c1019a2c75b3ca736f3ff0d1ebd3b0d63/core/sanitizer/SanitizerSetup.cxx#L22. I don't remember the details, but it's possible that the method we're using to suppress the leak sanitizer doesn't work with GCC and that's why switching to Clang solved the issue during build. For your own application, you need to pull in that same code, which should happen automatically if you use `ROOT_EXECUTABLE`. Can you check how your application is created? If it's not possible to use `ROOT_EXECUTABLE`, you can also manually link in `ROOT::ROOTStaticSanitizerConfig`. Alternatively you can try setting the environment variable `ASAN_OPTIONS=""detect_leaks=0""`. Hope this helps, let me know if you have further problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:271,security,Sanit,SanitizerSetup,271,"@AxelKrypton I'm sorry, I didn't read your initial report closely enough: what you see is a leak report that we turn off due to how ROOT uses the LLVM and Clang libraries:. https://github.com/root-project/root/blob/479d383c1019a2c75b3ca736f3ff0d1ebd3b0d63/core/sanitizer/SanitizerSetup.cxx#L22. I don't remember the details, but it's possible that the method we're using to suppress the leak sanitizer doesn't work with GCC and that's why switching to Clang solved the issue during build. For your own application, you need to pull in that same code, which should happen automatically if you use `ROOT_EXECUTABLE`. Can you check how your application is created? If it's not possible to use `ROOT_EXECUTABLE`, you can also manually link in `ROOT::ROOTStaticSanitizerConfig`. Alternatively you can try setting the environment variable `ASAN_OPTIONS=""detect_leaks=0""`. Hope this helps, let me know if you have further problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:392,security,sanit,sanitizer,392,"@AxelKrypton I'm sorry, I didn't read your initial report closely enough: what you see is a leak report that we turn off due to how ROOT uses the LLVM and Clang libraries:. https://github.com/root-project/root/blob/479d383c1019a2c75b3ca736f3ff0d1ebd3b0d63/core/sanitizer/SanitizerSetup.cxx#L22. I don't remember the details, but it's possible that the method we're using to suppress the leak sanitizer doesn't work with GCC and that's why switching to Clang solved the issue during build. For your own application, you need to pull in that same code, which should happen automatically if you use `ROOT_EXECUTABLE`. Can you check how your application is created? If it's not possible to use `ROOT_EXECUTABLE`, you can also manually link in `ROOT::ROOTStaticSanitizerConfig`. Alternatively you can try setting the environment variable `ASAN_OPTIONS=""detect_leaks=0""`. Hope this helps, let me know if you have further problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:571,testability,automat,automatically,571,"@AxelKrypton I'm sorry, I didn't read your initial report closely enough: what you see is a leak report that we turn off due to how ROOT uses the LLVM and Clang libraries:. https://github.com/root-project/root/blob/479d383c1019a2c75b3ca736f3ff0d1ebd3b0d63/core/sanitizer/SanitizerSetup.cxx#L22. I don't remember the details, but it's possible that the method we're using to suppress the leak sanitizer doesn't work with GCC and that's why switching to Clang solved the issue during build. For your own application, you need to pull in that same code, which should happen automatically if you use `ROOT_EXECUTABLE`. Can you check how your application is created? If it's not possible to use `ROOT_EXECUTABLE`, you can also manually link in `ROOT::ROOTStaticSanitizerConfig`. Alternatively you can try setting the environment variable `ASAN_OPTIONS=""detect_leaks=0""`. Hope this helps, let me know if you have further problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:58,usability,close,closely,58,"@AxelKrypton I'm sorry, I didn't read your initial report closely enough: what you see is a leak report that we turn off due to how ROOT uses the LLVM and Clang libraries:. https://github.com/root-project/root/blob/479d383c1019a2c75b3ca736f3ff0d1ebd3b0d63/core/sanitizer/SanitizerSetup.cxx#L22. I don't remember the details, but it's possible that the method we're using to suppress the leak sanitizer doesn't work with GCC and that's why switching to Clang solved the issue during build. For your own application, you need to pull in that same code, which should happen automatically if you use `ROOT_EXECUTABLE`. Can you check how your application is created? If it's not possible to use `ROOT_EXECUTABLE`, you can also manually link in `ROOT::ROOTStaticSanitizerConfig`. Alternatively you can try setting the environment variable `ASAN_OPTIONS=""detect_leaks=0""`. Hope this helps, let me know if you have further problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:876,usability,help,helps,876,"@AxelKrypton I'm sorry, I didn't read your initial report closely enough: what you see is a leak report that we turn off due to how ROOT uses the LLVM and Clang libraries:. https://github.com/root-project/root/blob/479d383c1019a2c75b3ca736f3ff0d1ebd3b0d63/core/sanitizer/SanitizerSetup.cxx#L22. I don't remember the details, but it's possible that the method we're using to suppress the leak sanitizer doesn't work with GCC and that's why switching to Clang solved the issue during build. For your own application, you need to pull in that same code, which should happen automatically if you use `ROOT_EXECUTABLE`. Can you check how your application is created? If it's not possible to use `ROOT_EXECUTABLE`, you can also manually link in `ROOT::ROOTStaticSanitizerConfig`. Alternatively you can try setting the environment variable `ASAN_OPTIONS=""detect_leaks=0""`. Hope this helps, let me know if you have further problems!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:802,availability,monitor,monitored,802,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:802,deployability,monitor,monitored,802,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:274,energy efficiency,core,core,274,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:802,energy efficiency,monitor,monitored,802,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:812,performance,memor,memory,812,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:802,reliability,monitor,monitored,802,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:873,reliability,growth,growth,873,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1015,reliability,doe,does,1015,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:171,safety,sanit,sanitiser,171,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:279,safety,sanit,sanitizer,279,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:575,safety,sanit,sanitizer,575,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:779,safety,test,tests,779,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:802,safety,monitor,monitored,802,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:171,security,sanit,sanitiser,171,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:279,security,sanit,sanitizer,279,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:575,security,sanit,sanitizer,575,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:10,testability,understand,understand,10,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:774,testability,unit,unit,774,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:779,testability,test,tests,779,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:802,testability,monitor,monitored,802,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:335,usability,document,documentation,335,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:812,usability,memor,memory,812,"🤔 Just to understand, is it a known real leak or a false positive? I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). In particular I added. ```. cd root_install/etc/. printf '\n#Full libCling for SMASH\nleak:libCling\n' >> lsan-root.supp. ```. together with. ```dockerfile. # This will let sanitizer suppress leaks according to suppressions file list of patterns. ENV LSAN_OPTIONS=""suppressions=${ROOTSYS}/etc/lsan-root.supp:print_suppressions=0"". ```. to my Dockerfile. Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️ . <div align=""center"">. <img src=""https://github.com/root-project/root/assets/13135070/ca744a83-51ca-4143-ba20-bf481e60c6b8"" width=""360"" />. <img src=""https://github.com/root-project/root/assets/13135070/a68a2ced-a04f-4698-a0e0-a72cf6dd9d1d"" width=""355"" />. </div>.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1073,availability,monitor,monitored,1073,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1073,deployability,monitor,monitored,1073,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:359,energy efficiency,alloc,allocations,359,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:770,energy efficiency,core,core,770,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1009,energy efficiency,core,core,1009,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1073,energy efficiency,monitor,monitored,1073,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:352,performance,memor,memory,352,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:546,performance,memor,memory,546,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1083,performance,memor,memory,1083,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1396,performance,memor,memory,1396,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1416,performance,memor,memory,1416,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1490,performance,memor,memory,1490,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1073,reliability,monitor,monitored,1073,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1144,reliability,growth,growth,1144,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1286,reliability,doe,does,1286,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1529,reliability,Doe,Does,1529,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:379,safety,sanit,sanitizers,379,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:667,safety,sanit,sanitiser,667,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:775,safety,sanit,sanitizer,775,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1014,safety,sanit,sanitizer,1014,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1050,safety,test,tests,1050,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1073,safety,monitor,monitored,1073,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1350,safety,test,tests,1350,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:379,security,sanit,sanitizers,379,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:667,security,sanit,sanitiser,667,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:775,security,sanit,sanitizer,775,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1014,security,sanit,sanitizer,1014,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:12,testability,understand,understand,12,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:100,testability,understand,understanding,100,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:134,testability,plan,planning,134,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1045,testability,unit,unit,1045,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1050,testability,test,tests,1050,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1073,testability,monitor,monitored,1073,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1345,testability,unit,unit,1345,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1350,testability,test,tests,1350,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:352,usability,memor,memory,352,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:546,usability,memor,memory,546,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:831,usability,document,documentation,831,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1083,usability,memor,memory,1083,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1396,usability,memor,memory,1396,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1416,usability,memor,memory,1416,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1490,usability,memor,memory,1490,"> 🤔 Just to understand, is it a known real leak or a false positive? It is a ""real"" leak that in my understanding we are not urgently planning to fix. Basically it comes from Clang's internal data structures that are ""lost"" during shutdown. With `clang` used as a compiler, the libraries make quite some effort to clean up all data structures and free memory allocations to make sanitizers clean. I think this mode was never implemented in Cling, also because it's not really relevant: after process termination, the OS will clean up all virtual memory anyway. > I initially thought it was something we in any case could not fix on our side and I also suppressed the sanitiser leak as described [here](https://gitlab.ep1.rub.de/fp311online/cern-root/-/tree/v6-22-08-ep1/core/sanitizer?ref_type=heads) (not sure this is an official documentation, but it's something google brought to my attention). Yes, the upstream equivalent to that GitLab instance would be https://github.com/root-project/root/tree/master/core/sanitizer. > Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in `v6.26.10` the problem does not occur (plot right below). 🤷‍♂️. Ok, good that all unit tests pass, so you're not using uninitialized memory :+1: for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Does it involve `TChain`s, as reported in https://github.com/root-project/root/issues/13130?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:3244,deployability,stack,stackoverflow,3244,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:3342,deployability,stack,stackoverflow,3342,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:3410,energy efficiency,reduc,reduce,3410,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:3225,modifiability,variab,variables,3225,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:34,performance,memor,memory,34,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:108,performance,memor,memory,108,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:161,reliability,Doe,Does,161,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:3017,reliability,doe,does,3017,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:573,safety,test,tests,573,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:675,safety,test,test,675,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:708,safety,test,test,708,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:749,safety,TEST,TEST,749,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:2839,safety,sanit,sanitiser,2839,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:2861,safety,test,test,2861,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:2872,safety,compl,complain,2872,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:2974,safety,sanit,sanitiser,2974,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:3012,safety,test,test,3012,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:2839,security,sanit,sanitiser,2839,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:2872,security,compl,complain,2872,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:2974,security,sanit,sanitiser,2974,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:568,testability,unit,unit,568,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:573,testability,test,tests,573,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:670,testability,unit,unit,670,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:675,testability,test,test,675,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:708,testability,test,test,708,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:749,testability,TEST,TEST,749,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:2861,testability,test,test,2861,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:3007,testability,unit,unit,3007,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:3012,testability,test,test,3012,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:34,usability,memor,memory,34,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:108,usability,memor,memory,108,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:320,usability,interact,interacting,320,"Thanks for the insight. > for the memory leak, do you have a semi-standalone program that shows the growing memory usage on 6.28, but not on 6.26? Not really. > Does it involve TChains, as reported in https://github.com/root-project/root/issues/13130? It might indirectly. I never dealt with the part of our application interacting with ROOT but after a quick look, we mostly directly use `TTree`. However, we link to and use [HepMC](https://ep-dep-sft.web.cern.ch/project/hepmc), which makes heavier use of ROOT. . Now, I just realised that many (if not most) of our unit tests do not use ROOT, but _only link_ to its libraries. In particular, I tried to add a trivial unit test file. ```cpp. #include ""vir/test.h"" // This include has to be first. TEST(){ std::cout << ""Hello world\n""; }. ```. and compiling as the other ones, i.e. linking it to. ```console. $ ldd trivial_tests | grep -i 'root'. 	libGui.so => /SMASH/root_install/lib/libGui.so (0x00007f21967ee000). 	libCore.so => /SMASH/root_install/lib/libCore.so (0x00007f2195e98000). 	libImt.so => /SMASH/root_install/lib/libImt.so (0x00007f2195e74000). 	libRIO.so => /SMASH/root_install/lib/libRIO.so (0x00007f219541f000). 	libNet.so => /SMASH/root_install/lib/libNet.so (0x00007f2195280000). 	libHist.so => /SMASH/root_install/lib/libHist.so (0x00007f21949cb000). 	libGraf.so => /SMASH/root_install/lib/libGraf.so (0x00007f21946ea000). 	libGraf3d.so => /SMASH/root_install/lib/libGraf3d.so (0x00007f21945ab000). 	libGpad.so => /SMASH/root_install/lib/libGpad.so (0x00007f2194408000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:3094,usability,behavi,behaviour,3094,"000). 	libROOTVecOps.so => /SMASH/root_install/lib/libROOTVecOps.so (0x00007f21941b1000). 	libTree.so => /SMASH/root_install/lib/libTree.so (0x00007f2193e65000). 	libTreePlayer.so => /SMASH/root_install/lib/libTreePlayer.so (0x00007f2193b41000). 	libRint.so => /SMASH/root_install/lib/libRint.so (0x00007f2193ae4000). 	libPostscript.so => /SMASH/root_install/lib/libPostscript.so (0x00007f2193953000). 	libMatrix.so => /SMASH/root_install/lib/libMatrix.so (0x00007f21935d5000). 	libPhysics.so => /SMASH/root_install/lib/libPhysics.so (0x00007f2193539000). 	libMathCore.so => /SMASH/root_install/lib/libMathCore.so (0x00007f2193113000). 	libThread.so => /SMASH/root_install/lib/libThread.so (0x00007f2193072000). 	libMultiProc.so => /SMASH/root_install/lib/libMultiProc.so (0x00007f219305b000). 	libROOTDataFrame.so => /SMASH/root_install/lib/libROOTDataFrame.so (0x00007f2192dd3000). 	libHepMC3rootIO.so.3 => /SMASH/hepmc3_install/lib/libHepMC3rootIO.so.3 (0x00007f2192bb0000). 	libtbb.so.2 => /SMASH/root_install/lib/libtbb.so.2 (0x00007f2184ecd000). 	libvdt.so => /SMASH/root_install/lib/libvdt.so (0x00007f2184910000). 	libGenVector.so => /SMASH/root_install/lib/libGenVector.so (0x00007f21847b9000). 	libROOTNTuple.so => /SMASH/root_install/lib/libROOTNTuple.so (0x00007f218455a000). ```. makes the sanitiser running the test still complain as above. 🤔 I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? By the way, I think we might reduce which ROOT libraries we link against and we have an issue about this, although it is not a urgent aspect at the moment.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:333,availability,operat,operate,333,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:183,deployability,Depend,Depending,183,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:833,deployability,stack,stackoverflow,833,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:931,deployability,stack,stackoverflow,931,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:183,integrability,Depend,Depending,183,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:183,modifiability,Depend,Depending,183,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:814,modifiability,variab,variables,814,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1093,performance,memor,memory,1093,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:537,reliability,doe,does,537,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1069,reliability,doe,doesn,1069,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:47,safety,test,test,47,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:131,safety,sanit,sanitiser,131,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:153,safety,test,test,153,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:164,safety,compl,complain,164,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:183,safety,Depend,Depending,183,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:314,safety,sanit,sanitized,314,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:392,safety,sanit,sanitizers,392,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:494,safety,sanit,sanitiser,494,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:532,safety,test,test,532,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1020,safety,compl,complaining,1020,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:131,security,sanit,sanitiser,131,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:164,security,compl,complain,164,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:314,security,sanit,sanitized,314,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:392,security,sanit,sanitizers,392,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:494,security,sanit,sanitiser,494,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1020,security,compl,complaining,1020,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:42,testability,unit,unit,42,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:47,testability,test,test,47,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:153,testability,test,test,153,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:183,testability,Depend,Depending,183,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:527,testability,unit,unit,527,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:532,testability,test,test,532,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:683,usability,behavi,behaviour,683,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1093,usability,memor,memory,1093,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1115,usability,interact,interacting,1115,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1166,usability,clear,clear,1166,"> In particular, I tried to add a trivial unit test file [...] and compiling as the other ones, i.e. linking it to [...] makes the sanitiser running the test still complain as above. Depending on how you compile it, you might get `-fsanitize=address` from the ROOT C++ flags. But in general yes, the libraries are sanitized and will operate no matter if your application itself is built with sanitizers or not. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. Let me know if you need so. That would be as expected, so I don't think it's worth the effort. > Now, this behaviour (leaking just linking) should make it not too difficult to locate the issue. Do you do something [with globals or static variables](https://stackoverflow.com/a/8353892/14967071)? Or do you have [a `_init` and/or `_fini` function](https://stackoverflow.com/a/6412445/14967071)? As explained before, what the AddressSanitizer is complaining about is well understood and it also doesn't explain growing memory usage when not interacting with ROOT. This latter is what needs a clear reproducer to dig out the problem.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:156,reliability,doe,does,156,"> This latter is what needs a clear reproducer to dig out the problem. I agree. This is actually what I was meaning by making an hello-world program **that does not use ROOT**, compile it linking to ROOT and with sanitiser on, and see if the same leak report is given. I would expect so and, if not, then there is something I definitely do not get in our application. 🙈",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:213,safety,sanit,sanitiser,213,"> This latter is what needs a clear reproducer to dig out the problem. I agree. This is actually what I was meaning by making an hello-world program **that does not use ROOT**, compile it linking to ROOT and with sanitiser on, and see if the same leak report is given. I would expect so and, if not, then there is something I definitely do not get in our application. 🙈",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:213,security,sanit,sanitiser,213,"> This latter is what needs a clear reproducer to dig out the problem. I agree. This is actually what I was meaning by making an hello-world program **that does not use ROOT**, compile it linking to ROOT and with sanitiser on, and see if the same leak report is given. I would expect so and, if not, then there is something I definitely do not get in our application. 🙈",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:30,usability,clear,clear,30,"> This latter is what needs a clear reproducer to dig out the problem. I agree. This is actually what I was meaning by making an hello-world program **that does not use ROOT**, compile it linking to ROOT and with sanitiser on, and see if the same leak report is given. I would expect so and, if not, then there is something I definitely do not get in our application. 🙈",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:48,availability,monitor,monitored,48,"> Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in v6.26.10 the problem does not occur (plot right below). Do you see the same growth without ASAN?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:48,deployability,monitor,monitored,48,"> Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in v6.26.10 the problem does not occur (plot right below). Do you see the same growth without ASAN?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:48,energy efficiency,monitor,monitored,48,"> Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in v6.26.10 the problem does not occur (plot right below). Do you see the same growth without ASAN?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:58,performance,memor,memory,58,"> Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in v6.26.10 the problem does not occur (plot right below). Do you see the same growth without ASAN?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:48,reliability,monitor,monitored,48,"> Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in v6.26.10 the problem does not occur (plot right below). Do you see the same growth without ASAN?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:119,reliability,growth,growth,119,"> Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in v6.26.10 the problem does not occur (plot right below). Do you see the same growth without ASAN?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:259,reliability,doe,does,259,"> Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in v6.26.10 the problem does not occur (plot right below). Do you see the same growth without ASAN?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:314,reliability,growth,growth,314,"> Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in v6.26.10 the problem does not occur (plot right below). Do you see the same growth without ASAN?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:25,safety,test,tests,25,"> Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in v6.26.10 the problem does not occur (plot right below). Do you see the same growth without ASAN?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:48,safety,monitor,monitored,48,"> Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in v6.26.10 the problem does not occur (plot right below). Do you see the same growth without ASAN?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:20,testability,unit,unit,20,"> Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in v6.26.10 the problem does not occur (plot right below). Do you see the same growth without ASAN?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:25,testability,test,tests,25,"> Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in v6.26.10 the problem does not occur (plot right below). Do you see the same growth without ASAN?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:48,testability,monitor,monitored,48,"> Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in v6.26.10 the problem does not occur (plot right below). Do you see the same growth without ASAN?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:58,usability,memor,memory,58,"> Doing so, all the unit tests pass, but I then monitored memory usage over a long run of our application and a linear growth was evident (plot left below). Nothing extreme, sure, but I thought it was worth reporting, especially since in v6.26.10 the problem does not occur (plot right below). Do you see the same growth without ASAN?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:17,deployability,updat,updates,17,"@AxelKrypton any updates on this? Looking over the past discussion, we are aware of the (intentional) memory leaks in `libCling` (even though we fixed one case in https://github.com/root-project/root/pull/16150 that was a mistake; the fix will appear in 6.34). I still have trouble understanding how just linking to ROOT and not using it should introduce a memory leak in the application... Lacking more feedback, I would propose to close this issue for the moment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:102,performance,memor,memory,102,"@AxelKrypton any updates on this? Looking over the past discussion, we are aware of the (intentional) memory leaks in `libCling` (even though we fixed one case in https://github.com/root-project/root/pull/16150 that was a mistake; the fix will appear in 6.34). I still have trouble understanding how just linking to ROOT and not using it should introduce a memory leak in the application... Lacking more feedback, I would propose to close this issue for the moment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:357,performance,memor,memory,357,"@AxelKrypton any updates on this? Looking over the past discussion, we are aware of the (intentional) memory leaks in `libCling` (even though we fixed one case in https://github.com/root-project/root/pull/16150 that was a mistake; the fix will appear in 6.34). I still have trouble understanding how just linking to ROOT and not using it should introduce a memory leak in the application... Lacking more feedback, I would propose to close this issue for the moment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:17,safety,updat,updates,17,"@AxelKrypton any updates on this? Looking over the past discussion, we are aware of the (intentional) memory leaks in `libCling` (even though we fixed one case in https://github.com/root-project/root/pull/16150 that was a mistake; the fix will appear in 6.34). I still have trouble understanding how just linking to ROOT and not using it should introduce a memory leak in the application... Lacking more feedback, I would propose to close this issue for the moment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:17,security,updat,updates,17,"@AxelKrypton any updates on this? Looking over the past discussion, we are aware of the (intentional) memory leaks in `libCling` (even though we fixed one case in https://github.com/root-project/root/pull/16150 that was a mistake; the fix will appear in 6.34). I still have trouble understanding how just linking to ROOT and not using it should introduce a memory leak in the application... Lacking more feedback, I would propose to close this issue for the moment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:282,testability,understand,understanding,282,"@AxelKrypton any updates on this? Looking over the past discussion, we are aware of the (intentional) memory leaks in `libCling` (even though we fixed one case in https://github.com/root-project/root/pull/16150 that was a mistake; the fix will appear in 6.34). I still have trouble understanding how just linking to ROOT and not using it should introduce a memory leak in the application... Lacking more feedback, I would propose to close this issue for the moment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:102,usability,memor,memory,102,"@AxelKrypton any updates on this? Looking over the past discussion, we are aware of the (intentional) memory leaks in `libCling` (even though we fixed one case in https://github.com/root-project/root/pull/16150 that was a mistake; the fix will appear in 6.34). I still have trouble understanding how just linking to ROOT and not using it should introduce a memory leak in the application... Lacking more feedback, I would propose to close this issue for the moment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:357,usability,memor,memory,357,"@AxelKrypton any updates on this? Looking over the past discussion, we are aware of the (intentional) memory leaks in `libCling` (even though we fixed one case in https://github.com/root-project/root/pull/16150 that was a mistake; the fix will appear in 6.34). I still have trouble understanding how just linking to ROOT and not using it should introduce a memory leak in the application... Lacking more feedback, I would propose to close this issue for the moment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:404,usability,feedback,feedback,404,"@AxelKrypton any updates on this? Looking over the past discussion, we are aware of the (intentional) memory leaks in `libCling` (even though we fixed one case in https://github.com/root-project/root/pull/16150 that was a mistake; the fix will appear in 6.34). I still have trouble understanding how just linking to ROOT and not using it should introduce a memory leak in the application... Lacking more feedback, I would propose to close this issue for the moment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:433,usability,close,close,433,"@AxelKrypton any updates on this? Looking over the past discussion, we are aware of the (intentional) memory leaks in `libCling` (even though we fixed one case in https://github.com/root-project/root/pull/16150 that was a mistake; the fix will appear in 6.34). I still have trouble understanding how just linking to ROOT and not using it should introduce a memory leak in the application... Lacking more feedback, I would propose to close this issue for the moment...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:132,deployability,build,build,132,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:140,deployability,contain,container,140,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:189,deployability,build,build,189,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:765,deployability,version,versions,765,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:765,integrability,version,versions,765,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:765,modifiability,version,versions,765,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:17,performance,time,time,17,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:717,performance,time,time,717,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:575,reliability,doe,does,575,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:941,reliability,doe,does,941,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:532,safety,sanit,sanitiser,532,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:570,safety,test,test,570,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:532,security,sanit,sanitiser,532,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:76,testability,understand,understand,76,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:565,testability,unit,unit,565,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:570,testability,test,test,570,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:729,testability,plan,plan,729,"I could not find time to provide you with more information. You will surely understand that it is not a trivial check, as I need to build a container compiling ROOT as you suggest and then build and run my application. However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. did you try? 🤔. It is on my to-do list to come back to this at some point, but I have not really found time yet. I plan to try to use more recent ROOT versions and check if the problem disappear. Especially as you mentioned it, `6.34` is a good first candidate. I can report here the outcome. As side remark, closing the issue does not feel useful. 🫠",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1018,interoperability,specif,specific,1018,"> However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > . > > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. > . > did you try? 🤔. No, because this was already discussed: The report is real, but it's a well understood problem in the way ROOT and Cling use the LLVM and Clang libraries and will not be fixed. That part of the issue has been addressed from my point of view, please let me know if there is something to clarify. Then in https://github.com/root-project/root/issues/14055#issuecomment-1814642915 you made a second report about memory usage which you clarified in https://github.com/root-project/root/issues/14055#issuecomment-1816003128 happens even if only linking the ROOT libraries. As mentioned, this seemed specific to your setup and I was thus waiting for a reproducer from your side. Without that, I'm not sure what I would be able to do here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:833,performance,memor,memory,833,"> However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > . > > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. > . > did you try? 🤔. No, because this was already discussed: The report is real, but it's a well understood problem in the way ROOT and Cling use the LLVM and Clang libraries and will not be fixed. That part of the issue has been addressed from my point of view, please let me know if there is something to clarify. Then in https://github.com/root-project/root/issues/14055#issuecomment-1814642915 you made a second report about memory usage which you clarified in https://github.com/root-project/root/issues/14055#issuecomment-1816003128 happens even if only linking the ROOT libraries. As mentioned, this seemed specific to your setup and I was thus waiting for a reproducer from your side. Without that, I'm not sure what I would be able to do here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:364,reliability,doe,does,364,"> However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > . > > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. > . > did you try? 🤔. No, because this was already discussed: The report is real, but it's a well understood problem in the way ROOT and Cling use the LLVM and Clang libraries and will not be fixed. That part of the issue has been addressed from my point of view, please let me know if there is something to clarify. Then in https://github.com/root-project/root/issues/14055#issuecomment-1814642915 you made a second report about memory usage which you clarified in https://github.com/root-project/root/issues/14055#issuecomment-1816003128 happens even if only linking the ROOT libraries. As mentioned, this seemed specific to your setup and I was thus waiting for a reproducer from your side. Without that, I'm not sure what I would be able to do here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:321,safety,sanit,sanitiser,321,"> However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > . > > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. > . > did you try? 🤔. No, because this was already discussed: The report is real, but it's a well understood problem in the way ROOT and Cling use the LLVM and Clang libraries and will not be fixed. That part of the issue has been addressed from my point of view, please let me know if there is something to clarify. Then in https://github.com/root-project/root/issues/14055#issuecomment-1814642915 you made a second report about memory usage which you clarified in https://github.com/root-project/root/issues/14055#issuecomment-1816003128 happens even if only linking the ROOT libraries. As mentioned, this seemed specific to your setup and I was thus waiting for a reproducer from your side. Without that, I'm not sure what I would be able to do here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:359,safety,test,test,359,"> However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > . > > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. > . > did you try? 🤔. No, because this was already discussed: The report is real, but it's a well understood problem in the way ROOT and Cling use the LLVM and Clang libraries and will not be fixed. That part of the issue has been addressed from my point of view, please let me know if there is something to clarify. Then in https://github.com/root-project/root/issues/14055#issuecomment-1814642915 you made a second report about memory usage which you clarified in https://github.com/root-project/root/issues/14055#issuecomment-1816003128 happens even if only linking the ROOT libraries. As mentioned, this seemed specific to your setup and I was thus waiting for a reproducer from your side. Without that, I'm not sure what I would be able to do here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:321,security,sanit,sanitiser,321,"> However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > . > > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. > . > did you try? 🤔. No, because this was already discussed: The report is real, but it's a well understood problem in the way ROOT and Cling use the LLVM and Clang libraries and will not be fixed. That part of the issue has been addressed from my point of view, please let me know if there is something to clarify. Then in https://github.com/root-project/root/issues/14055#issuecomment-1814642915 you made a second report about memory usage which you clarified in https://github.com/root-project/root/issues/14055#issuecomment-1816003128 happens even if only linking the ROOT libraries. As mentioned, this seemed specific to your setup and I was thus waiting for a reproducer from your side. Without that, I'm not sure what I would be able to do here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:354,testability,unit,unit,354,"> However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > . > > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. > . > did you try? 🤔. No, because this was already discussed: The report is real, but it's a well understood problem in the way ROOT and Cling use the LLVM and Clang libraries and will not be fixed. That part of the issue has been addressed from my point of view, please let me know if there is something to clarify. Then in https://github.com/root-project/root/issues/14055#issuecomment-1814642915 you made a second report about memory usage which you clarified in https://github.com/root-project/root/issues/14055#issuecomment-1816003128 happens even if only linking the ROOT libraries. As mentioned, this seemed specific to your setup and I was thus waiting for a reproducer from your side. Without that, I'm not sure what I would be able to do here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:359,testability,test,test,359,"> However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > . > > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. > . > did you try? 🤔. No, because this was already discussed: The report is real, but it's a well understood problem in the way ROOT and Cling use the LLVM and Clang libraries and will not be fixed. That part of the issue has been addressed from my point of view, please let me know if there is something to clarify. Then in https://github.com/root-project/root/issues/14055#issuecomment-1814642915 you made a second report about memory usage which you clarified in https://github.com/root-project/root/issues/14055#issuecomment-1816003128 happens even if only linking the ROOT libraries. As mentioned, this seemed specific to your setup and I was thus waiting for a reproducer from your side. Without that, I'm not sure what I would be able to do here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:833,usability,memor,memory,833,"> However, IMO, you also have all the ingredients to give it a try. Following [this note above](https://github.com/root-project/root/issues/14055#issuecomment-1816003128), you should be able to reproduce the problem. There I wrote. > . > > I guess I could create a standalone hello-world C++ code and compile it with the sanitiser linking to ROOT as our unit test does and I should get the same report. > . > did you try? 🤔. No, because this was already discussed: The report is real, but it's a well understood problem in the way ROOT and Cling use the LLVM and Clang libraries and will not be fixed. That part of the issue has been addressed from my point of view, please let me know if there is something to clarify. Then in https://github.com/root-project/root/issues/14055#issuecomment-1814642915 you made a second report about memory usage which you clarified in https://github.com/root-project/root/issues/14055#issuecomment-1816003128 happens even if only linking the ROOT libraries. As mentioned, this seemed specific to your setup and I was thus waiting for a reproducer from your side. Without that, I'm not sure what I would be able to do here?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:770,deployability,version,versions,770,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:770,integrability,version,versions,770,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:770,modifiability,version,versions,770,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:741,performance,memor,memory,741,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:21,safety,sanit,sanitiser,21,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:70,safety,test,test,70,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:98,safety,test,test,98,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:179,safety,TEST,TEST,179,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:21,security,sanit,sanitiser,21,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:65,testability,unit,unit,65,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:70,testability,test,test,70,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:98,testability,test,test,98,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:179,testability,TEST,TEST,179,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:359,usability,close,close,359,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:393,usability,workflow,workflow,393,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:741,usability,memor,memory,741,"Do you mean that the sanitiser report when running the following unit test. ```cpp. #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. TEST(){ std::cout << ""Hello world\n""; }. ```. compiled linking to ROOT is about the leakage you usually suppress? 🤔 If so, I misunderstood you, sorry. In that case, if you need to close the issue for your internal workflow, go ahead. Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. I will at some point try to come up with a standalone reproducer. I am not sure how straightforward will it be. However, I would start checking the memory usage with newer ROOT versions of the same setup used above.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:969,performance,time,time,969,"> Do you mean that the sanitiser report when running the following unit test. > . > ```c++. > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. > . > TEST(){ std::cout << ""Hello world\n""; }. > ```. > . > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:421,reliability,doe,doesn,421,"> Do you mean that the sanitiser report when running the following unit test. > . > ```c++. > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. > . > TEST(){ std::cout << ""Hello world\n""; }. > ```. > . > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:23,safety,sanit,sanitiser,23,"> Do you mean that the sanitiser report when running the following unit test. > . > ```c++. > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. > . > TEST(){ std::cout << ""Hello world\n""; }. > ```. > . > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:72,safety,test,test,72,"> Do you mean that the sanitiser report when running the following unit test. > . > ```c++. > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. > . > TEST(){ std::cout << ""Hello world\n""; }. > ```. > . > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:108,safety,test,test,108,"> Do you mean that the sanitiser report when running the following unit test. > . > ```c++. > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. > . > TEST(){ std::cout << ""Hello world\n""; }. > ```. > . > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:195,safety,TEST,TEST,195,"> Do you mean that the sanitiser report when running the following unit test. > . > ```c++. > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. > . > TEST(){ std::cout << ""Hello world\n""; }. > ```. > . > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:23,security,sanit,sanitiser,23,"> Do you mean that the sanitiser report when running the following unit test. > . > ```c++. > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. > . > TEST(){ std::cout << ""Hello world\n""; }. > ```. > . > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:67,testability,unit,unit,67,"> Do you mean that the sanitiser report when running the following unit test. > . > ```c++. > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. > . > TEST(){ std::cout << ""Hello world\n""; }. > ```. > . > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:72,testability,test,test,72,"> Do you mean that the sanitiser report when running the following unit test. > . > ```c++. > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. > . > TEST(){ std::cout << ""Hello world\n""; }. > ```. > . > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:108,testability,test,test,108,"> Do you mean that the sanitiser report when running the following unit test. > . > ```c++. > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. > . > TEST(){ std::cout << ""Hello world\n""; }. > ```. > . > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:195,testability,TEST,TEST,195,"> Do you mean that the sanitiser report when running the following unit test. > . > ```c++. > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. > . > TEST(){ std::cout << ""Hello world\n""; }. > ```. > . > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:347,testability,simpl,simple,347,"> Do you mean that the sanitiser report when running the following unit test. > . > ```c++. > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. > . > TEST(){ std::cout << ""Hello world\n""; }. > ```. > . > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:925,testability,understand,understand,925,"> Do you mean that the sanitiser report when running the following unit test. > . > ```c++. > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. > . > TEST(){ std::cout << ""Hello world\n""; }. > ```. > . > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:347,usability,simpl,simple,347,"> Do you mean that the sanitiser report when running the following unit test. > . > ```c++. > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. > . > TEST(){ std::cout << ""Hello world\n""; }. > ```. > . > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:836,usability,close,close,836,"> Do you mean that the sanitiser report when running the following unit test. > . > ```c++. > #include ""vir/test.h"" // This include has to be first -> https://github.com/mattkretz/virtest. > . > TEST(){ std::cout << ""Hello world\n""; }. > ```. > . > compiled linking to ROOT is about the leakage you usually suppress? 🤔. I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of `TemplateIdAnnotation` are fixed by https://github.com/root-project/root/pull/16150. > Still [the reported leakage above](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) is a real one which appeared in `v6.28` and was not there in `v6.26`. Yes, that's why I didn't close the issue back then and came across this when re-evaluating open issues. I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:616,modifiability,scenario,scenario,616,"> I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of TemplateIdAnnotation are fixed by https://github.com/root-project/root/pull/16150. Thanks. I guess what I get from the sanitiser is what you suppress. This clarifies further the situation. > I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it... Fair enough. I will try to find some spare hours for this. In the best case scenario ROOT `6.34` does not show the problem and I can leave here a comment and close the issue... 🤞",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:471,performance,time,time,471,"> I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of TemplateIdAnnotation are fixed by https://github.com/root-project/root/pull/16150. Thanks. I guess what I get from the sanitiser is what you suppress. This clarifies further the situation. > I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it... Fair enough. I will try to find some spare hours for this. In the best case scenario ROOT `6.34` does not show the problem and I can leave here a comment and close the issue... 🤞",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:103,reliability,doe,doesn,103,"> I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of TemplateIdAnnotation are fixed by https://github.com/root-project/root/pull/16150. Thanks. I guess what I get from the sanitiser is what you suppress. This clarifies further the situation. > I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it... Fair enough. I will try to find some spare hours for this. In the best case scenario ROOT `6.34` does not show the problem and I can leave here a comment and close the issue... 🤞",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:637,reliability,doe,does,637,"> I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of TemplateIdAnnotation are fixed by https://github.com/root-project/root/pull/16150. Thanks. I guess what I get from the sanitiser is what you suppress. This clarifies further the situation. > I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it... Fair enough. I will try to find some spare hours for this. In the best case scenario ROOT `6.34` does not show the problem and I can leave here a comment and close the issue... 🤞",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:345,safety,sanit,sanitiser,345,"> I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of TemplateIdAnnotation are fixed by https://github.com/root-project/root/pull/16150. Thanks. I guess what I get from the sanitiser is what you suppress. This clarifies further the situation. > I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it... Fair enough. I will try to find some spare hours for this. In the best case scenario ROOT `6.34` does not show the problem and I can leave here a comment and close the issue... 🤞",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:345,security,sanit,sanitiser,345,"> I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of TemplateIdAnnotation are fixed by https://github.com/root-project/root/pull/16150. Thanks. I guess what I get from the sanitiser is what you suppress. This clarifies further the situation. > I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it... Fair enough. I will try to find some spare hours for this. In the best case scenario ROOT `6.34` does not show the problem and I can leave here a comment and close the issue... 🤞",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:29,testability,simpl,simple,29,"> I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of TemplateIdAnnotation are fixed by https://github.com/root-project/root/pull/16150. Thanks. I guess what I get from the sanitiser is what you suppress. This clarifies further the situation. > I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it... Fair enough. I will try to find some spare hours for this. In the best case scenario ROOT `6.34` does not show the problem and I can leave here a comment and close the issue... 🤞",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:427,testability,understand,understand,427,"> I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of TemplateIdAnnotation are fixed by https://github.com/root-project/root/pull/16150. Thanks. I guess what I get from the sanitiser is what you suppress. This clarifies further the situation. > I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it... Fair enough. I will try to find some spare hours for this. In the best case scenario ROOT `6.34` does not show the problem and I can leave here a comment and close the issue... 🤞",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:29,usability,simpl,simple,29,"> I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of TemplateIdAnnotation are fixed by https://github.com/root-project/root/pull/16150. Thanks. I guess what I get from the sanitiser is what you suppress. This clarifies further the situation. > I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it... Fair enough. I will try to find some spare hours for this. In the best case scenario ROOT `6.34` does not show the problem and I can leave here a comment and close the issue... 🤞",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:698,usability,close,close,698,"> I just tried and with this simple example I don't see anything, which is totally expected because it doesn't even initialize ROOT. The other reports that you provided before were the leakage we know about, or in the case of TemplateIdAnnotation are fixed by https://github.com/root-project/root/pull/16150. Thanks. I guess what I get from the sanitiser is what you suppress. This clarifies further the situation. > I totally understand that creating a reproducer takes time, but I fear without it there isn't much we can do without it... Fair enough. I will try to find some spare hours for this. In the best case scenario ROOT `6.34` does not show the problem and I can leave here a comment and close the issue... 🤞",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:758,availability,failur,failure,758,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1031,availability,error,errors,1031,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:665,deployability,fail,fail,665,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:758,deployability,fail,failure,758,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:492,integrability,topic,topic,492,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:838,interoperability,exchang,exchange,838,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:118,performance,time,time,118,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:192,performance,memor,memory,192,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:450,performance,memor,memory,450,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:758,performance,failur,failure,758,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1031,performance,error,errors,1031,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:665,reliability,fail,fail,665,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:758,reliability,fail,failure,758,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:553,safety,reme,remembered,553,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:608,safety,test,tests,608,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:700,safety,sanit,sanitiser,700,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:710,safety,compl,complaint,710,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:861,safety,safe,safely,861,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:992,safety,avoid,avoid,992,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1031,safety,error,errors,1031,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:700,security,sanit,sanitiser,700,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:710,security,compl,complaint,710,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:434,testability,understand,understand,434,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:520,testability,simpl,simply,520,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:608,testability,test,tests,608,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:818,testability,understand,understand,818,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:192,usability,memor,memory,192,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:450,usability,memor,memory,450,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:457,usability,behavi,behaviour,457,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:520,usability,simpl,simply,520,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:972,usability,minim,minimum,972,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1031,usability,error,errors,1031,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1089,usability,feedback,feedback,1089,"@hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈 . I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:792,availability,failur,failure,792,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1065,availability,error,errors,1065,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:699,deployability,fail,fail,699,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:792,deployability,fail,failure,792,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1373,deployability,log,log,1373,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1728,deployability,upgrad,upgraded,1728,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:494,integrability,topic,topic,494,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1456,integrability,event,eventually,1456,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:872,interoperability,exchang,exchange,872,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1389,interoperability,share,shared,1389,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1728,modifiability,upgrad,upgraded,1728,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:120,performance,time,time,120,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:194,performance,memor,memory,194,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:452,performance,memor,memory,452,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:792,performance,failur,failure,792,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1065,performance,error,errors,1065,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:699,reliability,fail,fail,699,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:792,reliability,fail,failure,792,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:587,safety,reme,remembered,587,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:642,safety,test,tests,642,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:734,safety,sanit,sanitiser,734,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:744,safety,compl,complaint,744,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:895,safety,safe,safely,895,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1026,safety,avoid,avoid,1026,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1065,safety,error,errors,1065,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1373,safety,log,log,1373,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:734,security,sanit,sanitiser,734,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:744,security,compl,complaint,744,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1373,security,log,log,1373,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:436,testability,understand,understand,436,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:554,testability,simpl,simply,554,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:642,testability,test,tests,642,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:852,testability,understand,understand,852,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1373,testability,log,log,1373,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:194,usability,memor,memory,194,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:452,usability,memor,memory,452,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:459,usability,behavi,behaviour,459,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:554,usability,simpl,simply,554,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1006,usability,minim,minimum,1006,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1065,usability,error,errors,1065,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/issues/14055:1216,usability,feedback,feedback,1216,"> @hahnjo I did not want to let this sit for too long and as days ahead are even busier for me I invested now some more time on this. The good news is that I can pretty confidently say that the memory leak reported [above in the left plot](https://github.com/root-project/root/issues/14055#issuecomment-1814642915) has nothing to do with ROOT 🎉 and it was an unlucky coincidence which made me think it is due to ROOT. 😓 I still have to understand this memory behaviour in detail, but it is off-topic here. 🙈. Ok, thanks for cross-checking! > I was about simply closing the issue, when I remembered checking old issues in our project that our tests were just passing with ROOT `v6.26` and started to fail reporting the above mentioned sanitiser complaint from `v6.28`. I now checked and these failure occur as well with `v6.30` and `v6.32`. As far as I understand from our exchange above, we can safely suppress these adding `leak:libCling'` to `lsan-root.supp` file (I would not exclude more than the bare minimum in order to avoid suppress potential real problems/errors in the future). Yes, I believe from an application point of view, you can treat `libCling` as a black box. > However, I would like to ask you a feedback about the fact this suppression was not necessary in `v6.26`. Is this expected for you? 🤔. If the leaks are about `TemplateId` (as they were in the log file(s) you shared), then yes this is a problem we introduced in v6.28. It was eventually fixed in https://github.com/root-project/root/pull/16150 which will appear in v6.34 (later this year). Sorry for not recognizing this as a real problem earlier (the fix was also made difficult because it was ""caused"" by an upstream change in LLVM/Clang when we upgraded).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14055
https://github.com/root-project/root/pull/14057:11,deployability,build,build,11,"@phsft-bot build on ROOT-ubuntu2004/python3, ROOT-ubuntu2204/nortcxxmod with flags -Dtmva-sofie=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14057
https://github.com/root-project/root/pull/14057:11,deployability,build,build,11,"@phsft-bot build on ROOT-ubuntu2004/python3, ROOT-ubuntu2204/nortcxxmod with flags -Dtmva-sofie=On -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14057
https://github.com/root-project/root/pull/14057:11,deployability,build,build,11,"@phsft-bot build on ROOT-ubuntu2004/python3, ROOT-ubuntu2204/nortcxxmod with flags -Dtmva-sofie=On -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14057
https://github.com/root-project/root/pull/14057:11,deployability,build,build,11,"@phsft-bot build on ROOT-ubuntu2004/python3, ROOT-ubuntu2204/nortcxxmod with flags -Dtmva-sofie=On -DCTEST_TEST_EXCLUDE_NONE=On",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14057
https://github.com/root-project/root/pull/14059:49,availability,failur,failures,49,And FYI I notified @guitargeek about the RooStat failures on Windows (looks like race conditions in utility file creation),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14059
https://github.com/root-project/root/pull/14059:49,deployability,fail,failures,49,And FYI I notified @guitargeek about the RooStat failures on Windows (looks like race conditions in utility file creation),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14059
https://github.com/root-project/root/pull/14059:49,performance,failur,failures,49,And FYI I notified @guitargeek about the RooStat failures on Windows (looks like race conditions in utility file creation),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14059
https://github.com/root-project/root/pull/14059:49,reliability,fail,failures,49,And FYI I notified @guitargeek about the RooStat failures on Windows (looks like race conditions in utility file creation),MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14059
https://github.com/root-project/root/issues/14061:348,deployability,UPDAT,UPDATE,348,"Actually, if/since it is passed by github, it wouldn't be so far. The cloning is just boot-strapping after that both the target branch and the incoming branch are being pulled. > Passing a hash here doesn't work (in local tests),. Yep, it is expected for PR to be of the form: `refs/pull/14052/head:ci-rootest-cmake` and both part are being used. [UPDATE: ""it"" was the `head_ref` rather than the `base_ref`]. This should be straight-forward to improve.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:199,reliability,doe,doesn,199,"Actually, if/since it is passed by github, it wouldn't be so far. The cloning is just boot-strapping after that both the target branch and the incoming branch are being pulled. > Passing a hash here doesn't work (in local tests),. Yep, it is expected for PR to be of the form: `refs/pull/14052/head:ci-rootest-cmake` and both part are being used. [UPDATE: ""it"" was the `head_ref` rather than the `base_ref`]. This should be straight-forward to improve.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:222,safety,test,tests,222,"Actually, if/since it is passed by github, it wouldn't be so far. The cloning is just boot-strapping after that both the target branch and the incoming branch are being pulled. > Passing a hash here doesn't work (in local tests),. Yep, it is expected for PR to be of the form: `refs/pull/14052/head:ci-rootest-cmake` and both part are being used. [UPDATE: ""it"" was the `head_ref` rather than the `base_ref`]. This should be straight-forward to improve.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:348,safety,UPDAT,UPDATE,348,"Actually, if/since it is passed by github, it wouldn't be so far. The cloning is just boot-strapping after that both the target branch and the incoming branch are being pulled. > Passing a hash here doesn't work (in local tests),. Yep, it is expected for PR to be of the form: `refs/pull/14052/head:ci-rootest-cmake` and both part are being used. [UPDATE: ""it"" was the `head_ref` rather than the `base_ref`]. This should be straight-forward to improve.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:189,security,hash,hash,189,"Actually, if/since it is passed by github, it wouldn't be so far. The cloning is just boot-strapping after that both the target branch and the incoming branch are being pulled. > Passing a hash here doesn't work (in local tests),. Yep, it is expected for PR to be of the form: `refs/pull/14052/head:ci-rootest-cmake` and both part are being used. [UPDATE: ""it"" was the `head_ref` rather than the `base_ref`]. This should be straight-forward to improve.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:348,security,UPDAT,UPDATE,348,"Actually, if/since it is passed by github, it wouldn't be so far. The cloning is just boot-strapping after that both the target branch and the incoming branch are being pulled. > Passing a hash here doesn't work (in local tests),. Yep, it is expected for PR to be of the form: `refs/pull/14052/head:ci-rootest-cmake` and both part are being used. [UPDATE: ""it"" was the `head_ref` rather than the `base_ref`]. This should be straight-forward to improve.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:222,testability,test,tests,222,"Actually, if/since it is passed by github, it wouldn't be so far. The cloning is just boot-strapping after that both the target branch and the incoming branch are being pulled. > Passing a hash here doesn't work (in local tests),. Yep, it is expected for PR to be of the form: `refs/pull/14052/head:ci-rootest-cmake` and both part are being used. [UPDATE: ""it"" was the `head_ref` rather than the `base_ref`]. This should be straight-forward to improve.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:145,deployability,patch,patches,145,"Side Notes. > to pass --base_ref ${{ github.sha }} "". in `build_root.py`, the `base_ref` is the target branch in the origin (`master`, `v6-32-00-patches`) while `head_ref` is pointing to the new commits to be merged in (which I think is what you meant to correct/fix).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:145,safety,patch,patches,145,"Side Notes. > to pass --base_ref ${{ github.sha }} "". in `build_root.py`, the `base_ref` is the target branch in the origin (`master`, `v6-32-00-patches`) while `head_ref` is pointing to the new commits to be merged in (which I think is what you meant to correct/fix).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:145,security,patch,patches,145,"Side Notes. > to pass --base_ref ${{ github.sha }} "". in `build_root.py`, the `base_ref` is the target branch in the origin (`master`, `v6-32-00-patches`) while `head_ref` is pointing to the new commits to be merged in (which I think is what you meant to correct/fix).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:165,deployability,build,build,165,"No, this is a misunderstanding: I mean the `push` workflows that run when commits are pushed to `master`. These only have `base_ref`, no `head_ref`, and produce the build artifacts *for* the PR builds that I mentioned above. The PR builds probably have a similar problem for the `head_ref`, but it's less of an issue since for PRs we always want the latest version anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:171,deployability,artifact,artifacts,171,"No, this is a misunderstanding: I mean the `push` workflows that run when commits are pushed to `master`. These only have `base_ref`, no `head_ref`, and produce the build artifacts *for* the PR builds that I mentioned above. The PR builds probably have a similar problem for the `head_ref`, but it's less of an issue since for PRs we always want the latest version anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:194,deployability,build,builds,194,"No, this is a misunderstanding: I mean the `push` workflows that run when commits are pushed to `master`. These only have `base_ref`, no `head_ref`, and produce the build artifacts *for* the PR builds that I mentioned above. The PR builds probably have a similar problem for the `head_ref`, but it's less of an issue since for PRs we always want the latest version anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:232,deployability,build,builds,232,"No, this is a misunderstanding: I mean the `push` workflows that run when commits are pushed to `master`. These only have `base_ref`, no `head_ref`, and produce the build artifacts *for* the PR builds that I mentioned above. The PR builds probably have a similar problem for the `head_ref`, but it's less of an issue since for PRs we always want the latest version anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:357,deployability,version,version,357,"No, this is a misunderstanding: I mean the `push` workflows that run when commits are pushed to `master`. These only have `base_ref`, no `head_ref`, and produce the build artifacts *for* the PR builds that I mentioned above. The PR builds probably have a similar problem for the `head_ref`, but it's less of an issue since for PRs we always want the latest version anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:357,integrability,version,version,357,"No, this is a misunderstanding: I mean the `push` workflows that run when commits are pushed to `master`. These only have `base_ref`, no `head_ref`, and produce the build artifacts *for* the PR builds that I mentioned above. The PR builds probably have a similar problem for the `head_ref`, but it's less of an issue since for PRs we always want the latest version anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:357,modifiability,version,version,357,"No, this is a misunderstanding: I mean the `push` workflows that run when commits are pushed to `master`. These only have `base_ref`, no `head_ref`, and produce the build artifacts *for* the PR builds that I mentioned above. The PR builds probably have a similar problem for the `head_ref`, but it's less of an issue since for PRs we always want the latest version anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:50,usability,workflow,workflows,50,"No, this is a misunderstanding: I mean the `push` workflows that run when commits are pushed to `master`. These only have `base_ref`, no `head_ref`, and produce the build artifacts *for* the PR builds that I mentioned above. The PR builds probably have a similar problem for the `head_ref`, but it's less of an issue since for PRs we always want the latest version anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:137,deployability,updat,updated,137,Related problem that I don't think I can fix (at least I don't see an obvious way). Is that if the target branch (for example master) is updated while the CI is running only the not-yet started runners will use the newest commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:137,safety,updat,updated,137,Related problem that I don't think I can fix (at least I don't see an obvious way). Is that if the target branch (for example master) is updated while the CI is running only the not-yet started runners will use the newest commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:137,security,updat,updated,137,Related problem that I don't think I can fix (at least I don't see an obvious way). Is that if the target branch (for example master) is updated while the CI is running only the not-yet started runners will use the newest commit.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:130,energy efficiency,current,current,130,"Ah .. in this case, this is a little more involved but not that bad either. We would need to pass `github.sha` in addition to the current arguments and reset the branch to that after cloning.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:112,reliability,doe,doesn,112,"Sure, I'm not saying it's impossible, just that the potentially obvious approach to pass the hash as `base_ref` doesn't work. A `git reset ${ github.sha }` might work, to be tested how it interacts with the rest of the system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:174,safety,test,tested,174,"Sure, I'm not saying it's impossible, just that the potentially obvious approach to pass the hash as `base_ref` doesn't work. A `git reset ${ github.sha }` might work, to be tested how it interacts with the rest of the system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:93,security,hash,hash,93,"Sure, I'm not saying it's impossible, just that the potentially obvious approach to pass the hash as `base_ref` doesn't work. A `git reset ${ github.sha }` might work, to be tested how it interacts with the rest of the system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:174,testability,test,tested,174,"Sure, I'm not saying it's impossible, just that the potentially obvious approach to pass the hash as `base_ref` doesn't work. A `git reset ${ github.sha }` might work, to be tested how it interacts with the rest of the system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:188,usability,interact,interacts,188,"Sure, I'm not saying it's impossible, just that the potentially obvious approach to pass the hash as `base_ref` doesn't work. A `git reset ${ github.sha }` might work, to be tested how it interacts with the rest of the system.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:221,deployability,build,builds,221,"> I think this is addressed within #14052 (already merged) and in particular [`8c17cbf` (#14052)](https://github.com/root-project/root/pull/14052/commits/8c17cbf69c83eefc89f46b9437bfec658cbe9058). That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:259,deployability,build,builds,259,"> I think this is addressed within #14052 (already merged) and in particular [`8c17cbf` (#14052)](https://github.com/root-project/root/pull/14052/commits/8c17cbf69c83eefc89f46b9437bfec658cbe9058). That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:383,deployability,depend,depending,383,"> I think this is addressed within #14052 (already merged) and in particular [`8c17cbf` (#14052)](https://github.com/root-project/root/pull/14052/commits/8c17cbf69c83eefc89f46b9437bfec658cbe9058). That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:412,energy efficiency,schedul,scheduled,412,"> I think this is addressed within #14052 (already merged) and in particular [`8c17cbf` (#14052)](https://github.com/root-project/root/pull/14052/commits/8c17cbf69c83eefc89f46b9437bfec658cbe9058). That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:383,integrability,depend,depending,383,"> I think this is addressed within #14052 (already merged) and in particular [`8c17cbf` (#14052)](https://github.com/root-project/root/pull/14052/commits/8c17cbf69c83eefc89f46b9437bfec658cbe9058). That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:383,modifiability,depend,depending,383,"> I think this is addressed within #14052 (already merged) and in particular [`8c17cbf` (#14052)](https://github.com/root-project/root/pull/14052/commits/8c17cbf69c83eefc89f46b9437bfec658cbe9058). That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:412,performance,schedul,scheduled,412,"> I think this is addressed within #14052 (already merged) and in particular [`8c17cbf` (#14052)](https://github.com/root-project/root/pull/14052/commits/8c17cbf69c83eefc89f46b9437bfec658cbe9058). That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:383,safety,depend,depending,383,"> I think this is addressed within #14052 (already merged) and in particular [`8c17cbf` (#14052)](https://github.com/root-project/root/pull/14052/commits/8c17cbf69c83eefc89f46b9437bfec658cbe9058). That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:383,testability,depend,depending,383,"> I think this is addressed within #14052 (already merged) and in particular [`8c17cbf` (#14052)](https://github.com/root-project/root/pull/14052/commits/8c17cbf69c83eefc89f46b9437bfec658cbe9058). That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:156,deployability,log,logic,156,"Line 434 and 437 in the [`8c17cbf` (#14052)](https://github.com/root-project/root/pull/14052/commits/8c17cbf69c83eefc89f46b9437bfec658cbe9058) add the same logic to the ""Pull Request"" part. Are we still missing something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:156,safety,log,logic,156,"Line 434 and 437 in the [`8c17cbf` (#14052)](https://github.com/root-project/root/pull/14052/commits/8c17cbf69c83eefc89f46b9437bfec658cbe9058) add the same logic to the ""Pull Request"" part. Are we still missing something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:156,security,log,logic,156,"Line 434 and 437 in the [`8c17cbf` (#14052)](https://github.com/root-project/root/pull/14052/commits/8c17cbf69c83eefc89f46b9437bfec658cbe9058) add the same logic to the ""Pull Request"" part. Are we still missing something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:156,testability,log,logic,156,"Line 434 and 437 in the [`8c17cbf` (#14052)](https://github.com/root-project/root/pull/14052/commits/8c17cbf69c83eefc89f46b9437bfec658cbe9058) add the same logic to the ""Pull Request"" part. Are we still missing something?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:66,deployability,build,builds,66,"Let me quote my answer from yesterday:. > That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. So maybe PR builds are now doing better than before, but that's entirely besides the point: A build triggered by a push to a branch should build exactly what was pushed, not some later commit. > AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:104,deployability,build,builds,104,"Let me quote my answer from yesterday:. > That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. So maybe PR builds are now doing better than before, but that's entirely besides the point: A build triggered by a push to a branch should build exactly what was pushed, not some later commit. > AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:149,deployability,build,builds,149,"Let me quote my answer from yesterday:. > That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. So maybe PR builds are now doing better than before, but that's entirely besides the point: A build triggered by a push to a branch should build exactly what was pushed, not some later commit. > AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:231,deployability,build,build,231,"Let me quote my answer from yesterday:. > That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. So maybe PR builds are now doing better than before, but that's entirely besides the point: A build triggered by a push to a branch should build exactly what was pushed, not some later commit. > AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:276,deployability,build,build,276,"Let me quote my answer from yesterday:. > That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. So maybe PR builds are now doing better than before, but that's entirely besides the point: A build triggered by a push to a branch should build exactly what was pushed, not some later commit. > AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:423,deployability,depend,depending,423,"Let me quote my answer from yesterday:. > That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. So maybe PR builds are now doing better than before, but that's entirely besides the point: A build triggered by a push to a branch should build exactly what was pushed, not some later commit. > AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:452,energy efficiency,schedul,scheduled,452,"Let me quote my answer from yesterday:. > That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. So maybe PR builds are now doing better than before, but that's entirely besides the point: A build triggered by a push to a branch should build exactly what was pushed, not some later commit. > AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:423,integrability,depend,depending,423,"Let me quote my answer from yesterday:. > That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. So maybe PR builds are now doing better than before, but that's entirely besides the point: A build triggered by a push to a branch should build exactly what was pushed, not some later commit. > AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:423,modifiability,depend,depending,423,"Let me quote my answer from yesterday:. > That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. So maybe PR builds are now doing better than before, but that's entirely besides the point: A build triggered by a push to a branch should build exactly what was pushed, not some later commit. > AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:452,performance,schedul,scheduled,452,"Let me quote my answer from yesterday:. > That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. So maybe PR builds are now doing better than before, but that's entirely besides the point: A build triggered by a push to a branch should build exactly what was pushed, not some later commit. > AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:423,safety,depend,depending,423,"Let me quote my answer from yesterday:. > That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. So maybe PR builds are now doing better than before, but that's entirely besides the point: A build triggered by a push to a branch should build exactly what was pushed, not some later commit. > AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:423,testability,depend,depending,423,"Let me quote my answer from yesterday:. > That commit is about PR builds; in this issue, I'm discussing builds after pushes to branches. So maybe PR builds are now doing better than before, but that's entirely besides the point: A build triggered by a push to a branch should build exactly what was pushed, not some later commit. > AFAICT they still use a `git pull` of the branch name, which may get you different commits depending on when the job is scheduled to start.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:87,deployability,updat,updated,87,"Right, I was looking in the wrong place. The part of root-ci.yml that still need to be updated is line 480 to 488 rather than the one I was refering to ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:87,safety,updat,updated,87,"Right, I was looking in the wrong place. The part of root-ci.yml that still need to be updated is line 480 to 488 rather than the one I was refering to ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14061:87,security,updat,updated,87,"Right, I was looking in the wrong place. The part of root-ci.yml that still need to be updated is line 480 to 488 rather than the one I was refering to ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14061
https://github.com/root-project/root/issues/14062:55,deployability,build,build-root-,55,Here's the same question. https://root-forum.cern.ch/t/build-root-6-26-04-module-core-and-std-problem-ubuntu-22-04/50742,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14062
https://github.com/root-project/root/issues/14062:74,deployability,modul,module-core-and-std-problem-ubuntu-,74,Here's the same question. https://root-forum.cern.ch/t/build-root-6-26-04-module-core-and-std-problem-ubuntu-22-04/50742,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14062
https://github.com/root-project/root/issues/14062:81,energy efficiency,core,core-and-std-problem-ubuntu-,81,Here's the same question. https://root-forum.cern.ch/t/build-root-6-26-04-module-core-and-std-problem-ubuntu-22-04/50742,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14062
https://github.com/root-project/root/issues/14062:74,modifiability,modul,module-core-and-std-problem-ubuntu-,74,Here's the same question. https://root-forum.cern.ch/t/build-root-6-26-04-module-core-and-std-problem-ubuntu-22-04/50742,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14062
https://github.com/root-project/root/issues/14062:74,safety,modul,module-core-and-std-problem-ubuntu-,74,Here's the same question. https://root-forum.cern.ch/t/build-root-6-26-04-module-core-and-std-problem-ubuntu-22-04/50742,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14062
https://github.com/root-project/root/issues/14064:579,availability,avail,available,579,"The ROOT PostScript and PDF backends use the original PostScript-defined 13 font styles which form 4 type families:. [Courier](https://en.wikipedia.org/wiki/Courier_(typeface)) (Regular, Oblique, Bold, Bold Oblique). [Helvetica](https://en.wikipedia.org/wiki/Helvetica) (Regular, Oblique, Bold, Bold Oblique). [Times](https://en.wikipedia.org/wiki/Times_Roman) (Roman, Italic, Bold, Bold Italic). [Symbol](https://en.wikipedia.org/wiki/Symbol_(typeface)). See the ""Core Font Set"" section in [this document](https://en.wikipedia.org/wiki/PostScript_fonts). These fonts are always available and do not need to be loaded in the PS or PDF file which allows to keep the files' sizes small **which is very important regarding the huge number of such files generated in HEP**. . So Helvetica is there. There are no license issues for PS and PDF. Unlike the `otf` and `ttf` files used for screen rendering. That's the reason why FreeSans was chosen because it is very similar to Helvetica (on my Mac I could not see the difference). We can replace the current FreeSan family by ""Tex Gyre Heros"" but that will be on screen only and will not affect the PDF and PS output. Therefore is it really worth it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14064
https://github.com/root-project/root/issues/14064:465,energy efficiency,Core,Core,465,"The ROOT PostScript and PDF backends use the original PostScript-defined 13 font styles which form 4 type families:. [Courier](https://en.wikipedia.org/wiki/Courier_(typeface)) (Regular, Oblique, Bold, Bold Oblique). [Helvetica](https://en.wikipedia.org/wiki/Helvetica) (Regular, Oblique, Bold, Bold Oblique). [Times](https://en.wikipedia.org/wiki/Times_Roman) (Roman, Italic, Bold, Bold Italic). [Symbol](https://en.wikipedia.org/wiki/Symbol_(typeface)). See the ""Core Font Set"" section in [this document](https://en.wikipedia.org/wiki/PostScript_fonts). These fonts are always available and do not need to be loaded in the PS or PDF file which allows to keep the files' sizes small **which is very important regarding the huge number of such files generated in HEP**. . So Helvetica is there. There are no license issues for PS and PDF. Unlike the `otf` and `ttf` files used for screen rendering. That's the reason why FreeSans was chosen because it is very similar to Helvetica (on my Mac I could not see the difference). We can replace the current FreeSan family by ""Tex Gyre Heros"" but that will be on screen only and will not affect the PDF and PS output. Therefore is it really worth it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14064
https://github.com/root-project/root/issues/14064:611,energy efficiency,load,loaded,611,"The ROOT PostScript and PDF backends use the original PostScript-defined 13 font styles which form 4 type families:. [Courier](https://en.wikipedia.org/wiki/Courier_(typeface)) (Regular, Oblique, Bold, Bold Oblique). [Helvetica](https://en.wikipedia.org/wiki/Helvetica) (Regular, Oblique, Bold, Bold Oblique). [Times](https://en.wikipedia.org/wiki/Times_Roman) (Roman, Italic, Bold, Bold Italic). [Symbol](https://en.wikipedia.org/wiki/Symbol_(typeface)). See the ""Core Font Set"" section in [this document](https://en.wikipedia.org/wiki/PostScript_fonts). These fonts are always available and do not need to be loaded in the PS or PDF file which allows to keep the files' sizes small **which is very important regarding the huge number of such files generated in HEP**. . So Helvetica is there. There are no license issues for PS and PDF. Unlike the `otf` and `ttf` files used for screen rendering. That's the reason why FreeSans was chosen because it is very similar to Helvetica (on my Mac I could not see the difference). We can replace the current FreeSan family by ""Tex Gyre Heros"" but that will be on screen only and will not affect the PDF and PS output. Therefore is it really worth it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14064
https://github.com/root-project/root/issues/14064:1044,energy efficiency,current,current,1044,"The ROOT PostScript and PDF backends use the original PostScript-defined 13 font styles which form 4 type families:. [Courier](https://en.wikipedia.org/wiki/Courier_(typeface)) (Regular, Oblique, Bold, Bold Oblique). [Helvetica](https://en.wikipedia.org/wiki/Helvetica) (Regular, Oblique, Bold, Bold Oblique). [Times](https://en.wikipedia.org/wiki/Times_Roman) (Roman, Italic, Bold, Bold Italic). [Symbol](https://en.wikipedia.org/wiki/Symbol_(typeface)). See the ""Core Font Set"" section in [this document](https://en.wikipedia.org/wiki/PostScript_fonts). These fonts are always available and do not need to be loaded in the PS or PDF file which allows to keep the files' sizes small **which is very important regarding the huge number of such files generated in HEP**. . So Helvetica is there. There are no license issues for PS and PDF. Unlike the `otf` and `ttf` files used for screen rendering. That's the reason why FreeSans was chosen because it is very similar to Helvetica (on my Mac I could not see the difference). We can replace the current FreeSan family by ""Tex Gyre Heros"" but that will be on screen only and will not affect the PDF and PS output. Therefore is it really worth it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14064
https://github.com/root-project/root/issues/14064:311,performance,Time,Times,311,"The ROOT PostScript and PDF backends use the original PostScript-defined 13 font styles which form 4 type families:. [Courier](https://en.wikipedia.org/wiki/Courier_(typeface)) (Regular, Oblique, Bold, Bold Oblique). [Helvetica](https://en.wikipedia.org/wiki/Helvetica) (Regular, Oblique, Bold, Bold Oblique). [Times](https://en.wikipedia.org/wiki/Times_Roman) (Roman, Italic, Bold, Bold Italic). [Symbol](https://en.wikipedia.org/wiki/Symbol_(typeface)). See the ""Core Font Set"" section in [this document](https://en.wikipedia.org/wiki/PostScript_fonts). These fonts are always available and do not need to be loaded in the PS or PDF file which allows to keep the files' sizes small **which is very important regarding the huge number of such files generated in HEP**. . So Helvetica is there. There are no license issues for PS and PDF. Unlike the `otf` and `ttf` files used for screen rendering. That's the reason why FreeSans was chosen because it is very similar to Helvetica (on my Mac I could not see the difference). We can replace the current FreeSan family by ""Tex Gyre Heros"" but that will be on screen only and will not affect the PDF and PS output. Therefore is it really worth it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14064
https://github.com/root-project/root/issues/14064:611,performance,load,loaded,611,"The ROOT PostScript and PDF backends use the original PostScript-defined 13 font styles which form 4 type families:. [Courier](https://en.wikipedia.org/wiki/Courier_(typeface)) (Regular, Oblique, Bold, Bold Oblique). [Helvetica](https://en.wikipedia.org/wiki/Helvetica) (Regular, Oblique, Bold, Bold Oblique). [Times](https://en.wikipedia.org/wiki/Times_Roman) (Roman, Italic, Bold, Bold Italic). [Symbol](https://en.wikipedia.org/wiki/Symbol_(typeface)). See the ""Core Font Set"" section in [this document](https://en.wikipedia.org/wiki/PostScript_fonts). These fonts are always available and do not need to be loaded in the PS or PDF file which allows to keep the files' sizes small **which is very important regarding the huge number of such files generated in HEP**. . So Helvetica is there. There are no license issues for PS and PDF. Unlike the `otf` and `ttf` files used for screen rendering. That's the reason why FreeSans was chosen because it is very similar to Helvetica (on my Mac I could not see the difference). We can replace the current FreeSan family by ""Tex Gyre Heros"" but that will be on screen only and will not affect the PDF and PS output. Therefore is it really worth it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14064
https://github.com/root-project/root/issues/14064:579,reliability,availab,available,579,"The ROOT PostScript and PDF backends use the original PostScript-defined 13 font styles which form 4 type families:. [Courier](https://en.wikipedia.org/wiki/Courier_(typeface)) (Regular, Oblique, Bold, Bold Oblique). [Helvetica](https://en.wikipedia.org/wiki/Helvetica) (Regular, Oblique, Bold, Bold Oblique). [Times](https://en.wikipedia.org/wiki/Times_Roman) (Roman, Italic, Bold, Bold Italic). [Symbol](https://en.wikipedia.org/wiki/Symbol_(typeface)). See the ""Core Font Set"" section in [this document](https://en.wikipedia.org/wiki/PostScript_fonts). These fonts are always available and do not need to be loaded in the PS or PDF file which allows to keep the files' sizes small **which is very important regarding the huge number of such files generated in HEP**. . So Helvetica is there. There are no license issues for PS and PDF. Unlike the `otf` and `ttf` files used for screen rendering. That's the reason why FreeSans was chosen because it is very similar to Helvetica (on my Mac I could not see the difference). We can replace the current FreeSan family by ""Tex Gyre Heros"" but that will be on screen only and will not affect the PDF and PS output. Therefore is it really worth it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14064
https://github.com/root-project/root/issues/14064:579,safety,avail,available,579,"The ROOT PostScript and PDF backends use the original PostScript-defined 13 font styles which form 4 type families:. [Courier](https://en.wikipedia.org/wiki/Courier_(typeface)) (Regular, Oblique, Bold, Bold Oblique). [Helvetica](https://en.wikipedia.org/wiki/Helvetica) (Regular, Oblique, Bold, Bold Oblique). [Times](https://en.wikipedia.org/wiki/Times_Roman) (Roman, Italic, Bold, Bold Italic). [Symbol](https://en.wikipedia.org/wiki/Symbol_(typeface)). See the ""Core Font Set"" section in [this document](https://en.wikipedia.org/wiki/PostScript_fonts). These fonts are always available and do not need to be loaded in the PS or PDF file which allows to keep the files' sizes small **which is very important regarding the huge number of such files generated in HEP**. . So Helvetica is there. There are no license issues for PS and PDF. Unlike the `otf` and `ttf` files used for screen rendering. That's the reason why FreeSans was chosen because it is very similar to Helvetica (on my Mac I could not see the difference). We can replace the current FreeSan family by ""Tex Gyre Heros"" but that will be on screen only and will not affect the PDF and PS output. Therefore is it really worth it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14064
https://github.com/root-project/root/issues/14064:579,security,availab,available,579,"The ROOT PostScript and PDF backends use the original PostScript-defined 13 font styles which form 4 type families:. [Courier](https://en.wikipedia.org/wiki/Courier_(typeface)) (Regular, Oblique, Bold, Bold Oblique). [Helvetica](https://en.wikipedia.org/wiki/Helvetica) (Regular, Oblique, Bold, Bold Oblique). [Times](https://en.wikipedia.org/wiki/Times_Roman) (Roman, Italic, Bold, Bold Italic). [Symbol](https://en.wikipedia.org/wiki/Symbol_(typeface)). See the ""Core Font Set"" section in [this document](https://en.wikipedia.org/wiki/PostScript_fonts). These fonts are always available and do not need to be loaded in the PS or PDF file which allows to keep the files' sizes small **which is very important regarding the huge number of such files generated in HEP**. . So Helvetica is there. There are no license issues for PS and PDF. Unlike the `otf` and `ttf` files used for screen rendering. That's the reason why FreeSans was chosen because it is very similar to Helvetica (on my Mac I could not see the difference). We can replace the current FreeSan family by ""Tex Gyre Heros"" but that will be on screen only and will not affect the PDF and PS output. Therefore is it really worth it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14064
https://github.com/root-project/root/issues/14064:497,usability,document,document,497,"The ROOT PostScript and PDF backends use the original PostScript-defined 13 font styles which form 4 type families:. [Courier](https://en.wikipedia.org/wiki/Courier_(typeface)) (Regular, Oblique, Bold, Bold Oblique). [Helvetica](https://en.wikipedia.org/wiki/Helvetica) (Regular, Oblique, Bold, Bold Oblique). [Times](https://en.wikipedia.org/wiki/Times_Roman) (Roman, Italic, Bold, Bold Italic). [Symbol](https://en.wikipedia.org/wiki/Symbol_(typeface)). See the ""Core Font Set"" section in [this document](https://en.wikipedia.org/wiki/PostScript_fonts). These fonts are always available and do not need to be loaded in the PS or PDF file which allows to keep the files' sizes small **which is very important regarding the huge number of such files generated in HEP**. . So Helvetica is there. There are no license issues for PS and PDF. Unlike the `otf` and `ttf` files used for screen rendering. That's the reason why FreeSans was chosen because it is very similar to Helvetica (on my Mac I could not see the difference). We can replace the current FreeSan family by ""Tex Gyre Heros"" but that will be on screen only and will not affect the PDF and PS output. Therefore is it really worth it?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14064
https://github.com/root-project/root/issues/14065:171,energy efficiency,load,loading,171,"That's not trivial because ROOT has several independant graphics backends: Screen, binaries images, PDF, and Postscript all having their own way of dealing with fonts. So loading a new `otf` file will change the font on the screen but will not affect the PDF output. That's why this functionality is almost impossible to implement in the standard ROOT graphics. The best way, I guess, will be to use the new Web Graphics currently developed by @linev. This graphics backend has only one entry point: the web browser. If one generates a pdf file using this technique it will be an exact copy of the graphics displayed on the screen ie the same fonts will be used as the pdf generation will be handled by the web browser itself: Safari, Chrome, Firefox etc ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14065
https://github.com/root-project/root/issues/14065:421,energy efficiency,current,currently,421,"That's not trivial because ROOT has several independant graphics backends: Screen, binaries images, PDF, and Postscript all having their own way of dealing with fonts. So loading a new `otf` file will change the font on the screen but will not affect the PDF output. That's why this functionality is almost impossible to implement in the standard ROOT graphics. The best way, I guess, will be to use the new Web Graphics currently developed by @linev. This graphics backend has only one entry point: the web browser. If one generates a pdf file using this technique it will be an exact copy of the graphics displayed on the screen ie the same fonts will be used as the pdf generation will be handled by the web browser itself: Safari, Chrome, Firefox etc ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14065
https://github.com/root-project/root/issues/14065:338,interoperability,standard,standard,338,"That's not trivial because ROOT has several independant graphics backends: Screen, binaries images, PDF, and Postscript all having their own way of dealing with fonts. So loading a new `otf` file will change the font on the screen but will not affect the PDF output. That's why this functionality is almost impossible to implement in the standard ROOT graphics. The best way, I guess, will be to use the new Web Graphics currently developed by @linev. This graphics backend has only one entry point: the web browser. If one generates a pdf file using this technique it will be an exact copy of the graphics displayed on the screen ie the same fonts will be used as the pdf generation will be handled by the web browser itself: Safari, Chrome, Firefox etc ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14065
https://github.com/root-project/root/issues/14065:171,performance,load,loading,171,"That's not trivial because ROOT has several independant graphics backends: Screen, binaries images, PDF, and Postscript all having their own way of dealing with fonts. So loading a new `otf` file will change the font on the screen but will not affect the PDF output. That's why this functionality is almost impossible to implement in the standard ROOT graphics. The best way, I guess, will be to use the new Web Graphics currently developed by @linev. This graphics backend has only one entry point: the web browser. If one generates a pdf file using this technique it will be an exact copy of the graphics displayed on the screen ie the same fonts will be used as the pdf generation will be handled by the web browser itself: Safari, Chrome, Firefox etc ...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14065
https://github.com/root-project/root/issues/14065:23,usability,support,support,23,I right now working on support of custom fonts in web-based canvas. I see good chance to implement it soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14065
https://github.com/root-project/root/issues/14065:34,usability,custom,custom,34,I right now working on support of custom fonts in web-based canvas. I see good chance to implement it soon.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14065
https://github.com/root-project/root/pull/14067:32,security,modif,modifying,32,"Thanks Danilo! Now that you are modifying this file, maybe could you also address the two first points of this issue wrt the doxygen documentation? https://github.com/root-project/root/issues/10395 Thks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14067
https://github.com/root-project/root/pull/14067:133,usability,document,documentation,133,"Thanks Danilo! Now that you are modifying this file, maybe could you also address the two first points of this issue wrt the doxygen documentation? https://github.com/root-project/root/issues/10395 Thks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14067
https://github.com/root-project/root/pull/14067:88,safety,test,tests,88,"Hi @ferdymercury , thanks for the reminder - it's a good proposal. I propose to let the tests run and add one additional commit when some additional refinement is needed!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14067
https://github.com/root-project/root/pull/14067:88,testability,test,tests,88,"Hi @ferdymercury , thanks for the reminder - it's a good proposal. I propose to let the tests run and add one additional commit when some additional refinement is needed!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14067
https://github.com/root-project/root/pull/14067:71,security,hash,hash,71,"Can this new mode be the default? And we add option h for the old, non hash approach?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14067
https://github.com/root-project/root/issues/14068:0,availability,Ping,Pinging,0,"Pinging @amadio in case this is specific to the early packaging of 6.30.00 on Gentoo (but I believe it is not, without looking to deeply, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:32,interoperability,specif,specific,32,"Pinging @amadio in case this is specific to the early packaging of 6.30.00 on Gentoo (but I believe it is not, without looking to deeply, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:54,modifiability,pac,packaging,54,"Pinging @amadio in case this is specific to the early packaging of 6.30.00 on Gentoo (but I believe it is not, without looking to deeply, though).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:15,interoperability,specif,specific,15,"Nothing Gentoo-specific as far as I can tell (the ebuilds are exactly the same). I think this has been changed on the ROOT side recently, but that's just my guess from reading stuff in Mattermost.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:417,availability,sla,slash,417,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:908,availability,sla,slash,908,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:278,deployability,releas,release,278,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:367,deployability,log,logo,367,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:1015,deployability,modul,modules,1015,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:517,energy efficiency,core,core,517,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:715,interoperability,compatib,compatible,715,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:885,modifiability,variab,variable,885,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:1015,modifiability,modul,modules,1015,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:417,reliability,sla,slash,417,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:908,reliability,sla,slash,908,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:367,safety,log,logo,367,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:1015,safety,modul,modules,1015,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:253,security,expos,exposed,253,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:367,security,log,logo,367,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:367,testability,log,logo,367,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:248,usability,user,user-exposed,248,"@amadio Thanks! I have delved a bit into the recent changes, and I think it's this one:. https://github.com/root-project/root/commit/f45f2c283752de0a3a2fdc278b00d1653e116833. `ROOT_VERSION` appears to use the double-dot notiation, while most other user-exposed places (web page release announcements, banner etc.) use the other notiation. . For example, the banner / logo uses `ROOT_RELEASE`, which still has the dot-slash notation:. https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/core/base/src/TROOT.cxx#L699C23-L699C35. So probably, the main question is: Which notation is correct / should be used, and in case it's the double-dot notation, should `root-config` stay backwards-compatible? . In case the actual change linked above was not intended, but was just about dropping the `sed` (which is a good thing to do! :+1: ), maybe defining a CMake variable using the dot-slash notation in https://github.com/root-project/root/blob/18b789c7ca051f09d84471fc948b410b61670f6e/cmake/modules/SetROOTVersion.cmake. and using it in `root-config` would be best.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:39,deployability,modul,module,39,"For the record, here is the equivalent module I wrote for XRootD. https://github.com/xrootd/xrootd/blob/master/cmake/XRootDVersion.cmake",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:39,modifiability,modul,module,39,"For the record, here is the equivalent module I wrote for XRootD. https://github.com/xrootd/xrootd/blob/master/cmake/XRootDVersion.cmake",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:39,safety,modul,module,39,"For the record, here is the equivalent module I wrote for XRootD. https://github.com/xrootd/xrootd/blob/master/cmake/XRootDVersion.cmake",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:17,availability,down,downstream,17,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:757,availability,Error,Error,757,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:896,availability,error,error,896,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:70,deployability,fail,fails,70,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:93,deployability,version,version,93,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:227,deployability,modul,modules,227,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:728,deployability,version,version,728,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:772,deployability,modul,modules,772,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:961,deployability,Stack,Stack,961,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:1112,deployability,version,version,1112,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:47,integrability,event,event,47,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:93,integrability,version,version,93,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:728,integrability,version,version,728,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:1112,integrability,version,version,1112,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:93,modifiability,version,version,93,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:227,modifiability,modul,modules,227,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:728,modifiability,version,version,728,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:772,modifiability,modul,modules,772,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:1112,modifiability,version,version,1112,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:757,performance,Error,Error,757,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:896,performance,error,error,896,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:70,reliability,fail,fails,70,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:227,safety,modul,modules,227,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:757,safety,Error,Error,757,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:772,safety,modul,modules,772,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:896,safety,error,error,896,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:110,security,hardcod,hardcoded,110,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:28,usability,tool,tools,28,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:757,usability,Error,Error,757,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:896,usability,error,error,896,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:1073,usability,tool,tools,1073,"This breaks some downstream tools, e.g. the MC event generator sartre fails to parse the new version due to a hardcoded assumption in their bundled [FindROOT.cmake](https://phab.hepforge.org/source/sartresvn/browse/trunk/cmake/modules/FindROOT.cmake$70):. ```. 51 COMPILER = GNU. 52 -- GSL using gsl-config /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly/bin/gsl-config. 53 -- Using GSL from /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/gsl-2.7.1-r7c4v3f2nofy2brvoswxabdvracnocly. 54 -- Looking for Root... 55 -- Looking for Root... - found /opt/software/linux-ubuntu23.10-skylake/gcc-13.2.0/root-6.30.00-blmbnjbpk53omyunsd6mzd464sffkqc3/bin/root. 56 -- Looking for Root... - version 6.30.00. >> 57 CMake Error at cmake/modules/FindROOT.cmake:80 (MATH):. 58 MATH cannot parse the expression: ""6.30.00*10000 + 6.30.00*100 + 6.30.00"":. 59 syntax error, unexpected exp_NUMBER, expecting end of file (5). 60 Call Stack (most recent call first):. 61 src/CMakeLists.txt:57 (find_package). ```. I wouldn't be surprised if other tools have implicitly assumed that the version number separators were going to be stable.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:30,deployability,version,versioning,30,We'd like to move to semantic versioning - really the main missing part is replacing that `/` by `.`. Would it be acceptable to follow this change for v6.30 and up?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:30,integrability,version,versioning,30,We'd like to move to semantic versioning - really the main missing part is replacing that `/` by `.`. Would it be acceptable to follow this change for v6.30 and up?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:21,interoperability,semant,semantic,21,We'd like to move to semantic versioning - really the main missing part is replacing that `/` by `.`. Would it be acceptable to follow this change for v6.30 and up?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:30,modifiability,version,versioning,30,We'd like to move to semantic versioning - really the main missing part is replacing that `/` by `.`. Would it be acceptable to follow this change for v6.30 and up?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:403,availability,down,downstream,403,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:555,deployability,log,logo,555,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:594,deployability,instal,install,594,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:753,deployability,releas,release,753,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:852,deployability,manag,management,852,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:239,energy efficiency,core,core,239,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:852,energy efficiency,manag,management,852,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:844,modifiability,pac,package,844,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:852,reliability,management tool,management tooling,852,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:555,safety,log,logo,555,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:852,safety,manag,management,852,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:555,security,log,logo,555,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:555,testability,log,logo,555,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:414,usability,tool,tools,414,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:863,usability,tool,tooling,863,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:947,usability,tool,tools,947,"> Would it be acceptable to follow this change for v6.30 and up? From my point of view, that's perfectly fine (and I'm welcoming this change!) — in the long run, that will also get rid of things like:. https://github.com/Homebrew/homebrew-core/blob/45a7698ed083556248e6c813436719f507f80a5e/Formula/r/root.rb#L13. and likely many other such constructions :wink:. . Of course, it will need changes in the downstream tools which already showed up here (and likely more), and ideally, the change would be carried through all places in ROOT (i.e. the banner / logo, the website at https://root.cern/install/all_releases/ etc.), but that will probably take some iterations to catch everyting. . To increase visibility, I guess a warning / announcement in the release notes would be sufficient — `root-config` and the website (which is parsed by some package management tooling, as shown above) are the changes which are most likely to cause breakage in tools which are not prepared for the change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:187,availability,failur,failures,187,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:187,deployability,fail,failures,187,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:221,deployability,version,version,221,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:263,deployability,version,versioning,263,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:310,deployability,version,version,310,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:421,deployability,patch,patch,421,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:427,deployability,releas,releases,427,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:221,integrability,version,version,221,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:263,integrability,version,versioning,263,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:310,integrability,version,version,310,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:468,integrability,interfac,interface,468,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:254,interoperability,semant,semantic,254,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:296,interoperability,format,format,296,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:468,interoperability,interfac,interface,468,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:128,modifiability,pac,package,128,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:221,modifiability,version,version,221,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:263,modifiability,version,versioning,263,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:310,modifiability,version,version,310,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:468,modifiability,interfac,interface,468,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:187,performance,failur,failures,187,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:187,reliability,fail,failures,187,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:421,safety,patch,patch,421,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:374,security,control,control,374,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:421,security,patch,patch,421,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:374,testability,control,control,374,"Speaking with my Gentoo hat here, but for a distro, I think there's mostly no problem (I didn't have to make any changes to the package for ROOT). However, other software will likely see failures if they try to parse the version for whatever reason. But semantic versioning is much more than the format of the version number itself, so I'm wondering if ROOT will now really control which kinds of changes will make it to patch releases such that they don't change any interface in a way that code compiled for ROOT 6.30.00 still works without recompilation with 6.30.XX.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:435,availability,consist,consistently,435,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:157,deployability,version,versioning,157,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:327,deployability,version,version,327,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:360,deployability,observ,observed,360,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:452,deployability,version,version,452,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:503,deployability,Patch,Patch,503,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:157,integrability,version,versioning,157,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:327,integrability,version,version,327,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:452,integrability,version,version,452,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:148,interoperability,semant,semantic,148,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:157,modifiability,version,versioning,157,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:327,modifiability,version,version,327,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:452,modifiability,version,version,452,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:61,performance,time,time,61,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:336,reliability,doe,does,336,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:503,safety,Patch,Patch,503,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:503,security,Patch,Patch,503,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:360,testability,observ,observed,360,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:10,usability,resum,resuming,10,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:410,usability,close,closed,410,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:435,usability,consist,consistently,435,"Sorry for resuming the discussion only now. I think it's big time to improve along the lines highlighted by @amadio and @olifre . I also think that semantic versioning is the most appropriate convention. However, ROOT still exhibits inconsistencies: the banner uses the ""/"", `TROOT::GetVersion()` as well, while `root-config --version` does not (as previously observed). . Can we agree that this item could be closed once ROOT reports consistently its version with the same convention, i.e. Major.Minor.Patch?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:122,availability,consist,consistent,122,"Sure, I fully agree, both that this is the way to go and that it would be best to close this issue once all locations are consistent :+1: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:82,usability,close,close,82,"Sure, I fully agree, both that this is the way to go and that it would be best to close this issue once all locations are consistent :+1: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/issues/14068:122,usability,consist,consistent,122,"Sure, I fully agree, both that this is the way to go and that it would be best to close this issue once all locations are consistent :+1: .",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14068
https://github.com/root-project/root/pull/14071:391,availability,state,states,391,"At some point we want people to migrate to the new iterators, becuase as Stephan showed in the past, they are also faster. As far as feedback goes, there is quite a long time to receive it. Now, we have about 1 year until the release of ROOT 6.32 where pro users will see the warnings in `master`, and then another year the warning would be in the released ROOT 6.32. The warning explicitly states that the legacy iterators will be removed in 6.34. So if this deprecation is really a problem, people will complain and we can ""un-deprecate"" if needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14071
https://github.com/root-project/root/pull/14071:226,deployability,releas,release,226,"At some point we want people to migrate to the new iterators, becuase as Stephan showed in the past, they are also faster. As far as feedback goes, there is quite a long time to receive it. Now, we have about 1 year until the release of ROOT 6.32 where pro users will see the warnings in `master`, and then another year the warning would be in the released ROOT 6.32. The warning explicitly states that the legacy iterators will be removed in 6.34. So if this deprecation is really a problem, people will complain and we can ""un-deprecate"" if needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14071
https://github.com/root-project/root/pull/14071:348,deployability,releas,released,348,"At some point we want people to migrate to the new iterators, becuase as Stephan showed in the past, they are also faster. As far as feedback goes, there is quite a long time to receive it. Now, we have about 1 year until the release of ROOT 6.32 where pro users will see the warnings in `master`, and then another year the warning would be in the released ROOT 6.32. The warning explicitly states that the legacy iterators will be removed in 6.34. So if this deprecation is really a problem, people will complain and we can ""un-deprecate"" if needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14071
https://github.com/root-project/root/pull/14071:391,integrability,state,states,391,"At some point we want people to migrate to the new iterators, becuase as Stephan showed in the past, they are also faster. As far as feedback goes, there is quite a long time to receive it. Now, we have about 1 year until the release of ROOT 6.32 where pro users will see the warnings in `master`, and then another year the warning would be in the released ROOT 6.32. The warning explicitly states that the legacy iterators will be removed in 6.34. So if this deprecation is really a problem, people will complain and we can ""un-deprecate"" if needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14071
https://github.com/root-project/root/pull/14071:170,performance,time,time,170,"At some point we want people to migrate to the new iterators, becuase as Stephan showed in the past, they are also faster. As far as feedback goes, there is quite a long time to receive it. Now, we have about 1 year until the release of ROOT 6.32 where pro users will see the warnings in `master`, and then another year the warning would be in the released ROOT 6.32. The warning explicitly states that the legacy iterators will be removed in 6.34. So if this deprecation is really a problem, people will complain and we can ""un-deprecate"" if needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14071
https://github.com/root-project/root/pull/14071:505,safety,compl,complain,505,"At some point we want people to migrate to the new iterators, becuase as Stephan showed in the past, they are also faster. As far as feedback goes, there is quite a long time to receive it. Now, we have about 1 year until the release of ROOT 6.32 where pro users will see the warnings in `master`, and then another year the warning would be in the released ROOT 6.32. The warning explicitly states that the legacy iterators will be removed in 6.34. So if this deprecation is really a problem, people will complain and we can ""un-deprecate"" if needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14071
https://github.com/root-project/root/pull/14071:505,security,compl,complain,505,"At some point we want people to migrate to the new iterators, becuase as Stephan showed in the past, they are also faster. As far as feedback goes, there is quite a long time to receive it. Now, we have about 1 year until the release of ROOT 6.32 where pro users will see the warnings in `master`, and then another year the warning would be in the released ROOT 6.32. The warning explicitly states that the legacy iterators will be removed in 6.34. So if this deprecation is really a problem, people will complain and we can ""un-deprecate"" if needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14071
https://github.com/root-project/root/pull/14071:133,usability,feedback,feedback,133,"At some point we want people to migrate to the new iterators, becuase as Stephan showed in the past, they are also faster. As far as feedback goes, there is quite a long time to receive it. Now, we have about 1 year until the release of ROOT 6.32 where pro users will see the warnings in `master`, and then another year the warning would be in the released ROOT 6.32. The warning explicitly states that the legacy iterators will be removed in 6.34. So if this deprecation is really a problem, people will complain and we can ""un-deprecate"" if needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14071
https://github.com/root-project/root/pull/14071:257,usability,user,users,257,"At some point we want people to migrate to the new iterators, becuase as Stephan showed in the past, they are also faster. As far as feedback goes, there is quite a long time to receive it. Now, we have about 1 year until the release of ROOT 6.32 where pro users will see the warnings in `master`, and then another year the warning would be in the released ROOT 6.32. The warning explicitly states that the legacy iterators will be removed in 6.34. So if this deprecation is really a problem, people will complain and we can ""un-deprecate"" if needed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14071
https://github.com/root-project/root/issues/14102:6,deployability,version,version,6,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:71,deployability,version,version,71,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:137,deployability,build,build,137,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:179,deployability,instal,install,179,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:202,deployability,instal,install,202,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:234,deployability,instal,install,234,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:277,deployability,releas,releases,277,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:305,deployability,releas,releases,305,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:314,deployability,releas,release-,314,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:6,integrability,version,version,6,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:71,integrability,version,version,71,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:93,integrability,configur,configure,93,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:29,interoperability,platform,platform,29,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:51,interoperability,distribut,distribution,51,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:6,modifiability,version,version,6,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:71,modifiability,version,version,71,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:93,modifiability,configur,configure,93,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:93,security,configur,configure,93,"Which version of ROOT, which platform (which Linux distribution, which version), how did you configure, what's your compiler? Why do you build from source rather than just `conda install root` or `snap install root-framework` or `dnf install root` or taking one of the [binary releases](https://root.cern/releases/release-63000/)?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:144,availability,down,downloaded,144,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:121,deployability,Releas,Release,121,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:248,deployability,instal,install,248,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:265,deployability,build,build,265,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:356,deployability,version,version,356,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:424,deployability,version,version,424,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:492,deployability,build,build,492,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:533,deployability,instal,install,533,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:557,deployability,instal,install,557,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:587,deployability,instal,install,587,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:631,deployability,releas,releases,631,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:659,deployability,releas,releases,659,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:668,deployability,releas,release-,668,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:356,integrability,version,version,356,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:424,integrability,version,version,424,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:446,integrability,configur,configure,446,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:1065,integrability,Messag,Message,1065,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:70,interoperability,Distribut,Distributor,70,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:379,interoperability,platform,platform,379,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:401,interoperability,distribut,distribution,401,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:1065,interoperability,Messag,Message,1065,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:356,modifiability,version,version,356,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:424,modifiability,version,version,424,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:446,modifiability,configur,configure,446,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:446,security,configur,configure,446,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:890,security,auth,auth,890,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:1045,security,auth,authored,1045,"Hi Sir ! Thank you so much for your reply. My Details are as follows. Distributor ID: Ubuntu. Description: Ubuntu 23.04. Release: 23.04. i have downloaded the root file. root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4(2).tar.gz and now i am trying. to install by Cmake build . process. On Fri, 24 Nov 2023, 12:49 pm Axel Naumann, ***@***.***>. wrote:. > Which version of ROOT, which platform (which Linux distribution, which. > version), how did you configure, what's your compiler? > Why do you build from source rather than just conda install root or snap. > install root-framework or dnf install root or taking one of the binary. > releases <https://root.cern/releases/release-63000/>? >. > —. > Reply to this email directly, view it on GitHub. > <https://github.com/root-project/root/issues/14102#issuecomment-1825267807>,. > or unsubscribe. > <https://github.com/notifications/unsubscribe-auth/APQNGFXRMQ4DAD5FWHKDUCDYGBGPPAVCNFSM6AAAAAA7YXHLH2VHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMYTQMRVGI3DOOBQG4>. > . > You are receiving this because you authored the thread.Message ID:. > ***@***.***>. >.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:109,deployability,build,build,109,"`root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4.tar.gz` is a binary - you decompress it and it will have a ROOT build within, no need to also run `make`! Please discuss at https://root-forum.cern.ch if you need further help, this doesn't seem to be a bug,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:71,modifiability,deco,decompress,71,"`root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4.tar.gz` is a binary - you decompress it and it will have a ROOT build within, no need to also run `make`! Please discuss at https://root-forum.cern.ch if you need further help, this doesn't seem to be a bug,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:227,reliability,doe,doesn,227,"`root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4.tar.gz` is a binary - you decompress it and it will have a ROOT build within, no need to also run `make`! Please discuss at https://root-forum.cern.ch if you need further help, this doesn't seem to be a bug,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/issues/14102:216,usability,help,help,216,"`root_v6.28.06.Linux-ubuntu22-x86_64-gcc11.4.tar.gz` is a binary - you decompress it and it will have a ROOT build within, no need to also run `make`! Please discuss at https://root-forum.cern.ch if you need further help, this doesn't seem to be a bug,",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14102
https://github.com/root-project/root/pull/14074:585,availability,slo,slow,585,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:709,availability,slo,slowdown,709,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:52,deployability,depend,dependent,52,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:464,deployability,configurat,configuration,464,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:671,energy efficiency,measur,measured,671,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:52,integrability,depend,dependent,52,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:464,integrability,configur,configuration,464,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:65,interoperability,XML,XML,65,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:169,interoperability,XML,XML,169,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:232,interoperability,XML,XML,232,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:320,interoperability,XML,XML,320,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:483,interoperability,xml,xml,483,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:52,modifiability,depend,dependent,52,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:464,modifiability,configur,configuration,464,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:585,reliability,slo,slow,585,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:709,reliability,slo,slowdown,709,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:15,safety,review,review,15,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:52,safety,depend,dependent,52,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:133,safety,input,input,133,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:408,safety,test,test,408,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:459,safety,test,test,459,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:464,security,configur,configuration,464,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:15,testability,review,review,15,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:52,testability,depend,dependent,52,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:185,testability,simpl,simplicity,185,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:408,testability,test,test,408,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:413,testability,coverag,coverage,413,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:459,testability,test,test,459,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:513,testability,simpl,simplifying,513,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:133,usability,input,input,133,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:185,usability,simpl,simplicity,185,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/pull/14074:513,usability,simpl,simplifying,513,"Thanks for the review! > Are all RooStats tutorials dependent on XML ? I think some of them, not using the HIstFactory to create the input workspace, could work without XML. Anyway for simplicity is probably better excluding all if XML is not present. No, not all of them. In the past, I think Windows was built without XML, so it was more important to be pedantic with the vetos there to have at least some test coverage of RooStats on Windows. Nowadays, no test configuration has `xml=OFF` anyway. > Thanks for simplifying the rs401d to use the RooGenericPdf. In the past it was too slow to use with CINT the generic PDF, now with Cling should not be a problem. Yes, I measured the timing, and there was no slowdown from using `RooGenericPdf` in this particular case!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14074
https://github.com/root-project/root/issues/14075:165,safety,compl,complaining,165,"@mkrzewic can you get some more information what is crashing? It looks like `libcxxrt.so` or `libc++.so` are calling `abort`, it would be good to know what they are complaining about...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:165,security,compl,complaining,165,"@mkrzewic can you get some more information what is crashing? It looks like `libcxxrt.so` or `libc++.so` are calling `abort`, it would be good to know what they are complaining about...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:246,availability,error,error,246,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:745,availability,down,down,745,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:28,deployability,build,build,28,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:68,deployability,build,build,68,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:135,deployability,build,building,135,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:310,deployability,resourc,resources,310,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:366,deployability,modul,modules,366,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:441,deployability,patch,patches,441,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:110,energy efficiency,optim,optimized,110,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:310,energy efficiency,resourc,resources,310,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:424,integrability,batch,batch,424,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:366,modifiability,modul,modules,366,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:110,performance,optimiz,optimized,110,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:246,performance,error,error,246,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:276,performance,time,time,276,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:310,performance,resourc,resources,310,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:424,performance,batch,batch,424,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:538,performance,parallel,parallel,538,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:59,reliability,doe,does,59,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:246,safety,error,error,246,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:310,safety,resourc,resources,310,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:346,safety,reme,remember,346,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:366,safety,modul,modules,366,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:441,safety,patch,patches,441,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:441,security,patch,patches,441,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:310,testability,resourc,resources,310,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:228,usability,stop,stopped,228,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:246,usability,error,error,246,"@hahnjo the problem is this build (default RelWithDebInfo) does not build cling with debug info and it is all optimized out. I did try building the interpreter in debug mode, but on my small machine it took about a full day and stopped with some error (was already quite some time ago). Not sure If I have the resources right now to try again. I remember I had this modules.idx problem early on when I worked on the ""first"" batch of freebsd patches - it went away after some doing, not sure why, I was fixing some other issues as well in parallel and at some point it just started working. I did not investigate what exactly made it work. Apparently I should have :D. I suspect then it was some uninitialized string, that was what I was hunting down at the moment I think.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:36,deployability,build,build,36,"@hahnjo so the problem was the llvm build configuration - the TargetMachine for x86 was not built/linked in which in turn caused some stuff to be uninitialized. I had `-DDLVM_TARGETS_TO_BUILD=""NVPTX""` (since ""NVPTX;host"" does not work as discussed in #13865 I followed the observation of @eamjensen and removed ""host"" to make it configure. The arch needs to be specified explicitly as (in my case) ""X86"": . `-DDLVM_TARGETS_TO_BUILD=""X86;NVPTX""` seems to do the trick.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:42,deployability,configurat,configuration,42,"@hahnjo so the problem was the llvm build configuration - the TargetMachine for x86 was not built/linked in which in turn caused some stuff to be uninitialized. I had `-DDLVM_TARGETS_TO_BUILD=""NVPTX""` (since ""NVPTX;host"" does not work as discussed in #13865 I followed the observation of @eamjensen and removed ""host"" to make it configure. The arch needs to be specified explicitly as (in my case) ""X86"": . `-DDLVM_TARGETS_TO_BUILD=""X86;NVPTX""` seems to do the trick.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:273,deployability,observ,observation,273,"@hahnjo so the problem was the llvm build configuration - the TargetMachine for x86 was not built/linked in which in turn caused some stuff to be uninitialized. I had `-DDLVM_TARGETS_TO_BUILD=""NVPTX""` (since ""NVPTX;host"" does not work as discussed in #13865 I followed the observation of @eamjensen and removed ""host"" to make it configure. The arch needs to be specified explicitly as (in my case) ""X86"": . `-DDLVM_TARGETS_TO_BUILD=""X86;NVPTX""` seems to do the trick.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:42,integrability,configur,configuration,42,"@hahnjo so the problem was the llvm build configuration - the TargetMachine for x86 was not built/linked in which in turn caused some stuff to be uninitialized. I had `-DDLVM_TARGETS_TO_BUILD=""NVPTX""` (since ""NVPTX;host"" does not work as discussed in #13865 I followed the observation of @eamjensen and removed ""host"" to make it configure. The arch needs to be specified explicitly as (in my case) ""X86"": . `-DDLVM_TARGETS_TO_BUILD=""X86;NVPTX""` seems to do the trick.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:329,integrability,configur,configure,329,"@hahnjo so the problem was the llvm build configuration - the TargetMachine for x86 was not built/linked in which in turn caused some stuff to be uninitialized. I had `-DDLVM_TARGETS_TO_BUILD=""NVPTX""` (since ""NVPTX;host"" does not work as discussed in #13865 I followed the observation of @eamjensen and removed ""host"" to make it configure. The arch needs to be specified explicitly as (in my case) ""X86"": . `-DDLVM_TARGETS_TO_BUILD=""X86;NVPTX""` seems to do the trick.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:361,interoperability,specif,specified,361,"@hahnjo so the problem was the llvm build configuration - the TargetMachine for x86 was not built/linked in which in turn caused some stuff to be uninitialized. I had `-DDLVM_TARGETS_TO_BUILD=""NVPTX""` (since ""NVPTX;host"" does not work as discussed in #13865 I followed the observation of @eamjensen and removed ""host"" to make it configure. The arch needs to be specified explicitly as (in my case) ""X86"": . `-DDLVM_TARGETS_TO_BUILD=""X86;NVPTX""` seems to do the trick.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:42,modifiability,configur,configuration,42,"@hahnjo so the problem was the llvm build configuration - the TargetMachine for x86 was not built/linked in which in turn caused some stuff to be uninitialized. I had `-DDLVM_TARGETS_TO_BUILD=""NVPTX""` (since ""NVPTX;host"" does not work as discussed in #13865 I followed the observation of @eamjensen and removed ""host"" to make it configure. The arch needs to be specified explicitly as (in my case) ""X86"": . `-DDLVM_TARGETS_TO_BUILD=""X86;NVPTX""` seems to do the trick.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:329,modifiability,configur,configure,329,"@hahnjo so the problem was the llvm build configuration - the TargetMachine for x86 was not built/linked in which in turn caused some stuff to be uninitialized. I had `-DDLVM_TARGETS_TO_BUILD=""NVPTX""` (since ""NVPTX;host"" does not work as discussed in #13865 I followed the observation of @eamjensen and removed ""host"" to make it configure. The arch needs to be specified explicitly as (in my case) ""X86"": . `-DDLVM_TARGETS_TO_BUILD=""X86;NVPTX""` seems to do the trick.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:221,reliability,doe,does,221,"@hahnjo so the problem was the llvm build configuration - the TargetMachine for x86 was not built/linked in which in turn caused some stuff to be uninitialized. I had `-DDLVM_TARGETS_TO_BUILD=""NVPTX""` (since ""NVPTX;host"" does not work as discussed in #13865 I followed the observation of @eamjensen and removed ""host"" to make it configure. The arch needs to be specified explicitly as (in my case) ""X86"": . `-DDLVM_TARGETS_TO_BUILD=""X86;NVPTX""` seems to do the trick.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:42,security,configur,configuration,42,"@hahnjo so the problem was the llvm build configuration - the TargetMachine for x86 was not built/linked in which in turn caused some stuff to be uninitialized. I had `-DDLVM_TARGETS_TO_BUILD=""NVPTX""` (since ""NVPTX;host"" does not work as discussed in #13865 I followed the observation of @eamjensen and removed ""host"" to make it configure. The arch needs to be specified explicitly as (in my case) ""X86"": . `-DDLVM_TARGETS_TO_BUILD=""X86;NVPTX""` seems to do the trick.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:329,security,configur,configure,329,"@hahnjo so the problem was the llvm build configuration - the TargetMachine for x86 was not built/linked in which in turn caused some stuff to be uninitialized. I had `-DDLVM_TARGETS_TO_BUILD=""NVPTX""` (since ""NVPTX;host"" does not work as discussed in #13865 I followed the observation of @eamjensen and removed ""host"" to make it configure. The arch needs to be specified explicitly as (in my case) ""X86"": . `-DDLVM_TARGETS_TO_BUILD=""X86;NVPTX""` seems to do the trick.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:273,testability,observ,observation,273,"@hahnjo so the problem was the llvm build configuration - the TargetMachine for x86 was not built/linked in which in turn caused some stuff to be uninitialized. I had `-DDLVM_TARGETS_TO_BUILD=""NVPTX""` (since ""NVPTX;host"" does not work as discussed in #13865 I followed the observation of @eamjensen and removed ""host"" to make it configure. The arch needs to be specified explicitly as (in my case) ""X86"": . `-DDLVM_TARGETS_TO_BUILD=""X86;NVPTX""` seems to do the trick.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:14,availability,sli,slightly,14,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:283,deployability,updat,updated,283,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:490,deployability,updat,update,490,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:500,deployability,automat,automatically,500,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:617,deployability,build,build,617,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:605,energy efficiency,reduc,reduce,605,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:514,integrability,configur,configure,514,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:514,modifiability,configur,configure,514,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:623,performance,time,time,623,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:14,reliability,sli,slightly,14,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:56,reliability,doe,doesn,56,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:183,reliability,doe,does,183,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:283,safety,updat,updated,283,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:490,safety,updat,update,490,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:283,security,updat,updated,283,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:490,security,updat,update,490,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:514,security,configur,configure,514,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14075:500,testability,automat,automatically,500,"@mkrzewic I'm slightly confused because your reproducer doesn't mention setting `LVM_TARGETS_TO_BUILD` while https://github.com/root-project/root/issues/13865#issuecomment-1779361849 does... That said, I think I see what's going on, there was an oversight where we would not get the updated `LVM_TARGETS_TO_BUILD` after `builtin_llvm` replaced special targets such as `all` and `host`/`Native` (after https://github.com/root-project/root/pull/13420). In addition there is one minor missing update to automatically configure only the LLVM targets that are needed on FreeBSD, which should also dramatically reduce your build time and binary sizes. Can you maybe give https://github.com/root-project/root/pull/14115 a try?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14075
https://github.com/root-project/root/issues/14076:119,usability,interact,interacting,119,"Hi! What happens when you do `Write()` at the end, and not before `Scan()`? Usually the write should happen only after interacting with the object, so maybe that's worth to try out. Otherwise I have no idea.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:6,testability,understand,understand,6,"Yes I understand that, but is the `Scan()` still abnormal if you don't do the `Write()` before?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:98,security,team,team,98,"Ok, then I think we can't help you without a reproducer. The only Windows user I know in the ROOT team is @bellenot, so I assigned the PR to him.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:26,usability,help,help,26,"Ok, then I think we can't help you without a reproducer. The only Windows user I know in the ROOT team is @bellenot, so I assigned the PR to him.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:74,usability,user,user,74,"Ok, then I think we can't help you without a reproducer. The only Windows user I know in the ROOT team is @bellenot, so I assigned the PR to him.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:69,integrability,sub,subsystem,69,"> On windows, when vscode is used to connect pyroot's jupyter of wsl subsystem. Can you describe exactly how you connect from VS Code to PyRoot's Jupyter in WSL?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:6,deployability,manag,managed,6,"OK, I managed to set-up an environment. Here is what I get with your example and `root_v6.30.02.Linux-ubuntu22-x86_64-gcc11.4`:. ```. Welcome to JupyROOT 6.30/02. ************************************************. * Row * i.i * a.a * b.b *. ************************************************. * 0 * 1 * 2.2 * 2.2 *. * 1 * 1 * 2.2 * 2.2 *. * 2 * 1 * 2.2 * 2.2 *. * 3 * 1 * 2.2 * 2.2 *. * 4 * 1 * 2.2 * 2.2 *. * 5 * 1 * 2.2 * 2.2 *. * 6 * 1 * 2.2 * 2.2 *. * 7 * 1 * 2.2 * 2.2 *. * 8 * 1 * 2.2 * 2.2 *. * 9 * 1 * 2.2 * 2.2 *. * 10 * 1 * 2.2 * 2.2 *. * 11 * 1 * 2.2 * 2.2 *. * 12 * 1 * 2.2 * 2.2 *. * 13 * 1 * 2.2 * 2.2 *. * 14 * 1 * 2.2 * 2.2 *. * 15 * 1 * 2.2 * 2.2 *. * 16 * 1 * 2.2 * 2.2 *. * 17 * 1 * 2.2 * 2.2 *. * 18 * 1 * 2.2 * 2.2 *. * 19 * 1 * 2.2 * 2.2 *. * 20 * 1 * 2.2 * 2.2 *. ... * 33 * 1 * 2.2 * 2.2 *. * 34 * 1 * 2.2 * 2.2 *. * 35 * 1 * 2.2 * 2.2 *. * 36 * 1 * 2.2 * 2.2 *. * 37 * 1 * 2.2 * . Output is truncated. View as a scrollable element or open in a text editor. Adjust cell output settings... Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==>. ```. And then, if I type again `ming.Scan()` in a new cell I got the same output...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:1023,deployability,continu,continue,1023,"OK, I managed to set-up an environment. Here is what I get with your example and `root_v6.30.02.Linux-ubuntu22-x86_64-gcc11.4`:. ```. Welcome to JupyROOT 6.30/02. ************************************************. * Row * i.i * a.a * b.b *. ************************************************. * 0 * 1 * 2.2 * 2.2 *. * 1 * 1 * 2.2 * 2.2 *. * 2 * 1 * 2.2 * 2.2 *. * 3 * 1 * 2.2 * 2.2 *. * 4 * 1 * 2.2 * 2.2 *. * 5 * 1 * 2.2 * 2.2 *. * 6 * 1 * 2.2 * 2.2 *. * 7 * 1 * 2.2 * 2.2 *. * 8 * 1 * 2.2 * 2.2 *. * 9 * 1 * 2.2 * 2.2 *. * 10 * 1 * 2.2 * 2.2 *. * 11 * 1 * 2.2 * 2.2 *. * 12 * 1 * 2.2 * 2.2 *. * 13 * 1 * 2.2 * 2.2 *. * 14 * 1 * 2.2 * 2.2 *. * 15 * 1 * 2.2 * 2.2 *. * 16 * 1 * 2.2 * 2.2 *. * 17 * 1 * 2.2 * 2.2 *. * 18 * 1 * 2.2 * 2.2 *. * 19 * 1 * 2.2 * 2.2 *. * 20 * 1 * 2.2 * 2.2 *. ... * 33 * 1 * 2.2 * 2.2 *. * 34 * 1 * 2.2 * 2.2 *. * 35 * 1 * 2.2 * 2.2 *. * 36 * 1 * 2.2 * 2.2 *. * 37 * 1 * 2.2 * . Output is truncated. View as a scrollable element or open in a text editor. Adjust cell output settings... Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==>. ```. And then, if I type again `ming.Scan()` in a new cell I got the same output...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:1062,deployability,continu,continue,1062,"OK, I managed to set-up an environment. Here is what I get with your example and `root_v6.30.02.Linux-ubuntu22-x86_64-gcc11.4`:. ```. Welcome to JupyROOT 6.30/02. ************************************************. * Row * i.i * a.a * b.b *. ************************************************. * 0 * 1 * 2.2 * 2.2 *. * 1 * 1 * 2.2 * 2.2 *. * 2 * 1 * 2.2 * 2.2 *. * 3 * 1 * 2.2 * 2.2 *. * 4 * 1 * 2.2 * 2.2 *. * 5 * 1 * 2.2 * 2.2 *. * 6 * 1 * 2.2 * 2.2 *. * 7 * 1 * 2.2 * 2.2 *. * 8 * 1 * 2.2 * 2.2 *. * 9 * 1 * 2.2 * 2.2 *. * 10 * 1 * 2.2 * 2.2 *. * 11 * 1 * 2.2 * 2.2 *. * 12 * 1 * 2.2 * 2.2 *. * 13 * 1 * 2.2 * 2.2 *. * 14 * 1 * 2.2 * 2.2 *. * 15 * 1 * 2.2 * 2.2 *. * 16 * 1 * 2.2 * 2.2 *. * 17 * 1 * 2.2 * 2.2 *. * 18 * 1 * 2.2 * 2.2 *. * 19 * 1 * 2.2 * 2.2 *. * 20 * 1 * 2.2 * 2.2 *. ... * 33 * 1 * 2.2 * 2.2 *. * 34 * 1 * 2.2 * 2.2 *. * 35 * 1 * 2.2 * 2.2 *. * 36 * 1 * 2.2 * 2.2 *. * 37 * 1 * 2.2 * . Output is truncated. View as a scrollable element or open in a text editor. Adjust cell output settings... Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==>. ```. And then, if I type again `ming.Scan()` in a new cell I got the same output...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:1101,deployability,continu,continue,1101,"OK, I managed to set-up an environment. Here is what I get with your example and `root_v6.30.02.Linux-ubuntu22-x86_64-gcc11.4`:. ```. Welcome to JupyROOT 6.30/02. ************************************************. * Row * i.i * a.a * b.b *. ************************************************. * 0 * 1 * 2.2 * 2.2 *. * 1 * 1 * 2.2 * 2.2 *. * 2 * 1 * 2.2 * 2.2 *. * 3 * 1 * 2.2 * 2.2 *. * 4 * 1 * 2.2 * 2.2 *. * 5 * 1 * 2.2 * 2.2 *. * 6 * 1 * 2.2 * 2.2 *. * 7 * 1 * 2.2 * 2.2 *. * 8 * 1 * 2.2 * 2.2 *. * 9 * 1 * 2.2 * 2.2 *. * 10 * 1 * 2.2 * 2.2 *. * 11 * 1 * 2.2 * 2.2 *. * 12 * 1 * 2.2 * 2.2 *. * 13 * 1 * 2.2 * 2.2 *. * 14 * 1 * 2.2 * 2.2 *. * 15 * 1 * 2.2 * 2.2 *. * 16 * 1 * 2.2 * 2.2 *. * 17 * 1 * 2.2 * 2.2 *. * 18 * 1 * 2.2 * 2.2 *. * 19 * 1 * 2.2 * 2.2 *. * 20 * 1 * 2.2 * 2.2 *. ... * 33 * 1 * 2.2 * 2.2 *. * 34 * 1 * 2.2 * 2.2 *. * 35 * 1 * 2.2 * 2.2 *. * 36 * 1 * 2.2 * 2.2 *. * 37 * 1 * 2.2 * . Output is truncated. View as a scrollable element or open in a text editor. Adjust cell output settings... Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==>. ```. And then, if I type again `ming.Scan()` in a new cell I got the same output...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:1140,deployability,continu,continue,1140,"OK, I managed to set-up an environment. Here is what I get with your example and `root_v6.30.02.Linux-ubuntu22-x86_64-gcc11.4`:. ```. Welcome to JupyROOT 6.30/02. ************************************************. * Row * i.i * a.a * b.b *. ************************************************. * 0 * 1 * 2.2 * 2.2 *. * 1 * 1 * 2.2 * 2.2 *. * 2 * 1 * 2.2 * 2.2 *. * 3 * 1 * 2.2 * 2.2 *. * 4 * 1 * 2.2 * 2.2 *. * 5 * 1 * 2.2 * 2.2 *. * 6 * 1 * 2.2 * 2.2 *. * 7 * 1 * 2.2 * 2.2 *. * 8 * 1 * 2.2 * 2.2 *. * 9 * 1 * 2.2 * 2.2 *. * 10 * 1 * 2.2 * 2.2 *. * 11 * 1 * 2.2 * 2.2 *. * 12 * 1 * 2.2 * 2.2 *. * 13 * 1 * 2.2 * 2.2 *. * 14 * 1 * 2.2 * 2.2 *. * 15 * 1 * 2.2 * 2.2 *. * 16 * 1 * 2.2 * 2.2 *. * 17 * 1 * 2.2 * 2.2 *. * 18 * 1 * 2.2 * 2.2 *. * 19 * 1 * 2.2 * 2.2 *. * 20 * 1 * 2.2 * 2.2 *. ... * 33 * 1 * 2.2 * 2.2 *. * 34 * 1 * 2.2 * 2.2 *. * 35 * 1 * 2.2 * 2.2 *. * 36 * 1 * 2.2 * 2.2 *. * 37 * 1 * 2.2 * . Output is truncated. View as a scrollable element or open in a text editor. Adjust cell output settings... Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==>. ```. And then, if I type again `ming.Scan()` in a new cell I got the same output...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:6,energy efficiency,manag,managed,6,"OK, I managed to set-up an environment. Here is what I get with your example and `root_v6.30.02.Linux-ubuntu22-x86_64-gcc11.4`:. ```. Welcome to JupyROOT 6.30/02. ************************************************. * Row * i.i * a.a * b.b *. ************************************************. * 0 * 1 * 2.2 * 2.2 *. * 1 * 1 * 2.2 * 2.2 *. * 2 * 1 * 2.2 * 2.2 *. * 3 * 1 * 2.2 * 2.2 *. * 4 * 1 * 2.2 * 2.2 *. * 5 * 1 * 2.2 * 2.2 *. * 6 * 1 * 2.2 * 2.2 *. * 7 * 1 * 2.2 * 2.2 *. * 8 * 1 * 2.2 * 2.2 *. * 9 * 1 * 2.2 * 2.2 *. * 10 * 1 * 2.2 * 2.2 *. * 11 * 1 * 2.2 * 2.2 *. * 12 * 1 * 2.2 * 2.2 *. * 13 * 1 * 2.2 * 2.2 *. * 14 * 1 * 2.2 * 2.2 *. * 15 * 1 * 2.2 * 2.2 *. * 16 * 1 * 2.2 * 2.2 *. * 17 * 1 * 2.2 * 2.2 *. * 18 * 1 * 2.2 * 2.2 *. * 19 * 1 * 2.2 * 2.2 *. * 20 * 1 * 2.2 * 2.2 *. ... * 33 * 1 * 2.2 * 2.2 *. * 34 * 1 * 2.2 * 2.2 *. * 35 * 1 * 2.2 * 2.2 *. * 36 * 1 * 2.2 * 2.2 *. * 37 * 1 * 2.2 * . Output is truncated. View as a scrollable element or open in a text editor. Adjust cell output settings... Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==>. ```. And then, if I type again `ming.Scan()` in a new cell I got the same output...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:6,safety,manag,managed,6,"OK, I managed to set-up an environment. Here is what I get with your example and `root_v6.30.02.Linux-ubuntu22-x86_64-gcc11.4`:. ```. Welcome to JupyROOT 6.30/02. ************************************************. * Row * i.i * a.a * b.b *. ************************************************. * 0 * 1 * 2.2 * 2.2 *. * 1 * 1 * 2.2 * 2.2 *. * 2 * 1 * 2.2 * 2.2 *. * 3 * 1 * 2.2 * 2.2 *. * 4 * 1 * 2.2 * 2.2 *. * 5 * 1 * 2.2 * 2.2 *. * 6 * 1 * 2.2 * 2.2 *. * 7 * 1 * 2.2 * 2.2 *. * 8 * 1 * 2.2 * 2.2 *. * 9 * 1 * 2.2 * 2.2 *. * 10 * 1 * 2.2 * 2.2 *. * 11 * 1 * 2.2 * 2.2 *. * 12 * 1 * 2.2 * 2.2 *. * 13 * 1 * 2.2 * 2.2 *. * 14 * 1 * 2.2 * 2.2 *. * 15 * 1 * 2.2 * 2.2 *. * 16 * 1 * 2.2 * 2.2 *. * 17 * 1 * 2.2 * 2.2 *. * 18 * 1 * 2.2 * 2.2 *. * 19 * 1 * 2.2 * 2.2 *. * 20 * 1 * 2.2 * 2.2 *. ... * 33 * 1 * 2.2 * 2.2 *. * 34 * 1 * 2.2 * 2.2 *. * 35 * 1 * 2.2 * 2.2 *. * 36 * 1 * 2.2 * 2.2 *. * 37 * 1 * 2.2 * . Output is truncated. View as a scrollable element or open in a text editor. Adjust cell output settings... Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==> Type <CR> to continue or q to quit ==>. ```. And then, if I type again `ming.Scan()` in a new cell I got the same output...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:281,integrability,sub,subsystem,281,"My data volume is relatively large, and the one-time output of the Scan function is limited. I guess this is the reason. This uses jupyter lab for code editing in the browser, and using the Scan function is not a problem. Mainly in vscode, I use vscode to connect to the local wsl subsystem and use vscode's jupyter editor. Will this know the reason for the jupyter in vscode itself?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:48,performance,time,time,48,"My data volume is relatively large, and the one-time output of the Scan function is limited. I guess this is the reason. This uses jupyter lab for code editing in the browser, and using the Scan function is not a problem. Mainly in vscode, I use vscode to connect to the local wsl subsystem and use vscode's jupyter editor. Will this know the reason for the jupyter in vscode itself?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:44,security,one-tim,one-time,44,"My data volume is relatively large, and the one-time output of the Scan function is limited. I guess this is the reason. This uses jupyter lab for code editing in the browser, and using the Scan function is not a problem. Mainly in vscode, I use vscode to connect to the local wsl subsystem and use vscode's jupyter editor. Will this know the reason for the jupyter in vscode itself?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:61,integrability,sub,subsystem,61,"> Mainly in vscode, I use vscode to connect to the local wsl subsystem and use vscode's jupyter editor. Same here. > Will this know the reason for the jupyter in vscode itself? What do you mean? I tried your example and it works just fine...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:15,deployability,continu,continue,15,> Type <CR> to continue or q to quit ==> . This is the potential source of the problem (i.e. `Scan` waiting for user input). To disable this feature use:. ```. tree->SetScanField(0);. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:117,safety,input,input,117,> Type <CR> to continue or q to quit ==> . This is the potential source of the problem (i.e. `Scan` waiting for user input). To disable this feature use:. ```. tree->SetScanField(0);. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:112,usability,user,user,112,> Type <CR> to continue or q to quit ==> . This is the potential source of the problem (i.e. `Scan` waiting for user input). To disable this feature use:. ```. tree->SetScanField(0);. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:117,usability,input,input,117,> Type <CR> to continue or q to quit ==> . This is the potential source of the problem (i.e. `Scan` waiting for user input). To disable this feature use:. ```. tree->SetScanField(0);. ```,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/issues/14076:11,usability,close,close,11,"OK, then I close this issue",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14076
https://github.com/root-project/root/pull/14077:16,integrability,interfac,interface,16,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. I can do that, but all the other `enum`s in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore:. ```. if(TH1::CheckConsistency(&h1, &h2)) {. h1.Add(h2);. }. ```. will not work. If that's ok, I'll change the `enum` to `enum class` and the return type of the function. _Edit_: also, all instances of code like. ```. if( inconsistency & kDifferentDimensions ). ```. will become a lot more verbose:. ```. if( inconsistency & static_cast<UInt_t>(EInconsistencyBits::kDifferentDimensions) ). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:45,integrability,pub,public,45,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. I can do that, but all the other `enum`s in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore:. ```. if(TH1::CheckConsistency(&h1, &h2)) {. h1.Add(h2);. }. ```. will not work. If that's ok, I'll change the `enum` to `enum class` and the return type of the function. _Edit_: also, all instances of code like. ```. if( inconsistency & kDifferentDimensions ). ```. will become a lot more verbose:. ```. if( inconsistency & static_cast<UInt_t>(EInconsistencyBits::kDifferentDimensions) ). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:226,integrability,interfac,interface,226,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. I can do that, but all the other `enum`s in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore:. ```. if(TH1::CheckConsistency(&h1, &h2)) {. h1.Add(h2);. }. ```. will not work. If that's ok, I'll change the `enum` to `enum class` and the return type of the function. _Edit_: also, all instances of code like. ```. if( inconsistency & kDifferentDimensions ). ```. will become a lot more verbose:. ```. if( inconsistency & static_cast<UInt_t>(EInconsistencyBits::kDifferentDimensions) ). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:16,interoperability,interfac,interface,16,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. I can do that, but all the other `enum`s in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore:. ```. if(TH1::CheckConsistency(&h1, &h2)) {. h1.Add(h2);. }. ```. will not work. If that's ok, I'll change the `enum` to `enum class` and the return type of the function. _Edit_: also, all instances of code like. ```. if( inconsistency & kDifferentDimensions ). ```. will become a lot more verbose:. ```. if( inconsistency & static_cast<UInt_t>(EInconsistencyBits::kDifferentDimensions) ). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:226,interoperability,interfac,interface,226,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. I can do that, but all the other `enum`s in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore:. ```. if(TH1::CheckConsistency(&h1, &h2)) {. h1.Add(h2);. }. ```. will not work. If that's ok, I'll change the `enum` to `enum class` and the return type of the function. _Edit_: also, all instances of code like. ```. if( inconsistency & kDifferentDimensions ). ```. will become a lot more verbose:. ```. if( inconsistency & static_cast<UInt_t>(EInconsistencyBits::kDifferentDimensions) ). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:16,modifiability,interfac,interface,16,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. I can do that, but all the other `enum`s in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore:. ```. if(TH1::CheckConsistency(&h1, &h2)) {. h1.Add(h2);. }. ```. will not work. If that's ok, I'll change the `enum` to `enum class` and the return type of the function. _Edit_: also, all instances of code like. ```. if( inconsistency & kDifferentDimensions ). ```. will become a lot more verbose:. ```. if( inconsistency & static_cast<UInt_t>(EInconsistencyBits::kDifferentDimensions) ). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:226,modifiability,interfac,interface,226,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. I can do that, but all the other `enum`s in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore:. ```. if(TH1::CheckConsistency(&h1, &h2)) {. h1.Add(h2);. }. ```. will not work. If that's ok, I'll change the `enum` to `enum class` and the return type of the function. _Edit_: also, all instances of code like. ```. if( inconsistency & kDifferentDimensions ). ```. will become a lot more verbose:. ```. if( inconsistency & static_cast<UInt_t>(EInconsistencyBits::kDifferentDimensions) ). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:66,performance,time,time,66,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. I can do that, but all the other `enum`s in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore:. ```. if(TH1::CheckConsistency(&h1, &h2)) {. h1.Add(h2);. }. ```. will not work. If that's ok, I'll change the `enum` to `enum class` and the return type of the function. _Edit_: also, all instances of code like. ```. if( inconsistency & kDifferentDimensions ). ```. will become a lot more verbose:. ```. if( inconsistency & static_cast<UInt_t>(EInconsistencyBits::kDifferentDimensions) ). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:119,reliability,pra,practices,119,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. I can do that, but all the other `enum`s in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore:. ```. if(TH1::CheckConsistency(&h1, &h2)) {. h1.Add(h2);. }. ```. will not work. If that's ok, I'll change the `enum` to `enum class` and the return type of the function. _Edit_: also, all instances of code like. ```. if( inconsistency & kDifferentDimensions ). ```. will become a lot more verbose:. ```. if( inconsistency & static_cast<UInt_t>(EInconsistencyBits::kDifferentDimensions) ). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:297,testability,context,contextually,297,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. I can do that, but all the other `enum`s in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore:. ```. if(TH1::CheckConsistency(&h1, &h2)) {. h1.Add(h2);. }. ```. will not work. If that's ok, I'll change the `enum` to `enum class` and the return type of the function. _Edit_: also, all instances of code like. ```. if( inconsistency & kDifferentDimensions ). ```. will become a lot more verbose:. ```. if( inconsistency & static_cast<UInt_t>(EInconsistencyBits::kDifferentDimensions) ). ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:438,availability,consist,consistent,438,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. > I can do that, but all the other enums in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore. That's both valid. Indeed, when introducing this enum, I didn't make it an enum class mostly to be consistent with the other TH1 enums. The fact that it's less verbose is a nice extra here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:16,integrability,interfac,interface,16,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. > I can do that, but all the other enums in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore. That's both valid. Indeed, when introducing this enum, I didn't make it an enum class mostly to be consistent with the other TH1 enums. The fact that it's less verbose is a nice extra here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:45,integrability,pub,public,45,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. > I can do that, but all the other enums in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore. That's both valid. Indeed, when introducing this enum, I didn't make it an enum class mostly to be consistent with the other TH1 enums. The fact that it's less verbose is a nice extra here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:226,integrability,interfac,interface,226,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. > I can do that, but all the other enums in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore. That's both valid. Indeed, when introducing this enum, I didn't make it an enum class mostly to be consistent with the other TH1 enums. The fact that it's less verbose is a nice extra here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:16,interoperability,interfac,interface,16,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. > I can do that, but all the other enums in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore. That's both valid. Indeed, when introducing this enum, I didn't make it an enum class mostly to be consistent with the other TH1 enums. The fact that it's less verbose is a nice extra here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:226,interoperability,interfac,interface,226,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. > I can do that, but all the other enums in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore. That's both valid. Indeed, when introducing this enum, I didn't make it an enum class mostly to be consistent with the other TH1 enums. The fact that it's less verbose is a nice extra here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:16,modifiability,interfac,interface,16,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. > I can do that, but all the other enums in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore. That's both valid. Indeed, when introducing this enum, I didn't make it an enum class mostly to be consistent with the other TH1 enums. The fact that it's less verbose is a nice extra here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:226,modifiability,interfac,interface,226,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. > I can do that, but all the other enums in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore. That's both valid. Indeed, when introducing this enum, I didn't make it an enum class mostly to be consistent with the other TH1 enums. The fact that it's less verbose is a nice extra here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:66,performance,time,time,66,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. > I can do that, but all the other enums in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore. That's both valid. Indeed, when introducing this enum, I didn't make it an enum class mostly to be consistent with the other TH1 enums. The fact that it's less verbose is a nice extra here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:119,reliability,pra,practices,119,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. > I can do that, but all the other enums in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore. That's both valid. Indeed, when introducing this enum, I didn't make it an enum class mostly to be consistent with the other TH1 enums. The fact that it's less verbose is a nice extra here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:351,safety,valid,valid,351,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. > I can do that, but all the other enums in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore. That's both valid. Indeed, when introducing this enum, I didn't make it an enum class mostly to be consistent with the other TH1 enums. The fact that it's less verbose is a nice extra here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:297,testability,context,contextually,297,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. > I can do that, but all the other enums in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore. That's both valid. Indeed, when introducing this enum, I didn't make it an enum class mostly to be consistent with the other TH1 enums. The fact that it's less verbose is a nice extra here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:438,usability,consist,consistent,438,"> If this is an interface that is being made public for the first time, I would take the chance to promote better code practices, e.g. by making the return type an `enum class`. > I can do that, but all the other enums in the interface will remain plain C-style. Also, the return type will not be contextually convertible to bool anymore. That's both valid. Indeed, when introducing this enum, I didn't make it an enum class mostly to be consistent with the other TH1 enums. The fact that it's less verbose is a nice extra here.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:71,deployability,fail,fails,71,"I'm not sure if I am supposed to say this, but it seems that test that fails is checking for changes on the list of the public data members of TH1F [1], which is intended here. [1] https://github.com/root-project/roottest/blob/e7c9a5cbc969fa99b668684cbebc59d554ceebc8/root/meta/runMemberComments.C#L34-L35. [2] https://github.com/root-project/roottest/blob/master/root/meta/Makefile#L140-L141",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:120,integrability,pub,public,120,"I'm not sure if I am supposed to say this, but it seems that test that fails is checking for changes on the list of the public data members of TH1F [1], which is intended here. [1] https://github.com/root-project/roottest/blob/e7c9a5cbc969fa99b668684cbebc59d554ceebc8/root/meta/runMemberComments.C#L34-L35. [2] https://github.com/root-project/roottest/blob/master/root/meta/Makefile#L140-L141",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:71,reliability,fail,fails,71,"I'm not sure if I am supposed to say this, but it seems that test that fails is checking for changes on the list of the public data members of TH1F [1], which is intended here. [1] https://github.com/root-project/roottest/blob/e7c9a5cbc969fa99b668684cbebc59d554ceebc8/root/meta/runMemberComments.C#L34-L35. [2] https://github.com/root-project/roottest/blob/master/root/meta/Makefile#L140-L141",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:61,safety,test,test,61,"I'm not sure if I am supposed to say this, but it seems that test that fails is checking for changes on the list of the public data members of TH1F [1], which is intended here. [1] https://github.com/root-project/roottest/blob/e7c9a5cbc969fa99b668684cbebc59d554ceebc8/root/meta/runMemberComments.C#L34-L35. [2] https://github.com/root-project/roottest/blob/master/root/meta/Makefile#L140-L141",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:61,testability,test,test,61,"I'm not sure if I am supposed to say this, but it seems that test that fails is checking for changes on the list of the public data members of TH1F [1], which is intended here. [1] https://github.com/root-project/roottest/blob/e7c9a5cbc969fa99b668684cbebc59d554ceebc8/root/meta/runMemberComments.C#L34-L35. [2] https://github.com/root-project/roottest/blob/master/root/meta/Makefile#L140-L141",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:101,deployability,updat,update,101,@amecca This is correct. Can you propose a PR for the roottest repository that includes the required update to the test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:63,integrability,repositor,repository,63,@amecca This is correct. Can you propose a PR for the roottest repository that includes the required update to the test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:63,interoperability,repositor,repository,63,@amecca This is correct. Can you propose a PR for the roottest repository that includes the required update to the test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:101,safety,updat,update,101,@amecca This is correct. Can you propose a PR for the roottest repository that includes the required update to the test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:115,safety,test,test,115,@amecca This is correct. Can you propose a PR for the roottest repository that includes the required update to the test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:101,security,updat,update,101,@amecca This is correct. Can you propose a PR for the roottest repository that includes the required update to the test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:115,testability,test,test,115,@amecca This is correct. Can you propose a PR for the roottest repository that includes the required update to the test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:56,deployability,automat,automated,56,"In order for the roottest branch to be picked-up by the automated test you need to use the same branch name in both repository (so `publicCheckConsistency2` in this case, it seems that on roottest you used `publicTH1consistencyEnum`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:116,integrability,repositor,repository,116,"In order for the roottest branch to be picked-up by the automated test you need to use the same branch name in both repository (so `publicCheckConsistency2` in this case, it seems that on roottest you used `publicTH1consistencyEnum`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:116,interoperability,repositor,repository,116,"In order for the roottest branch to be picked-up by the automated test you need to use the same branch name in both repository (so `publicCheckConsistency2` in this case, it seems that on roottest you used `publicTH1consistencyEnum`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:66,safety,test,test,66,"In order for the roottest branch to be picked-up by the automated test you need to use the same branch name in both repository (so `publicCheckConsistency2` in this case, it seems that on roottest you used `publicTH1consistencyEnum`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:56,testability,automat,automated,56,"In order for the roottest branch to be picked-up by the automated test you need to use the same branch name in both repository (so `publicCheckConsistency2` in this case, it seems that on roottest you used `publicTH1consistencyEnum`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:66,testability,test,test,66,"In order for the roottest branch to be picked-up by the automated test you need to use the same branch name in both repository (so `publicCheckConsistency2` in this case, it seems that on roottest you used `publicTH1consistencyEnum`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:19,deployability,build,build,19,Thanks. @phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:48,deployability,updat,update,48,It seems that either my roottest branch did not update correctly the reference file or it was not picked up by the automated test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:115,deployability,automat,automated,115,It seems that either my roottest branch did not update correctly the reference file or it was not picked up by the automated test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:48,safety,updat,update,48,It seems that either my roottest branch did not update correctly the reference file or it was not picked up by the automated test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:125,safety,test,test,125,It seems that either my roottest branch did not update correctly the reference file or it was not picked up by the automated test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:48,security,updat,update,48,It seems that either my roottest branch did not update correctly the reference file or it was not picked up by the automated test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:115,testability,automat,automated,115,It seems that either my roottest branch did not update correctly the reference file or it was not picked up by the automated test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14077:125,testability,test,test,125,It seems that either my roottest branch did not update correctly the reference file or it was not picked up by the automated test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14077
https://github.com/root-project/root/pull/14078:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14078
https://github.com/root-project/root/pull/14078:63,deployability,version,versions,63,@flagarde I see `${ZSTD_INCLUDE_DIRS}` in all `FindZSTD.cmake` versions found on the Web. Are you sure of your PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14078
https://github.com/root-project/root/pull/14078:63,integrability,version,versions,63,@flagarde I see `${ZSTD_INCLUDE_DIRS}` in all `FindZSTD.cmake` versions found on the Web. Are you sure of your PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14078
https://github.com/root-project/root/pull/14078:63,modifiability,version,versions,63,@flagarde I see `${ZSTD_INCLUDE_DIRS}` in all `FindZSTD.cmake` versions found on the Web. Are you sure of your PR?,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14078
https://github.com/root-project/root/issues/14084:137,availability,state,state,137,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:290,deployability,modul,module,290,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:508,deployability,updat,updated,508,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:213,energy efficiency,load,loaded,213,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:245,energy efficiency,load,loading,245,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:137,integrability,state,state,137,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:290,modifiability,modul,module,290,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:213,performance,load,loaded,213,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:245,performance,load,loading,245,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:478,reliability,doe,does,478,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:290,safety,modul,module,290,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:344,safety,test,test,344,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:508,safety,updat,updated,508,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:508,security,updat,updated,508,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:344,testability,test,test,344,"> From the snippet added above:. So we see that the list of data member is empty but the `StreamerInfo` is correct. This is the intended state of an auto-generated `TClass` for `std::pair` without its information loaded in the interpreter (that loading is more likely to have happened with module enabled). So technically the issue is that the test is too stringent and need to be changed ... However the code that follow may actually rely on the data member information, if it does then it also needs to be updated to use the `TStreamerInfo` information instead.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:226,energy efficiency,core,core,226,"> std::set<std::pair<int, CustomStruct>> field (but not forstd::set<std::pair<int, int>>. The difference is likely due to the fact that we provide the dictionary for a small subset of STL collection of numerical type through `core/clingutils/src/*LinkDef.h`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:174,integrability,sub,subset,174,"> std::set<std::pair<int, CustomStruct>> field (but not forstd::set<std::pair<int, int>>. The difference is likely due to the fact that we provide the dictionary for a small subset of STL collection of numerical type through `core/clingutils/src/*LinkDef.h`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:26,usability,Custom,CustomStruct,26,"> std::set<std::pair<int, CustomStruct>> field (but not forstd::set<std::pair<int, int>>. The difference is likely due to the fact that we provide the dictionary for a small subset of STL collection of numerical type through `core/clingutils/src/*LinkDef.h`",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:147,availability,error,errors,147,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:620,deployability,build,build,620,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:677,deployability,modul,modules,677,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:942,deployability,fail,fail,942,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:739,energy efficiency,core,core,739,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:677,modifiability,modul,modules,677,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:147,performance,error,errors,147,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:942,reliability,fail,fail,942,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:147,safety,error,errors,147,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:202,safety,test,test,202,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:417,safety,test,test,417,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:677,safety,modul,modules,677,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:202,testability,test,test,202,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:417,testability,test,test,417,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:147,usability,error,errors,147,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14084:238,usability,Custom,CustomStruct,238,"Thanks for the pointers, that makes sense! There are two things that still confuse me, however:. 1. When the `std::set` fields PR was merged these errors were not yet present in the CI, even though the test includes a `std::set<pair<int, CustomStruct>>`. In fact, if I go back to the commit right before the maps were added (https://github.com/root-project/root/commit/cddecc1d576df235c38a90295a9fa29a28a8a6b4), this test passes without having to have the dictionary entry for the pair. I cannot pinpoint anything that got added alongside the maps that might change this, but perhaps these additions change the internal build machinery just enough for it to also break without modules enabled. 2. There are no `std::pair` dictionaries in `core/clingutils/src/*LinkDef.h`. There are a few defined in other places, but none with the numerical types mentioned here. In any case, I will add the above suggestion to make sure that at least we can fail more gracefully (I have not checked with `RTupleField` but I imagine this will also be problematic, so probably this change should be added to `RRecordField`).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14084
https://github.com/root-project/root/issues/14085:67,interoperability,architectur,architectures,67,"The same happens for various other combinations of host and target architectures with qemu. The filename of the emulator doesn't even always include qemu (it's `/usr/libexec/qemu-binfmt/aarch64-binfmt-P` when emulating aarch64 on x64_64, for example)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14085
https://github.com/root-project/root/issues/14085:121,reliability,doe,doesn,121,"The same happens for various other combinations of host and target architectures with qemu. The filename of the emulator doesn't even always include qemu (it's `/usr/libexec/qemu-binfmt/aarch64-binfmt-P` when emulating aarch64 on x64_64, for example)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14085
https://github.com/root-project/root/issues/14085:112,testability,emul,emulator,112,"The same happens for various other combinations of host and target architectures with qemu. The filename of the emulator doesn't even always include qemu (it's `/usr/libexec/qemu-binfmt/aarch64-binfmt-P` when emulating aarch64 on x64_64, for example)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14085
https://github.com/root-project/root/issues/14085:209,testability,emul,emulating,209,"The same happens for various other combinations of host and target architectures with qemu. The filename of the emulator doesn't even always include qemu (it's `/usr/libexec/qemu-binfmt/aarch64-binfmt-P` when emulating aarch64 on x64_64, for example)...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14085
https://github.com/root-project/root/issues/14085:11,deployability,fail,failed,11,Because it failed when calling as executable or with some other platforms (https://github.com/root-project/root/commit/4c9e1e698a885c65131bb9e0e47f30668fa151a2) https://github.com/root-project/root/pull/10418,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14085
https://github.com/root-project/root/issues/14085:64,interoperability,platform,platforms,64,Because it failed when calling as executable or with some other platforms (https://github.com/root-project/root/commit/4c9e1e698a885c65131bb9e0e47f30668fa151a2) https://github.com/root-project/root/pull/10418,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14085
https://github.com/root-project/root/issues/14085:11,reliability,fail,failed,11,Because it failed when calling as executable or with some other platforms (https://github.com/root-project/root/commit/4c9e1e698a885c65131bb9e0e47f30668fa151a2) https://github.com/root-project/root/pull/10418,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14085
https://github.com/root-project/root/pull/14087:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14087
https://github.com/root-project/root/issues/14091:86,usability,close,close,86,"As said in the forum, this is not really a bug but rather a general rounding issue. I close this bug report. Sorry for the disturbance !",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14091
https://github.com/root-project/root/issues/14096:828,deployability,build,build,828,"Hi, thanks for the report! I tried to reproduce this problem with ROOT master, re-creating exactly the same file paths that you had on my system:. ```c++. TString localPath = ""/tmp/mlyukova/3167235_4_3475779823.html"";. TString targetPath = ""/eos/home-m/mlyukova/Analysis/HWWCAFCore_24/HWWAnalysis/HWWAnalysisCode/share/results/R22-test/MCValidation/NTuples/cutflows/c21-mm-processes_bbmm-cutflow-cuts.html"";. gSystem->CopyFile(localPath.Data(), targetPath.Data(), true);. ```. It works just fine. I assigned this problem the priority ""low"", because you found a very good alternative with `std::filesystem`, which should be preferred over ROOT anyway because it's from the STL :+1:. If you want us to fix this anyway, we'll need a real reproducer, which probably has to be run on lxplus. Or you could try again with a ROOT debug build, like `/cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc12-dbg` (see https://root.cern/install/nightlies/), and post the stack trace again (which will contain more info because of the debug symbols).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:931,deployability,instal,install,931,"Hi, thanks for the report! I tried to reproduce this problem with ROOT master, re-creating exactly the same file paths that you had on my system:. ```c++. TString localPath = ""/tmp/mlyukova/3167235_4_3475779823.html"";. TString targetPath = ""/eos/home-m/mlyukova/Analysis/HWWCAFCore_24/HWWAnalysis/HWWAnalysisCode/share/results/R22-test/MCValidation/NTuples/cutflows/c21-mm-processes_bbmm-cutflow-cuts.html"";. gSystem->CopyFile(localPath.Data(), targetPath.Data(), true);. ```. It works just fine. I assigned this problem the priority ""low"", because you found a very good alternative with `std::filesystem`, which should be preferred over ROOT anyway because it's from the STL :+1:. If you want us to fix this anyway, we'll need a real reproducer, which probably has to be run on lxplus. Or you could try again with a ROOT debug build, like `/cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc12-dbg` (see https://root.cern/install/nightlies/), and post the stack trace again (which will contain more info because of the debug symbols).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:965,deployability,stack,stack,965,"Hi, thanks for the report! I tried to reproduce this problem with ROOT master, re-creating exactly the same file paths that you had on my system:. ```c++. TString localPath = ""/tmp/mlyukova/3167235_4_3475779823.html"";. TString targetPath = ""/eos/home-m/mlyukova/Analysis/HWWCAFCore_24/HWWAnalysis/HWWAnalysisCode/share/results/R22-test/MCValidation/NTuples/cutflows/c21-mm-processes_bbmm-cutflow-cuts.html"";. gSystem->CopyFile(localPath.Data(), targetPath.Data(), true);. ```. It works just fine. I assigned this problem the priority ""low"", because you found a very good alternative with `std::filesystem`, which should be preferred over ROOT anyway because it's from the STL :+1:. If you want us to fix this anyway, we'll need a real reproducer, which probably has to be run on lxplus. Or you could try again with a ROOT debug build, like `/cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc12-dbg` (see https://root.cern/install/nightlies/), and post the stack trace again (which will contain more info because of the debug symbols).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:995,deployability,contain,contain,995,"Hi, thanks for the report! I tried to reproduce this problem with ROOT master, re-creating exactly the same file paths that you had on my system:. ```c++. TString localPath = ""/tmp/mlyukova/3167235_4_3475779823.html"";. TString targetPath = ""/eos/home-m/mlyukova/Analysis/HWWCAFCore_24/HWWAnalysis/HWWAnalysisCode/share/results/R22-test/MCValidation/NTuples/cutflows/c21-mm-processes_bbmm-cutflow-cuts.html"";. gSystem->CopyFile(localPath.Data(), targetPath.Data(), true);. ```. It works just fine. I assigned this problem the priority ""low"", because you found a very good alternative with `std::filesystem`, which should be preferred over ROOT anyway because it's from the STL :+1:. If you want us to fix this anyway, we'll need a real reproducer, which probably has to be run on lxplus. Or you could try again with a ROOT debug build, like `/cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc12-dbg` (see https://root.cern/install/nightlies/), and post the stack trace again (which will contain more info because of the debug symbols).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:313,interoperability,share,share,313,"Hi, thanks for the report! I tried to reproduce this problem with ROOT master, re-creating exactly the same file paths that you had on my system:. ```c++. TString localPath = ""/tmp/mlyukova/3167235_4_3475779823.html"";. TString targetPath = ""/eos/home-m/mlyukova/Analysis/HWWCAFCore_24/HWWAnalysis/HWWAnalysisCode/share/results/R22-test/MCValidation/NTuples/cutflows/c21-mm-processes_bbmm-cutflow-cuts.html"";. gSystem->CopyFile(localPath.Data(), targetPath.Data(), true);. ```. It works just fine. I assigned this problem the priority ""low"", because you found a very good alternative with `std::filesystem`, which should be preferred over ROOT anyway because it's from the STL :+1:. If you want us to fix this anyway, we'll need a real reproducer, which probably has to be run on lxplus. Or you could try again with a ROOT debug build, like `/cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc12-dbg` (see https://root.cern/install/nightlies/), and post the stack trace again (which will contain more info because of the debug symbols).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:331,safety,test,test,331,"Hi, thanks for the report! I tried to reproduce this problem with ROOT master, re-creating exactly the same file paths that you had on my system:. ```c++. TString localPath = ""/tmp/mlyukova/3167235_4_3475779823.html"";. TString targetPath = ""/eos/home-m/mlyukova/Analysis/HWWCAFCore_24/HWWAnalysis/HWWAnalysisCode/share/results/R22-test/MCValidation/NTuples/cutflows/c21-mm-processes_bbmm-cutflow-cuts.html"";. gSystem->CopyFile(localPath.Data(), targetPath.Data(), true);. ```. It works just fine. I assigned this problem the priority ""low"", because you found a very good alternative with `std::filesystem`, which should be preferred over ROOT anyway because it's from the STL :+1:. If you want us to fix this anyway, we'll need a real reproducer, which probably has to be run on lxplus. Or you could try again with a ROOT debug build, like `/cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc12-dbg` (see https://root.cern/install/nightlies/), and post the stack trace again (which will contain more info because of the debug symbols).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:331,testability,test,test,331,"Hi, thanks for the report! I tried to reproduce this problem with ROOT master, re-creating exactly the same file paths that you had on my system:. ```c++. TString localPath = ""/tmp/mlyukova/3167235_4_3475779823.html"";. TString targetPath = ""/eos/home-m/mlyukova/Analysis/HWWCAFCore_24/HWWAnalysis/HWWAnalysisCode/share/results/R22-test/MCValidation/NTuples/cutflows/c21-mm-processes_bbmm-cutflow-cuts.html"";. gSystem->CopyFile(localPath.Data(), targetPath.Data(), true);. ```. It works just fine. I assigned this problem the priority ""low"", because you found a very good alternative with `std::filesystem`, which should be preferred over ROOT anyway because it's from the STL :+1:. If you want us to fix this anyway, we'll need a real reproducer, which probably has to be run on lxplus. Or you could try again with a ROOT debug build, like `/cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc12-dbg` (see https://root.cern/install/nightlies/), and post the stack trace again (which will contain more info because of the debug symbols).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:971,testability,trace,trace,971,"Hi, thanks for the report! I tried to reproduce this problem with ROOT master, re-creating exactly the same file paths that you had on my system:. ```c++. TString localPath = ""/tmp/mlyukova/3167235_4_3475779823.html"";. TString targetPath = ""/eos/home-m/mlyukova/Analysis/HWWCAFCore_24/HWWAnalysis/HWWAnalysisCode/share/results/R22-test/MCValidation/NTuples/cutflows/c21-mm-processes_bbmm-cutflow-cuts.html"";. gSystem->CopyFile(localPath.Data(), targetPath.Data(), true);. ```. It works just fine. I assigned this problem the priority ""low"", because you found a very good alternative with `std::filesystem`, which should be preferred over ROOT anyway because it's from the STL :+1:. If you want us to fix this anyway, we'll need a real reproducer, which probably has to be run on lxplus. Or you could try again with a ROOT debug build, like `/cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc12-dbg` (see https://root.cern/install/nightlies/), and post the stack trace again (which will contain more info because of the debug symbols).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:623,usability,prefer,preferred,623,"Hi, thanks for the report! I tried to reproduce this problem with ROOT master, re-creating exactly the same file paths that you had on my system:. ```c++. TString localPath = ""/tmp/mlyukova/3167235_4_3475779823.html"";. TString targetPath = ""/eos/home-m/mlyukova/Analysis/HWWCAFCore_24/HWWAnalysis/HWWAnalysisCode/share/results/R22-test/MCValidation/NTuples/cutflows/c21-mm-processes_bbmm-cutflow-cuts.html"";. gSystem->CopyFile(localPath.Data(), targetPath.Data(), true);. ```. It works just fine. I assigned this problem the priority ""low"", because you found a very good alternative with `std::filesystem`, which should be preferred over ROOT anyway because it's from the STL :+1:. If you want us to fix this anyway, we'll need a real reproducer, which probably has to be run on lxplus. Or you could try again with a ROOT debug build, like `/cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc12-dbg` (see https://root.cern/install/nightlies/), and post the stack trace again (which will contain more info because of the debug symbols).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1443,availability,error,error,1443,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:274,deployability,version,version,274,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:696,deployability,version,version,696,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1014,deployability,build,build,1014,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1198,deployability,version,version,1198,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1285,deployability,upgrad,upgraded,1285,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1299,deployability,version,version,1299,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1367,deployability,updat,updating,1367,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1398,deployability,releas,release,1398,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1491,deployability,build,build,1491,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1583,deployability,version,version,1583,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1730,deployability,updat,update,1730,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1533,energy efficiency,core,coredump,1533,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1767,energy efficiency,core,core,1767,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:274,integrability,version,version,274,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:696,integrability,version,version,696,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1198,integrability,version,version,1198,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1299,integrability,version,version,1299,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1583,integrability,version,version,1583,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:274,modifiability,version,version,274,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:696,modifiability,version,version,696,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1198,modifiability,version,version,1198,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1285,modifiability,upgrad,upgraded,1285,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1299,modifiability,version,version,1299,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1583,modifiability,version,version,1583,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:456,performance,memor,memory,456,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1443,performance,error,error,1443,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:899,safety,test,tested,899,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1367,safety,updat,updating,1367,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1443,safety,error,error,1443,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1730,safety,updat,update,1730,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1367,security,updat,updating,1367,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1730,security,updat,update,1730,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:899,testability,test,tested,899,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1359,testability,plan,plan,1359,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1415,testability,plan,plan,1415,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:456,usability,memor,memory,456,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:1443,usability,error,error,1443,"Hi,. Thanks for trying to recreate it! I tried on my end as well, trying to recreate the code snippet the best I can in a standalone .cxx file. Unfortunately, I also couldn't obtain this ""Invalid write of size 1"" either. I have tried with the exact same pathways, same ROOT version, and same compiler. I copied quite a bit of code over to this standalone file from the project. My best guess is that it's a transient problem, and could be a side-effect of memory issues elsewhere in the code. My setup on lxplus while attempting to reproduce the problem. ```. > lsetup ""root 6.28.08-x86_64-el9-gcc13-opt"". > source /cvmfs/sft.cern.ch/lcg/contrib/gcc/13.1.0/x86_64-el9-gcc13-opt/setup.sh. > gcc --version. gcc (GCC) 13.1.0. > root -b -q. Welcome to ROOT 6.28/08. > g++ -o <output> <standalone_file>.cxx `root-config --cflags --glibs`. ```. My setup using setupATLAS when compiling the project . (And tested with the standalone file as well). ```. setupATLAS. asetup AnalysisBase,24.2.27. ```. **Regarding the debug build**. I used the latest corresponding to `x86_64-el9-gcc13-dbg`. ```. source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/setup.sh. ```. However, this gives a ROOT version of ROOT 6.31/01, which is higher than what I compiled for (6.28/08). With this upgraded ROOT version, my project no longer compiles. (And since we don't plan on updating past the AnalysisBase release, I don't plan to fix the compilation error 🙂). If there's a way of obtaining a debug build of ROOT 6.28/08, I can try it. This coredump only started appearing when our compiler version changed from x86_64-centos7-gcc8-opt to x86_64-el9-gcc13-opt, and we moved to AnalysisBase,24.2.27 from AnalysisBase,22.2.113. Before this update, we have not seen our program core dump. While I'm curious of the cause, we don't need this fixed. . Using `std::filesystem` works well for us. 👍",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14096:134,usability,close,close,134,"Thanks for the follow up! Ok, since you found a solution for you, and we can't easily reproduce this problem with ROOT `master`, I'll close the issue. Feel free to re-open this or create a new issue if this problem should again creep up and you can't work around it!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14096
https://github.com/root-project/root/issues/14097:96,availability,state,state,96,I didn't even know about the other bug you point out there! But I agree that removing invisible state dependence in the imports would be very desirable. I don't want my code to stop working because someone deletes the orphaned `import ROOT` statement. We actually have linting in ATLAS that would complain about code which is written this way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:241,availability,state,statement,241,I didn't even know about the other bug you point out there! But I agree that removing invisible state dependence in the imports would be very desirable. I don't want my code to stop working because someone deletes the orphaned `import ROOT` statement. We actually have linting in ATLAS that would complain about code which is written this way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:102,deployability,depend,dependence,102,I didn't even know about the other bug you point out there! But I agree that removing invisible state dependence in the imports would be very desirable. I don't want my code to stop working because someone deletes the orphaned `import ROOT` statement. We actually have linting in ATLAS that would complain about code which is written this way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:96,integrability,state,state,96,I didn't even know about the other bug you point out there! But I agree that removing invisible state dependence in the imports would be very desirable. I don't want my code to stop working because someone deletes the orphaned `import ROOT` statement. We actually have linting in ATLAS that would complain about code which is written this way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:102,integrability,depend,dependence,102,I didn't even know about the other bug you point out there! But I agree that removing invisible state dependence in the imports would be very desirable. I don't want my code to stop working because someone deletes the orphaned `import ROOT` statement. We actually have linting in ATLAS that would complain about code which is written this way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:241,integrability,state,statement,241,I didn't even know about the other bug you point out there! But I agree that removing invisible state dependence in the imports would be very desirable. I don't want my code to stop working because someone deletes the orphaned `import ROOT` statement. We actually have linting in ATLAS that would complain about code which is written this way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:102,modifiability,depend,dependence,102,I didn't even know about the other bug you point out there! But I agree that removing invisible state dependence in the imports would be very desirable. I don't want my code to stop working because someone deletes the orphaned `import ROOT` statement. We actually have linting in ATLAS that would complain about code which is written this way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:102,safety,depend,dependence,102,I didn't even know about the other bug you point out there! But I agree that removing invisible state dependence in the imports would be very desirable. I don't want my code to stop working because someone deletes the orphaned `import ROOT` statement. We actually have linting in ATLAS that would complain about code which is written this way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:297,safety,compl,complain,297,I didn't even know about the other bug you point out there! But I agree that removing invisible state dependence in the imports would be very desirable. I don't want my code to stop working because someone deletes the orphaned `import ROOT` statement. We actually have linting in ATLAS that would complain about code which is written this way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:297,security,compl,complain,297,I didn't even know about the other bug you point out there! But I agree that removing invisible state dependence in the imports would be very desirable. I don't want my code to stop working because someone deletes the orphaned `import ROOT` statement. We actually have linting in ATLAS that would complain about code which is written this way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:102,testability,depend,dependence,102,I didn't even know about the other bug you point out there! But I agree that removing invisible state dependence in the imports would be very desirable. I don't want my code to stop working because someone deletes the orphaned `import ROOT` statement. We actually have linting in ATLAS that would complain about code which is written this way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:177,usability,stop,stop,177,I didn't even know about the other bug you point out there! But I agree that removing invisible state dependence in the imports would be very desirable. I don't want my code to stop working because someone deletes the orphaned `import ROOT` statement. We actually have linting in ATLAS that would complain about code which is written this way.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:178,deployability,modul,module,178,"Ok! Well, the other ""bug"" was not an actual bug. Doing something like `from ROOT.Foo import Bar` is a priori not expected to work when `Foo` is a C++ namespace, and not a Python module. We just had this hack to kind of pretend that Cppyy namespaces are Python modules to enable this import syntax. But I don't think the benefit is big enough to justify things like `__builtin__.__import__ = _importhook`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:260,deployability,modul,modules,260,"Ok! Well, the other ""bug"" was not an actual bug. Doing something like `from ROOT.Foo import Bar` is a priori not expected to work when `Foo` is a C++ namespace, and not a Python module. We just had this hack to kind of pretend that Cppyy namespaces are Python modules to enable this import syntax. But I don't think the benefit is big enough to justify things like `__builtin__.__import__ = _importhook`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:178,modifiability,modul,module,178,"Ok! Well, the other ""bug"" was not an actual bug. Doing something like `from ROOT.Foo import Bar` is a priori not expected to work when `Foo` is a C++ namespace, and not a Python module. We just had this hack to kind of pretend that Cppyy namespaces are Python modules to enable this import syntax. But I don't think the benefit is big enough to justify things like `__builtin__.__import__ = _importhook`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:260,modifiability,modul,modules,260,"Ok! Well, the other ""bug"" was not an actual bug. Doing something like `from ROOT.Foo import Bar` is a priori not expected to work when `Foo` is a C++ namespace, and not a Python module. We just had this hack to kind of pretend that Cppyy namespaces are Python modules to enable this import syntax. But I don't think the benefit is big enough to justify things like `__builtin__.__import__ = _importhook`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:178,safety,modul,module,178,"Ok! Well, the other ""bug"" was not an actual bug. Doing something like `from ROOT.Foo import Bar` is a priori not expected to work when `Foo` is a C++ namespace, and not a Python module. We just had this hack to kind of pretend that Cppyy namespaces are Python modules to enable this import syntax. But I don't think the benefit is big enough to justify things like `__builtin__.__import__ = _importhook`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:260,safety,modul,modules,260,"Ok! Well, the other ""bug"" was not an actual bug. Doing something like `from ROOT.Foo import Bar` is a priori not expected to work when `Foo` is a C++ namespace, and not a Python module. We just had this hack to kind of pretend that Cppyy namespaces are Python modules to enable this import syntax. But I don't think the benefit is big enough to justify things like `__builtin__.__import__ = _importhook`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:203,security,hack,hack,203,"Ok! Well, the other ""bug"" was not an actual bug. Doing something like `from ROOT.Foo import Bar` is a priori not expected to work when `Foo` is a C++ namespace, and not a Python module. We just had this hack to kind of pretend that Cppyy namespaces are Python modules to enable this import syntax. But I don't think the benefit is big enough to justify things like `__builtin__.__import__ = _importhook`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:191,deployability,Loader,Loader,191,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:835,deployability,modul,module,835,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:893,deployability,modul,modules,893,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:928,deployability,modul,modules,928,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:983,deployability,modul,modules,983,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1241,deployability,Loader,Loader,1241,"hows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1458,deployability,loader,loader,1458," --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1488,deployability,modul,module,1488,"nizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1599,deployability,modul,module,1599,"1c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1616,deployability,modul,module,1616," --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_find",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1642,deployability,modul,module,1642,"honizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder()",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1692,deployability,modul,module,1692,"s/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sy",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1806,deployability,modul,module,1806,". # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --gi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1884,deployability,modul,module,1884," -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/py",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1930,deployability,modul,module,1930,"es[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 690",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2087,deployability,modul,module,2087,"meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2307,deployability,loader,loader,2307,"is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2410,deployability,loader,loader,2410,"rtswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2518,deployability,loader,loader,2518,"OOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2569,deployability,loader,loader,2569,"tial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2735,deployability,Configurat,Configuration,2735,"a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _han",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3127,deployability,Modul,ModuleType,3127,"fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Exper",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3573,deployability,modul,modules,3573," RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3998,deployability,modul,module,3998,"hon/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4007,deployability,Modul,ModuleNotFoundError,4007,".py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module name",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4031,deployability,modul,module,4031,"gs/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4329,deployability,modul,module,4329,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4525,deployability,Modul,ModuleNotFoundError,4525,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4549,deployability,modul,module,4549,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4973,deployability,modul,module,4973,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4982,deployability,Modul,ModuleNotFoundError,4982,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:5006,deployability,modul,module,5006,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:191,energy efficiency,Load,Loader,191,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1241,energy efficiency,Load,Loader,1241,"hows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1458,energy efficiency,load,loader,1458," --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1470,energy efficiency,load,loads,1470,"dings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return No",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2307,energy efficiency,load,loader,2307,"is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2410,energy efficiency,load,loader,2410,"rtswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2518,energy efficiency,load,loader,2518,"OOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2569,energy efficiency,load,loader,2569,"tial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:216,integrability,interfac,interface,216,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:813,integrability,Configur,Configure,813,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1080,integrability,Configur,Configure,1080,"ick to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2735,integrability,Configur,Configuration,2735,"a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _han",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:216,interoperability,interfac,interface,216,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:470,interoperability,bind,bindings,470,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:527,interoperability,bind,bindings,527,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:626,interoperability,bind,bindings,626,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:688,interoperability,bind,bindings,688,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2813,interoperability,bind,bindings,2813," raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2869,interoperability,bind,bindings,2869,"type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2967,interoperability,bind,bindings,2967,"dule(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. Fi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3028,interoperability,bind,bindings,3028,"f._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:216,modifiability,interfac,interface,216,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:470,modifiability,bind,bindings,470,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:527,modifiability,bind,bindings,527,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:626,modifiability,bind,bindings,626,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:688,modifiability,bind,bindings,688,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:813,modifiability,Configur,Configure,813,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:835,modifiability,modul,module,835,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:893,modifiability,modul,modules,893,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:928,modifiability,modul,modules,928,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:983,modifiability,modul,modules,983,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1080,modifiability,Configur,Configure,1080,"ick to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1488,modifiability,modul,module,1488,"nizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1599,modifiability,modul,module,1599,"1c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1616,modifiability,modul,module,1616," --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_find",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1642,modifiability,modul,module,1642,"honizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder()",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1692,modifiability,modul,module,1692,"s/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sy",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1806,modifiability,modul,module,1806,". # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --gi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1884,modifiability,modul,module,1884," -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/py",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1930,modifiability,modul,module,1930,"es[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 690",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2087,modifiability,modul,module,2087,"meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2735,modifiability,Configur,Configuration,2735,"a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _han",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2813,modifiability,bind,bindings,2813," raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2869,modifiability,bind,bindings,2869,"type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2967,modifiability,bind,bindings,2967,"dule(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. Fi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3028,modifiability,bind,bindings,3028,"f._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3127,modifiability,Modul,ModuleType,3127,"fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Exper",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3573,modifiability,modul,modules,3573," RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3998,modifiability,modul,module,3998,"hon/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4007,modifiability,Modul,ModuleNotFoundError,4007,".py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module name",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4031,modifiability,modul,module,4031,"gs/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4081,modifiability,pac,package,4081,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4329,modifiability,modul,module,4329,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4397,modifiability,pac,packages,4397,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4525,modifiability,Modul,ModuleNotFoundError,4525,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4549,modifiability,modul,module,4549,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4973,modifiability,modul,module,4973,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4982,modifiability,Modul,ModuleNotFoundError,4982,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:5006,modifiability,modul,module,5006,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:191,performance,Load,Loader,191,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1241,performance,Load,Loader,1241,"hows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1458,performance,load,loader,1458," --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1470,performance,load,loads,1470,"dings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return No",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2307,performance,load,loader,2307,"is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2410,performance,load,loader,2410,"rtswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2518,performance,load,loader,2518,"OOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2569,performance,load,loader,2569,"tial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3907,reliability,RCa,RCanvas,3907,"/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Tra",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3922,reliability,RCa,RCanvas,3922,"dex 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most re",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4140,reliability,RCa,RCanvas,4140,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4186,reliability,RCa,RCanvas,4186,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4645,reliability,RCa,RCanvas,4645,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4660,reliability,RCa,RCanvas,4660,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4706,reliability,RCa,RCanvas,4706,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4784,reliability,RCa,RCanvas,4784,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4830,reliability,RCa,RCanvas,4830,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:835,safety,modul,module,835,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:893,safety,modul,modules,893,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:928,safety,modul,modules,928,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:983,safety,modul,modules,983,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1488,safety,modul,module,1488,"nizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1599,safety,modul,module,1599,"1c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1616,safety,modul,module,1616," --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_find",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1642,safety,modul,module,1642,"honizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder()",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1692,safety,modul,module,1692,"s/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sy",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1806,safety,modul,module,1806,". # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --gi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1884,safety,modul,module,1884," -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/py",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1930,safety,modul,module,1930,"es[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 690",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2087,safety,modul,module,2087,"meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2441,safety,except,except,2441,"rtError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3127,safety,Modul,ModuleType,3127,"fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Exper",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3375,safety,except,except,3375,", target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3573,safety,modul,modules,3573," RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3616,safety,except,except,3616,"er = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3623,safety,Except,Exception,3623,"NamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Exp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3998,safety,modul,module,3998,"hon/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4007,safety,Modul,ModuleNotFoundError,4007,".py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module name",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4031,safety,modul,module,4031,"gs/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4329,safety,modul,module,4329,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4372,safety,test,test,4372,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4525,safety,Modul,ModuleNotFoundError,4525,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4549,safety,modul,module,4549,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4973,safety,modul,module,4973,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4982,safety,Modul,ModuleNotFoundError,4982,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:5006,safety,modul,module,5006,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:813,security,Configur,Configure,813,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1080,security,Configur,Configure,1080,"ick to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:1727,security,HACK,HACK,1727,"T/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finde",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:2735,security,Configur,Configuration,2735,"a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_package(spec.name). + return self._module_cache[spec.name]. +. + def exec_module(self, module):. + pass. +. + def load_module(self, fullname):. + self.is_package(fullname). + return self._module_cache[fullname]. +. +. +class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _han",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3217,testability,hook,hook,3217,"class RootNamespaceFinder(importlib.abc.MetaPathFinder):. + def __init__(self):. + self.loader = RootNamespaceLoader(). +. + def find_spec(self, fullname, path, target=None):. + try:. + self.loader.is_package(fullname). + except ImportError:. + return None. + return spec_from_loader(fullname, self.loader). +. + def invalidate_caches(self):. + self.loader = RootNamespaceLoader(). +. +namespace_finder = RootNamespaceFinder(). +if namespace_finder not in sys.meta_path:. + sys.meta_path.append(namespace_finder). # Configuration for usage from Jupyter notebooks. if _is_ipython:. diff --git a/bindings/pyroot/pythonizations/python/ROOT/_facade.py b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. index 69046fc71c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + pyt",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:3933,testability,Trace,Traceback,3933,"1c..91e7732e5a 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/_facade.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call la",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4264,testability,Trace,Traceback,4264,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4372,testability,test,test,4372,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:4908,testability,Trace,Traceback,4908,"oot/pythonizations/python/ROOT/_facade.py. @@ -135,24 +135,7 @@ class ROOTFacade(types.ModuleType):. return CreateBufferFromAddress(addr). def _set_import_hook(self):. - # This hook allows to write e.g:. - # from ROOT.A import a. - # instead of the longer:. - # from ROOT import A. - # from A import a. - try:. - import __builtin__. - except ImportError:. - import builtins as __builtin__ # name change in p3. - _orig_ihook = __builtin__.__import__. - def _importhook(name, *args, **kwds):. - if name[0:5] == 'ROOT.':. - try:. - sys.modules[name] = getattr(self, name[5:]). - except Exception:. - pass. - return _orig_ihook(name, *args, **kwds). - __builtin__.__import__ = _importhook. + pass. def _handle_import_all(self):. # Called if ""from ROOT import *"" is executed in the app. ```. </p>. </details> . Before:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'ROOT.Experimental'; 'ROOT' is not a package. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x55e53c0b4ab0>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. File ""/home/cburr/miniconda3/envs/test/lib/python3.11/site-packages/ROOT/_facade.py"", line 154, in _importhook. return _orig_ihook(name, *args, **kwds). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ModuleNotFoundError: No module named 'missing_module'. ```. After:. ```bash. + python -c 'from ROOT.Experimental import RCanvas; print(RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x555c9a1595a0>. + python -c 'import ROOT; print(ROOT.Experimental.RCanvas)'. <class cppyy.gbl.ROOT.Experimental.RCanvas at 0x563ffa2c9780>. + python -c 'import ROOT; import missing_module'. Traceback (most recent call last):. File ""<string>"", line 1, in <module>. ModuleNotFoundError: No module named 'missing_module'. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:422,usability,support,support,422,"There is an alternative way to get this using meta path finders. <details><summary>Click to show diff</summary>. <p>. This would need to be polished and checked that it actually follows the `Loader`/`MetaPathFinder` interface correctly but it shows the general idea. If anyone picks this up I'd suggest checking the implementation of `six.moves` to see if there are any edge cases that are missing (especially if Python 2 support is still needed). ```diff. diff --git a/bindings/pyroot/pythonizations/python/ROOT/__init__.py b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. index 113e778cda..21c8aa7454 100644. --- a/bindings/pyroot/pythonizations/python/ROOT/__init__.py. +++ b/bindings/pyroot/pythonizations/python/ROOT/__init__.py. @@ -48,7 +48,65 @@ _is_ipython = hasattr(builtins, '__IPYTHON__'). # Configure ROOT facade module. import sys. from ._facade import ROOTFacade. -sys.modules[__name__] = ROOTFacade(sys.modules[__name__], _is_ipython). +xxx = ROOTFacade(sys.modules[__name__], _is_ipython). +__getattr__ = xxx._getattr. +__setattr__ = xxx._setattr. +. +# Configure meta-path finder for ROOT namespaces. +import importlib.abc. +from importlib.util import spec_from_loader. +. +class RootNamespaceLoader(importlib.abc.Loader):. + def __init__(self):. + self._module_cache = {}. +. + def is_package(self, fullname):. + if fullname in self._module_cache:. + return True. + if not fullname.startswith(""ROOT.""):. + raise ImportError(""This loader only loads ROOT.*""). + module = xxx. + partial_name = ""ROOT"". + for part in fullname.split(""."")[1:]:. + partial_name += f"".{part}"". + module = getattr(module, part, None). + if module is None:. + raise NotImplementedError(f""No module named {partial_name}""). + # HACK: There is a probably a better way to do this. + if ""namespace"" not in str(module):. + raise ImportError(f""{partial_name} is not a namespace (type={type(module)})""). + self._module_cache[fullname] = module. + return True. +. + def create_module(self, spec):. + self.is_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/issues/14097:0,usability,Close,Closed,0,Closed by:. * https://github.com/root-project/root/pull/14098,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14097
https://github.com/root-project/root/pull/14098:8,availability,failur,failure,8,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:163,availability,ERROR,ERROR,163,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:242,availability,ERROR,ERROR,242,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:930,availability,error,errors,930,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:947,availability,Error,Error,947,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1032,availability,error,error,1032,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:8,deployability,fail,failure,8,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:49,deployability,Fail,Failed,49,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:748,deployability,fail,fails,748,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:922,deployability,FAIL,FAILED,922,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:987,deployability,modul,modules,987,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:131,energy efficiency,load,loaded,131,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:323,energy efficiency,load,loaded,323,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:777,energy efficiency,load,loaded,777,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1021,integrability,messag,message,1021,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:491,interoperability,bind,bindings,491,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1021,interoperability,messag,message,1021,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:491,modifiability,bind,bindings,491,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:987,modifiability,modul,modules,987,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:8,performance,failur,failure,8,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:131,performance,load,loaded,131,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:163,performance,ERROR,ERROR,163,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:242,performance,ERROR,ERROR,242,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:323,performance,load,loaded,323,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:777,performance,load,loaded,777,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:930,performance,error,errors,930,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:947,performance,Error,Error,947,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1032,performance,error,error,1032,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:8,reliability,fail,failure,8,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:49,reliability,Fail,Failed,49,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:748,reliability,fail,fails,748,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:922,reliability,FAIL,FAILED,922,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:116,safety,Test,Test,116,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:163,safety,ERROR,ERROR,163,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:242,safety,ERROR,ERROR,242,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:308,safety,Test,Test,308,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:522,safety,test,test,522,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:581,safety,Except,Exception,581,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:650,safety,Except,Exception,650,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:743,safety,test,test,743,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:906,safety,test,test,906,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:930,safety,error,errors,930,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:947,safety,Error,Error,947,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:987,safety,modul,modules,987,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1032,safety,error,error,1032,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:116,testability,Test,Test,116,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:308,testability,Test,Test,308,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:424,testability,Trace,Traceback,424,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:522,testability,test,test,522,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:743,testability,test,test,743,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:906,testability,test,test,906,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:163,usability,ERROR,ERROR,163,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:242,usability,ERROR,ERROR,242,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:930,usability,error,errors,930,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:947,usability,Error,Error,947,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1032,usability,error,error,1032,"The one failure on Fedora 39 is unrelated:. ```. Failed. test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT ... ERROR. ======================================================================. ERROR: test_import (import_load_libs.ImportLoadLibs.test_import). Test libraries loaded after importing ROOT. ----------------------------------------------------------------------. Traceback (most recent call last):. File ""/github/home/ROOT-CI/src/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 120, in test_import. raise Exception('Found not whitelisted libraries after importing ROOT:' \. Exception: Found not whitelisted libraries after importing ROOT:. - libb2. - libgomp. If the test fails with a library that is loaded on purpose, please add it to the whitelist. ----------------------------------------------------------------------. Ran 1 test in 1.405s. FAILED (errors=1). CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):. error code: 1. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:186,availability,failur,failure,186,"Weird, but on the Fedora 39 nightlies thre are other tests failing, like `tutorial-tmva-TMVA_CNN_Classification`. Are we sure that this is the same environment? I don't see how the test failure in this PR can be related, because in the `import_load_libs` it doesn't do `import ROOT.Foo` or `from ROOT.Foo import ...`, which is the only case in which this PR changes the behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:59,deployability,fail,failing,59,"Weird, but on the Fedora 39 nightlies thre are other tests failing, like `tutorial-tmva-TMVA_CNN_Classification`. Are we sure that this is the same environment? I don't see how the test failure in this PR can be related, because in the `import_load_libs` it doesn't do `import ROOT.Foo` or `from ROOT.Foo import ...`, which is the only case in which this PR changes the behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:186,deployability,fail,failure,186,"Weird, but on the Fedora 39 nightlies thre are other tests failing, like `tutorial-tmva-TMVA_CNN_Classification`. Are we sure that this is the same environment? I don't see how the test failure in this PR can be related, because in the `import_load_libs` it doesn't do `import ROOT.Foo` or `from ROOT.Foo import ...`, which is the only case in which this PR changes the behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:186,performance,failur,failure,186,"Weird, but on the Fedora 39 nightlies thre are other tests failing, like `tutorial-tmva-TMVA_CNN_Classification`. Are we sure that this is the same environment? I don't see how the test failure in this PR can be related, because in the `import_load_libs` it doesn't do `import ROOT.Foo` or `from ROOT.Foo import ...`, which is the only case in which this PR changes the behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:59,reliability,fail,failing,59,"Weird, but on the Fedora 39 nightlies thre are other tests failing, like `tutorial-tmva-TMVA_CNN_Classification`. Are we sure that this is the same environment? I don't see how the test failure in this PR can be related, because in the `import_load_libs` it doesn't do `import ROOT.Foo` or `from ROOT.Foo import ...`, which is the only case in which this PR changes the behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:186,reliability,fail,failure,186,"Weird, but on the Fedora 39 nightlies thre are other tests failing, like `tutorial-tmva-TMVA_CNN_Classification`. Are we sure that this is the same environment? I don't see how the test failure in this PR can be related, because in the `import_load_libs` it doesn't do `import ROOT.Foo` or `from ROOT.Foo import ...`, which is the only case in which this PR changes the behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:258,reliability,doe,doesn,258,"Weird, but on the Fedora 39 nightlies thre are other tests failing, like `tutorial-tmva-TMVA_CNN_Classification`. Are we sure that this is the same environment? I don't see how the test failure in this PR can be related, because in the `import_load_libs` it doesn't do `import ROOT.Foo` or `from ROOT.Foo import ...`, which is the only case in which this PR changes the behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:53,safety,test,tests,53,"Weird, but on the Fedora 39 nightlies thre are other tests failing, like `tutorial-tmva-TMVA_CNN_Classification`. Are we sure that this is the same environment? I don't see how the test failure in this PR can be related, because in the `import_load_libs` it doesn't do `import ROOT.Foo` or `from ROOT.Foo import ...`, which is the only case in which this PR changes the behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:181,safety,test,test,181,"Weird, but on the Fedora 39 nightlies thre are other tests failing, like `tutorial-tmva-TMVA_CNN_Classification`. Are we sure that this is the same environment? I don't see how the test failure in this PR can be related, because in the `import_load_libs` it doesn't do `import ROOT.Foo` or `from ROOT.Foo import ...`, which is the only case in which this PR changes the behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:53,testability,test,tests,53,"Weird, but on the Fedora 39 nightlies thre are other tests failing, like `tutorial-tmva-TMVA_CNN_Classification`. Are we sure that this is the same environment? I don't see how the test failure in this PR can be related, because in the `import_load_libs` it doesn't do `import ROOT.Foo` or `from ROOT.Foo import ...`, which is the only case in which this PR changes the behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:181,testability,test,test,181,"Weird, but on the Fedora 39 nightlies thre are other tests failing, like `tutorial-tmva-TMVA_CNN_Classification`. Are we sure that this is the same environment? I don't see how the test failure in this PR can be related, because in the `import_load_libs` it doesn't do `import ROOT.Foo` or `from ROOT.Foo import ...`, which is the only case in which this PR changes the behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:370,usability,behavi,behavior,370,"Weird, but on the Fedora 39 nightlies thre are other tests failing, like `tutorial-tmva-TMVA_CNN_Classification`. Are we sure that this is the same environment? I don't see how the test failure in this PR can be related, because in the `import_load_libs` it doesn't do `import ROOT.Foo` or `from ROOT.Foo import ...`, which is the only case in which this PR changes the behavior.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:26,availability,failur,failures,26,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:817,availability,error,error,817,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:837,availability,fault,fault,837,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4604,availability,monitor,monitored,4604,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4664,availability,Error,Error,4664,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4764,availability,fault,fault,4764,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:26,deployability,fail,failures,26,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:136,deployability,Fail,Failed,136,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:219,deployability,build,build,219,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:324,deployability,build,build,324,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4431,deployability,modul,module,4431,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4450,deployability,modul,modules,4450,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4604,deployability,monitor,monitored,4604,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4694,deployability,build,build,4694,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4827,deployability,fail,fails,4827,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:837,energy efficiency,fault,fault,837,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:844,energy efficiency,Current,Current,844,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4604,energy efficiency,monitor,monitored,4604,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4629,energy efficiency,core,core,4629,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4764,energy efficiency,fault,fault,4764,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4726,integrability,messag,message,4726,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:183,interoperability,share,shared,183,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:602,interoperability,platform,platform,602,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:649,interoperability,plug,pluggy-,649,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:694,interoperability,plug,plugins,694,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:2334,interoperability,plug,pluggy,2334," ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:2432,interoperability,plug,pluggy,2432,"File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:2530,interoperability,plug,pluggy,2530,"ceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:2942,interoperability,plug,pluggy,2942,"r_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3040,interoperability,plug,pluggy,3040,"in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3138,interoperability,plug,pluggy,3138,"62 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3337,interoperability,plug,pluggy,3337,"/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3435,interoperability,plug,pluggy,3435,"/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3533,interoperability,plug,pluggy,3533,"/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (tot",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3922,interoperability,plug,pluggy,3922,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4020,interoperability,plug,pluggy,4020,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4118,interoperability,plug,pluggy,4118,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4726,interoperability,messag,message,4726,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1176,modifiability,pac,packages,1176,"ng shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-ven",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1275,modifiability,pac,packages,1275,"-- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1378,modifiability,pac,packages,1378," /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1480,modifiability,pac,packages,1480,"-fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1592,modifiability,pac,packages,1592,"====. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1698,modifiability,pac,packages,1698," anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1802,modifiability,pac,packages,1802,"tal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1901,modifiability,pac,packages,1901,"File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/RO",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:2004,modifiability,pac,packages,2004,"hon3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:2105,modifiability,pac,packages,2105,"ormat_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:2212,modifiability,pac,packages,2212,"5 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:2325,modifiability,pac,packages,2325,"ly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:2423,modifiability,pac,packages,2423,"source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:2521,modifiability,pac,packages,2521,"repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:2616,modifiability,pac,packages,2616,"py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:2719,modifiability,pac,packages,2719,"de.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pyt",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:2822,modifiability,pac,packages,2822,"ode.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/m",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:2933,modifiability,pac,packages,2933," in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3031,modifiability,pac,packages,3031,"ne 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/reports.py"", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3129,modifiability,pac,packages,3129,", line 362 in from_item_and_call. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3224,modifiability,pac,packages,3224,"/runner.py"", line 368 in pytest_runtest_makereport. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3328,modifiability,pac,packages,3328,"s/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in ru",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3426,modifiability,pac,packages,3426,"s/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3524,modifiability,pac,packages,3524,"s/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizati",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3619,modifiability,pac,packages,3619,"s/_pytest/runner.py"", line 224 in call_and_report. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3710,modifiability,pac,packages,3710,"site-packages/_pytest/runner.py"", line 133 in runtestprotocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3808,modifiability,pac,packages,3808,"3.12/site-packages/_pytest/runner.py"", line 114 in pytest_runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:3913,modifiability,pac,packages,3913,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4011,modifiability,pac,packages,4011,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4109,modifiability,pac,packages,4109,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4204,modifiability,pac,packages,4204,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4431,modifiability,modul,module,4431,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4440,modifiability,Extens,Extension,4440,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4450,modifiability,modul,modules,4450,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:26,performance,failur,failures,26,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:362,performance,time,timeout,362,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:817,performance,error,error,817,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:837,performance,fault,fault,837,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4591,performance,time,timeout,4591,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4664,performance,Error,Error,4664,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4764,performance,fault,fault,4764,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:26,reliability,fail,failures,26,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:136,reliability,Fail,Failed,136,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:837,reliability,fault,fault,837,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4604,reliability,monitor,monitored,4604,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4764,reliability,fault,fault,4764,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4827,reliability,fail,fails,4827,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:282,safety,TEST,TEST,282,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:362,safety,timeout,timeout,362,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:504,safety,TEST,TEST,504,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:550,safety,test,test,550,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:817,safety,error,error,817,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:837,safety,fault,fault,837,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4431,safety,modul,module,4431,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4450,safety,modul,modules,4450,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4591,safety,timeout,timeout,4591,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4604,safety,monitor,monitored,4604,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4642,safety,TEST,TEST,4642,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4664,safety,Error,Error,4664,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4764,safety,fault,fault,4764,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4817,safety,test,test,4817,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:555,security,session,session,555,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:282,testability,TEST,TEST,282,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:504,testability,TEST,TEST,504,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:550,testability,test,test,550,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:933,testability,trace,traceback,933,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1016,testability,trace,traceback,1016,"ated failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:1081,testability,trace,traceback,1081,"s://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/python.py"", line 1833 in repr_failure. File ""/py-venv/ROOT-CI/lib",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4604,testability,monitor,monitored,4604,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4642,testability,TEST,TEST,4642,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4817,testability,test,test,4817,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:287,usability,COMMAND,COMMAND,287,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:817,usability,error,error,817,"I just saw Python-related failures on Fedora 39 even on a PR for 6.30 backports:. https://github.com/root-project/root/pull/14161. ```. Failed. Info in <TUnixSystem::ACLiC>: creating shared library /github/home/ROOT-CI/build/roottest/python/basic/./ArgumentPassingCompiled_C.so. -- TEST COMMAND -- . cd /github/home/ROOT-CI/build/roottest/python/basic. /usr/bin/timeout -s USR2 270s /py-venv/ROOT-CI/bin/python3.12 /github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py --fixcling. -- BEGIN TEST OUTPUT --. ============================= test session starts ==============================. platform linux -- Python 3.12.0, pytest-7.4.3, pluggy-1.3.0. rootdir: /github/home/ROOT-CI. plugins: anyio-4.1.0. collected 25 items. ../../../../src/roottest/python/basic/PyROOT_basictests.py .........Fatal Python error: Segmentation fault. Current thread 0x00007fca5edb6740 (most recent call first):. File ""/usr/lib64/python3.12/traceback.py"", line 1043 in _compute_suggestion_error. File ""/usr/lib64/python3.12/traceback.py"", line 737 in __init__. File ""/usr/lib64/python3.12/traceback.py"", line 159 in format_exception_only. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 605 in exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 806 in get_exconly. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 794 in get_source. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 860 in repr_traceback_entry. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 914 in repr_traceback. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 989 in repr_excinfo. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/_code/code.py"", line 701 in getrepr. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/nodes.py"", line 486 in _repr_failure_py. File ""/py-venv/ROOT-CI/lib64/python3.12/s",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4614,usability,command,command,4614,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:4664,usability,Error,Error,4664,"runtest_protocol. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 350 in pytest_runtestloop. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 325 in _main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 271 in wrap_session. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/main.py"", line 318 in pytest_cmdline_main. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_callers.py"", line 77 in _multicall. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_manager.py"", line 115 in _hookexec. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/pluggy/_hooks.py"", line 493 in __call__. File ""/py-venv/ROOT-CI/lib64/python3.12/site-packages/_pytest/config/__init__.py"", line 169 in main. File ""/github/home/ROOT-CI/src/roottest/python/common.py"", line 46 in run_pytest. File ""/github/home/ROOT-CI/src/roottest/python/basic/PyROOT_basictests.py"", line 446 in <module>. Extension modules: libcppyy3_12, libcppyy, libROOTPythonizations3_12, libROOTPythonizations (total: 4). *** Break *** segmentation violation. /usr/bin/timeout: the monitored command dumped core. -- END TEST OUTPUT --. CMake Error at /github/home/ROOT-CI/build/RootTestDriver.cmake:186 (message):. got exit code Segmentation fault but expected 0. ```. It's not exactly the same test that fails, but it's interesting to know anyway.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:263,deployability,modul,module,263,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:371,deployability,Loader,Loader,371,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:718,deployability,modul,module,718,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:371,energy efficiency,Load,Loader,371,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:187,integrability,sub,submodules,187,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:602,integrability,sub,submodules,602,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:652,integrability,sub,submodules,652,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:263,modifiability,modul,module,263,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:718,modifiability,modul,module,718,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:371,performance,Load,Loader,371,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:566,reliability,doe,does,566,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:27,safety,review,review,27,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:143,safety,test,test,143,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:263,safety,modul,module,263,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:718,safety,modul,module,718,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:27,testability,review,review,27,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:143,testability,test,test,143,"Thanks @vepadulano for you review! I'm in the process of addressing your comments, I only have one comment that I can't act on:. > * We need a test that checks attributes of the imported submodules. For example `from ROOT import RDF`, we should check that 1. the module has all the atttributes as defined at https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module and that it also has the correct pythonizations and they work. Why is it exactly important to have all these attributes set? For the ROOT facade itself, it's easy to do (my PR does it in fact), but for arbitrary submodules I wouldn't know what to do. Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? Thanks again! Jonas",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:268,availability,down,down,268,"> Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? The suggestion is to make sure that we are faking well enough that we won't incur in problems down the line with the Python interpreter machinery. I admit this might be a bit pedantic from me at this point in time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:79,deployability,modul,module,79,"> Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? The suggestion is to make sure that we are faking well enough that we won't incur in problems down the line with the Python interpreter machinery. I admit this might be a bit pedantic from me at this point in time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:13,integrability,sub,submodules,13,"> Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? The suggestion is to make sure that we are faking well enough that we won't incur in problems down the line with the Python interpreter machinery. I admit this might be a bit pedantic from me at this point in time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:79,modifiability,modul,module,79,"> Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? The suggestion is to make sure that we are faking well enough that we won't incur in problems down the line with the Python interpreter machinery. I admit this might be a bit pedantic from me at this point in time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:383,performance,time,time,383,"> Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? The suggestion is to make sure that we are faking well enough that we won't incur in problems down the line with the Python interpreter machinery. I admit this might be a bit pedantic from me at this point in time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:79,safety,modul,module,79,"> Often, the submodules are represented by C++ namespaces, so all these Python-module related dunder attributes are pretty meaningless. What exactly is your suggestion here? The suggestion is to make sure that we are faking well enough that we won't incur in problems down the line with the Python interpreter machinery. I admit this might be a bit pedantic from me at this point in time",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:212,deployability,build,builds,212,"Hi @vepadulano, thanks for your comments! I hope my recent commit, that will be squashed before merging, is addressing your concerns. Unfortunately, the new CI is red because I merged a PR that broke incremental builds :( But we should get feedback from Jenkins if this PR still works with my newest change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:124,modifiability,concern,concerns,124,"Hi @vepadulano, thanks for your comments! I hope my recent commit, that will be squashed before merging, is addressing your concerns. Unfortunately, the new CI is red because I merged a PR that broke incremental builds :( But we should get feedback from Jenkins if this PR still works with my newest change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:124,testability,concern,concerns,124,"Hi @vepadulano, thanks for your comments! I hope my recent commit, that will be squashed before merging, is addressing your concerns. Unfortunately, the new CI is red because I merged a PR that broke incremental builds :( But we should get feedback from Jenkins if this PR still works with my newest change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:240,usability,feedback,feedback,240,"Hi @vepadulano, thanks for your comments! I hope my recent commit, that will be squashed before merging, is addressing your concerns. Unfortunately, the new CI is red because I merged a PR that broke incremental builds :( But we should get feedback from Jenkins if this PR still works with my newest change.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14098:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14098
https://github.com/root-project/root/pull/14106:33,safety,review,review,33,@bellenot please do a post-merge review; we need to get 6.30.02 out...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14106
https://github.com/root-project/root/pull/14106:33,testability,review,review,33,@bellenot please do a post-merge review; we need to get 6.30.02 out...,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14106
https://github.com/root-project/root/pull/14107:39,availability,failur,failures,39,"This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:39,deployability,fail,failures,39,"This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:39,performance,failur,failures,39,"This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:39,reliability,fail,failures,39,"This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:34,safety,test,test,34,"This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:34,testability,test,test,34,"This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:41,availability,failur,failures,41,"> This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""! It should be fixed now. I was only missing the increased tolerance in the check of the overflow bin, which was not done in the loop where I have already increased the tolerance already",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:295,availability,toler,tolerance,295,"> This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""! It should be fixed now. I was only missing the increased tolerance in the check of the overflow bin, which was not done in the loop where I have already increased the tolerance already",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:405,availability,toler,tolerance,405,"> This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""! It should be fixed now. I was only missing the increased tolerance in the check of the overflow bin, which was not done in the loop where I have already increased the tolerance already",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:41,deployability,fail,failures,41,"> This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""! It should be fixed now. I was only missing the increased tolerance in the check of the overflow bin, which was not done in the loop where I have already increased the tolerance already",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:41,performance,failur,failures,41,"> This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""! It should be fixed now. I was only missing the increased tolerance in the check of the overflow bin, which was not done in the loop where I have already increased the tolerance already",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:41,reliability,fail,failures,41,"> This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""! It should be fixed now. I was only missing the increased tolerance in the check of the overflow bin, which was not done in the loop where I have already increased the tolerance already",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:295,reliability,toleran,tolerance,295,"> This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""! It should be fixed now. I was only missing the increased tolerance in the check of the overflow bin, which was not done in the loop where I have already increased the tolerance already",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:405,reliability,toleran,tolerance,405,"> This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""! It should be fixed now. I was only missing the increased tolerance in the check of the overflow bin, which was not done in the loop where I have already increased the tolerance already",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:36,safety,test,test,36,"> This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""! It should be fixed now. I was only missing the increased tolerance in the check of the overflow bin, which was not done in the loop where I have already increased the tolerance already",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:36,testability,test,test,36,"> This PR still causes macOS 14 ARM test failures. I have [reverted](https://github.com/root-project/root/commit/ab6cdd5ddaf2294f55793d409508ec93dfcffc25) the commit that caused this; please feel free to come up with a ""good compromise""! It should be fixed now. I was only missing the increased tolerance in the check of the overflow bin, which was not done in the loop where I have already increased the tolerance already",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:58,safety,test,test,58,Thanks. I have taken you comment and also added it to the test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14107:58,testability,test,test,58,Thanks. I have taken you comment and also added it to the test.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14107
https://github.com/root-project/root/pull/14108:45,integrability,configur,configure,45,"> Very good. How did you notice? The `cmake` configure output didn't show the options that I was expecting, in particular `-std=c++17` for macOS... The `CMAKE_BUILD_TYPE` override isn't really nice because we are changing it behind the script's back; it would be nicer if the binary cache was also put into the correct directory, right now it's always `RelWithDebInfo`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14108
https://github.com/root-project/root/pull/14108:45,modifiability,configur,configure,45,"> Very good. How did you notice? The `cmake` configure output didn't show the options that I was expecting, in particular `-std=c++17` for macOS... The `CMAKE_BUILD_TYPE` override isn't really nice because we are changing it behind the script's back; it would be nicer if the binary cache was also put into the correct directory, right now it's always `RelWithDebInfo`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14108
https://github.com/root-project/root/pull/14108:283,performance,cach,cache,283,"> Very good. How did you notice? The `cmake` configure output didn't show the options that I was expecting, in particular `-std=c++17` for macOS... The `CMAKE_BUILD_TYPE` override isn't really nice because we are changing it behind the script's back; it would be nicer if the binary cache was also put into the correct directory, right now it's always `RelWithDebInfo`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14108
https://github.com/root-project/root/pull/14108:45,security,configur,configure,45,"> Very good. How did you notice? The `cmake` configure output didn't show the options that I was expecting, in particular `-std=c++17` for macOS... The `CMAKE_BUILD_TYPE` override isn't really nice because we are changing it behind the script's back; it would be nicer if the binary cache was also put into the correct directory, right now it's always `RelWithDebInfo`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14108
https://github.com/root-project/root/pull/14112:123,deployability,updat,updating,123,"Hi @ellert, sorry that my suggestions made things even worse and the tests don't pass anymore. I'll revive this PR myself, updating the commits as necessary before merging and backporting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14112
https://github.com/root-project/root/pull/14112:69,safety,test,tests,69,"Hi @ellert, sorry that my suggestions made things even worse and the tests don't pass anymore. I'll revive this PR myself, updating the commits as necessary before merging and backporting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14112
https://github.com/root-project/root/pull/14112:123,safety,updat,updating,123,"Hi @ellert, sorry that my suggestions made things even worse and the tests don't pass anymore. I'll revive this PR myself, updating the commits as necessary before merging and backporting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14112
https://github.com/root-project/root/pull/14112:123,security,updat,updating,123,"Hi @ellert, sorry that my suggestions made things even worse and the tests don't pass anymore. I'll revive this PR myself, updating the commits as necessary before merging and backporting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14112
https://github.com/root-project/root/pull/14112:69,testability,test,tests,69,"Hi @ellert, sorry that my suggestions made things even worse and the tests don't pass anymore. I'll revive this PR myself, updating the commits as necessary before merging and backporting.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14112
https://github.com/root-project/root/issues/14113:19,usability,feedback,feedback,19,"OK, thanks for the feedback",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:526,deployability,integr,integrated,526,"Got also hit by this issue. . The following change in `/opt/homebrew/Cellar/root/6.30.02/share/root/cmake/ROOTConfig.cmake` (around line 131) seems to have worked for me. ```. if(ROOT_vdt_FOUND AND NOT TARGET VDT::VDT). if(ROOT_builtin_vdt_FOUND). function(find_builtin_vdt). # the function is to create a scope (could use block() but requires CMake>=3.25). set(CMAKE_PREFIX_PATH ${ROOT_INCLUDE_DIRS} ${ROOT_LIBRARY_DIR}). find_dependency(Vdt). endfunction(). find_builtin_vdt(). endif(). endif(). ```. If confirmed, could be integrated into the `ROOTConfig.cmake.in` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:526,integrability,integr,integrated,526,"Got also hit by this issue. . The following change in `/opt/homebrew/Cellar/root/6.30.02/share/root/cmake/ROOTConfig.cmake` (around line 131) seems to have worked for me. ```. if(ROOT_vdt_FOUND AND NOT TARGET VDT::VDT). if(ROOT_builtin_vdt_FOUND). function(find_builtin_vdt). # the function is to create a scope (could use block() but requires CMake>=3.25). set(CMAKE_PREFIX_PATH ${ROOT_INCLUDE_DIRS} ${ROOT_LIBRARY_DIR}). find_dependency(Vdt). endfunction(). find_builtin_vdt(). endif(). endif(). ```. If confirmed, could be integrated into the `ROOTConfig.cmake.in` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:89,interoperability,share,share,89,"Got also hit by this issue. . The following change in `/opt/homebrew/Cellar/root/6.30.02/share/root/cmake/ROOTConfig.cmake` (around line 131) seems to have worked for me. ```. if(ROOT_vdt_FOUND AND NOT TARGET VDT::VDT). if(ROOT_builtin_vdt_FOUND). function(find_builtin_vdt). # the function is to create a scope (could use block() but requires CMake>=3.25). set(CMAKE_PREFIX_PATH ${ROOT_INCLUDE_DIRS} ${ROOT_LIBRARY_DIR}). find_dependency(Vdt). endfunction(). find_builtin_vdt(). endif(). endif(). ```. If confirmed, could be integrated into the `ROOTConfig.cmake.in` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:526,interoperability,integr,integrated,526,"Got also hit by this issue. . The following change in `/opt/homebrew/Cellar/root/6.30.02/share/root/cmake/ROOTConfig.cmake` (around line 131) seems to have worked for me. ```. if(ROOT_vdt_FOUND AND NOT TARGET VDT::VDT). if(ROOT_builtin_vdt_FOUND). function(find_builtin_vdt). # the function is to create a scope (could use block() but requires CMake>=3.25). set(CMAKE_PREFIX_PATH ${ROOT_INCLUDE_DIRS} ${ROOT_LIBRARY_DIR}). find_dependency(Vdt). endfunction(). find_builtin_vdt(). endif(). endif(). ```. If confirmed, could be integrated into the `ROOTConfig.cmake.in` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:526,modifiability,integr,integrated,526,"Got also hit by this issue. . The following change in `/opt/homebrew/Cellar/root/6.30.02/share/root/cmake/ROOTConfig.cmake` (around line 131) seems to have worked for me. ```. if(ROOT_vdt_FOUND AND NOT TARGET VDT::VDT). if(ROOT_builtin_vdt_FOUND). function(find_builtin_vdt). # the function is to create a scope (could use block() but requires CMake>=3.25). set(CMAKE_PREFIX_PATH ${ROOT_INCLUDE_DIRS} ${ROOT_LIBRARY_DIR}). find_dependency(Vdt). endfunction(). find_builtin_vdt(). endif(). endif(). ```. If confirmed, could be integrated into the `ROOTConfig.cmake.in` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:526,reliability,integr,integrated,526,"Got also hit by this issue. . The following change in `/opt/homebrew/Cellar/root/6.30.02/share/root/cmake/ROOTConfig.cmake` (around line 131) seems to have worked for me. ```. if(ROOT_vdt_FOUND AND NOT TARGET VDT::VDT). if(ROOT_builtin_vdt_FOUND). function(find_builtin_vdt). # the function is to create a scope (could use block() but requires CMake>=3.25). set(CMAKE_PREFIX_PATH ${ROOT_INCLUDE_DIRS} ${ROOT_LIBRARY_DIR}). find_dependency(Vdt). endfunction(). find_builtin_vdt(). endif(). endif(). ```. If confirmed, could be integrated into the `ROOTConfig.cmake.in` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:526,security,integr,integrated,526,"Got also hit by this issue. . The following change in `/opt/homebrew/Cellar/root/6.30.02/share/root/cmake/ROOTConfig.cmake` (around line 131) seems to have worked for me. ```. if(ROOT_vdt_FOUND AND NOT TARGET VDT::VDT). if(ROOT_builtin_vdt_FOUND). function(find_builtin_vdt). # the function is to create a scope (could use block() but requires CMake>=3.25). set(CMAKE_PREFIX_PATH ${ROOT_INCLUDE_DIRS} ${ROOT_LIBRARY_DIR}). find_dependency(Vdt). endfunction(). find_builtin_vdt(). endif(). endif(). ```. If confirmed, could be integrated into the `ROOTConfig.cmake.in` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:526,testability,integr,integrated,526,"Got also hit by this issue. . The following change in `/opt/homebrew/Cellar/root/6.30.02/share/root/cmake/ROOTConfig.cmake` (around line 131) seems to have worked for me. ```. if(ROOT_vdt_FOUND AND NOT TARGET VDT::VDT). if(ROOT_builtin_vdt_FOUND). function(find_builtin_vdt). # the function is to create a scope (could use block() but requires CMake>=3.25). set(CMAKE_PREFIX_PATH ${ROOT_INCLUDE_DIRS} ${ROOT_LIBRARY_DIR}). find_dependency(Vdt). endfunction(). find_builtin_vdt(). endif(). endif(). ```. If confirmed, could be integrated into the `ROOTConfig.cmake.in` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:506,usability,confirm,confirmed,506,"Got also hit by this issue. . The following change in `/opt/homebrew/Cellar/root/6.30.02/share/root/cmake/ROOTConfig.cmake` (around line 131) seems to have worked for me. ```. if(ROOT_vdt_FOUND AND NOT TARGET VDT::VDT). if(ROOT_builtin_vdt_FOUND). function(find_builtin_vdt). # the function is to create a scope (could use block() but requires CMake>=3.25). set(CMAKE_PREFIX_PATH ${ROOT_INCLUDE_DIRS} ${ROOT_LIBRARY_DIR}). find_dependency(Vdt). endfunction(). find_builtin_vdt(). endif(). endif(). ```. If confirmed, could be integrated into the `ROOTConfig.cmake.in` ?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:33,deployability,integr,integrate,33,"Hi @aphecetche , we will try and integrate it if it works. Thanks a lot! @gen740 maybe you can also give it a try and let us know?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:33,integrability,integr,integrate,33,"Hi @aphecetche , we will try and integrate it if it works. Thanks a lot! @gen740 maybe you can also give it a try and let us know?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:33,interoperability,integr,integrate,33,"Hi @aphecetche , we will try and integrate it if it works. Thanks a lot! @gen740 maybe you can also give it a try and let us know?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:33,modifiability,integr,integrate,33,"Hi @aphecetche , we will try and integrate it if it works. Thanks a lot! @gen740 maybe you can also give it a try and let us know?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:33,reliability,integr,integrate,33,"Hi @aphecetche , we will try and integrate it if it works. Thanks a lot! @gen740 maybe you can also give it a try and let us know?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:33,security,integr,integrate,33,"Hi @aphecetche , we will try and integrate it if it works. Thanks a lot! @gen740 maybe you can also give it a try and let us know?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:33,testability,integr,integrate,33,"Hi @aphecetche , we will try and integrate it if it works. Thanks a lot! @gen740 maybe you can also give it a try and let us know?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:78,availability,servic,services,78,find_package(root) in master is broken for the dev3 LCG builds https://lcgapp-services.cern.ch/cdash/viewFiles.php?buildid=302042,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:56,deployability,build,builds,56,find_package(root) in master is broken for the dev3 LCG builds https://lcgapp-services.cern.ch/cdash/viewFiles.php?buildid=302042,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:78,deployability,servic,services,78,find_package(root) in master is broken for the dev3 LCG builds https://lcgapp-services.cern.ch/cdash/viewFiles.php?buildid=302042,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:115,deployability,build,buildid,115,find_package(root) in master is broken for the dev3 LCG builds https://lcgapp-services.cern.ch/cdash/viewFiles.php?buildid=302042,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:78,integrability,servic,services,78,find_package(root) in master is broken for the dev3 LCG builds https://lcgapp-services.cern.ch/cdash/viewFiles.php?buildid=302042,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/issues/14113:78,modifiability,servic,services,78,find_package(root) in master is broken for the dev3 LCG builds https://lcgapp-services.cern.ch/cdash/viewFiles.php?buildid=302042,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14113
https://github.com/root-project/root/pull/14115:42,availability,error,errors,42,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:461,deployability,version,version,461,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:485,deployability,build,building,485,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:535,deployability,Build,Building,535,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:576,deployability,version,version,576,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:590,deployability,VERSION,VERSION,590,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:624,deployability,build,build,624,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:317,energy efficiency,Power,PowerPC,317,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:8,integrability,configur,configure,8,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:369,integrability,Targeting System,Targeting SystemZ,369,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:461,integrability,version,version,461,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:576,integrability,version,version,576,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:590,integrability,VERSION,VERSION,590,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:8,modifiability,configur,configure,8,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:461,modifiability,version,version,461,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:576,modifiability,version,version,576,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:590,modifiability,VERSION,VERSION,590,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:42,performance,error,errors,42,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:42,safety,error,errors,42,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:8,security,configur,configure,8,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:42,usability,error,errors,42,"@hahnjo configure seems to finish without errors, but it still seems to target all possible archs:. ```. -- Targeting AArch64. -- Targeting AMDGPU. -- Targeting ARM. -- Targeting AVR. -- Targeting BPF. -- Targeting Hexagon. -- Targeting Lanai. -- Targeting Mips. -- Targeting MSP430. -- Targeting NVPTX. -- Targeting PowerPC. -- Targeting RISCV. -- Targeting Sparc. -- Targeting SystemZ. -- Targeting WebAssembly. -- Targeting X86. -- Targeting XCore. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. ```. build ongoing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:206,deployability,build,build,206,"> it still seems to target all possible archs. Uh, I missed the most important case of `freebsdamd64`. Should be fixed with the most recent push, maybe you can try another round of (only) `cmake` after the build finished (it's an optimization only).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:230,energy efficiency,optim,optimization,230,"> it still seems to target all possible archs. Uh, I missed the most important case of `freebsdamd64`. Should be fixed with the most recent push, maybe you can try another round of (only) `cmake` after the build finished (it's an optimization only).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:230,performance,optimiz,optimization,230,"> it still seems to target all possible archs. Uh, I missed the most important case of `freebsdamd64`. Should be fixed with the most recent push, maybe you can try another round of (only) `cmake` after the build finished (it's an optimization only).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:154,deployability,Build,Building,154,"@hahnjo configure seems to work now:. ```. -- LLVM host triple: x86_64-unknown-freebsd13.2. -- LLVM default target triple: x86_64-unknown-freebsd13.2. -- Building with -fPIC. -- Found Python3: /usr/local/bin/python3 (found suitable version ""3.9.18"", minimum required is ""3.0"") found components: Interpreter . -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. ```. the build will take a while. thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:232,deployability,version,version,232,"@hahnjo configure seems to work now:. ```. -- LLVM host triple: x86_64-unknown-freebsd13.2. -- LLVM default target triple: x86_64-unknown-freebsd13.2. -- Building with -fPIC. -- Found Python3: /usr/local/bin/python3 (found suitable version ""3.9.18"", minimum required is ""3.0"") found components: Interpreter . -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. ```. the build will take a while. thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:356,deployability,version,version,356,"@hahnjo configure seems to work now:. ```. -- LLVM host triple: x86_64-unknown-freebsd13.2. -- LLVM default target triple: x86_64-unknown-freebsd13.2. -- Building with -fPIC. -- Found Python3: /usr/local/bin/python3 (found suitable version ""3.9.18"", minimum required is ""3.0"") found components: Interpreter . -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. ```. the build will take a while. thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:382,deployability,build,build,382,"@hahnjo configure seems to work now:. ```. -- LLVM host triple: x86_64-unknown-freebsd13.2. -- LLVM default target triple: x86_64-unknown-freebsd13.2. -- Building with -fPIC. -- Found Python3: /usr/local/bin/python3 (found suitable version ""3.9.18"", minimum required is ""3.0"") found components: Interpreter . -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. ```. the build will take a while. thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:8,integrability,configur,configure,8,"@hahnjo configure seems to work now:. ```. -- LLVM host triple: x86_64-unknown-freebsd13.2. -- LLVM default target triple: x86_64-unknown-freebsd13.2. -- Building with -fPIC. -- Found Python3: /usr/local/bin/python3 (found suitable version ""3.9.18"", minimum required is ""3.0"") found components: Interpreter . -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. ```. the build will take a while. thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:232,integrability,version,version,232,"@hahnjo configure seems to work now:. ```. -- LLVM host triple: x86_64-unknown-freebsd13.2. -- LLVM default target triple: x86_64-unknown-freebsd13.2. -- Building with -fPIC. -- Found Python3: /usr/local/bin/python3 (found suitable version ""3.9.18"", minimum required is ""3.0"") found components: Interpreter . -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. ```. the build will take a while. thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:283,integrability,compon,components,283,"@hahnjo configure seems to work now:. ```. -- LLVM host triple: x86_64-unknown-freebsd13.2. -- LLVM default target triple: x86_64-unknown-freebsd13.2. -- Building with -fPIC. -- Found Python3: /usr/local/bin/python3 (found suitable version ""3.9.18"", minimum required is ""3.0"") found components: Interpreter . -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. ```. the build will take a while. thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:356,integrability,version,version,356,"@hahnjo configure seems to work now:. ```. -- LLVM host triple: x86_64-unknown-freebsd13.2. -- LLVM default target triple: x86_64-unknown-freebsd13.2. -- Building with -fPIC. -- Found Python3: /usr/local/bin/python3 (found suitable version ""3.9.18"", minimum required is ""3.0"") found components: Interpreter . -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. ```. the build will take a while. thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:283,interoperability,compon,components,283,"@hahnjo configure seems to work now:. ```. -- LLVM host triple: x86_64-unknown-freebsd13.2. -- LLVM default target triple: x86_64-unknown-freebsd13.2. -- Building with -fPIC. -- Found Python3: /usr/local/bin/python3 (found suitable version ""3.9.18"", minimum required is ""3.0"") found components: Interpreter . -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. ```. the build will take a while. thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:8,modifiability,configur,configure,8,"@hahnjo configure seems to work now:. ```. -- LLVM host triple: x86_64-unknown-freebsd13.2. -- LLVM default target triple: x86_64-unknown-freebsd13.2. -- Building with -fPIC. -- Found Python3: /usr/local/bin/python3 (found suitable version ""3.9.18"", minimum required is ""3.0"") found components: Interpreter . -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. ```. the build will take a while. thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:232,modifiability,version,version,232,"@hahnjo configure seems to work now:. ```. -- LLVM host triple: x86_64-unknown-freebsd13.2. -- LLVM default target triple: x86_64-unknown-freebsd13.2. -- Building with -fPIC. -- Found Python3: /usr/local/bin/python3 (found suitable version ""3.9.18"", minimum required is ""3.0"") found components: Interpreter . -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. ```. the build will take a while. thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:283,modifiability,compon,components,283,"@hahnjo configure seems to work now:. ```. -- LLVM host triple: x86_64-unknown-freebsd13.2. -- LLVM default target triple: x86_64-unknown-freebsd13.2. -- Building with -fPIC. -- Found Python3: /usr/local/bin/python3 (found suitable version ""3.9.18"", minimum required is ""3.0"") found components: Interpreter . -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. ```. the build will take a while. thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:356,modifiability,version,version,356,"@hahnjo configure seems to work now:. ```. -- LLVM host triple: x86_64-unknown-freebsd13.2. -- LLVM default target triple: x86_64-unknown-freebsd13.2. -- Building with -fPIC. -- Found Python3: /usr/local/bin/python3 (found suitable version ""3.9.18"", minimum required is ""3.0"") found components: Interpreter . -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. ```. the build will take a while. thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:8,security,configur,configure,8,"@hahnjo configure seems to work now:. ```. -- LLVM host triple: x86_64-unknown-freebsd13.2. -- LLVM default target triple: x86_64-unknown-freebsd13.2. -- Building with -fPIC. -- Found Python3: /usr/local/bin/python3 (found suitable version ""3.9.18"", minimum required is ""3.0"") found components: Interpreter . -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. ```. the build will take a while. thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:250,usability,minim,minimum,250,"@hahnjo configure seems to work now:. ```. -- LLVM host triple: x86_64-unknown-freebsd13.2. -- LLVM default target triple: x86_64-unknown-freebsd13.2. -- Building with -fPIC. -- Found Python3: /usr/local/bin/python3 (found suitable version ""3.9.18"", minimum required is ""3.0"") found components: Interpreter . -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. ```. the build will take a while. thanks",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:10,deployability,build,builds,10,all good! builds and works.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:21,safety,test,testing,21,@mkrzewic thanks for testing!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14115:21,testability,test,testing,21,@mkrzewic thanks for testing!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14115
https://github.com/root-project/root/pull/14116:23,safety,review,review,23,Please do a post-merge review @bellenot !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14116
https://github.com/root-project/root/pull/14116:23,testability,review,review,23,Please do a post-merge review @bellenot !,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14116
https://github.com/root-project/root/pull/14119:24,safety,avoid,avoid,24,I rebase last commit to avoid multiple commits around same line,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14119
https://github.com/root-project/root/issues/14121:82,availability,ERROR,ERROR,82,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:252,availability,ERROR,ERROR,252,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:131,deployability,build,build-asserts-clang,131,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:239,deployability,unload,unloaded,239,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:301,deployability,build,build-asserts-clang,301,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:409,deployability,unload,unloaded,409,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:151,energy efficiency,core,core,151,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:321,energy efficiency,core,core,321,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:82,performance,ERROR,ERROR,82,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:252,performance,ERROR,ERROR,252,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:49,safety,test,test,49,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:82,safety,ERROR,ERROR,82,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:166,safety,test,test,166,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:252,safety,ERROR,ERROR,252,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:336,safety,test,test,336,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:465,safety,test,tests,465,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:49,testability,test,test,49,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:137,testability,assert,asserts-clang,137,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:166,testability,test,test,166,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:307,testability,assert,asserts-clang,307,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:336,testability,test,test,336,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:465,testability,test,tests,465,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:82,usability,ERROR,ERROR,82,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14121:252,usability,ERROR,ERROR,252,"While looking into this again, I locally saw one test execution that had. ```. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so has already been unloaded. !!!ERROR: Transaction for file: /home/jhahnfel/ROOT/build-asserts-clang/core/metacling/test/concurrent_load_unload_one_lib_per_thread_2_cpp.so has already been unloaded. ```. at the very end after teardown, when all tests were already marked as `PASSED`. Not sure if relevant, thought I'd post it here...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14121
https://github.com/root-project/root/issues/14132:147,safety,test,tested,147,"> Was this followed up on? It's not a critical issue but the extra warnings are still annoying. I agree, and this is followed up in this PR, being tested now: https://github.com/root-project/root/pull/16550",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14132
https://github.com/root-project/root/issues/14132:147,testability,test,tested,147,"> Was this followed up on? It's not a critical issue but the extra warnings are still annoying. I agree, and this is followed up in this PR, being tested now: https://github.com/root-project/root/pull/16550",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14132
https://github.com/root-project/root/pull/14133:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14133
https://github.com/root-project/root/pull/14133:202,availability,consist,consistent,202,> Just one one thing that would be good to decide before merging: should this be backported to the 6.30 branch? I would vote no. I.e. keep the file name for the already released version and its patches consistent.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14133
https://github.com/root-project/root/pull/14133:169,deployability,releas,released,169,> Just one one thing that would be good to decide before merging: should this be backported to the 6.30 branch? I would vote no. I.e. keep the file name for the already released version and its patches consistent.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14133
https://github.com/root-project/root/pull/14133:178,deployability,version,version,178,> Just one one thing that would be good to decide before merging: should this be backported to the 6.30 branch? I would vote no. I.e. keep the file name for the already released version and its patches consistent.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14133
https://github.com/root-project/root/pull/14133:194,deployability,patch,patches,194,> Just one one thing that would be good to decide before merging: should this be backported to the 6.30 branch? I would vote no. I.e. keep the file name for the already released version and its patches consistent.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14133
https://github.com/root-project/root/pull/14133:178,integrability,version,version,178,> Just one one thing that would be good to decide before merging: should this be backported to the 6.30 branch? I would vote no. I.e. keep the file name for the already released version and its patches consistent.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14133
https://github.com/root-project/root/pull/14133:178,modifiability,version,version,178,> Just one one thing that would be good to decide before merging: should this be backported to the 6.30 branch? I would vote no. I.e. keep the file name for the already released version and its patches consistent.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14133
https://github.com/root-project/root/pull/14133:194,safety,patch,patches,194,> Just one one thing that would be good to decide before merging: should this be backported to the 6.30 branch? I would vote no. I.e. keep the file name for the already released version and its patches consistent.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14133
https://github.com/root-project/root/pull/14133:194,security,patch,patches,194,> Just one one thing that would be good to decide before merging: should this be backported to the 6.30 branch? I would vote no. I.e. keep the file name for the already released version and its patches consistent.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14133
https://github.com/root-project/root/pull/14133:202,usability,consist,consistent,202,> Just one one thing that would be good to decide before merging: should this be backported to the 6.30 branch? I would vote no. I.e. keep the file name for the already released version and its patches consistent.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14133
https://github.com/root-project/root/pull/14135:81,availability,state,state,81,"> Thank you for fixing this memory access problem. However, for TRandom3, with a state of 624 words, it does not make any sense to return a single seed since there is no guarantee that the other 623 values will be the same. Maybe is better to return a zero value. Hi Lorenzo. No, I believe we should leave the current contract intact, which I am fixing. I am relying in my code on the fact that `GetSeed()` returns some representation of the generator state, even though it is not the same number as SetSeed(seed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:452,availability,state,state,452,"> Thank you for fixing this memory access problem. However, for TRandom3, with a state of 624 words, it does not make any sense to return a single seed since there is no guarantee that the other 623 values will be the same. Maybe is better to return a zero value. Hi Lorenzo. No, I believe we should leave the current contract intact, which I am fixing. I am relying in my code on the fact that `GetSeed()` returns some representation of the generator state, even though it is not the same number as SetSeed(seed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:310,energy efficiency,current,current,310,"> Thank you for fixing this memory access problem. However, for TRandom3, with a state of 624 words, it does not make any sense to return a single seed since there is no guarantee that the other 623 values will be the same. Maybe is better to return a zero value. Hi Lorenzo. No, I believe we should leave the current contract intact, which I am fixing. I am relying in my code on the fact that `GetSeed()` returns some representation of the generator state, even though it is not the same number as SetSeed(seed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:81,integrability,state,state,81,"> Thank you for fixing this memory access problem. However, for TRandom3, with a state of 624 words, it does not make any sense to return a single seed since there is no guarantee that the other 623 values will be the same. Maybe is better to return a zero value. Hi Lorenzo. No, I believe we should leave the current contract intact, which I am fixing. I am relying in my code on the fact that `GetSeed()` returns some representation of the generator state, even though it is not the same number as SetSeed(seed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:318,integrability,contract,contract,318,"> Thank you for fixing this memory access problem. However, for TRandom3, with a state of 624 words, it does not make any sense to return a single seed since there is no guarantee that the other 623 values will be the same. Maybe is better to return a zero value. Hi Lorenzo. No, I believe we should leave the current contract intact, which I am fixing. I am relying in my code on the fact that `GetSeed()` returns some representation of the generator state, even though it is not the same number as SetSeed(seed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:452,integrability,state,state,452,"> Thank you for fixing this memory access problem. However, for TRandom3, with a state of 624 words, it does not make any sense to return a single seed since there is no guarantee that the other 623 values will be the same. Maybe is better to return a zero value. Hi Lorenzo. No, I believe we should leave the current contract intact, which I am fixing. I am relying in my code on the fact that `GetSeed()` returns some representation of the generator state, even though it is not the same number as SetSeed(seed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:318,interoperability,contract,contract,318,"> Thank you for fixing this memory access problem. However, for TRandom3, with a state of 624 words, it does not make any sense to return a single seed since there is no guarantee that the other 623 values will be the same. Maybe is better to return a zero value. Hi Lorenzo. No, I believe we should leave the current contract intact, which I am fixing. I am relying in my code on the fact that `GetSeed()` returns some representation of the generator state, even though it is not the same number as SetSeed(seed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:28,performance,memor,memory,28,"> Thank you for fixing this memory access problem. However, for TRandom3, with a state of 624 words, it does not make any sense to return a single seed since there is no guarantee that the other 623 values will be the same. Maybe is better to return a zero value. Hi Lorenzo. No, I believe we should leave the current contract intact, which I am fixing. I am relying in my code on the fact that `GetSeed()` returns some representation of the generator state, even though it is not the same number as SetSeed(seed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:104,reliability,doe,does,104,"> Thank you for fixing this memory access problem. However, for TRandom3, with a state of 624 words, it does not make any sense to return a single seed since there is no guarantee that the other 623 values will be the same. Maybe is better to return a zero value. Hi Lorenzo. No, I believe we should leave the current contract intact, which I am fixing. I am relying in my code on the fact that `GetSeed()` returns some representation of the generator state, even though it is not the same number as SetSeed(seed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:35,security,access,access,35,"> Thank you for fixing this memory access problem. However, for TRandom3, with a state of 624 words, it does not make any sense to return a single seed since there is no guarantee that the other 623 values will be the same. Maybe is better to return a zero value. Hi Lorenzo. No, I believe we should leave the current contract intact, which I am fixing. I am relying in my code on the fact that `GetSeed()` returns some representation of the generator state, even though it is not the same number as SetSeed(seed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:28,usability,memor,memory,28,"> Thank you for fixing this memory access problem. However, for TRandom3, with a state of 624 words, it does not make any sense to return a single seed since there is no guarantee that the other 623 values will be the same. Maybe is better to return a zero value. Hi Lorenzo. No, I believe we should leave the current contract intact, which I am fixing. I am relying in my code on the fact that `GetSeed()` returns some representation of the generator state, even though it is not the same number as SetSeed(seed).",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:36,security,misus,misused,36,"I see, but this can be dangerous if misused. What is the usage you are doing with the return value of `GetSeed`?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:130,energy efficiency,current,currently,130,"I agree that the interface is somewhat dangerous but the docs clearly mention its limitations. However, dangerous or not, this is currently broken and should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:17,integrability,interfac,interface,17,"I agree that the interface is somewhat dangerous but the docs clearly mention its limitations. However, dangerous or not, this is currently broken and should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:17,interoperability,interfac,interface,17,"I agree that the interface is somewhat dangerous but the docs clearly mention its limitations. However, dangerous or not, this is currently broken and should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:17,modifiability,interfac,interface,17,"I agree that the interface is somewhat dangerous but the docs clearly mention its limitations. However, dangerous or not, this is currently broken and should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14135:62,usability,clear,clearly,62,"I agree that the interface is somewhat dangerous but the docs clearly mention its limitations. However, dangerous or not, this is currently broken and should be fixed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14135
https://github.com/root-project/root/pull/14136:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14136
https://github.com/root-project/root/pull/14136:92,integrability,event,event,92,I have tested the branch wit REve tutorials. This changes are needed to allow remote use of event display.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14136
https://github.com/root-project/root/pull/14136:7,safety,test,tested,7,I have tested the branch wit REve tutorials. This changes are needed to allow remote use of event display.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14136
https://github.com/root-project/root/pull/14136:7,testability,test,tested,7,I have tested the branch wit REve tutorials. This changes are needed to allow remote use of event display.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14136
https://github.com/root-project/root/pull/14136:68,integrability,event,event,68,@dpiparo . When will the change be merged? The ability to do remote event connection has been lost since the changes in late November. After this PR some flags has to be set in RWebWindow at creation time of REveManger.cc.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14136
https://github.com/root-project/root/pull/14136:200,performance,time,time,200,@dpiparo . When will the change be merged? The ability to do remote event connection has been lost since the changes in late November. After this PR some flags has to be set in RWebWindow at creation time of REveManger.cc.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14136
https://github.com/root-project/root/pull/14136:25,safety,review,review,25,Thank you for the prompt review and merge!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14136
https://github.com/root-project/root/pull/14136:25,testability,review,review,25,Thank you for the prompt review and merge!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14136
https://github.com/root-project/root/issues/14138:397,availability,error,error,397,"Hello @MrCarroll ,. I am sorry you experienced this issue. Are you sure you are using the v6-26-14 tag and not the v6-26-12 tag? The latter has indeed a problem. Our automated release procedure is steered by scripts. One of those scripts was not correctly taking into account a particular case and ended up modifying a C++ file but introduced text which resulted in invalid C++ code - this is the error you reported. Could you please doublecheck that you are using v6-26-14? Thanks a lot in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:166,deployability,automat,automated,166,"Hello @MrCarroll ,. I am sorry you experienced this issue. Are you sure you are using the v6-26-14 tag and not the v6-26-12 tag? The latter has indeed a problem. Our automated release procedure is steered by scripts. One of those scripts was not correctly taking into account a particular case and ended up modifying a C++ file but introduced text which resulted in invalid C++ code - this is the error you reported. Could you please doublecheck that you are using v6-26-14? Thanks a lot in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:176,deployability,releas,release,176,"Hello @MrCarroll ,. I am sorry you experienced this issue. Are you sure you are using the v6-26-14 tag and not the v6-26-12 tag? The latter has indeed a problem. Our automated release procedure is steered by scripts. One of those scripts was not correctly taking into account a particular case and ended up modifying a C++ file but introduced text which resulted in invalid C++ code - this is the error you reported. Could you please doublecheck that you are using v6-26-14? Thanks a lot in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:397,performance,error,error,397,"Hello @MrCarroll ,. I am sorry you experienced this issue. Are you sure you are using the v6-26-14 tag and not the v6-26-12 tag? The latter has indeed a problem. Our automated release procedure is steered by scripts. One of those scripts was not correctly taking into account a particular case and ended up modifying a C++ file but introduced text which resulted in invalid C++ code - this is the error you reported. Could you please doublecheck that you are using v6-26-14? Thanks a lot in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:397,safety,error,error,397,"Hello @MrCarroll ,. I am sorry you experienced this issue. Are you sure you are using the v6-26-14 tag and not the v6-26-12 tag? The latter has indeed a problem. Our automated release procedure is steered by scripts. One of those scripts was not correctly taking into account a particular case and ended up modifying a C++ file but introduced text which resulted in invalid C++ code - this is the error you reported. Could you please doublecheck that you are using v6-26-14? Thanks a lot in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:307,security,modif,modifying,307,"Hello @MrCarroll ,. I am sorry you experienced this issue. Are you sure you are using the v6-26-14 tag and not the v6-26-12 tag? The latter has indeed a problem. Our automated release procedure is steered by scripts. One of those scripts was not correctly taking into account a particular case and ended up modifying a C++ file but introduced text which resulted in invalid C++ code - this is the error you reported. Could you please doublecheck that you are using v6-26-14? Thanks a lot in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:166,testability,automat,automated,166,"Hello @MrCarroll ,. I am sorry you experienced this issue. Are you sure you are using the v6-26-14 tag and not the v6-26-12 tag? The latter has indeed a problem. Our automated release procedure is steered by scripts. One of those scripts was not correctly taking into account a particular case and ended up modifying a C++ file but introduced text which resulted in invalid C++ code - this is the error you reported. Could you please doublecheck that you are using v6-26-14? Thanks a lot in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:35,usability,experien,experienced,35,"Hello @MrCarroll ,. I am sorry you experienced this issue. Are you sure you are using the v6-26-14 tag and not the v6-26-12 tag? The latter has indeed a problem. Our automated release procedure is steered by scripts. One of those scripts was not correctly taking into account a particular case and ended up modifying a C++ file but introduced text which resulted in invalid C++ code - this is the error you reported. Could you please doublecheck that you are using v6-26-14? Thanks a lot in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:397,usability,error,error,397,"Hello @MrCarroll ,. I am sorry you experienced this issue. Are you sure you are using the v6-26-14 tag and not the v6-26-12 tag? The latter has indeed a problem. Our automated release procedure is steered by scripts. One of those scripts was not correctly taking into account a particular case and ended up modifying a C++ file but introduced text which resulted in invalid C++ code - this is the error you reported. Could you please doublecheck that you are using v6-26-14? Thanks a lot in advance.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:126,deployability,build,build,126,"Hi both,. Somewhat embarassingly, Danilo is correct. I've been occupied heavily with work lately and with this being my third build of ROOT today didn't notice the exact rookie mistake that's been presumed; I'd accidentally put into my build script the hash for 6.26.12 and not 6.26.14 which I intended (and more frustratingly, I'd then added a comment saying #6.26.14). Please disregard this issue. It's correct in the context of 6.26.12 but then the problem was fixed already and 6.26.12 was only ever the latest release for about a day. Thanks for your assistance both, and my apologies for the misfire!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:236,deployability,build,build,236,"Hi both,. Somewhat embarassingly, Danilo is correct. I've been occupied heavily with work lately and with this being my third build of ROOT today didn't notice the exact rookie mistake that's been presumed; I'd accidentally put into my build script the hash for 6.26.12 and not 6.26.14 which I intended (and more frustratingly, I'd then added a comment saying #6.26.14). Please disregard this issue. It's correct in the context of 6.26.12 but then the problem was fixed already and 6.26.12 was only ever the latest release for about a day. Thanks for your assistance both, and my apologies for the misfire!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:515,deployability,releas,release,515,"Hi both,. Somewhat embarassingly, Danilo is correct. I've been occupied heavily with work lately and with this being my third build of ROOT today didn't notice the exact rookie mistake that's been presumed; I'd accidentally put into my build script the hash for 6.26.12 and not 6.26.14 which I intended (and more frustratingly, I'd then added a comment saying #6.26.14). Please disregard this issue. It's correct in the context of 6.26.12 but then the problem was fixed already and 6.26.12 was only ever the latest release for about a day. Thanks for your assistance both, and my apologies for the misfire!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:211,safety,accid,accidentally,211,"Hi both,. Somewhat embarassingly, Danilo is correct. I've been occupied heavily with work lately and with this being my third build of ROOT today didn't notice the exact rookie mistake that's been presumed; I'd accidentally put into my build script the hash for 6.26.12 and not 6.26.14 which I intended (and more frustratingly, I'd then added a comment saying #6.26.14). Please disregard this issue. It's correct in the context of 6.26.12 but then the problem was fixed already and 6.26.12 was only ever the latest release for about a day. Thanks for your assistance both, and my apologies for the misfire!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:253,security,hash,hash,253,"Hi both,. Somewhat embarassingly, Danilo is correct. I've been occupied heavily with work lately and with this being my third build of ROOT today didn't notice the exact rookie mistake that's been presumed; I'd accidentally put into my build script the hash for 6.26.12 and not 6.26.14 which I intended (and more frustratingly, I'd then added a comment saying #6.26.14). Please disregard this issue. It's correct in the context of 6.26.12 but then the problem was fixed already and 6.26.12 was only ever the latest release for about a day. Thanks for your assistance both, and my apologies for the misfire!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:420,testability,context,context,420,"Hi both,. Somewhat embarassingly, Danilo is correct. I've been occupied heavily with work lately and with this being my third build of ROOT today didn't notice the exact rookie mistake that's been presumed; I'd accidentally put into my build script the hash for 6.26.12 and not 6.26.14 which I intended (and more frustratingly, I'd then added a comment saying #6.26.14). Please disregard this issue. It's correct in the context of 6.26.12 but then the problem was fixed already and 6.26.12 was only ever the latest release for about a day. Thanks for your assistance both, and my apologies for the misfire!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:81,energy efficiency,load,load,81,"@MrCarroll do not worry. These things happen, especially when one is under heavy load at work. Never hesitate to report issues as you encounter them, feedback is very important for us!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:81,performance,load,load,81,"@MrCarroll do not worry. These things happen, especially when one is under heavy load at work. Never hesitate to report issues as you encounter them, feedback is very important for us!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/issues/14138:150,usability,feedback,feedback,150,"@MrCarroll do not worry. These things happen, especially when one is under heavy load at work. Never hesitate to report issues as you encounter them, feedback is very important for us!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14138
https://github.com/root-project/root/pull/14139:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14139
https://github.com/root-project/root/pull/14139:88,energy efficiency,optim,optimizer,88,"Alright, this gets more tricky than anticipated. I had to workaround a few more codegen/optimizer bugs in nvc++. I changed the PR to draft for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14139
https://github.com/root-project/root/pull/14139:88,performance,optimiz,optimizer,88,"Alright, this gets more tricky than anticipated. I had to workaround a few more codegen/optimizer bugs in nvc++. I changed the PR to draft for now.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14139
https://github.com/root-project/root/pull/14139:13,usability,close,close,13,"I propose to close this: As I expressed above, I believe it's not our job to fix upstream LLVM to compile with `nvc++`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14139
https://github.com/root-project/root/pull/14140:11,deployability,build,build,11,@phsft-bot build,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14140
https://github.com/root-project/root/pull/14142:89,energy efficiency,model,model,89,"> I think it is still a problem that we guess the field IDs and column IDs of the cloned model, and they happen to be identical to the inner sink's IDs because we traverse the schema tree in the same order. I agree. After this changes, it *may* be feasible to have only one model that determines all IDs. The caveat is that the fields must only be connected to the outermost sink so that the pages are committed to the right place. We have to see if / how this works out in practice... > If we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two virtual function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure. FWIW I couldn't measure anything outside of timing jitter, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14142
https://github.com/root-project/root/pull/14142:274,energy efficiency,model,model,274,"> I think it is still a problem that we guess the field IDs and column IDs of the cloned model, and they happen to be identical to the inner sink's IDs because we traverse the schema tree in the same order. I agree. After this changes, it *may* be feasible to have only one model that determines all IDs. The caveat is that the fields must only be connected to the outermost sink so that the pages are committed to the right place. We have to see if / how this works out in practice... > If we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two virtual function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure. FWIW I couldn't measure anything outside of timing jitter, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14142
https://github.com/root-project/root/pull/14142:843,energy efficiency,measur,measure,843,"> I think it is still a problem that we guess the field IDs and column IDs of the cloned model, and they happen to be identical to the inner sink's IDs because we traverse the schema tree in the same order. I agree. After this changes, it *may* be feasible to have only one model that determines all IDs. The caveat is that the fields must only be connected to the outermost sink so that the pages are committed to the right place. We have to see if / how this works out in practice... > If we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two virtual function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure. FWIW I couldn't measure anything outside of timing jitter, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14142
https://github.com/root-project/root/pull/14142:176,integrability,schema,schema,176,"> I think it is still a problem that we guess the field IDs and column IDs of the cloned model, and they happen to be identical to the inner sink's IDs because we traverse the schema tree in the same order. I agree. After this changes, it *may* be feasible to have only one model that determines all IDs. The caveat is that the fields must only be connected to the outermost sink so that the pages are committed to the right place. We have to see if / how this works out in practice... > If we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two virtual function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure. FWIW I couldn't measure anything outside of timing jitter, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14142
https://github.com/root-project/root/pull/14142:586,integrability,buffer,buffered,586,"> I think it is still a problem that we guess the field IDs and column IDs of the cloned model, and they happen to be identical to the inner sink's IDs because we traverse the schema tree in the same order. I agree. After this changes, it *may* be feasible to have only one model that determines all IDs. The caveat is that the fields must only be connected to the outermost sink so that the pages are committed to the right place. We have to see if / how this works out in practice... > If we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two virtual function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure. FWIW I couldn't measure anything outside of timing jitter, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14142
https://github.com/root-project/root/pull/14142:530,modifiability,interm,intermediate,530,"> I think it is still a problem that we guess the field IDs and column IDs of the cloned model, and they happen to be identical to the inner sink's IDs because we traverse the schema tree in the same order. I agree. After this changes, it *may* be feasible to have only one model that determines all IDs. The caveat is that the fields must only be connected to the outermost sink so that the pages are committed to the right place. We have to see if / how this works out in practice... > If we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two virtual function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure. FWIW I couldn't measure anything outside of timing jitter, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14142
https://github.com/root-project/root/pull/14142:474,reliability,pra,practice,474,"> I think it is still a problem that we guess the field IDs and column IDs of the cloned model, and they happen to be identical to the inner sink's IDs because we traverse the schema tree in the same order. I agree. After this changes, it *may* be feasible to have only one model that determines all IDs. The caveat is that the fields must only be connected to the outermost sink so that the pages are committed to the right place. We have to see if / how this works out in practice... > If we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two virtual function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure. FWIW I couldn't measure anything outside of timing jitter, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14142
https://github.com/root-project/root/pull/14142:735,safety,avoid,avoid,735,"> I think it is still a problem that we guess the field IDs and column IDs of the cloned model, and they happen to be identical to the inner sink's IDs because we traverse the schema tree in the same order. I agree. After this changes, it *may* be feasible to have only one model that determines all IDs. The caveat is that the fields must only be connected to the outermost sink so that the pages are committed to the right place. We have to see if / how this works out in practice... > If we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two virtual function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure. FWIW I couldn't measure anything outside of timing jitter, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14142
https://github.com/root-project/root/pull/14142:89,security,model,model,89,"> I think it is still a problem that we guess the field IDs and column IDs of the cloned model, and they happen to be identical to the inner sink's IDs because we traverse the schema tree in the same order. I agree. After this changes, it *may* be feasible to have only one model that determines all IDs. The caveat is that the fields must only be connected to the outermost sink so that the pages are committed to the right place. We have to see if / how this works out in practice... > If we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two virtual function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure. FWIW I couldn't measure anything outside of timing jitter, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14142
https://github.com/root-project/root/pull/14142:118,security,ident,identical,118,"> I think it is still a problem that we guess the field IDs and column IDs of the cloned model, and they happen to be identical to the inner sink's IDs because we traverse the schema tree in the same order. I agree. After this changes, it *may* be feasible to have only one model that determines all IDs. The caveat is that the fields must only be connected to the outermost sink so that the pages are committed to the right place. We have to see if / how this works out in practice... > If we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two virtual function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure. FWIW I couldn't measure anything outside of timing jitter, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14142
https://github.com/root-project/root/pull/14142:274,security,model,model,274,"> I think it is still a problem that we guess the field IDs and column IDs of the cloned model, and they happen to be identical to the inner sink's IDs because we traverse the schema tree in the same order. I agree. After this changes, it *may* be feasible to have only one model that determines all IDs. The caveat is that the fields must only be connected to the outermost sink so that the pages are committed to the right place. We have to see if / how this works out in practice... > If we decide that we want to introduce an intermediate class, we need to carefully benchmark with buffered writes disabled (ie without `RPageSinkBuf`) because there will now be two virtual function calls for every `Commit`; with `RPageSinkBuf` we avoid the duplicate serialization. I would expect negligible impact, but better to be sure. FWIW I couldn't measure anything outside of timing jitter, as expected.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14142
https://github.com/root-project/root/pull/14144:11,deployability,build,build,11,@phsft-bot build just on ROOT-ubuntu2204/nortcxxmod,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14144
https://github.com/root-project/root/pull/14144:1,energy efficiency,green,greenc-FNAL,1,@greenc-FNAL,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14144
https://github.com/root-project/root/pull/14145:189,availability,Error,Error,189,"This means libCore is rebuilt anytime `gitinfo.txt` changes: that's not an option. I will instead silence. ```. Generating G__Gui.cxx, ../../bin/libGui_rdict.pcm, ../../bin/libGui.rootmap. Error in <UnknownClass::ReadGitInfo()>: Cannot determine git info: etc/gitinfo.txt not found! ```. rootcling does not need to know the exact ROOT version. Let me have a look!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14145
https://github.com/root-project/root/pull/14145:335,deployability,version,version,335,"This means libCore is rebuilt anytime `gitinfo.txt` changes: that's not an option. I will instead silence. ```. Generating G__Gui.cxx, ../../bin/libGui_rdict.pcm, ../../bin/libGui.rootmap. Error in <UnknownClass::ReadGitInfo()>: Cannot determine git info: etc/gitinfo.txt not found! ```. rootcling does not need to know the exact ROOT version. Let me have a look!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14145
https://github.com/root-project/root/pull/14145:335,integrability,version,version,335,"This means libCore is rebuilt anytime `gitinfo.txt` changes: that's not an option. I will instead silence. ```. Generating G__Gui.cxx, ../../bin/libGui_rdict.pcm, ../../bin/libGui.rootmap. Error in <UnknownClass::ReadGitInfo()>: Cannot determine git info: etc/gitinfo.txt not found! ```. rootcling does not need to know the exact ROOT version. Let me have a look!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14145
https://github.com/root-project/root/pull/14145:335,modifiability,version,version,335,"This means libCore is rebuilt anytime `gitinfo.txt` changes: that's not an option. I will instead silence. ```. Generating G__Gui.cxx, ../../bin/libGui_rdict.pcm, ../../bin/libGui.rootmap. Error in <UnknownClass::ReadGitInfo()>: Cannot determine git info: etc/gitinfo.txt not found! ```. rootcling does not need to know the exact ROOT version. Let me have a look!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14145
https://github.com/root-project/root/pull/14145:189,performance,Error,Error,189,"This means libCore is rebuilt anytime `gitinfo.txt` changes: that's not an option. I will instead silence. ```. Generating G__Gui.cxx, ../../bin/libGui_rdict.pcm, ../../bin/libGui.rootmap. Error in <UnknownClass::ReadGitInfo()>: Cannot determine git info: etc/gitinfo.txt not found! ```. rootcling does not need to know the exact ROOT version. Let me have a look!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14145
https://github.com/root-project/root/pull/14145:298,reliability,doe,does,298,"This means libCore is rebuilt anytime `gitinfo.txt` changes: that's not an option. I will instead silence. ```. Generating G__Gui.cxx, ../../bin/libGui_rdict.pcm, ../../bin/libGui.rootmap. Error in <UnknownClass::ReadGitInfo()>: Cannot determine git info: etc/gitinfo.txt not found! ```. rootcling does not need to know the exact ROOT version. Let me have a look!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14145
https://github.com/root-project/root/pull/14145:189,safety,Error,Error,189,"This means libCore is rebuilt anytime `gitinfo.txt` changes: that's not an option. I will instead silence. ```. Generating G__Gui.cxx, ../../bin/libGui_rdict.pcm, ../../bin/libGui.rootmap. Error in <UnknownClass::ReadGitInfo()>: Cannot determine git info: etc/gitinfo.txt not found! ```. rootcling does not need to know the exact ROOT version. Let me have a look!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14145
https://github.com/root-project/root/pull/14145:189,usability,Error,Error,189,"This means libCore is rebuilt anytime `gitinfo.txt` changes: that's not an option. I will instead silence. ```. Generating G__Gui.cxx, ../../bin/libGui_rdict.pcm, ../../bin/libGui.rootmap. Error in <UnknownClass::ReadGitInfo()>: Cannot determine git info: etc/gitinfo.txt not found! ```. rootcling does not need to know the exact ROOT version. Let me have a look!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14145
https://github.com/root-project/root/pull/14146:51,deployability,Resourc,Resource,51,"I don't think these flags ever had an effect, see ""Resource limits are not supported and ignored on cgroups V1 rootless systems"" - these are *all* V1 rootless systems IIUC...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:51,energy efficiency,Resourc,Resource,51,"I don't think these flags ever had an effect, see ""Resource limits are not supported and ignored on cgroups V1 rootless systems"" - these are *all* V1 rootless systems IIUC...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:51,performance,Resourc,Resource,51,"I don't think these flags ever had an effect, see ""Resource limits are not supported and ignored on cgroups V1 rootless systems"" - these are *all* V1 rootless systems IIUC...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:51,safety,Resourc,Resource,51,"I don't think these flags ever had an effect, see ""Resource limits are not supported and ignored on cgroups V1 rootless systems"" - these are *all* V1 rootless systems IIUC...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:51,testability,Resourc,Resource,51,"I don't think these flags ever had an effect, see ""Resource limits are not supported and ignored on cgroups V1 rootless systems"" - these are *all* V1 rootless systems IIUC...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:75,usability,support,supported,75,"I don't think these flags ever had an effect, see ""Resource limits are not supported and ignored on cgroups V1 rootless systems"" - these are *all* V1 rootless systems IIUC...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:182,interoperability,specif,specified,182,"But then again the CI should not have used these flags for this PR, only once merged, unless GitHub got smarter and now allows repo admins to trigger as if `pull_request_target` was specified? Very curious...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:464,integrability,repositor,repository,464,"> But then again the CI should not have used these flags for this PR, only once merged, unless GitHub got smarter and now allows repo admins to trigger as if `pull_request_target` was specified? Very curious... No, `pull_request` is always taken from the source branch, but *runs* in the context of the fork (ie prevents stealing credentials). `pull_request_target` takes the definition from the destination branch, but then also runs in the context of the target repository.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:184,interoperability,specif,specified,184,"> But then again the CI should not have used these flags for this PR, only once merged, unless GitHub got smarter and now allows repo admins to trigger as if `pull_request_target` was specified? Very curious... No, `pull_request` is always taken from the source branch, but *runs* in the context of the fork (ie prevents stealing credentials). `pull_request_target` takes the definition from the destination branch, but then also runs in the context of the target repository.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:464,interoperability,repositor,repository,464,"> But then again the CI should not have used these flags for this PR, only once merged, unless GitHub got smarter and now allows repo admins to trigger as if `pull_request_target` was specified? Very curious... No, `pull_request` is always taken from the source branch, but *runs* in the context of the fork (ie prevents stealing credentials). `pull_request_target` takes the definition from the destination branch, but then also runs in the context of the target repository.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:312,safety,prevent,prevents,312,"> But then again the CI should not have used these flags for this PR, only once merged, unless GitHub got smarter and now allows repo admins to trigger as if `pull_request_target` was specified? Very curious... No, `pull_request` is always taken from the source branch, but *runs* in the context of the fork (ie prevents stealing credentials). `pull_request_target` takes the definition from the destination branch, but then also runs in the context of the target repository.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:312,security,preven,prevents,312,"> But then again the CI should not have used these flags for this PR, only once merged, unless GitHub got smarter and now allows repo admins to trigger as if `pull_request_target` was specified? Very curious... No, `pull_request` is always taken from the source branch, but *runs* in the context of the fork (ie prevents stealing credentials). `pull_request_target` takes the definition from the destination branch, but then also runs in the context of the target repository.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:288,testability,context,context,288,"> But then again the CI should not have used these flags for this PR, only once merged, unless GitHub got smarter and now allows repo admins to trigger as if `pull_request_target` was specified? Very curious... No, `pull_request` is always taken from the source branch, but *runs* in the context of the fork (ie prevents stealing credentials). `pull_request_target` takes the definition from the destination branch, but then also runs in the context of the target repository.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:442,testability,context,context,442,"> But then again the CI should not have used these flags for this PR, only once merged, unless GitHub got smarter and now allows repo admins to trigger as if `pull_request_target` was specified? Very curious... No, `pull_request` is always taken from the source branch, but *runs* in the context of the fork (ie prevents stealing credentials). `pull_request_target` takes the definition from the destination branch, but then also runs in the context of the target repository.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:85,safety,test,testing,85,"Yes but IIRC the effect was in the past that if I change the CI that wasn't used for testing, it was still using the target branch's CI definition. Oh well, we seem to have a solution so I'll merge!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:85,testability,test,testing,85,"Yes but IIRC the effect was in the past that if I change the CI that wasn't used for testing, it was still using the target branch's CI definition. Oh well, we seem to have a solution so I'll merge!",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:25,deployability,patch,patches,25,Also applied to v6-30-00-patches as 8b6c850c0bd73ce1f70be9543699bf939a56a066,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:25,safety,patch,patches,25,Also applied to v6-30-00-patches as 8b6c850c0bd73ce1f70be9543699bf939a56a066,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/pull/14146:25,security,patch,patches,25,Also applied to v6-30-00-patches as 8b6c850c0bd73ce1f70be9543699bf939a56a066,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14146
https://github.com/root-project/root/issues/14153:56,energy efficiency,draw,drawn,56,"Well, I do not think it is a graphics issue. Nothing is drawn simply because the number of entries is 0:. ```. root [0] auto h2 = new TH2I(""h2"", ""h2"", 10, 0, 1, 2, 0, 2);. root [1] h2->AddBinContent(16,5). root [2] h2->GetEntries(). (double) 0.0000000. ```. May be @lmoneta may know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14153
https://github.com/root-project/root/issues/14153:62,testability,simpl,simply,62,"Well, I do not think it is a graphics issue. Nothing is drawn simply because the number of entries is 0:. ```. root [0] auto h2 = new TH2I(""h2"", ""h2"", 10, 0, 1, 2, 0, 2);. root [1] h2->AddBinContent(16,5). root [2] h2->GetEntries(). (double) 0.0000000. ```. May be @lmoneta may know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14153
https://github.com/root-project/root/issues/14153:62,usability,simpl,simply,62,"Well, I do not think it is a graphics issue. Nothing is drawn simply because the number of entries is 0:. ```. root [0] auto h2 = new TH2I(""h2"", ""h2"", 10, 0, 1, 2, 0, 2);. root [1] h2->AddBinContent(16,5). root [2] h2->GetEntries(). (double) 0.0000000. ```. May be @lmoneta may know.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14153
https://github.com/root-project/root/issues/14153:74,energy efficiency,draw,drawn,74,"@couet But in the case of TH1, the number of entries is also 0, and it is drawn. ```. root [4] auto h = new TH1I(""h"", ""h"", 10, 0, 1);. root [5] h->AddBinContent(3,5). root [6] h->GetEntries(). (double) 0.0000000. root [7] h->Draw(). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14153
https://github.com/root-project/root/issues/14153:225,energy efficiency,Draw,Draw,225,"@couet But in the case of TH1, the number of entries is also 0, and it is drawn. ```. root [4] auto h = new TH1I(""h"", ""h"", 10, 0, 1);. root [5] h->AddBinContent(3,5). root [6] h->GetEntries(). (double) 0.0000000. root [7] h->Draw(). ```.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14153
https://github.com/root-project/root/issues/14153:221,energy efficiency,draw,drawn,221,"Good catch, thanks. Alternatively, I would suggest adding in the Doxygen documentation of all the ""SetBinContent"" and ""AddBinContent"" functions, that you need to set the ""entries"" per hand later on, so that the result is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14153
https://github.com/root-project/root/issues/14153:73,usability,document,documentation,73,"Good catch, thanks. Alternatively, I would suggest adding in the Doxygen documentation of all the ""SetBinContent"" and ""AddBinContent"" functions, that you need to set the ""entries"" per hand later on, so that the result is drawn.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14153
https://github.com/root-project/root/pull/14154:90,deployability,patch,patches,90,@guitargeek would it be possible to include this feature in one of your backports to v632-patches ? Thanks in advance!!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14154
https://github.com/root-project/root/pull/14154:90,safety,patch,patches,90,@guitargeek would it be possible to include this feature in one of your backports to v632-patches ? Thanks in advance!!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14154
https://github.com/root-project/root/pull/14154:90,security,patch,patches,90,@guitargeek would it be possible to include this feature in one of your backports to v632-patches ? Thanks in advance!!,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14154
https://github.com/root-project/root/issues/14155:98,deployability,build,build,98,"I tried several times on that machine. I cannot reproduce it:. ```. sftnight@root-ubuntu-2204-1:~/build/workspace/root-pullrequests-build/roottest/root/hist$ h2root mb4i1.hbook . Converting directory //example. TFile**		mb4i1.root	HBOOK file: mb4i1.hbook converted to ROOT. TFile*		mb4i1.root	HBOOK file: mb4i1.hbook converted to ROOT. KEY: TH1F	h1;1	DISTRIBUTION P . KEY: TH1F	h102;1	Multiplicity B-E. KEY: TH1F	h103;1	Multiplicity Poisson. KEY: TH1F	h203;1	B.G. B-E Q, GeV, RL inc . KEY: TH1F	h204;1	EFF. B-E Q, GeV, RL inc . KEY: TH1F	h205;1	B.G. B-E Q, GeV, RL mul . KEY: TH1F	h10;1	Inclusive Gaussian vs p . KEY: TH1F	h11;1	Inclusive B-E vs p . KEY: TH1F	h12;1	Inclusive B-E vs p . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14155
https://github.com/root-project/root/issues/14155:132,deployability,build,build,132,"I tried several times on that machine. I cannot reproduce it:. ```. sftnight@root-ubuntu-2204-1:~/build/workspace/root-pullrequests-build/roottest/root/hist$ h2root mb4i1.hbook . Converting directory //example. TFile**		mb4i1.root	HBOOK file: mb4i1.hbook converted to ROOT. TFile*		mb4i1.root	HBOOK file: mb4i1.hbook converted to ROOT. KEY: TH1F	h1;1	DISTRIBUTION P . KEY: TH1F	h102;1	Multiplicity B-E. KEY: TH1F	h103;1	Multiplicity Poisson. KEY: TH1F	h203;1	B.G. B-E Q, GeV, RL inc . KEY: TH1F	h204;1	EFF. B-E Q, GeV, RL inc . KEY: TH1F	h205;1	B.G. B-E Q, GeV, RL mul . KEY: TH1F	h10;1	Inclusive Gaussian vs p . KEY: TH1F	h11;1	Inclusive B-E vs p . KEY: TH1F	h12;1	Inclusive B-E vs p . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14155
https://github.com/root-project/root/issues/14155:351,interoperability,DISTRIBUT,DISTRIBUTION,351,"I tried several times on that machine. I cannot reproduce it:. ```. sftnight@root-ubuntu-2204-1:~/build/workspace/root-pullrequests-build/roottest/root/hist$ h2root mb4i1.hbook . Converting directory //example. TFile**		mb4i1.root	HBOOK file: mb4i1.hbook converted to ROOT. TFile*		mb4i1.root	HBOOK file: mb4i1.hbook converted to ROOT. KEY: TH1F	h1;1	DISTRIBUTION P . KEY: TH1F	h102;1	Multiplicity B-E. KEY: TH1F	h103;1	Multiplicity Poisson. KEY: TH1F	h203;1	B.G. B-E Q, GeV, RL inc . KEY: TH1F	h204;1	EFF. B-E Q, GeV, RL inc . KEY: TH1F	h205;1	B.G. B-E Q, GeV, RL mul . KEY: TH1F	h10;1	Inclusive Gaussian vs p . KEY: TH1F	h11;1	Inclusive B-E vs p . KEY: TH1F	h12;1	Inclusive B-E vs p . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14155
https://github.com/root-project/root/issues/14155:16,performance,time,times,16,"I tried several times on that machine. I cannot reproduce it:. ```. sftnight@root-ubuntu-2204-1:~/build/workspace/root-pullrequests-build/roottest/root/hist$ h2root mb4i1.hbook . Converting directory //example. TFile**		mb4i1.root	HBOOK file: mb4i1.hbook converted to ROOT. TFile*		mb4i1.root	HBOOK file: mb4i1.hbook converted to ROOT. KEY: TH1F	h1;1	DISTRIBUTION P . KEY: TH1F	h102;1	Multiplicity B-E. KEY: TH1F	h103;1	Multiplicity Poisson. KEY: TH1F	h203;1	B.G. B-E Q, GeV, RL inc . KEY: TH1F	h204;1	EFF. B-E Q, GeV, RL inc . KEY: TH1F	h205;1	B.G. B-E Q, GeV, RL mul . KEY: TH1F	h10;1	Inclusive Gaussian vs p . KEY: TH1F	h11;1	Inclusive B-E vs p . KEY: TH1F	h12;1	Inclusive B-E vs p . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14155
https://github.com/root-project/root/issues/14155:433,reliability,Poisson,Poisson,433,"I tried several times on that machine. I cannot reproduce it:. ```. sftnight@root-ubuntu-2204-1:~/build/workspace/root-pullrequests-build/roottest/root/hist$ h2root mb4i1.hbook . Converting directory //example. TFile**		mb4i1.root	HBOOK file: mb4i1.hbook converted to ROOT. TFile*		mb4i1.root	HBOOK file: mb4i1.hbook converted to ROOT. KEY: TH1F	h1;1	DISTRIBUTION P . KEY: TH1F	h102;1	Multiplicity B-E. KEY: TH1F	h103;1	Multiplicity Poisson. KEY: TH1F	h203;1	B.G. B-E Q, GeV, RL inc . KEY: TH1F	h204;1	EFF. B-E Q, GeV, RL inc . KEY: TH1F	h205;1	B.G. B-E Q, GeV, RL mul . KEY: TH1F	h10;1	Inclusive Gaussian vs p . KEY: TH1F	h11;1	Inclusive B-E vs p . KEY: TH1F	h12;1	Inclusive B-E vs p . ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14155
https://github.com/root-project/root/issues/14155:160,deployability,build,buildconfig,160,That reminds me: we don't test the Fortran features on the new CI! :warning:. https://github.com/root-project/root/blob/master/.github/workflows/root-ci-config/buildconfig/global.txt#L54,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14155
https://github.com/root-project/root/issues/14155:26,safety,test,test,26,That reminds me: we don't test the Fortran features on the new CI! :warning:. https://github.com/root-project/root/blob/master/.github/workflows/root-ci-config/buildconfig/global.txt#L54,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14155
https://github.com/root-project/root/issues/14155:26,testability,test,test,26,That reminds me: we don't test the Fortran features on the new CI! :warning:. https://github.com/root-project/root/blob/master/.github/workflows/root-ci-config/buildconfig/global.txt#L54,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14155
https://github.com/root-project/root/issues/14155:135,usability,workflow,workflows,135,That reminds me: we don't test the Fortran features on the new CI! :warning:. https://github.com/root-project/root/blob/master/.github/workflows/root-ci-config/buildconfig/global.txt#L54,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14155
https://github.com/root-project/root/issues/14155:160,testability,verif,verify,160,"Now we do it on Linux, but not on mac https://github.com/root-project/root/issues/15422 . It is at this point crucial to activate fortran on macs to let the CI verify whether we have a problem there or not (@couet )",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14155
https://github.com/root-project/root/issues/14155:9,availability,failur,failure,9,we saw a failure in the CI https://github.com/root-project/root/actions/runs/9184221811/job/25256182955?pr=15597#step:9:6949.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14155
https://github.com/root-project/root/issues/14155:9,deployability,fail,failure,9,we saw a failure in the CI https://github.com/root-project/root/actions/runs/9184221811/job/25256182955?pr=15597#step:9:6949.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14155
https://github.com/root-project/root/issues/14155:9,performance,failur,failure,9,we saw a failure in the CI https://github.com/root-project/root/actions/runs/9184221811/job/25256182955?pr=15597#step:9:6949.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14155
https://github.com/root-project/root/issues/14155:9,reliability,fail,failure,9,we saw a failure in the CI https://github.com/root-project/root/actions/runs/9184221811/job/25256182955?pr=15597#step:9:6949.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14155
https://github.com/root-project/root/issues/14156:445,energy efficiency,Draw,Draw,445,"I hope it's not adding noise, but I do want to mention that it's possible to hit this issue in completely unexpected (and, from the user perspective, hard to avoid) ways. For example, `TASImage::FromPad` has the line. `gVirtualPS = (TVirtualPS*)gROOT->ProcessLineFast(""new TImageDump()"");`. and so the following will crash on lxplus:. ```. import ROOT. ROOT.gROOT.SetBatch(). h = ROOT.TH1F(). img = ROOT.TImage.Create(). pad = ROOT.TCanvas(). h.Draw(). for i in range(30000):. img.FromPad(pad). ```. without an obvious workaround. This winds up being a blocker for ATLAS data quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:95,safety,compl,completely,95,"I hope it's not adding noise, but I do want to mention that it's possible to hit this issue in completely unexpected (and, from the user perspective, hard to avoid) ways. For example, `TASImage::FromPad` has the line. `gVirtualPS = (TVirtualPS*)gROOT->ProcessLineFast(""new TImageDump()"");`. and so the following will crash on lxplus:. ```. import ROOT. ROOT.gROOT.SetBatch(). h = ROOT.TH1F(). img = ROOT.TImage.Create(). pad = ROOT.TCanvas(). h.Draw(). for i in range(30000):. img.FromPad(pad). ```. without an obvious workaround. This winds up being a blocker for ATLAS data quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:158,safety,avoid,avoid,158,"I hope it's not adding noise, but I do want to mention that it's possible to hit this issue in completely unexpected (and, from the user perspective, hard to avoid) ways. For example, `TASImage::FromPad` has the line. `gVirtualPS = (TVirtualPS*)gROOT->ProcessLineFast(""new TImageDump()"");`. and so the following will crash on lxplus:. ```. import ROOT. ROOT.gROOT.SetBatch(). h = ROOT.TH1F(). img = ROOT.TImage.Create(). pad = ROOT.TCanvas(). h.Draw(). for i in range(30000):. img.FromPad(pad). ```. without an obvious workaround. This winds up being a blocker for ATLAS data quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:95,security,compl,completely,95,"I hope it's not adding noise, but I do want to mention that it's possible to hit this issue in completely unexpected (and, from the user perspective, hard to avoid) ways. For example, `TASImage::FromPad` has the line. `gVirtualPS = (TVirtualPS*)gROOT->ProcessLineFast(""new TImageDump()"");`. and so the following will crash on lxplus:. ```. import ROOT. ROOT.gROOT.SetBatch(). h = ROOT.TH1F(). img = ROOT.TImage.Create(). pad = ROOT.TCanvas(). h.Draw(). for i in range(30000):. img.FromPad(pad). ```. without an obvious workaround. This winds up being a blocker for ATLAS data quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:132,usability,user,user,132,"I hope it's not adding noise, but I do want to mention that it's possible to hit this issue in completely unexpected (and, from the user perspective, hard to avoid) ways. For example, `TASImage::FromPad` has the line. `gVirtualPS = (TVirtualPS*)gROOT->ProcessLineFast(""new TImageDump()"");`. and so the following will crash on lxplus:. ```. import ROOT. ROOT.gROOT.SetBatch(). h = ROOT.TH1F(). img = ROOT.TImage.Create(). pad = ROOT.TCanvas(). h.Draw(). for i in range(30000):. img.FromPad(pad). ```. without an obvious workaround. This winds up being a blocker for ATLAS data quality.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:113,availability,Monitor,Monitoring,113,"I acknowledge this issue needs a detailed discussion within the ROOT team. Now, focussing on ATLAS Data Quality (Monitoring?), would fixing `TASImage::FromPad` put that part of the processing in a safe place? No need to say this would be only a mitigation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:113,deployability,Monitor,Monitoring,113,"I acknowledge this issue needs a detailed discussion within the ROOT team. Now, focussing on ATLAS Data Quality (Monitoring?), would fixing `TASImage::FromPad` put that part of the processing in a safe place? No need to say this would be only a mitigation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:113,energy efficiency,Monitor,Monitoring,113,"I acknowledge this issue needs a detailed discussion within the ROOT team. Now, focussing on ATLAS Data Quality (Monitoring?), would fixing `TASImage::FromPad` put that part of the processing in a safe place? No need to say this would be only a mitigation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:113,reliability,Monitor,Monitoring,113,"I acknowledge this issue needs a detailed discussion within the ROOT team. Now, focussing on ATLAS Data Quality (Monitoring?), would fixing `TASImage::FromPad` put that part of the processing in a safe place? No need to say this would be only a mitigation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:113,safety,Monitor,Monitoring,113,"I acknowledge this issue needs a detailed discussion within the ROOT team. Now, focussing on ATLAS Data Quality (Monitoring?), would fixing `TASImage::FromPad` put that part of the processing in a safe place? No need to say this would be only a mitigation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:197,safety,safe,safe,197,"I acknowledge this issue needs a detailed discussion within the ROOT team. Now, focussing on ATLAS Data Quality (Monitoring?), would fixing `TASImage::FromPad` put that part of the processing in a safe place? No need to say this would be only a mitigation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:69,security,team,team,69,"I acknowledge this issue needs a detailed discussion within the ROOT team. Now, focussing on ATLAS Data Quality (Monitoring?), would fixing `TASImage::FromPad` put that part of the processing in a safe place? No need to say this would be only a mitigation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:113,testability,Monitor,Monitoring,113,"I acknowledge this issue needs a detailed discussion within the ROOT team. Now, focussing on ATLAS Data Quality (Monitoring?), would fixing `TASImage::FromPad` put that part of the processing in a safe place? No need to say this would be only a mitigation.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:136,performance,parallel,parallel,136,"Hi @dpiparo , indeed fixing that one particular method will solve the problem for us as far as we know. We have actually been trying in parallel to implement something like your #14960 so this should be very helpful indeed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:208,usability,help,helpful,208,"Hi @dpiparo , indeed fixing that one particular method will solve the problem for us as far as we know. We have actually been trying in parallel to implement something like your #14960 so this should be very helpful indeed.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:112,deployability,releas,releases,112,"Thanks for the clarification. Since the mitigation is effective for ATLAS, I would like to understand for which releases the backport is required, if at all. Do you need the backport for 6.28? And 6.30?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:91,testability,understand,understand,91,"Thanks for the clarification. Since the mitigation is effective for ATLAS, I would like to understand for which releases the backport is required, if at all. Do you need the backport for 6.28? And 6.30?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14156:54,usability,effectiv,effective,54,"Thanks for the clarification. Since the mitigation is effective for ATLAS, I would like to understand for which releases the backport is required, if at all. Do you need the backport for 6.28? And 6.30?",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14156
https://github.com/root-project/root/issues/14159:591,deployability,Updat,Updating,591,"FYI, I tried on two different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_cr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:673,deployability,build,build,673,"FYI, I tried on two different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_cr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:721,deployability,build,build,721,"FYI, I tried on two different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_cr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:757,deployability,build,build,757,"FYI, I tried on two different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_cr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1333,deployability,version,version,1333,"emote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1355,deployability,Build,Building,1355,"ects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1369,deployability,version,version,1369,"12/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT A",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1531,deployability,version,version,1531,"/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -W",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1609,deployability,Modul,Module,1609,"(22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1655,deployability,version,version,1655,"]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Ca",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1672,deployability,version,version,1672,"ld.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1967,deployability,Fail,Failed,1967,"rking C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Loo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2404,deployability,Build,Build,2404,"connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. --",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2417,deployability,Releas,Release,2417,"-- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2759,deployability,version,version,2759,"wer than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZST",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2837,deployability,version,version,2837,"h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZSTD. -- Found ZSTD: /usr/lib64/libzstd.so. -- Looking for LZ4. -- Found LZ4: /us",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:3041,deployability,version,version,3041,"te in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZSTD. -- Found ZSTD: /usr/lib64/libzstd.so. -- Looking for LZ4. -- Found LZ4: /usr/lib64/liblz4.so (found version ""1.8.3""). -- Looking for X11. -- Found X11: /usr/include. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:3115,deployability,version,version,3115,"ooking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZSTD. -- Found ZSTD: /usr/lib64/libzstd.so. -- Looking for LZ4. -- Found LZ4: /usr/lib64/liblz4.so (found version ""1.8.3""). -- Looking for X11. -- Found X11: /usr/include. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:3576,deployability,version,version,3576,"-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZSTD. -- Found ZSTD: /usr/lib64/libzstd.so. -- Looking for LZ4. -- Found LZ4: /usr/lib64/liblz4.so (found version ""1.8.3""). -- Looking for X11. -- Found X11: /usr/include. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname. -- Looking for gethostbyname - found. -- Looking for connect. -- Looking for connect - found. -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:3866,deployability,version,version,3866," nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZSTD. -- Found ZSTD: /usr/lib64/libzstd.so. -- Looking for LZ4. -- Found LZ4: /usr/lib64/liblz4.so (found version ""1.8.3""). -- Looking for X11. -- Found X11: /usr/include. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname. -- Looking for gethostbyname - found. -- Looking for connect. -- Looking for connect - found. -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:4891,deployability,version,version,4891,"for X11. -- Found X11: /usr/include. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname. -- Looking for gethostbyname - found. -- Looking for connect. -- Looking for connect - found. -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find Postgre",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:4951,deployability,version,version,4951,"play in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname. -- Looking for gethostbyname - found. -- Looking for connect. -- Looking for connect - found. -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). --",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:5014,deployability,version,version,5014,"for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname. -- Looking for gethostbyname - found. -- Looking for connect. -- Looking for connect - found. -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:5209,deployability,Build,Building,5209," -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCL",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:5383,deployability,version,version,5383,"tionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:5617,deployability,version,version,5617,"pm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:5684,deployability,version,version,5684,"lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6076,deployability,version,version,6076,"mage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6292,deployability,build,build,6292,"penGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6415,deployability,version,version,6415,"ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_ex",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6866,deployability,instal,installation,6866," Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sg",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6954,deployability,modul,module,6954,"ostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7347,deployability,version,version,7347,"ing off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc pro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7589,deployability,version,version,7589,"/usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- paral",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7639,deployability,instal,installation,7639,"p/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is di",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:8049,deployability,Build,Building,8049,"uid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- O",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:8067,deployability,Releas,Release,8067,"m in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9102,deployability,modul,module,9102,"ntification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_H",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9144,deployability,modul,module,9144,"sr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9199,deployability,modul,module,9199,"extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Tes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9319,deployability,Build,Building,9319,"t is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9393,deployability,version,version,9393,"d. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality -",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9545,deployability,version,version,9545,"led. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Perfor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9569,deployability,build,building,9569,"s disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_C",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9619,deployability,Build,Building,9619,"-- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame ena",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9660,deployability,version,version,9660,"ject is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9674,deployability,VERSION,VERSION,9674,"ed. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Cou",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10466,deployability,API,API,10466," -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10470,deployability,VERSION,VERSION,10470,"nker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core P",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11217,deployability,Fail,Failed,11217,"uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11272,deployability,build,build,11272,"tialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11345,deployability,build,build,11345," Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11387,deployability,Configurat,Configuration,11387,"y - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-bui",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11519,deployability,Build,Build,11519," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11530,deployability,Releas,Release,11530," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11539,deployability,Instal,Install,11539," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11846,deployability,Modul,Module,11846," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:12318,deployability,Build,Build,12318," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:12391,deployability,build,build,12391," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:12427,deployability,build,build,12427," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2707,energy efficiency,gpu,gpu,2707,"d in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11457,energy efficiency,core,core,11457," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11468,energy efficiency,Core,Core,11468," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:12230,energy efficiency,cpu,cpu,12230," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1333,integrability,version,version,1333,"emote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1369,integrability,version,version,1369,"12/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT A",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1531,integrability,version,version,1531,"/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -W",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1555,integrability,compon,components,1555,"s: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1655,integrability,version,version,1655,"]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Ca",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1672,integrability,version,version,1672,"ld.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2759,integrability,version,version,2759,"wer than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZST",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2837,integrability,version,version,2837,"h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZSTD. -- Found ZSTD: /usr/lib64/libzstd.so. -- Looking for LZ4. -- Found LZ4: /us",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:3041,integrability,version,version,3041,"te in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZSTD. -- Found ZSTD: /usr/lib64/libzstd.so. -- Looking for LZ4. -- Found LZ4: /usr/lib64/liblz4.so (found version ""1.8.3""). -- Looking for X11. -- Found X11: /usr/include. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:3115,integrability,version,version,3115,"ooking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZSTD. -- Found ZSTD: /usr/lib64/libzstd.so. -- Looking for LZ4. -- Found LZ4: /usr/lib64/liblz4.so (found version ""1.8.3""). -- Looking for X11. -- Found X11: /usr/include. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:3576,integrability,version,version,3576,"-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZSTD. -- Found ZSTD: /usr/lib64/libzstd.so. -- Looking for LZ4. -- Found LZ4: /usr/lib64/liblz4.so (found version ""1.8.3""). -- Looking for X11. -- Found X11: /usr/include. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname. -- Looking for gethostbyname - found. -- Looking for connect. -- Looking for connect - found. -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:3866,integrability,version,version,3866," nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZSTD. -- Found ZSTD: /usr/lib64/libzstd.so. -- Looking for LZ4. -- Found LZ4: /usr/lib64/liblz4.so (found version ""1.8.3""). -- Looking for X11. -- Found X11: /usr/include. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname. -- Looking for gethostbyname - found. -- Looking for connect. -- Looking for connect - found. -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:4891,integrability,version,version,4891,"for X11. -- Found X11: /usr/include. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname. -- Looking for gethostbyname - found. -- Looking for connect. -- Looking for connect - found. -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find Postgre",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:4951,integrability,version,version,4951,"play in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname. -- Looking for gethostbyname - found. -- Looking for connect. -- Looking for connect - found. -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). --",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:5014,integrability,version,version,5014,"for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname. -- Looking for gethostbyname - found. -- Looking for connect. -- Looking for connect - found. -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:5383,integrability,version,version,5383,"tionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:5617,integrability,version,version,5617,"pm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:5684,integrability,version,version,5684,"lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6076,integrability,version,version,6076,"mage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6415,integrability,version,version,6415,"ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_ex",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6512,integrability,wrap,wrapper,6512,"hing on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could N",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7347,integrability,version,version,7347,"ing off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc pro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7589,integrability,version,version,7589,"/usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- paral",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9393,integrability,version,version,9393,"d. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality -",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9444,integrability,compon,components,9444,"oject is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9545,integrability,version,version,9545,"led. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Perfor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9660,integrability,version,version,9660,"ject is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9674,integrability,VERSION,VERSION,9674,"ed. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Cou",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10466,integrability,API,API,10466," -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10470,integrability,VERSION,VERSION,10470,"nker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core P",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11387,integrability,Configur,Configuration,11387,"y - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-bui",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:12277,integrability,Configur,Configuring,12277," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:30,interoperability,platform,platforms,30,"FYI, I tried on two different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_cr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1555,interoperability,compon,components,1555,"s: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1702,interoperability,standard,standard,1702,"temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1808,interoperability,standard,standard,1808,"tion is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2291,interoperability,Platform,Platform,2291,"ne. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for l",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2372,interoperability,Architectur,Architecture,2372,".31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6512,interoperability,wrapper,wrapper,6512,"hing on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could N",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:8883,interoperability,architectur,architecture,8883,"Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:8952,interoperability,bind,bindings,8952,"_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9058,interoperability,bind,bindings,9058," in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9444,interoperability,compon,components,9444,"oject is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10466,interoperability,API,API,10466," -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10597,interoperability,Distribut,Distributed,10597,"4 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11854,interoperability,Share,Shared,11854," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:12202,interoperability,share,shared,12202," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:12262,interoperability,xml,xml,12262," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:425,modifiability,reu,reused,425,"FYI, I tried on two different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_cr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:453,modifiability,pac,pack-reused,453,"FYI, I tried on two different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_cr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1333,modifiability,version,version,1333,"emote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1369,modifiability,version,version,1369,"12/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT A",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1531,modifiability,version,version,1531,"/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -W",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1555,modifiability,compon,components,1555,"s: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1609,modifiability,Modul,Module,1609,"(22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1655,modifiability,version,version,1655,"]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Ca",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1672,modifiability,version,version,1672,"ld.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2759,modifiability,version,version,2759,"wer than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZST",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2837,modifiability,version,version,2837,"h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZSTD. -- Found ZSTD: /usr/lib64/libzstd.so. -- Looking for LZ4. -- Found LZ4: /us",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:3041,modifiability,version,version,3041,"te in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZSTD. -- Found ZSTD: /usr/lib64/libzstd.so. -- Looking for LZ4. -- Found LZ4: /usr/lib64/liblz4.so (found version ""1.8.3""). -- Looking for X11. -- Found X11: /usr/include. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:3115,modifiability,version,version,3115,"ooking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZSTD. -- Found ZSTD: /usr/lib64/libzstd.so. -- Looking for LZ4. -- Found LZ4: /usr/lib64/liblz4.so (found version ""1.8.3""). -- Looking for X11. -- Found X11: /usr/include. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:3576,modifiability,version,version,3576,"-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZSTD. -- Found ZSTD: /usr/lib64/libzstd.so. -- Looking for LZ4. -- Found LZ4: /usr/lib64/liblz4.so (found version ""1.8.3""). -- Looking for X11. -- Found X11: /usr/include. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname. -- Looking for gethostbyname - found. -- Looking for connect. -- Looking for connect - found. -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:3866,modifiability,version,version,3866," nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. Switching on builtin_xxhash option. -- Looking for ZSTD. -- Found ZSTD: /usr/lib64/libzstd.so. -- Looking for LZ4. -- Found LZ4: /usr/lib64/liblz4.so (found version ""1.8.3""). -- Looking for X11. -- Found X11: /usr/include. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname. -- Looking for gethostbyname - found. -- Looking for connect. -- Looking for connect - found. -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:4891,modifiability,version,version,4891,"for X11. -- Found X11: /usr/include. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname. -- Looking for gethostbyname - found. -- Looking for connect. -- Looking for connect - found. -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find Postgre",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:4951,modifiability,version,version,4951,"play in /usr/lib64/libX11.so;/usr/lib64/libXext.so. -- Looking for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname. -- Looking for gethostbyname - found. -- Looking for connect. -- Looking for connect - found. -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). --",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:5014,modifiability,version,version,5014,"for XOpenDisplay in /usr/lib64/libX11.so;/usr/lib64/libXext.so - found. -- Looking for gethostbyname. -- Looking for gethostbyname - found. -- Looking for connect. -- Looking for connect - found. -- Looking for remove. -- Looking for remove - found. -- Looking for shmat. -- Looking for shmat - found. -- Looking for IceConnectionNumber in ICE. -- Looking for IceConnectionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:5383,modifiability,version,version,5383,"tionNumber in ICE - found. -- X11_INCLUDE_DIR: /usr/include. -- X11_LIBRARIES: /usr/lib64/libSM.so;/usr/lib64/libICE.so;/usr/lib64/libX11.so;/usr/lib64/libXext.so. -- X11_Xpm_INCLUDE_PATH: /usr/include. -- X11_Xpm_LIB: /usr/lib64/libXpm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:5617,modifiability,version,version,5617,"pm.so. -- X11_Xft_INCLUDE_PATH: /usr/include. -- X11_Xft_LIB: /usr/lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cer",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:5684,modifiability,version,version,5684,"lib64/libXft.so. -- X11_Xext_INCLUDE_PATH: /usr/include. -- X11_Xext_LIB: /usr/lib64/libXext.so. -- Could NOT find GIF (missing: GIF_LIBRARY GIF_INCLUDE_DIR). -- Found TIFF: /usr/lib64/libtiff.so (found version ""4.0.9""). -- Found PNG: /usr/lib64/libpng.so (found version ""1.6.34""). -- Found JPEG: /usr/lib64/libjpeg.so (found version ""62""). -- Looking for AfterImage. -- Could NOT find AfterImage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6076,modifiability,version,version,6076,"mage (missing: AFTERIMAGE_INCLUDE_DIR AFTERIMAGE_LIBRARIES). -- AfterImage not found. Switching on builtin_afterimage option. -- Building AfterImage library included in ROOT itself. -- Looking for OpenGL. -- Found OpenGL: /usr/lib64/libOpenGL.so. -- Looking for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6415,modifiability,version,version,6415,"ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_ex",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6826,modifiability,variab,variable,6826,"ysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6954,modifiability,modul,module,6954,"ostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6980,modifiability,Pac,Package,6980,"ing off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. --",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7347,modifiability,version,version,7347,"ing off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc pro",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7589,modifiability,version,version,7589,"/usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- paral",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:8952,modifiability,bind,bindings,8952,"_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' a",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9058,modifiability,bind,bindings,9058," in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9102,modifiability,modul,module,9102,"ntification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_H",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9144,modifiability,modul,module,9144,"sr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9199,modifiability,modul,module,9199,"extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Tes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9393,modifiability,version,version,9393,"d. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality -",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9444,modifiability,compon,components,9444,"oject is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not f",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9545,modifiability,version,version,9545,"led. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Perfor",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9660,modifiability,version,version,9660,"ject is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by R",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9674,modifiability,VERSION,VERSION,9674,"ed. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Cou",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10470,modifiability,VERSION,VERSION,10470,"nker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core P",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11387,modifiability,Configur,Configuration,11387,"y - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-bui",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11846,modifiability,Modul,Module,11846," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:12277,modifiability,Configur,Configuring,12277," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1881,performance,Performing Test,Performing Test,1881,"ing C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1925,performance,Performing Test,Performing Test,1925,"iler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching o",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2192,performance,Performing Test,Performing Test,2192,"sr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2234,performance,Performing Test,Performing Test,2234,"pile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decod",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2707,performance,gpu,gpu,2707,"d in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so. -- Looking for lzma_easy_encoder in /usr/lib64/liblzma.so - found. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so. -- Looking for lzma_lzma_preset in /usr/lib64/liblzma.so - found. -- Found LibLZMA: /usr/lib64/liblzma.so (found version ""5.2.4""). -- Looking for xxHash. -- Could NOT find xxHash (missing: xxHash_LIBRARY xxHash_INCLUDE_DIR). -- xxHash not found. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6334,performance,time,time,6334,"g for GLEW. -- Found GLEW: /usr/include (found version ""2.0.0""). -- Looking for gl2ps. -- Could NOT find gl2ps (missing: GL2PS_LIBRARY GL2PS_INCLUDE_DIR). -- gl2ps not found. Switching on builtin_gl2ps option. -- Looking for LibXml2. -- Found LibXml2: /usr/lib64/libxml2.so (found version ""2.9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (foun",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6891,performance,time,time,6891,"reSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Foun",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7397,performance,Performing Test,Performing Test,7397,"nd Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- li",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7438,performance,Performing Test,Performing Test,7438,"OOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7931,performance,Performing Test,Performing Test,7931,"- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen dis",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7985,performance,Performing Test,Performing Test,7985,"x', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCam",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:8588,performance,parallel,parallel-libs,8588,"n ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10002,performance,Performing Test,Performing Test,10002,"FIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Perfo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10039,performance,Performing Test,Performing Test,10039,". -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinli",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10086,performance,Performing Test,Performing Test,10086," Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10132,performance,Performing Test,Performing Test,10132,"hon module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10188,performance,Performing Test,Performing Test,10188,"on module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10238,performance,Performing Test,Performing Test,10238,"n-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10298,performance,Performing Test,Performing Test,10298,"inux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10349,performance,Performing Test,Performing Test,10349," /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/gi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10499,performance,Performing Test,Performing Test,10499,"ing X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10543,performance,Performing Test,Performing Test,10543,"n: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10813,performance,Performing Test,Performing Test,10813,"4-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10849,performance,Performing Test,Performing Test,10849,"/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Sha",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10895,performance,Performing Test,Performing Test,10895,"-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both""",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10945,performance,Performing Test,Performing Test,10945,"' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterima",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11005,performance,Performing Test,Performing Test,11005,"Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl bu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11054,performance,Performing Test,Performing Test,11054,"_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson bui",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11113,performance,Performing Test,Performing Test,11113,"erflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11166,performance,Performing Test,Performing Test,11166,"- Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui roo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:12230,performance,cpu,cpu,12230," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1967,reliability,Fail,Failed,1967,"rking C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Loo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11217,reliability,Fail,Failed,11217,"uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:591,safety,Updat,Updating,591,"FYI, I tried on two different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_cr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:883,safety,Detect,Detecting,883,"FYI, I tried on two different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_cr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:917,safety,Detect,Detecting,917,"FYI, I tried on two different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_cr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1014,safety,Detect,Detecting,1014," different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1047,safety,Detect,Detecting,1047," Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1087,safety,Detect,Detecting,1087,". And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1123,safety,Detect,Detecting,1123,"`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking fo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1225,safety,Detect,Detecting,1225," 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1260,safety,Detect,Detecting,1260,"cts: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1609,safety,Modul,Module,1609,"(22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1725,safety,detect,detected,1725,"o. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1892,safety,Test,Test,1892," compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1936,safety,Test,Test,1936,"ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on bui",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2203,safety,Test,Test,2203,"n/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblz",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2245,safety,Test,Test,2245,"features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6954,safety,modul,module,6954,"ostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7408,safety,Test,Test,7408,"ootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7449,safety,Test,Test,7449,"DVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind proj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7942,safety,Test,Test,7942,"cking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7996,safety,Test,Test,7996,"equired by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (mi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:8282,safety,test,tests,8282,"found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target tri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:8794,safety,detect,detected,8794,"- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9102,safety,modul,module,9102,"ntification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_H",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9144,safety,modul,module,9144,"sr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9199,safety,modul,module,9199,"extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Tes",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9479,safety,detect,detection,9479,"s disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 fo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10013,safety,Test,Test,10013,"OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10050,safety,Test,Test,10050,"OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10097,safety,Test,Test,10097,"on module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10143,safety,Test,Test,10143,"odule pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10199,safety,Test,Test,10199,"dule yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_inte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10249,safety,Test,Test,10249,"ux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10309,safety,Test,Test,10309,"gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10360,safety,Test,Test,10360,"/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclud",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10510,safety,Test,Test,10510,"86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x8",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10554,safety,Test,Test,10554,".0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10824,safety,Test,Test,10824,"hat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Ex",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10860,safety,Test,Test,10860,"8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10906,safety,Test,Test,10906,"at-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10956,safety,Test,Test,10956,"runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage bu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11016,safety,Test,Test,11016,"CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11065,safety,Test,Test,11065,"rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11124,safety,Test,Test,11124,"w. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11177,safety,Test,Test,11177,"cess. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11846,safety,Modul,Module,11846," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:591,security,Updat,Updating,591,"FYI, I tried on two different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_cr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:802,security,ident,identification,802,"FYI, I tried on two different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_cr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:851,security,ident,identification,851,"FYI, I tried on two different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_cr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:883,security,Detect,Detecting,883,"FYI, I tried on two different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_cr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:917,security,Detect,Detecting,917,"FYI, I tried on two different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_cr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1014,security,Detect,Detecting,1014," different platforms (Windows and Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1047,security,Detect,Detecting,1047," Ubuntu) and cannot reproduce this issue. And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1087,security,Detect,Detecting,1087,". And here is the output on `lxplus8`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1123,security,Detect,Detecting,1123,"`:. ```. [bellenot@lxplus803 ~/temp]$ git clone https://github.com/root-project/root.git. Cloning into 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking fo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1225,security,Detect,Detecting,1225," 'root'... remote: Enumerating objects: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1260,security,Detect,Detecting,1260,"cts: 886380, done. remote: Counting objects: 100% (40490/40490), done. remote: Compressing objects: 100% (3412/3412), done. remote: Total 886380 (delta 38265), reused 37097 (delta 37076), pack-reused 845890. Receiving objects: 100% (886380/886380), 973.60 MiB | 7.50 MiB/s, done. Resolving deltas: 100% (645163/645163), done. Updating files: 100% (22793/22793), done. [bellenot@lxplus803 ~/temp]$ mkdir root-build.foo. [bellenot@lxplus803 ~/temp]$ cd root-build.foo. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1725,security,detect,detected,1725,"o. [bellenot@lxplus803 root-build.foo]$ cmake ../root. -- The C compiler identification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:8102,security,ident,identification,8102,"e_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:8794,security,detect,detected,8794,"- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9479,security,detect,detection,9479,"s disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 fo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10462,security,SSL,SSL,10462,"ter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core In",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11387,security,Configur,Configuration,11387,"y - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-bui",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11886,security,hash,hash-style,11886," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:12216,security,ssl,ssl,12216," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:12277,security,Configur,Configuring,12277," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1892,testability,Test,Test,1892," compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1936,testability,Test,Test,1936,"ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on bui",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2203,testability,Test,Test,2203,"n/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblz",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2245,testability,Test,Test,2245,"features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_decoder in",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7408,testability,Test,Test,7408,"ootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxa",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7449,testability,Test,Test,7449,"DVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind proj",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7942,testability,Test,Test,7942,"cking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7996,testability,Test,Test,7996,"equired by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (mi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:8282,testability,test,tests,8282,"found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target tri",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10013,testability,Test,Test,10013,"OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10050,testability,Test,Test,10050,"OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10097,testability,Test,Test,10097,"on module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10143,testability,Test,Test,10143,"odule pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_i",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10199,testability,Test,Test,10199,"dule yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_inte",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10249,testability,Test,Test,10249,"ux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10309,testability,Test,Test,10309,"gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10360,testability,Test,Test,10360,"/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclud",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10510,testability,Test,Test,10510,"86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x8",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10554,testability,Test,Test,10554,".0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10824,testability,Test,Test,10824,"hat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Ex",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10860,testability,Test,Test,10860,"8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10906,testability,Test,Test,10906,"at-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10956,testability,Test,Test,10956,"runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage bu",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11016,testability,Test,Test,11016,"CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11065,testability,Test,Test,11065,"rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11124,testability,Test,Test,11124,"w. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdm",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11177,testability,Test,Test,11177,"cess. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rp",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1800,usability,minim,minimum,1800,"entification is GNU 8.5.0. -- The CXX compiler identification is GNU 8.5.0. -- Detecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1881,usability,Perform,Performing,1881,"ecting C compiler ABI info. -- Detecting C compiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.h",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:1925,usability,Perform,Performing,1925,"ompiler ABI info - done. -- Check for working C compiler: /usr/bin/cc - skipped. -- Detecting C compile features. -- Detecting C compile features - done. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switchin",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2192,usability,Perform,Performing,2192," /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:2234,usability,Perform,Performing,2234,"compile features. -- Detecting CXX compile features - done. -- Found Git: /usr/bin/git (found version ""2.39.3""). -- Building ROOT version 6.31.01. -- Checking internet connectivity. -- Checking internet connectivity - found. -- Looking for Python. -- Found Python3: /usr/bin/python3.8 (found version ""3.8.17"") found components: Interpreter Development NumPy Development.Module Development.Embed. -- Found GCC. Major version 8, minor version 5. -- The default C++ standard in use by the detected compiler (/usr/bin/c++) is lower than C++17. Setting C++17 as the minimum standard. -- Looking for pthread.h. -- Looking for pthread.h - found. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD. -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed. -- Looking for pthread_create in pthreads. -- Looking for pthread_create in pthreads - not found. -- Looking for pthread_create in pthread. -- Looking for pthread_create in pthread - found. -- Found Threads: TRUE. -- Performing Test GLIBCXX_USE_CXX11_ABI. -- Performing Test GLIBCXX_USE_CXX11_ABI - Success. -- ROOT Platform: linux. -- ROOT Compiler: GNU 8.5.0. -- ROOT Processor: x86_64. -- ROOT Architecture: linuxx8664gcc. -- Build Type: 'Release' (flags = '-O3 -DNDEBUG'). -- Compiler Flags: -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. -- ROOT default compression algorithm: zlib. -- Cannot enable cudnn without enabling cuda or tmva-gpu: cudnn is disabled. -- PyROOT will be built for version 3.8.17. -- Looking for ZLib. -- Found ZLIB: /usr/lib64/libz.so (found version ""1.2.11""). -- Looking for nlohmann/json.hpp. -- nlohmann/json.hpp not found. Switching on builtin_nlohmannjson option. -- Looking for Freetype. -- Found Freetype: /usr/lib64/libfreetype.so (found version ""2.9.1""). -- Looking for PCRE. -- Found PCRE: /usr/include (found version ""8.42""). -- Looking for LZMA. -- Looking for lzma_auto_decoder in /usr/lib64/liblzma.so. -- Looking for lzma_auto_de",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:6626,usability,user,user,6626,"9.7""). -- Found OpenSSL: /usr/lib64/libcrypto.so (found version ""1.1.1k""). -- Looking for MySQL. -- Could NOT find MySQL (missing: MYSQL_INCLUDE_DIR MYSQL_LIBRARIES). -- MySQL not found. Switching off mysql option. -- Looking for PostgreSQL. -- Could NOT find PostgreSQL (missing: PostgreSQL_LIBRARY PostgreSQL_INCLUDE_DIR). -- PostgreSQL not found. Switching off pgsql option. -- Looking for SQLite. -- Found PkgConfig: /usr/bin/pkg-config (found version ""1.4.2""). -- Found Sqlite: /usr/include. -- Looking for CFITSIO. -- Could NOT find CFITSIO (missing: CFITSIO_LIBRARY CFITSIO_INCLUDE_DIR). -- CFITSIO not found. You can enable the option 'builtin_cfitsio' to build the library internally'. -- For the time being switching off 'fitsio' option. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensur",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7365,usability,minim,minimum,7365,"ption. -- Looking for XROOTD. -- Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7397,usability,Perform,Performing,7397,"Found Xrootd version num: 5.6.3 (setting -DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. --",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7438,usability,Perform,Performing,7438,"-DROOTXRDVERS=500060003). -- libXrdMain not found: xproofd will be a wrapper around xrootd. -- libXrdClient not found: use built-in. -- include_dirs: /usr/include/xrootd;/afs/cern.ch/user/b/bellenot/temp/root/proof/xrdinc. -- libraries: /usr/lib64/libXrdUtils.so;/usr/lib64/libXrdCl.so. -- Could NOT find FTGL (missing: FTGL_INCLUDE_DIR FTGL_LIBRARY). -- ftgl library not found. Set variable FTGL_ROOT_DIR to point to your installation. -- For the time being switching ON 'builtin_ftgl' option. -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7931,usability,Perform,Performing,7931,". -- Checking for module 'davix>=0.6.4'. -- Package 'davix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:7985,usability,Perform,Performing,7985,"avix', required by 'virtual:world', not found. -- Looking for uuid_generate_random in uuid. -- Looking for uuid_generate_random in uuid - found. -- Found libuuid: /usr/include. -- Davix not found, switching ON 'builtin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find O",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:8196,usability,tool,tools-extra,8196,"uiltin_davix' option. -- Looking for clock_gettime. -- Looking for clock_gettime - found. -- Looking for TBB. -- Found TBB: /usr (found suitable version ""2018.0"", minimum required is ""2018""). -- Performing Test tbb_exception_result. -- Performing Test tbb_exception_result - Success. -- Looking for VDT. -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""). -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH. -- Switching ON 'builtin_vdt' option. -- Looking for BLAS for optional parts of TMVA. -- Looking for sgemm_. -- Looking for sgemm_ - not found. -- Looking for sgemm_. -- Looking for sgemm_ - found. -- Found BLAS: /usr/lib64/libopenblas.so. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB. -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success. -- Building LLVM in 'Release' mode. -- The ASM compiler identification is GNU. -- Found assembler: /usr/bin/cc. -- clang project is enabled. -- clang-tools-extra project is disabled. -- compiler-rt project is disabled. -- cross-project-tests project is disabled. -- libc project is disabled. -- libclc project is disabled. -- libcxx project is disabled. -- libcxxabi project is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python mod",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:9411,usability,minim,minimum,9411,"oject is disabled. -- libunwind project is disabled. -- lld project is disabled. -- lldb project is disabled. -- mlir project is disabled. -- openmp project is disabled. -- parallel-libs project is disabled. -- polly project is disabled. -- pstl project is disabled. -- flang project is disabled. -- Looking for backtrace. -- Looking for backtrace - found. -- backtrace facility detected in default set of libraries. -- Found Backtrace: /usr/include. -- Native target architecture is X86. -- Threads disabled. -- Doxygen disabled. -- Go bindings disabled. -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looki",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10002,usability,Perform,Performing,10002,"AMLFIND OCAML_VERSION OCAML_STDLIB_PATH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Pe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10039,usability,Perform,Performing,10039,"TH). -- OCaml bindings disabled. -- Could NOT find Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noi",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10086,usability,Perform,Performing,10086,"ind Python module pygments. -- Could NOT find Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_n",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10132,usability,Perform,Performing,10132,"Python module pygments.lexers.c_cpp. -- Could NOT find Python module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_ha",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10188,usability,Perform,Performing,10188,"ython module yaml. -- LLVM host triple: x86_64-unknown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardw",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10238,usability,Perform,Performing,10238,"nown-linux-gnu. -- LLVM default target triple: x86_64-unknown-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10298,usability,Perform,Performing,10298,"n-linux-gnu. -- Building with -fPIC. -- Found Python3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Maki",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10349,usability,Perform,Performing,10349,"n3: /usr/bin/python3.8 (found suitable version ""3.8.17"", minimum required is ""3.0"") found components: Interpreter. -- Linker detection: GNU ld. -- Targeting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10499,usability,Perform,Performing,10499,"geting X86. -- Targeting NVPTX. -- Clang version: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, I",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10543,usability,Perform,Performing,10543,"sion: 13.0.0. -- Not building amdgpu-arch: hsa-runtime64 not found. -- Building Cling as part of ROOT. -- Cling version (from VERSION file): ROOT_1.0~dev. -- Cling will look for C++ headers in '/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install p",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10813,usability,Perform,Performing,10813,"6_64-redhat-linux/8/../../../../include/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker fl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10849,usability,Perform,Performing,10849,"ude/c++/8/x86_64-redhat-linux:/usr/lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10895,usability,Perform,Performing,10895,"_64-redhat-linux/8/../../../../include/c++/8/backward' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""bo",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:10945,usability,Perform,Performing,10945,"ard' at runtime. -- And then fallback to: 'c++'. -- Performing Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_after",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11005,usability,Perform,Performing,11005,"ng Test CXX_HAS_fno_rtti. -- Performing Test CXX_HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11054,usability,Perform,Performing,11054,"HAS_fno_rtti - Success. -- Performing Test C_HAS_Wno_strict_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11113,usability,Perform,Performing,11113,"_overflow. -- Performing Test C_HAS_Wno_strict_overflow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe d",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11166,usability,Perform,Performing,11166,"ow - Success. -- Performing Test C_HAS_Wno_maybe_uninitialized. -- Performing Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui ",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11246,usability,user,user,11246," Test C_HAS_Wno_maybe_uninitialized - Success. -- Performing Test C_HAS_Wno_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spe",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11319,usability,user,user,11319,"no_parentheses_equality. -- Performing Test C_HAS_Wno_parentheses_equality - Success. -- Looking for m. -- Looking for m - not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Bui",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:11916,usability,support,support,11916," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:12365,usability,user,user,12365," not found. -- Use SSL API VERSION 1.1 for civetweb. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG. -- Performing Test GCC_HAS_BIDI_CHARS_FLAG - Success. -- Distributed RDataFrame enabled. -- Looking for RapidYAML (used by RooFit). -- Could NOT find ryml (missing: RYML_LIBRARY RYML_INCLUDE_DIR). -- RapidYAML not found, only compiling RooFit with nlohmann-json parser. -- Performing Test found_setresuid. -- Performing Test found_setresuid - Success. -- Performing Test found_attribute_always_inline. -- Performing Test found_attribute_always_inline - Success. -- Performing Test has_found_attribute_noinline. -- Performing Test has_found_attribute_noinline - Success. -- Performing Test found_hardware_interference_size. -- Performing Test found_hardware_interference_size - Failed. Running /afs/cern.ch/user/b/bellenot/temp/root/build/unix/compiledata.sh. Making /afs/cern.ch/user/b/bellenot/temp/root-build.foo/ginclude/compiledata.h. -- ROOT Configuration. System Linux-4.18.0-513.5.1.el8_9.x86_64. Processor 10 core Intel Core Processor (Broadwell, no TSX, IBRS) (x86_64). Build type Release. Install path /usr/local. Compiler GNU 8.5.0. Compiler flags:. C -Wno-implicit-fallthrough -pipe -Wall -W -pthread -O3 -DNDEBUG. C++ -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -O3 -DNDEBUG. Linker flags:. Executable -rdynamic. Module. Shared -Wl,--no-undefined -Wl,--hash-style=""both"". -- Enabled support for: asimage builtin_afterimage builtin_clang builtin_cling builtin_davix builtin_ftgl builtin_gl2ps builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_vdt builtin_xxhash clad dataframe davix gdml http imt opengl proof pyroot roofit webgui root7 rpath runtime_cxxmodules shared sqlite ssl tmva tmva-cpu tmva-pymva spectrum vdt x11 xml xrootd. -- Configuring done. -- Generating done. -- Build files have been written to: /afs/cern.ch/user/b/bellenot/temp/root-build.foo. [bellenot@lxplus803 root-build.foo]$. ```",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:20,usability,statu,status,20,"After checking `git status`, I saw some untracked files and directories prefixed `CMake`. Not sure when they were generated, and they stays silent during `git switch`. Cleaning with `git add . && git reset --hard`, and it works again. Sorry for bothering, and thank you for helping out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:274,usability,help,helping,274,"After checking `git status`, I saw some untracked files and directories prefixed `CMake`. Not sure when they were generated, and they stays silent during `git switch`. Cleaning with `git add . && git reset --hard`, and it works again. Sorry for bothering, and thank you for helping out.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:22,usability,statu,status,22,"> After checking `git status`, I saw some untracked files and directories prefixed `CMake`. Not sure when they were generated, and they stays silent during `git switch`. > . > Sorry for bothering, and thank you for helping out. You're welcome! And glad you found the problem. Closing this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/issues/14159:215,usability,help,helping,215,"> After checking `git status`, I saw some untracked files and directories prefixed `CMake`. Not sure when they were generated, and they stays silent during `git switch`. > . > Sorry for bothering, and thank you for helping out. You're welcome! And glad you found the problem. Closing this issue.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14159
https://github.com/root-project/root/pull/14160:134,deployability,patch,patch,134,Thank you so much for taking the initiative to fix this! I will also backport this to the 6.30 branch so it gets included in the next patch release.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:140,deployability,releas,release,140,Thank you so much for taking the initiative to fix this! I will also backport this to the 6.30 branch so it gets included in the next patch release.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:134,safety,patch,patch,134,Thank you so much for taking the initiative to fix this! I will also backport this to the 6.30 branch so it gets included in the next patch release.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:134,security,patch,patch,134,Thank you so much for taking the initiative to fix this! I will also backport this to the 6.30 branch so it gets included in the next patch release.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:61,integrability,messag,message,61,"By the way, props to you for also writing such a nice commit message :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:61,interoperability,messag,message,61,"By the way, props to you for also writing such a nice commit message :+1:",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:35,safety,review,review,35,Thanks for the quick responses and review.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/pull/14160:35,testability,review,review,35,Thanks for the quick responses and review.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/14160
https://github.com/root-project/root/issues/14162:118,deployability,releas,released,118,"Hi @wwdws1, thanks for the report! Unfortunately we had to take out the interface between ROOT and `fftw3` out of the released binaries, because it was not license compatible with `fftw3`. Installing `fftw3` doesn't help, because the relevant `TVirtualFFT` plugins won't be there. I have suggested a solution to fix this for the next release:. https://github.com/root-project/root/pull/14174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:189,deployability,Instal,Installing,189,"Hi @wwdws1, thanks for the report! Unfortunately we had to take out the interface between ROOT and `fftw3` out of the released binaries, because it was not license compatible with `fftw3`. Installing `fftw3` doesn't help, because the relevant `TVirtualFFT` plugins won't be there. I have suggested a solution to fix this for the next release:. https://github.com/root-project/root/pull/14174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:334,deployability,releas,release,334,"Hi @wwdws1, thanks for the report! Unfortunately we had to take out the interface between ROOT and `fftw3` out of the released binaries, because it was not license compatible with `fftw3`. Installing `fftw3` doesn't help, because the relevant `TVirtualFFT` plugins won't be there. I have suggested a solution to fix this for the next release:. https://github.com/root-project/root/pull/14174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:72,integrability,interfac,interface,72,"Hi @wwdws1, thanks for the report! Unfortunately we had to take out the interface between ROOT and `fftw3` out of the released binaries, because it was not license compatible with `fftw3`. Installing `fftw3` doesn't help, because the relevant `TVirtualFFT` plugins won't be there. I have suggested a solution to fix this for the next release:. https://github.com/root-project/root/pull/14174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:72,interoperability,interfac,interface,72,"Hi @wwdws1, thanks for the report! Unfortunately we had to take out the interface between ROOT and `fftw3` out of the released binaries, because it was not license compatible with `fftw3`. Installing `fftw3` doesn't help, because the relevant `TVirtualFFT` plugins won't be there. I have suggested a solution to fix this for the next release:. https://github.com/root-project/root/pull/14174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:164,interoperability,compatib,compatible,164,"Hi @wwdws1, thanks for the report! Unfortunately we had to take out the interface between ROOT and `fftw3` out of the released binaries, because it was not license compatible with `fftw3`. Installing `fftw3` doesn't help, because the relevant `TVirtualFFT` plugins won't be there. I have suggested a solution to fix this for the next release:. https://github.com/root-project/root/pull/14174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:257,interoperability,plug,plugins,257,"Hi @wwdws1, thanks for the report! Unfortunately we had to take out the interface between ROOT and `fftw3` out of the released binaries, because it was not license compatible with `fftw3`. Installing `fftw3` doesn't help, because the relevant `TVirtualFFT` plugins won't be there. I have suggested a solution to fix this for the next release:. https://github.com/root-project/root/pull/14174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:72,modifiability,interfac,interface,72,"Hi @wwdws1, thanks for the report! Unfortunately we had to take out the interface between ROOT and `fftw3` out of the released binaries, because it was not license compatible with `fftw3`. Installing `fftw3` doesn't help, because the relevant `TVirtualFFT` plugins won't be there. I have suggested a solution to fix this for the next release:. https://github.com/root-project/root/pull/14174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:208,reliability,doe,doesn,208,"Hi @wwdws1, thanks for the report! Unfortunately we had to take out the interface between ROOT and `fftw3` out of the released binaries, because it was not license compatible with `fftw3`. Installing `fftw3` doesn't help, because the relevant `TVirtualFFT` plugins won't be there. I have suggested a solution to fix this for the next release:. https://github.com/root-project/root/pull/14174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:216,usability,help,help,216,"Hi @wwdws1, thanks for the report! Unfortunately we had to take out the interface between ROOT and `fftw3` out of the released binaries, because it was not license compatible with `fftw3`. Installing `fftw3` doesn't help, because the relevant `TVirtualFFT` plugins won't be there. I have suggested a solution to fix this for the next release:. https://github.com/root-project/root/pull/14174",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:72,deployability,releas,release,72,"Until we have solved this problem, you either have to use an older ROOT release prior to 6.30.00, or build root from source with `-Dfftw3=ON`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:101,deployability,build,build,101,"Until we have solved this problem, you either have to use an older ROOT release prior to 6.30.00, or build root from source with `-Dfftw3=ON`.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14162:45,usability,help,help,45,Sorry for the late reply and thanks for your help. Now I am using the 6.28/06 and it works well.,MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14162
https://github.com/root-project/root/issues/14163:60,availability,error,error,60,"Note: if I ""source"" root before calling cmake, then the VDT error disappears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:60,performance,error,error,60,"Note: if I ""source"" root before calling cmake, then the VDT error disappears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:60,safety,error,error,60,"Note: if I ""source"" root before calling cmake, then the VDT error disappears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:60,usability,error,error,60,"Note: if I ""source"" root before calling cmake, then the VDT error disappears.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:36,deployability,build,build,36,"Hmm... Why do you expect your CMake build to succeed without ROOT being in your runtime environment already? Can you describe your build setup in a bit more detail? I guess ROOT's Vdt search could be taught to consider the same directory that ROOT sits in, as a location for Vdt, out of the box. 🤔 Since #11844 didn't do that. There I left it up to the user to make sure that Vdt could be found ""in some way"". If you don't use `thisroot.sh`, I assume you tell CMake in some explicit way to look for ROOT under `/opt/root`. How do you do that exactly? Because you'll need to tell CMake also to look for Vdt under `/opt/root`. :wink: (As long as ROOT was packaged with Vdt. I assume it was, but I'll let @dpiparo look that up. 😉)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:131,deployability,build,build,131,"Hmm... Why do you expect your CMake build to succeed without ROOT being in your runtime environment already? Can you describe your build setup in a bit more detail? I guess ROOT's Vdt search could be taught to consider the same directory that ROOT sits in, as a location for Vdt, out of the box. 🤔 Since #11844 didn't do that. There I left it up to the user to make sure that Vdt could be found ""in some way"". If you don't use `thisroot.sh`, I assume you tell CMake in some explicit way to look for ROOT under `/opt/root`. How do you do that exactly? Because you'll need to tell CMake also to look for Vdt under `/opt/root`. :wink: (As long as ROOT was packaged with Vdt. I assume it was, but I'll let @dpiparo look that up. 😉)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:653,modifiability,pac,packaged,653,"Hmm... Why do you expect your CMake build to succeed without ROOT being in your runtime environment already? Can you describe your build setup in a bit more detail? I guess ROOT's Vdt search could be taught to consider the same directory that ROOT sits in, as a location for Vdt, out of the box. 🤔 Since #11844 didn't do that. There I left it up to the user to make sure that Vdt could be found ""in some way"". If you don't use `thisroot.sh`, I assume you tell CMake in some explicit way to look for ROOT under `/opt/root`. How do you do that exactly? Because you'll need to tell CMake also to look for Vdt under `/opt/root`. :wink: (As long as ROOT was packaged with Vdt. I assume it was, but I'll let @dpiparo look that up. 😉)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:353,usability,user,user,353,"Hmm... Why do you expect your CMake build to succeed without ROOT being in your runtime environment already? Can you describe your build setup in a bit more detail? I guess ROOT's Vdt search could be taught to consider the same directory that ROOT sits in, as a location for Vdt, out of the box. 🤔 Since #11844 didn't do that. There I left it up to the user to make sure that Vdt could be found ""in some way"". If you don't use `thisroot.sh`, I assume you tell CMake in some explicit way to look for ROOT under `/opt/root`. How do you do that exactly? Because you'll need to tell CMake also to look for Vdt under `/opt/root`. :wink: (As long as ROOT was packaged with Vdt. I assume it was, but I'll let @dpiparo look that up. 😉)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:37,deployability,stack,stack,37,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:102,deployability,depend,dependencies,102,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:133,deployability,build,build,133,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:359,deployability,build,build,359,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:377,deployability,build,building,377,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:102,integrability,depend,dependencies,102,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:102,modifiability,depend,dependencies,102,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:150,performance,time,time,150,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:102,safety,depend,dependencies,102,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:102,testability,depend,dependencies,102,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:420,testability,regress,regression,420,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:296,usability,user,user,296,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:414,usability,clear,clear,414,"I can reproduce this in our software stack (SHiP/snd@snd) as well, where ROOTSYS etc. are all set for dependencies that need ROOT at build and/or run-time (using ALICE's alibuild). ROOT and its `ROOTConfig.cmake` are found without issues, but the new way to deal with VDT breaks anyone trying to user `ROOTConfig.cmake`. In our case, we use the `builtin_vdt` build option when building ROOT from source. This is a clear regression from 6.28.",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:218,deployability,build,build,218,"FindPackage in CMake always worked like that, you just tell Cmake your ROOT_DIR or BOOST_DIR or DCMTK_DIR and it does all the job. It prevents having to source all libraries beforehand and unnecessarily polluting your build env with executables, etc. I never called thisroot.sh before, when compiling a C++ project that just needs TSpectrum for example. Just find package CMake. It worked well like this with 6.26 and 6.28, so with 6.30 it changed and now it cannot automatically find the builtin vdt and nlohmann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:466,deployability,automat,automatically,466,"FindPackage in CMake always worked like that, you just tell Cmake your ROOT_DIR or BOOST_DIR or DCMTK_DIR and it does all the job. It prevents having to source all libraries beforehand and unnecessarily polluting your build env with executables, etc. I never called thisroot.sh before, when compiling a C++ project that just needs TSpectrum for example. Just find package CMake. It worked well like this with 6.26 and 6.28, so with 6.30 it changed and now it cannot automatically find the builtin vdt and nlohmann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:364,modifiability,pac,package,364,"FindPackage in CMake always worked like that, you just tell Cmake your ROOT_DIR or BOOST_DIR or DCMTK_DIR and it does all the job. It prevents having to source all libraries beforehand and unnecessarily polluting your build env with executables, etc. I never called thisroot.sh before, when compiling a C++ project that just needs TSpectrum for example. Just find package CMake. It worked well like this with 6.26 and 6.28, so with 6.30 it changed and now it cannot automatically find the builtin vdt and nlohmann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:113,reliability,doe,does,113,"FindPackage in CMake always worked like that, you just tell Cmake your ROOT_DIR or BOOST_DIR or DCMTK_DIR and it does all the job. It prevents having to source all libraries beforehand and unnecessarily polluting your build env with executables, etc. I never called thisroot.sh before, when compiling a C++ project that just needs TSpectrum for example. Just find package CMake. It worked well like this with 6.26 and 6.28, so with 6.30 it changed and now it cannot automatically find the builtin vdt and nlohmann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:134,safety,prevent,prevents,134,"FindPackage in CMake always worked like that, you just tell Cmake your ROOT_DIR or BOOST_DIR or DCMTK_DIR and it does all the job. It prevents having to source all libraries beforehand and unnecessarily polluting your build env with executables, etc. I never called thisroot.sh before, when compiling a C++ project that just needs TSpectrum for example. Just find package CMake. It worked well like this with 6.26 and 6.28, so with 6.30 it changed and now it cannot automatically find the builtin vdt and nlohmann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:134,security,preven,prevents,134,"FindPackage in CMake always worked like that, you just tell Cmake your ROOT_DIR or BOOST_DIR or DCMTK_DIR and it does all the job. It prevents having to source all libraries beforehand and unnecessarily polluting your build env with executables, etc. I never called thisroot.sh before, when compiling a C++ project that just needs TSpectrum for example. Just find package CMake. It worked well like this with 6.26 and 6.28, so with 6.30 it changed and now it cannot automatically find the builtin vdt and nlohmann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:466,testability,automat,automatically,466,"FindPackage in CMake always worked like that, you just tell Cmake your ROOT_DIR or BOOST_DIR or DCMTK_DIR and it does all the job. It prevents having to source all libraries beforehand and unnecessarily polluting your build env with executables, etc. I never called thisroot.sh before, when compiling a C++ project that just needs TSpectrum for example. Just find package CMake. It worked well like this with 6.26 and 6.28, so with 6.30 it changed and now it cannot automatically find the builtin vdt and nlohmann",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:63,deployability,build,build,63,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:125,deployability,instal,installation,125,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:198,deployability,depend,dependency,198,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:493,deployability,version,version,493,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:594,deployability,version,version,594,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:640,deployability,build,build,640,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:730,deployability,build,build,730,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:832,deployability,build,build,832,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:974,deployability,build,build,974,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:198,integrability,depend,dependency,198,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:493,integrability,version,version,493,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:594,integrability,version,version,594,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:198,modifiability,depend,dependency,198,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:493,modifiability,version,version,493,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:594,modifiability,version,version,594,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:720,reliability,Doe,Does,720,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:198,safety,depend,dependency,198,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:198,testability,depend,dependency,198,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:838,usability,command,commands,838,":thinking: As I wrote earlier, with `builtin_vdt` used for the build, `ROOTConfig.cmake` should indeed probably add the ROOT installation path as a search path for VDT. To clarify: 6.30 now makes a dependency explicit, which was always there. And which required people **not** using `builtin_vdt` (for instance ATLAS...) to call `find_package(VDT)` in their own code, and link against `VDT::VDT` on their own, just to be able to use some of the ROOT libraries. So for some people the new ROOT version behaves a lot better now... But yes, I didn't think of use-cases where people use a built-in version of VDT in ROOT, and they set up their build against ROOT without setting up the ROOT runtime environment. :thinking: (Does your build system set up the appropriate environment for running the dictionary generation, as part of the build commands? Since you do need the full ROOT runtime environment for that. Or do you just not generate any dictionaries in that particular build? :confused:)",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:379,deployability,build,build-use-case,379,"I understand, thanks for the clarification! In my use case, I do use ROOT_GENERATE_DICTIONARY in the CMakelists, without needing to set up the ROOT runtime environment. It works well, I can then run my executable, which pops up a TGuiCommandPlugin, from which I can control the ROOT derived dictionaried classes via cling without problems. (in 6.28 at least). A reproducer of my build-use-case can be found here: https://github.com/root-project/root/issues/8365#issue-914079362",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:266,security,control,control,266,"I understand, thanks for the clarification! In my use case, I do use ROOT_GENERATE_DICTIONARY in the CMakelists, without needing to set up the ROOT runtime environment. It works well, I can then run my executable, which pops up a TGuiCommandPlugin, from which I can control the ROOT derived dictionaried classes via cling without problems. (in 6.28 at least). A reproducer of my build-use-case can be found here: https://github.com/root-project/root/issues/8365#issue-914079362",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:2,testability,understand,understand,2,"I understand, thanks for the clarification! In my use case, I do use ROOT_GENERATE_DICTIONARY in the CMakelists, without needing to set up the ROOT runtime environment. It works well, I can then run my executable, which pops up a TGuiCommandPlugin, from which I can control the ROOT derived dictionaried classes via cling without problems. (in 6.28 at least). A reproducer of my build-use-case can be found here: https://github.com/root-project/root/issues/8365#issue-914079362",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:266,testability,control,control,266,"I understand, thanks for the clarification! In my use case, I do use ROOT_GENERATE_DICTIONARY in the CMakelists, without needing to set up the ROOT runtime environment. It works well, I can then run my executable, which pops up a TGuiCommandPlugin, from which I can control the ROOT derived dictionaried classes via cling without problems. (in 6.28 at least). A reproducer of my build-use-case can be found here: https://github.com/root-project/root/issues/8365#issue-914079362",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:94,deployability,build,building,94,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:107,deployability,instal,installing,107,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:187,deployability,build,buildtest,187,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
https://github.com/root-project/root/issues/14163:258,deployability,VERSION,VERSION,258,"Hmm... I'm now trying to reproduce the issue. But don't seem to be able to. :confused:. After building and installing ROOT with a built-in VDT, I see the following:. ```. [bash][pcadp04]:buildtest > more ../findtester/CMakeLists.txt . cmake_minimum_required(VERSION 3.20). project(ROOTFindTester VERSION 0.0.1 LANGUAGES CXX). find_package(ROOT 6.30 CONFIG REQUIRED). [bash][pcadp04]:buildtest > cmake -DROOT_ROOT=/mnt/hdd1/krasznaa/projects/root/install ../findtester/. -- The CXX compiler identification is GNU 11.3.1. -- Detecting CXX compiler ABI info. -- Detecting CXX compiler ABI info - done. -- Check for working CXX compiler: /usr/bin/c++ - skipped. -- Detecting CXX compile features. -- Detecting CXX compile features - done. -- Found Vdt: /mnt/hdd1/krasznaa/projects/root/install/include (found version ""0.4"") . -- Configuring done. -- Generating done. -- Build files have been written to: /mnt/hdd1/krasznaa/projects/root/buildtest. [bash][pcadp04]:buildtest >. ```. I.e. CMake (3.20, on RHEL9) is very happy to find the built-in VDT for me. Even without having done any environment setup at all. I'm just pointing CMake at ROOT's installation location using `ROOT_ROOT`. Are you not pointing at ROOT's installed location in any shape or form? :confused: I didn't know that CMake would be looking for packages under `/opt` automatically. :confused: So, how is this happening in your environment? How does CMake find ROOT, but not VDT in the same location? Since now that I read a little about it, when CMake is executing code ""as part of a `find_package` call"", it does consider paths that were used to find the package in question. I'm very much planning to add a setting for `Vdt_ROOT` in https://github.com/root-project/root/blob/master/cmake/scripts/ROOTConfig.cmake.in. But for that I really need to be able to reproduce your issue first...",MatchSource.ISSUE_COMMENT,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/14163
